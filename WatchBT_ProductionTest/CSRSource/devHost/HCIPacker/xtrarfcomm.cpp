///////////////////////////////////////////////////////////////////////////////
//
//  FILE:     xtrarfcomm.h
//
//  PURPOSE:  define non-autogenerated SDC and SDS primitive pdus
//
///////////////////////////////////////////////////////////////////////////////

#include "hcipacker/xtrarfcomm.h"
//   FILE DEFINING A BLUECORE-FRIENDY PROTOCOL
#include "bcflayout.h"

#define OFFSET_uint8Ptr(name) OFFSET_uint16(name)
#define OFFSET_voidPtr(name) OFFSET_uint16(name)
#define OFFSET_uint16Ptr(name) OFFSET_uint16(name)

enum {
	OFFSET_START(RFC_DATAWRITE_REQ_T)
	OFFSET_uint16(RFC_DATAWRITE_REQ_T_type),
	OFFSET_uint16(RFC_DATAWRITE_REQ_T_conn_id),
	OFFSET_uint16(RFC_DATAWRITE_REQ_T_payload_length),
	OFFSET_uint8Ptr(RFC_DATAWRITE_REQ_T_payload),
        OFFSET_uint16(RFC_DATAWRITE_REQ_T_rx_credits),
	RFC_DATAWRITE_REQ_T_pduSize
} ;

enum {
	OFFSET_START(RFC_TEST_REQ_T)
	OFFSET_uint16(RFC_TEST_REQ_T_type),
        OFFSET_BluetoothDeviceAddress(RFC_TEST_REQ_T_bd_addr),
	OFFSET_uint16(RFC_TEST_REQ_T_test_data_length),
	OFFSET_uint8Ptr(RFC_TEST_REQ_T_test_data),
	RFC_TEST_REQ_T_pduSize
} ;

enum {
	OFFSET_START(RFC_TEST_CFM_T)
	OFFSET_uint16(RFC_TEST_CFM_T_type),
	OFFSET_uint16(RFC_TEST_CFM_T_phandle),
        OFFSET_BluetoothDeviceAddress(RFC_TEST_CFM_T_bd_addr),
	OFFSET_uint16(RFC_TEST_CFM_T_test_data_length),
	OFFSET_uint8Ptr(RFC_TEST_CFM_T_test_data),
        OFFSET_uint16(RFC_TEST_CFM_T_status),
	RFC_TEST_CFM_T_pduSize
} ;

enum {
	OFFSET_START(RFC_DATAREAD_IND_T)
	OFFSET_uint16(RFC_DATAREAD_IND_T_type),
	OFFSET_uint16(RFC_DATAREAD_IND_T_phandle),
        OFFSET_uint16(RFC_DATAREAD_IND_T_conn_id),
	OFFSET_uint16(RFC_DATAREAD_IND_T_payload_length),
	OFFSET_uint8Ptr(RFC_DATAREAD_IND_T_payload),
	RFC_DATAREAD_IND_T_pduSize
} ;

enum {
        OFFSET_START(RFC_CLIENT_CONNECT_REQ_T)
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_type),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_phandle),
        OFFSET_BluetoothDeviceAddress(RFC_CLIENT_CONNECT_REQ_T_bd_addr),
        OFFSET_uint8(RFC_CLIENT_CONNECT_REQ_T_rem_serv_chan),
        OFFSET_uint8(RFC_CLIENT_CONNECT_REQ_T_flags),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_context),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_client_security_chan),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_max_payload_size),
        OFFSET_uint8(RFC_CLIENT_CONNECT_REQ_T_priority),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_total_credits),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_remote_l2cap_control),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_local_l2cap_control),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_reserved_length),
        OFFSET_uint16Ptr(RFC_CLIENT_CONNECT_REQ_T_reserved),
        OFFSET_uint8(RFC_CLIENT_CONNECT_REQ_T_modem_signal),
        OFFSET_uint8(RFC_CLIENT_CONNECT_REQ_T_break_signal),
        OFFSET_uint16(RFC_CLIENT_CONNECT_REQ_T_msc_timeout),
        RFC_CLIENT_CONNECT_REQ_T_pduSize
} ;

#include "hcipacker/gen_rfcomm.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Class: RFC_DATAWRITE_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

RFC_DATAWRITE_REQ_T_PDU::RFC_DATAWRITE_REQ_T_PDU()
: RFCOMM_PDU ( RFC_DATAWRITE_REQ , RFC_DATAWRITE_REQ_T_pduSize )
{
}

RFC_DATAWRITE_REQ_T_PDU::RFC_DATAWRITE_REQ_T_PDU( const PDU& from )
: RFCOMM_PDU ( from )
{
}

RFC_DATAWRITE_REQ_T_PDU::RFC_DATAWRITE_REQ_T_PDU( const uint8 * buffer , uint32 len )
: RFCOMM_PDU ( buffer , len )
{
}

uint16 RFC_DATAWRITE_REQ_T_PDU::get_conn_id() const
{
    return get_uint16 ( RFC_DATAWRITE_REQ_T_conn_id );
}

void RFC_DATAWRITE_REQ_T_PDU::set_conn_id( uint16 value )
{
    set_uint16 ( RFC_DATAWRITE_REQ_T_conn_id , value );
}

uint16 RFC_DATAWRITE_REQ_T_PDU::get_payload_length() const
{
    return get_uint16 ( RFC_DATAWRITE_REQ_T_payload_length );
}

void RFC_DATAWRITE_REQ_T_PDU::get_payload( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , RFC_DATAWRITE_REQ_T_pduSize , get_payload_length() );
}

const uint8 * RFC_DATAWRITE_REQ_T_PDU::get_payloadPtr() const
{
    return PDU::get_uint8ArrayPtr ( RFC_DATAWRITE_REQ_T_pduSize );
}

void RFC_DATAWRITE_REQ_T_PDU::set_payload( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( RFC_DATAWRITE_REQ_T_payload_length ,
                         RFC_DATAWRITE_REQ_T_pduSize ,
                         toCopy , length  );
}

uint16 RFC_DATAWRITE_REQ_T_PDU::get_rx_credits() const
{
    return get_uint16 ( RFC_DATAWRITE_REQ_T_rx_credits );
}

void RFC_DATAWRITE_REQ_T_PDU::set_rx_credits( uint16 value )
{
    set_uint16 ( RFC_DATAWRITE_REQ_T_rx_credits , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: RFC_TEST_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

RFC_TEST_REQ_T_PDU::RFC_TEST_REQ_T_PDU()
: RFCOMM_PDU ( RFC_TEST_REQ , RFC_TEST_REQ_T_pduSize )
{
}

RFC_TEST_REQ_T_PDU::RFC_TEST_REQ_T_PDU( const PDU& from )
: RFCOMM_PDU ( from )
{
}

RFC_TEST_REQ_T_PDU::RFC_TEST_REQ_T_PDU( const uint8 * buffer , uint32 len )
: RFCOMM_PDU ( buffer , len )
{
}

BluetoothDeviceAddress RFC_TEST_REQ_T_PDU::get_bd_addr(void) const
{
    return get_BluetoothDeviceAddress ( RFC_TEST_REQ_T_bd_addr );
}

void RFC_TEST_REQ_T_PDU::set_bd_addr(BluetoothDeviceAddress value)
{
    set_BluetoothDeviceAddress ( RFC_TEST_REQ_T_bd_addr, value );
}

uint16 RFC_TEST_REQ_T_PDU::get_test_data_length() const
{
    return get_uint16 ( RFC_TEST_REQ_T_test_data_length );
}

void RFC_TEST_REQ_T_PDU::set_test_data_length(uint16 test_data_length)
{
    set_uint16 ( RFC_TEST_REQ_T_test_data_length , test_data_length);
}

void RFC_TEST_REQ_T_PDU::get_test_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , RFC_TEST_REQ_T_pduSize , get_test_data_length() );
}

const uint8 * RFC_TEST_REQ_T_PDU::get_test_dataPtr() const
{
    return get_uint8ArrayPtr ( RFC_TEST_REQ_T_pduSize );
}

void RFC_TEST_REQ_T_PDU::set_test_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( RFC_TEST_REQ_T_test_data_length ,
                         RFC_TEST_REQ_T_pduSize ,
                         toCopy , length  );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: RFC_TEST_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

RFC_TEST_CFM_T_PDU::RFC_TEST_CFM_T_PDU()
: RFCOMM_PDU ( RFC_TEST_CFM , RFC_TEST_CFM_T_pduSize )
{
}

RFC_TEST_CFM_T_PDU::RFC_TEST_CFM_T_PDU( const PDU& from )
: RFCOMM_PDU ( from )
{
}

RFC_TEST_CFM_T_PDU::RFC_TEST_CFM_T_PDU( const uint8 * buffer , uint32 len )
: RFCOMM_PDU ( buffer , len )
{
}

uint16 RFC_TEST_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( RFC_TEST_CFM_T_phandle );
}

void RFC_TEST_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( RFC_TEST_CFM_T_phandle , value );
}

BluetoothDeviceAddress RFC_TEST_CFM_T_PDU::get_bd_addr(void) const
{
    return get_BluetoothDeviceAddress ( RFC_TEST_CFM_T_bd_addr );
}

void RFC_TEST_CFM_T_PDU::set_bd_addr(BluetoothDeviceAddress value)
{
    set_BluetoothDeviceAddress ( RFC_TEST_CFM_T_bd_addr, value );
}

uint16 RFC_TEST_CFM_T_PDU::get_test_data_length() const
{
    return get_uint16 ( RFC_TEST_CFM_T_test_data_length );
}

void RFC_TEST_CFM_T_PDU::get_test_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , RFC_TEST_CFM_T_pduSize , get_test_data_length() );
}

const uint8 * RFC_TEST_CFM_T_PDU::get_test_dataPtr() const
{
    return get_uint8ArrayPtr ( RFC_TEST_CFM_T_pduSize );
}

void RFC_TEST_CFM_T_PDU::set_test_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( RFC_TEST_CFM_T_test_data_length ,
                         RFC_TEST_CFM_T_pduSize ,
                         toCopy , length  );
}

uint16 RFC_TEST_CFM_T_PDU::get_status() const
{
    return get_uint16 ( RFC_TEST_CFM_T_status );
}

void RFC_TEST_CFM_T_PDU::set_status( uint16 value )
{
    set_uint16 ( RFC_TEST_CFM_T_status , value );
}



///////////////////////////////////////////////////////////////////////////////
//
//  Class: RFC_DATAREAD_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

RFC_DATAREAD_IND_T_PDU::RFC_DATAREAD_IND_T_PDU()
: RFCOMM_PDU ( RFC_DATAREAD_IND , RFC_DATAREAD_IND_T_pduSize )
{
}

RFC_DATAREAD_IND_T_PDU::RFC_DATAREAD_IND_T_PDU( const PDU& from )
: RFCOMM_PDU ( from )
{
}

RFC_DATAREAD_IND_T_PDU::RFC_DATAREAD_IND_T_PDU( const uint8 * buffer , uint32 len )
: RFCOMM_PDU ( buffer , len )
{
}

uint16 RFC_DATAREAD_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( RFC_DATAREAD_IND_T_phandle );
}

void RFC_DATAREAD_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( RFC_DATAREAD_IND_T_phandle , value );
}

uint16 RFC_DATAREAD_IND_T_PDU::get_conn_id() const
{
    return get_uint16 ( RFC_DATAREAD_IND_T_conn_id );
}

void RFC_DATAREAD_IND_T_PDU::set_conn_id( uint16 value )
{
    set_uint16 ( RFC_DATAREAD_IND_T_conn_id , value );
}

uint16 RFC_DATAREAD_IND_T_PDU::get_payload_length() const
{
    return get_uint16 ( RFC_DATAREAD_IND_T_payload_length );
}

const uint8 * RFC_DATAREAD_IND_T_PDU::get_payloadPtr() const
{
    return get_uint8ArrayPtr ( RFC_DATAREAD_IND_T_pduSize );
}

void RFC_DATAREAD_IND_T_PDU::get_payload( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , RFC_DATAREAD_IND_T_pduSize , get_payload_length() );
}

void RFC_DATAREAD_IND_T_PDU::set_payload( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( RFC_DATAREAD_IND_T_payload_length ,
                         RFC_DATAREAD_IND_T_pduSize ,
                         toCopy , length  );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Class: RFC_CLIENT_CONNECT_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

RFC_CLIENT_CONNECT_REQ_T_PDU::RFC_CLIENT_CONNECT_REQ_T_PDU()
: RFCOMM_PDU ( RFC_CLIENT_CONNECT_REQ , RFC_CLIENT_CONNECT_REQ_T_pduSize )
{
}

RFC_CLIENT_CONNECT_REQ_T_PDU::RFC_CLIENT_CONNECT_REQ_T_PDU( const PDU& from )
: RFCOMM_PDU ( from )
{
}

RFC_CLIENT_CONNECT_REQ_T_PDU::RFC_CLIENT_CONNECT_REQ_T_PDU( const uint8 * buffer , uint32 len )
: RFCOMM_PDU ( buffer , len )
{
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_phandle() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_phandle );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_phandle , value );
}

BluetoothDeviceAddress RFC_CLIENT_CONNECT_REQ_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( RFC_CLIENT_CONNECT_REQ_T_bd_addr );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( RFC_CLIENT_CONNECT_REQ_T_bd_addr , value );
}

uint8 RFC_CLIENT_CONNECT_REQ_T_PDU::get_rem_serv_chan() const
{
    return get_uint8 ( RFC_CLIENT_CONNECT_REQ_T_rem_serv_chan );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_rem_serv_chan( uint8 value )
{
    set_uint8 ( RFC_CLIENT_CONNECT_REQ_T_rem_serv_chan , value );
}

uint8 RFC_CLIENT_CONNECT_REQ_T_PDU::get_flags() const
{
    return get_uint8 ( RFC_CLIENT_CONNECT_REQ_T_flags );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_flags( uint8 value )
{
    set_uint8 ( RFC_CLIENT_CONNECT_REQ_T_flags , value );
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_context() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_context );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_context( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_context , value );
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_client_security_chan() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_client_security_chan );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_client_security_chan( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_client_security_chan , value );
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_max_payload_size() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_max_payload_size );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_max_payload_size( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_max_payload_size , value );
}

uint8 RFC_CLIENT_CONNECT_REQ_T_PDU::get_priority() const
{
    return get_uint8 ( RFC_CLIENT_CONNECT_REQ_T_priority );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_priority( uint8 value )
{
    set_uint8 ( RFC_CLIENT_CONNECT_REQ_T_priority , value );
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_total_credits() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_total_credits );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_total_credits( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_total_credits , value );
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_remote_l2cap_control() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_remote_l2cap_control );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_remote_l2cap_control( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_remote_l2cap_control , value );
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_local_l2cap_control() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_local_l2cap_control );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_local_l2cap_control( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_local_l2cap_control , value );
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_reserved_length() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_reserved_length );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_reserved_length( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_reserved_length , value );
}

uint16 *RFC_CLIENT_CONNECT_REQ_T_PDU::get_reserved() const
{
    return get_uint16ArrayPtr ( RFC_CLIENT_CONNECT_REQ_T_reserved );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_reserved( uint16 *value )
{
    set_uint16Array (value, RFC_CLIENT_CONNECT_REQ_T_reserved , get_reserved_length());
}

uint8 RFC_CLIENT_CONNECT_REQ_T_PDU::get_modem_signal() const
{
    return get_uint8 ( RFC_CLIENT_CONNECT_REQ_T_modem_signal );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_modem_signal( uint8 value )
{
    set_uint8 ( RFC_CLIENT_CONNECT_REQ_T_modem_signal , value );
}

uint8 RFC_CLIENT_CONNECT_REQ_T_PDU::get_break_signal() const
{
    return get_uint8 ( RFC_CLIENT_CONNECT_REQ_T_break_signal );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_break_signal( uint8 value )
{
    set_uint8 ( RFC_CLIENT_CONNECT_REQ_T_break_signal , value );
}

uint16 RFC_CLIENT_CONNECT_REQ_T_PDU::get_msc_timeout() const
{
    return get_uint16 ( RFC_CLIENT_CONNECT_REQ_T_msc_timeout );
}

void RFC_CLIENT_CONNECT_REQ_T_PDU::set_msc_timeout( uint16 value )
{
    set_uint16 ( RFC_CLIENT_CONNECT_REQ_T_msc_timeout , value );
}
