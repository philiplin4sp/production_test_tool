////////////////////////////////////////////////////////////////////////////////
//
//  WARNING THIS IS AN AUTOGENERATED FILE DEFINING A BLUECORE-FRIENDY PROTOCOL
//
////////////////////////////////////////////////////////////////////////////////

#include "bcflayout.h"


enum {
	OFFSET_START(HQ_STIBBONS_U02)
	OFFSET_uint16(HQ_STIBBONS_U02_req_type),
	OFFSET_uint16(HQ_STIBBONS_U02_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U02_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U02_varid),
	OFFSET_uint16(HQ_STIBBONS_U02_status),
	OFFSET_uint16(HQ_STIBBONS_U02_data),
	OFFSET_uint16(HQ_STIBBONS_U02_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U02_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U02_dummy3),
	HQ_STIBBONS_U02_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U03)
	OFFSET_uint16(HQ_STIBBONS_U03_req_type),
	OFFSET_uint16(HQ_STIBBONS_U03_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U03_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U03_varid),
	OFFSET_uint16(HQ_STIBBONS_U03_status),
	OFFSET_uint16(HQ_STIBBONS_U03_data),
	OFFSET_uint16(HQ_STIBBONS_U03_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U03_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U03_dummy3),
	HQ_STIBBONS_U03_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U04)
	OFFSET_uint16(HQ_STIBBONS_U04_req_type),
	OFFSET_uint16(HQ_STIBBONS_U04_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U04_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U04_varid),
	OFFSET_uint16(HQ_STIBBONS_U04_status),
	OFFSET_uint16(HQ_STIBBONS_U04_data),
	OFFSET_uint16(HQ_STIBBONS_U04_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U04_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U04_dummy3),
	HQ_STIBBONS_U04_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U05)
	OFFSET_uint16(HQ_STIBBONS_U05_req_type),
	OFFSET_uint16(HQ_STIBBONS_U05_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U05_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U05_varid),
	OFFSET_uint16(HQ_STIBBONS_U05_status),
	OFFSET_uint16(HQ_STIBBONS_U05_data),
	OFFSET_uint16(HQ_STIBBONS_U05_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U05_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U05_dummy3),
	HQ_STIBBONS_U05_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U06)
	OFFSET_uint16(HQ_STIBBONS_U06_req_type),
	OFFSET_uint16(HQ_STIBBONS_U06_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U06_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U06_varid),
	OFFSET_uint16(HQ_STIBBONS_U06_status),
	OFFSET_uint16(HQ_STIBBONS_U06_data),
	OFFSET_uint16(HQ_STIBBONS_U06_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U06_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U06_dummy3),
	HQ_STIBBONS_U06_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U07)
	OFFSET_uint16(HQ_STIBBONS_U07_req_type),
	OFFSET_uint16(HQ_STIBBONS_U07_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U07_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U07_varid),
	OFFSET_uint16(HQ_STIBBONS_U07_status),
	OFFSET_uint16(HQ_STIBBONS_U07_data),
	OFFSET_uint16(HQ_STIBBONS_U07_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U07_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U07_dummy3),
	HQ_STIBBONS_U07_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U08)
	OFFSET_uint16(HQ_STIBBONS_U08_req_type),
	OFFSET_uint16(HQ_STIBBONS_U08_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U08_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U08_varid),
	OFFSET_uint16(HQ_STIBBONS_U08_status),
	OFFSET_uint16(HQ_STIBBONS_U08_data),
	OFFSET_uint16(HQ_STIBBONS_U08_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U08_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U08_dummy3),
	HQ_STIBBONS_U08_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U09)
	OFFSET_uint16(HQ_STIBBONS_U09_req_type),
	OFFSET_uint16(HQ_STIBBONS_U09_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U09_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U09_varid),
	OFFSET_uint16(HQ_STIBBONS_U09_status),
	OFFSET_uint16(HQ_STIBBONS_U09_data),
	OFFSET_uint16(HQ_STIBBONS_U09_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U09_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U09_dummy3),
	HQ_STIBBONS_U09_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C01)
	OFFSET_uint16(HQ_STIBBONS_C01_req_type),
	OFFSET_uint16(HQ_STIBBONS_C01_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C01_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C01_varid),
	OFFSET_uint16(HQ_STIBBONS_C01_status),
	OFFSET_uint16(HQ_STIBBONS_C01_dummy),
	OFFSET_uint16(HQ_STIBBONS_C01_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C01_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C01_dummy3),
	HQ_STIBBONS_C01_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C02)
	OFFSET_uint16(HQ_STIBBONS_C02_req_type),
	OFFSET_uint16(HQ_STIBBONS_C02_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C02_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C02_varid),
	OFFSET_uint16(HQ_STIBBONS_C02_status),
	OFFSET_uint16(HQ_STIBBONS_C02_dummy),
	OFFSET_uint16(HQ_STIBBONS_C02_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C02_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C02_dummy3),
	HQ_STIBBONS_C02_pduSize
} ;

enum {
	OFFSET_START(HQ_ESCO_REQ)
	OFFSET_uint16(HQ_ESCO_REQ_req_type),
	OFFSET_uint16(HQ_ESCO_REQ_wordlength),
	OFFSET_uint16(HQ_ESCO_REQ_seq_no),
	OFFSET_uint16(HQ_ESCO_REQ_varid),
	OFFSET_uint16(HQ_ESCO_REQ_status),
	OFFSET_uint16(HQ_ESCO_REQ_sco_handle),
	OFFSET_uint16(HQ_ESCO_REQ_hci_handle),
	OFFSET_uint16(HQ_ESCO_REQ_pt_s2m),
	OFFSET_uint16(HQ_ESCO_REQ_pt_m2s),
	OFFSET_uint16(HQ_ESCO_REQ_tesco),
	OFFSET_uint16(HQ_ESCO_REQ_wesco),
	OFFSET_uint16(HQ_ESCO_REQ_dsco),
	HQ_ESCO_REQ_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C03)
	OFFSET_uint16(HQ_STIBBONS_C03_req_type),
	OFFSET_uint16(HQ_STIBBONS_C03_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C03_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C03_varid),
	OFFSET_uint16(HQ_STIBBONS_C03_status),
	OFFSET_uint16(HQ_STIBBONS_C03_dummy),
	OFFSET_uint16(HQ_STIBBONS_C03_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C03_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C03_dummy3),
	HQ_STIBBONS_C03_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C04)
	OFFSET_uint16(HQ_STIBBONS_C04_req_type),
	OFFSET_uint16(HQ_STIBBONS_C04_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C04_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C04_varid),
	OFFSET_uint16(HQ_STIBBONS_C04_status),
	OFFSET_uint16(HQ_STIBBONS_C04_dummy),
	OFFSET_uint16(HQ_STIBBONS_C04_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C04_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C04_dummy3),
	HQ_STIBBONS_C04_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C05)
	OFFSET_uint16(HQ_STIBBONS_C05_req_type),
	OFFSET_uint16(HQ_STIBBONS_C05_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C05_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C05_varid),
	OFFSET_uint16(HQ_STIBBONS_C05_status),
	OFFSET_uint16(HQ_STIBBONS_C05_dummy),
	OFFSET_uint16(HQ_STIBBONS_C05_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C05_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C05_dummy3),
	HQ_STIBBONS_C05_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C06)
	OFFSET_uint16(HQ_STIBBONS_C06_req_type),
	OFFSET_uint16(HQ_STIBBONS_C06_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C06_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C06_varid),
	OFFSET_uint16(HQ_STIBBONS_C06_status),
	OFFSET_uint16(HQ_STIBBONS_C06_dummy),
	OFFSET_uint16(HQ_STIBBONS_C06_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C06_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C06_dummy3),
	HQ_STIBBONS_C06_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C07)
	OFFSET_uint16(HQ_STIBBONS_C07_req_type),
	OFFSET_uint16(HQ_STIBBONS_C07_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C07_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C07_varid),
	OFFSET_uint16(HQ_STIBBONS_C07_status),
	OFFSET_uint16(HQ_STIBBONS_C07_dummy),
	OFFSET_uint16(HQ_STIBBONS_C07_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C07_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C07_dummy3),
	HQ_STIBBONS_C07_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C08)
	OFFSET_uint16(HQ_STIBBONS_C08_req_type),
	OFFSET_uint16(HQ_STIBBONS_C08_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C08_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C08_varid),
	OFFSET_uint16(HQ_STIBBONS_C08_status),
	OFFSET_uint16(HQ_STIBBONS_C08_dummy),
	OFFSET_uint16(HQ_STIBBONS_C08_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C08_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C08_dummy3),
	HQ_STIBBONS_C08_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C09)
	OFFSET_uint16(HQ_STIBBONS_C09_req_type),
	OFFSET_uint16(HQ_STIBBONS_C09_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C09_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C09_varid),
	OFFSET_uint16(HQ_STIBBONS_C09_status),
	OFFSET_uint16(HQ_STIBBONS_C09_dummy),
	OFFSET_uint16(HQ_STIBBONS_C09_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C09_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C09_dummy3),
	HQ_STIBBONS_C09_pduSize
} ;

enum {
	OFFSET_START(HQ_SNIFF_REQ)
	OFFSET_uint16(HQ_SNIFF_REQ_req_type),
	OFFSET_uint16(HQ_SNIFF_REQ_wordlength),
	OFFSET_uint16(HQ_SNIFF_REQ_seq_no),
	OFFSET_uint16(HQ_SNIFF_REQ_varid),
	OFFSET_uint16(HQ_SNIFF_REQ_status),
	OFFSET_uint16(HQ_SNIFF_REQ_id),
	OFFSET_uint16(HQ_SNIFF_REQ_t),
	OFFSET_uint16(HQ_SNIFF_REQ_d),
	OFFSET_uint16(HQ_SNIFF_REQ_attempts),
	OFFSET_uint16(HQ_SNIFF_REQ_timeout),
	HQ_SNIFF_REQ_pduSize
} ;

enum {
	OFFSET_START(HQ_RSSI)
	OFFSET_uint16(HQ_RSSI_req_type),
	OFFSET_uint16(HQ_RSSI_wordlength),
	OFFSET_uint16(HQ_RSSI_seq_no),
	OFFSET_uint16(HQ_RSSI_varid),
	OFFSET_uint16(HQ_RSSI_status),
	OFFSET_uint16(HQ_RSSI_data),
	OFFSET_uint16(HQ_RSSI_dummy1),
	OFFSET_uint16(HQ_RSSI_dummy2),
	OFFSET_uint16(HQ_RSSI_dummy3),
	HQ_RSSI_pduSize
} ;

enum {
	OFFSET_START(HQ_BOOTED)
	OFFSET_uint16(HQ_BOOTED_req_type),
	OFFSET_uint16(HQ_BOOTED_wordlength),
	OFFSET_uint16(HQ_BOOTED_seq_no),
	OFFSET_uint16(HQ_BOOTED_varid),
	OFFSET_uint16(HQ_BOOTED_status),
	OFFSET_uint16(HQ_BOOTED_dummy),
	OFFSET_uint16(HQ_BOOTED_dummy1),
	OFFSET_uint16(HQ_BOOTED_dummy2),
	OFFSET_uint16(HQ_BOOTED_dummy3),
	HQ_BOOTED_pduSize
} ;

enum {
	OFFSET_START(HQ_EGPS_TIME_STAMP)
	OFFSET_uint16(HQ_EGPS_TIME_STAMP_req_type),
	OFFSET_uint16(HQ_EGPS_TIME_STAMP_wordlength),
	OFFSET_uint16(HQ_EGPS_TIME_STAMP_seq_no),
	OFFSET_uint16(HQ_EGPS_TIME_STAMP_varid),
	OFFSET_uint16(HQ_EGPS_TIME_STAMP_status),
	OFFSET_uint32(HQ_EGPS_TIME_STAMP_time),
	OFFSET_uint8(HQ_EGPS_TIME_STAMP_time_fine),
	OFFSET_uint8(HQ_EGPS_TIME_STAMP_flags),
	OFFSET_uint16(HQ_EGPS_TIME_STAMP_dummy3),
	HQ_EGPS_TIME_STAMP_pduSize
} ;

enum {
	OFFSET_START(HQ_NO_VARIABLE)
	OFFSET_uint16(HQ_NO_VARIABLE_req_type),
	OFFSET_uint16(HQ_NO_VARIABLE_wordlength),
	OFFSET_uint16(HQ_NO_VARIABLE_seq_no),
	OFFSET_uint16(HQ_NO_VARIABLE_varid),
	OFFSET_uint16(HQ_NO_VARIABLE_status),
	OFFSET_uint16(HQ_NO_VARIABLE_dummy),
	OFFSET_uint16(HQ_NO_VARIABLE_dummy1),
	OFFSET_uint16(HQ_NO_VARIABLE_dummy2),
	OFFSET_uint16(HQ_NO_VARIABLE_dummy3),
	HQ_NO_VARIABLE_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U10)
	OFFSET_uint16(HQ_STIBBONS_U10_req_type),
	OFFSET_uint16(HQ_STIBBONS_U10_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U10_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U10_varid),
	OFFSET_uint16(HQ_STIBBONS_U10_status),
	OFFSET_uint16(HQ_STIBBONS_U10_data),
	OFFSET_uint16(HQ_STIBBONS_U10_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U10_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U10_dummy3),
	HQ_STIBBONS_U10_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U11)
	OFFSET_uint16(HQ_STIBBONS_U11_req_type),
	OFFSET_uint16(HQ_STIBBONS_U11_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U11_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U11_varid),
	OFFSET_uint16(HQ_STIBBONS_U11_status),
	OFFSET_uint16(HQ_STIBBONS_U11_data),
	OFFSET_uint16(HQ_STIBBONS_U11_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U11_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U11_dummy3),
	HQ_STIBBONS_U11_pduSize
} ;

enum {
	OFFSET_START(HQ_BIT_ERR)
	OFFSET_uint16(HQ_BIT_ERR_req_type),
	OFFSET_uint16(HQ_BIT_ERR_wordlength),
	OFFSET_uint16(HQ_BIT_ERR_seq_no),
	OFFSET_uint16(HQ_BIT_ERR_varid),
	OFFSET_uint16(HQ_BIT_ERR_status),
	OFFSET_uint16(HQ_BIT_ERR_index),
	OFFSET_uint32(HQ_BIT_ERR_value_last),
	OFFSET_uint32(HQ_BIT_ERR_value_tot),
	HQ_BIT_ERR_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U12)
	OFFSET_uint16(HQ_STIBBONS_U12_req_type),
	OFFSET_uint16(HQ_STIBBONS_U12_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U12_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U12_varid),
	OFFSET_uint16(HQ_STIBBONS_U12_status),
	OFFSET_uint16(HQ_STIBBONS_U12_data),
	OFFSET_uint16(HQ_STIBBONS_U12_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U12_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U12_dummy3),
	HQ_STIBBONS_U12_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U13)
	OFFSET_uint16(HQ_STIBBONS_U13_req_type),
	OFFSET_uint16(HQ_STIBBONS_U13_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U13_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U13_varid),
	OFFSET_uint16(HQ_STIBBONS_U13_status),
	OFFSET_uint16(HQ_STIBBONS_U13_data),
	OFFSET_uint16(HQ_STIBBONS_U13_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U13_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U13_dummy3),
	HQ_STIBBONS_U13_pduSize
} ;

enum {
	OFFSET_START(HQ_GPS_STATUS)
	OFFSET_uint16(HQ_GPS_STATUS_req_type),
	OFFSET_uint16(HQ_GPS_STATUS_wordlength),
	OFFSET_uint16(HQ_GPS_STATUS_seq_no),
	OFFSET_uint16(HQ_GPS_STATUS_varid),
	OFFSET_uint16(HQ_GPS_STATUS_status),
	OFFSET_uint16(HQ_GPS_STATUS_flags),
	OFFSET_uint16(HQ_GPS_STATUS_dummy1),
	OFFSET_uint16(HQ_GPS_STATUS_dummy2),
	OFFSET_uint16(HQ_GPS_STATUS_dummy3),
	HQ_GPS_STATUS_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U14)
	OFFSET_uint16(HQ_STIBBONS_U14_req_type),
	OFFSET_uint16(HQ_STIBBONS_U14_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U14_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U14_varid),
	OFFSET_uint16(HQ_STIBBONS_U14_status),
	OFFSET_uint16(HQ_STIBBONS_U14_data),
	OFFSET_uint16(HQ_STIBBONS_U14_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U14_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U14_dummy3),
	HQ_STIBBONS_U14_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U15)
	OFFSET_uint16(HQ_STIBBONS_U15_req_type),
	OFFSET_uint16(HQ_STIBBONS_U15_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U15_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U15_varid),
	OFFSET_uint16(HQ_STIBBONS_U15_status),
	OFFSET_uint16(HQ_STIBBONS_U15_data),
	OFFSET_uint16(HQ_STIBBONS_U15_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U15_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U15_dummy3),
	HQ_STIBBONS_U15_pduSize
} ;

enum {
	OFFSET_START(HQ_DELAYED_PANIC)
	OFFSET_uint16(HQ_DELAYED_PANIC_req_type),
	OFFSET_uint16(HQ_DELAYED_PANIC_wordlength),
	OFFSET_uint16(HQ_DELAYED_PANIC_seq_no),
	OFFSET_uint16(HQ_DELAYED_PANIC_varid),
	OFFSET_uint16(HQ_DELAYED_PANIC_status),
	OFFSET_uint16(HQ_DELAYED_PANIC_data),
	OFFSET_uint16(HQ_DELAYED_PANIC_dummy1),
	OFFSET_uint16(HQ_DELAYED_PANIC_dummy2),
	OFFSET_uint16(HQ_DELAYED_PANIC_dummy3),
	HQ_DELAYED_PANIC_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_U16)
	OFFSET_uint16(HQ_STIBBONS_U16_req_type),
	OFFSET_uint16(HQ_STIBBONS_U16_wordlength),
	OFFSET_uint16(HQ_STIBBONS_U16_seq_no),
	OFFSET_uint16(HQ_STIBBONS_U16_varid),
	OFFSET_uint16(HQ_STIBBONS_U16_status),
	OFFSET_uint16(HQ_STIBBONS_U16_data),
	OFFSET_uint16(HQ_STIBBONS_U16_dummy1),
	OFFSET_uint16(HQ_STIBBONS_U16_dummy2),
	OFFSET_uint16(HQ_STIBBONS_U16_dummy3),
	HQ_STIBBONS_U16_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C10)
	OFFSET_uint16(HQ_STIBBONS_C10_req_type),
	OFFSET_uint16(HQ_STIBBONS_C10_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C10_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C10_varid),
	OFFSET_uint16(HQ_STIBBONS_C10_status),
	OFFSET_uint16(HQ_STIBBONS_C10_dummy),
	OFFSET_uint16(HQ_STIBBONS_C10_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C10_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C10_dummy3),
	HQ_STIBBONS_C10_pduSize
} ;

enum {
	OFFSET_START(HQ_PROTOCOL_ERROR)
	OFFSET_uint16(HQ_PROTOCOL_ERROR_req_type),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_wordlength),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_seq_no),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_varid),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_status),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_layer),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_entity),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_error),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_info0),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_info1),
	OFFSET_uint16(HQ_PROTOCOL_ERROR_info2),
	HQ_PROTOCOL_ERROR_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C11)
	OFFSET_uint16(HQ_STIBBONS_C11_req_type),
	OFFSET_uint16(HQ_STIBBONS_C11_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C11_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C11_varid),
	OFFSET_uint16(HQ_STIBBONS_C11_status),
	OFFSET_uint16(HQ_STIBBONS_C11_dummy),
	OFFSET_uint16(HQ_STIBBONS_C11_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C11_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C11_dummy3),
	HQ_STIBBONS_C11_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C12)
	OFFSET_uint16(HQ_STIBBONS_C12_req_type),
	OFFSET_uint16(HQ_STIBBONS_C12_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C12_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C12_varid),
	OFFSET_uint16(HQ_STIBBONS_C12_status),
	OFFSET_uint16(HQ_STIBBONS_C12_dummy),
	OFFSET_uint16(HQ_STIBBONS_C12_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C12_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C12_dummy3),
	HQ_STIBBONS_C12_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C13)
	OFFSET_uint16(HQ_STIBBONS_C13_req_type),
	OFFSET_uint16(HQ_STIBBONS_C13_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C13_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C13_varid),
	OFFSET_uint16(HQ_STIBBONS_C13_status),
	OFFSET_uint16(HQ_STIBBONS_C13_dummy),
	OFFSET_uint16(HQ_STIBBONS_C13_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C13_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C13_dummy3),
	HQ_STIBBONS_C13_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C14)
	OFFSET_uint16(HQ_STIBBONS_C14_req_type),
	OFFSET_uint16(HQ_STIBBONS_C14_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C14_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C14_varid),
	OFFSET_uint16(HQ_STIBBONS_C14_status),
	OFFSET_uint16(HQ_STIBBONS_C14_dummy),
	OFFSET_uint16(HQ_STIBBONS_C14_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C14_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C14_dummy3),
	HQ_STIBBONS_C14_pduSize
} ;

enum {
	OFFSET_START(HQ_SCO_STREAM_HANDLES)
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_req_type),
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_wordlength),
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_seq_no),
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_varid),
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_status),
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_sco_handle),
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_source_id),
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_sink_id),
	OFFSET_uint16(HQ_SCO_STREAM_HANDLES_dummy3),
	HQ_SCO_STREAM_HANDLES_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C15)
	OFFSET_uint16(HQ_STIBBONS_C15_req_type),
	OFFSET_uint16(HQ_STIBBONS_C15_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C15_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C15_varid),
	OFFSET_uint16(HQ_STIBBONS_C15_status),
	OFFSET_uint16(HQ_STIBBONS_C15_dummy),
	OFFSET_uint16(HQ_STIBBONS_C15_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C15_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C15_dummy3),
	HQ_STIBBONS_C15_pduSize
} ;

enum {
	OFFSET_START(HQ_STIBBONS_C16)
	OFFSET_uint16(HQ_STIBBONS_C16_req_type),
	OFFSET_uint16(HQ_STIBBONS_C16_wordlength),
	OFFSET_uint16(HQ_STIBBONS_C16_seq_no),
	OFFSET_uint16(HQ_STIBBONS_C16_varid),
	OFFSET_uint16(HQ_STIBBONS_C16_status),
	OFFSET_uint16(HQ_STIBBONS_C16_dummy),
	OFFSET_uint16(HQ_STIBBONS_C16_dummy1),
	OFFSET_uint16(HQ_STIBBONS_C16_dummy2),
	OFFSET_uint16(HQ_STIBBONS_C16_dummy3),
	HQ_STIBBONS_C16_pduSize
} ;

enum {
	OFFSET_START(HQ_ACCEPT_TDI)
	OFFSET_uint16(HQ_ACCEPT_TDI_req_type),
	OFFSET_uint16(HQ_ACCEPT_TDI_wordlength),
	OFFSET_uint16(HQ_ACCEPT_TDI_seq_no),
	OFFSET_uint16(HQ_ACCEPT_TDI_varid),
	OFFSET_uint16(HQ_ACCEPT_TDI_status),
	OFFSET_uint16(HQ_ACCEPT_TDI_id),
	OFFSET_uint16(HQ_ACCEPT_TDI_t),
	OFFSET_uint16(HQ_ACCEPT_TDI_d),
	OFFSET_uint16(HQ_ACCEPT_TDI_attempts),
	OFFSET_uint16(HQ_ACCEPT_TDI_timeout),
	OFFSET_uint16(HQ_ACCEPT_TDI_event),
	HQ_ACCEPT_TDI_pduSize
} ;

enum {
	OFFSET_START(HQ_FILTER_RESP)
	OFFSET_uint16(HQ_FILTER_RESP_req_type),
	OFFSET_uint16(HQ_FILTER_RESP_wordlength),
	OFFSET_uint16(HQ_FILTER_RESP_seq_no),
	OFFSET_uint16(HQ_FILTER_RESP_varid),
	OFFSET_uint16(HQ_FILTER_RESP_status),
	OFFSET_uint16(HQ_FILTER_RESP_index),
	OFFSET_uint16(HQ_FILTER_RESP_freq),
	OFFSET_uint16(HQ_FILTER_RESP_rssi),
	OFFSET_uint16(HQ_FILTER_RESP_dummy3),
	HQ_FILTER_RESP_pduSize
} ;

enum {
	OFFSET_START(HQ_ADC_RESULT)
	OFFSET_uint16(HQ_ADC_RESULT_req_type),
	OFFSET_uint16(HQ_ADC_RESULT_wordlength),
	OFFSET_uint16(HQ_ADC_RESULT_seq_no),
	OFFSET_uint16(HQ_ADC_RESULT_varid),
	OFFSET_uint16(HQ_ADC_RESULT_status),
	OFFSET_uint16(HQ_ADC_RESULT_result),
	OFFSET_uint16(HQ_ADC_RESULT_channel),
	OFFSET_uint16(HQ_ADC_RESULT_dummy2),
	OFFSET_uint16(HQ_ADC_RESULT_dummy3),
	HQ_ADC_RESULT_pduSize
} ;

enum {
	OFFSET_START(HQ_BLE_RADIO_TEST)
	OFFSET_uint16(HQ_BLE_RADIO_TEST_req_type),
	OFFSET_uint16(HQ_BLE_RADIO_TEST_wordlength),
	OFFSET_uint16(HQ_BLE_RADIO_TEST_seq_no),
	OFFSET_uint16(HQ_BLE_RADIO_TEST_varid),
	OFFSET_uint16(HQ_BLE_RADIO_TEST_status),
	OFFSET_uint16(HQ_BLE_RADIO_TEST_data),
	OFFSET_uint16(HQ_BLE_RADIO_TEST_dummy1),
	OFFSET_uint16(HQ_BLE_RADIO_TEST_dummy2),
	OFFSET_uint16(HQ_BLE_RADIO_TEST_dummy3),
	HQ_BLE_RADIO_TEST_pduSize
} ;

enum {
	OFFSET_START(HQ_RXPKTSTATS)
	OFFSET_uint16(HQ_RXPKTSTATS_req_type),
	OFFSET_uint16(HQ_RXPKTSTATS_wordlength),
	OFFSET_uint16(HQ_RXPKTSTATS_seq_no),
	OFFSET_uint16(HQ_RXPKTSTATS_varid),
	OFFSET_uint16(HQ_RXPKTSTATS_status),
	OFFSET_uint16(HQ_RXPKTSTATS_n_pkts),
	OFFSET_uint16(HQ_RXPKTSTATS_n_good_pkts),
	OFFSET_uint16(HQ_RXPKTSTATS_n_correctable_pkts),
	OFFSET_uint16(HQ_RXPKTSTATS_rssi),
	OFFSET_bool(HQ_RXPKTSTATS_rssi_valid),
	HQ_RXPKTSTATS_pduSize
} ;

enum {
	OFFSET_START(HQ_BER_TRIGGER)
	OFFSET_uint16(HQ_BER_TRIGGER_req_type),
	OFFSET_uint16(HQ_BER_TRIGGER_wordlength),
	OFFSET_uint16(HQ_BER_TRIGGER_seq_no),
	OFFSET_uint16(HQ_BER_TRIGGER_varid),
	OFFSET_uint16(HQ_BER_TRIGGER_status),
	OFFSET_uint16(HQ_BER_TRIGGER_hci_handle),
	OFFSET_uint16(HQ_BER_TRIGGER_avg_ber),
	OFFSET_uint16(HQ_BER_TRIGGER_raw_ber),
	OFFSET_uint16(HQ_BER_TRIGGER_ber_threshold),
	HQ_BER_TRIGGER_pduSize
} ;

enum {
	OFFSET_START(HQ_DRAIN_CALIBRATE)
	OFFSET_uint16(HQ_DRAIN_CALIBRATE_req_type),
	OFFSET_uint16(HQ_DRAIN_CALIBRATE_wordlength),
	OFFSET_uint16(HQ_DRAIN_CALIBRATE_seq_no),
	OFFSET_uint16(HQ_DRAIN_CALIBRATE_varid),
	OFFSET_uint16(HQ_DRAIN_CALIBRATE_status),
	OFFSET_uint32(HQ_DRAIN_CALIBRATE_awake_time),
	OFFSET_uint32(HQ_DRAIN_CALIBRATE_sleep_time),
	OFFSET_uint32(HQ_DRAIN_CALIBRATE_half_slots),
	OFFSET_uint32(HQ_DRAIN_CALIBRATE_half_slots_pa),
	OFFSET_uint32(HQ_DRAIN_CALIBRATE_fm_radio),
	OFFSET_uint32(HQ_DRAIN_CALIBRATE_fm_tx_radio),
	OFFSET_uint32(HQ_DRAIN_CALIBRATE_fm_lo),
	HQ_DRAIN_CALIBRATE_pduSize
} ;

enum {
	OFFSET_START(HQ_RADIO_STATUS_ARRAY)
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_req_type),
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_wordlength),
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_seq_no),
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_varid),
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_status),
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_index),
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_value),
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_dummy2),
	OFFSET_uint16(HQ_RADIO_STATUS_ARRAY_dummy3),
	HQ_RADIO_STATUS_ARRAY_pduSize
} ;

enum {
	OFFSET_START(HQ_SYNTH_SETTLE)
	OFFSET_uint16(HQ_SYNTH_SETTLE_req_type),
	OFFSET_uint16(HQ_SYNTH_SETTLE_wordlength),
	OFFSET_uint16(HQ_SYNTH_SETTLE_seq_no),
	OFFSET_uint16(HQ_SYNTH_SETTLE_varid),
	OFFSET_uint16(HQ_SYNTH_SETTLE_status),
	OFFSET_uint16(HQ_SYNTH_SETTLE_index),
	OFFSET_uint16(HQ_SYNTH_SETTLE_voltage),
	OFFSET_uint16(HQ_SYNTH_SETTLE_dummy2),
	OFFSET_uint16(HQ_SYNTH_SETTLE_dummy3),
	HQ_SYNTH_SETTLE_pduSize
} ;

enum {
	OFFSET_START(HQ_FAULT)
	OFFSET_uint16(HQ_FAULT_req_type),
	OFFSET_uint16(HQ_FAULT_wordlength),
	OFFSET_uint16(HQ_FAULT_seq_no),
	OFFSET_uint16(HQ_FAULT_varid),
	OFFSET_uint16(HQ_FAULT_status),
	OFFSET_uint16(HQ_FAULT_f),
	OFFSET_uint32(HQ_FAULT_t),
	OFFSET_uint16(HQ_FAULT_n),
	HQ_FAULT_pduSize
} ;

enum {
	OFFSET_START(HQ_LUT_ENTRY)
	OFFSET_uint16(HQ_LUT_ENTRY_req_type),
	OFFSET_uint16(HQ_LUT_ENTRY_wordlength),
	OFFSET_uint16(HQ_LUT_ENTRY_seq_no),
	OFFSET_uint16(HQ_LUT_ENTRY_varid),
	OFFSET_uint16(HQ_LUT_ENTRY_status),
	OFFSET_uint16(HQ_LUT_ENTRY_index),
	OFFSET_uint16(HQ_LUT_ENTRY_trim),
	OFFSET_uint16(HQ_LUT_ENTRY_dummy2),
	OFFSET_uint16(HQ_LUT_ENTRY_dummy3),
	HQ_LUT_ENTRY_pduSize
} ;

enum {
	OFFSET_START(HQ_IQ_MATCH)
	OFFSET_uint16(HQ_IQ_MATCH_req_type),
	OFFSET_uint16(HQ_IQ_MATCH_wordlength),
	OFFSET_uint16(HQ_IQ_MATCH_seq_no),
	OFFSET_uint16(HQ_IQ_MATCH_varid),
	OFFSET_uint16(HQ_IQ_MATCH_status),
	OFFSET_uint16(HQ_IQ_MATCH_index),
	OFFSET_uint16(HQ_IQ_MATCH_trim),
	OFFSET_uint16(HQ_IQ_MATCH_rssi_chan),
	OFFSET_uint16(HQ_IQ_MATCH_rssi_image),
	HQ_IQ_MATCH_pduSize
} ;

enum {
	OFFSET_START(HQ_RADIO_STATUS)
	OFFSET_uint16(HQ_RADIO_STATUS_req_type),
	OFFSET_uint16(HQ_RADIO_STATUS_wordlength),
	OFFSET_uint16(HQ_RADIO_STATUS_seq_no),
	OFFSET_uint16(HQ_RADIO_STATUS_varid),
	OFFSET_uint16(HQ_RADIO_STATUS_status),
	OFFSET_uint16(HQ_RADIO_STATUS_tx_lvl),
	OFFSET_uint16(HQ_RADIO_STATUS_tx_ext_lvl),
	OFFSET_uint16(HQ_RADIO_STATUS_rx_lvl),
	OFFSET_uint16(HQ_RADIO_STATUS_lo_lvl),
	OFFSET_uint16(HQ_RADIO_STATUS_iq_trim),
	OFFSET_uint16(HQ_RADIO_STATUS_sir),
	OFFSET_uint16(HQ_RADIO_STATUS_rx_atten),
	HQ_RADIO_STATUS_pduSize
} ;

enum {
	OFFSET_START(HQ_CAPABILITY_DOWNLOAD_COMPLETE)
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_req_type),
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_wordlength),
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_seq_no),
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_varid),
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_status),
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_data),
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_dummy1),
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_dummy2),
	OFFSET_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_dummy3),
	HQ_CAPABILITY_DOWNLOAD_COMPLETE_pduSize
} ;
////////////////////////////////////////////////////////////////////////////////
//  generated from devHost/HCIPacker/Autogen/templates/hq.tpl
////////////////////////////////////////////////////////////////////////////////

#include "hcipacker/gen_hq.h"


HQ_STIBBONS_U02_PDU::HQ_STIBBONS_U02_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U02 , HQ_STIBBONS_U02_pduSize )
{
}

HQ_STIBBONS_U02_PDU::HQ_STIBBONS_U02_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U02_PDU::HQ_STIBBONS_U02_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U02_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U02_data) ;
}

void HQ_STIBBONS_U02_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U02_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U03_PDU::HQ_STIBBONS_U03_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U03 , HQ_STIBBONS_U03_pduSize )
{
}

HQ_STIBBONS_U03_PDU::HQ_STIBBONS_U03_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U03_PDU::HQ_STIBBONS_U03_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U03_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U03_data) ;
}

void HQ_STIBBONS_U03_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U03_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U04_PDU::HQ_STIBBONS_U04_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U04 , HQ_STIBBONS_U04_pduSize )
{
}

HQ_STIBBONS_U04_PDU::HQ_STIBBONS_U04_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U04_PDU::HQ_STIBBONS_U04_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U04_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U04_data) ;
}

void HQ_STIBBONS_U04_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U04_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U05_PDU::HQ_STIBBONS_U05_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U05 , HQ_STIBBONS_U05_pduSize )
{
}

HQ_STIBBONS_U05_PDU::HQ_STIBBONS_U05_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U05_PDU::HQ_STIBBONS_U05_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U05_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U05_data) ;
}

void HQ_STIBBONS_U05_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U05_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U06_PDU::HQ_STIBBONS_U06_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U06 , HQ_STIBBONS_U06_pduSize )
{
}

HQ_STIBBONS_U06_PDU::HQ_STIBBONS_U06_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U06_PDU::HQ_STIBBONS_U06_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U06_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U06_data) ;
}

void HQ_STIBBONS_U06_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U06_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U07_PDU::HQ_STIBBONS_U07_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U07 , HQ_STIBBONS_U07_pduSize )
{
}

HQ_STIBBONS_U07_PDU::HQ_STIBBONS_U07_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U07_PDU::HQ_STIBBONS_U07_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U07_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U07_data) ;
}

void HQ_STIBBONS_U07_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U07_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U08_PDU::HQ_STIBBONS_U08_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U08 , HQ_STIBBONS_U08_pduSize )
{
}

HQ_STIBBONS_U08_PDU::HQ_STIBBONS_U08_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U08_PDU::HQ_STIBBONS_U08_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U08_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U08_data) ;
}

void HQ_STIBBONS_U08_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U08_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U09_PDU::HQ_STIBBONS_U09_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U09 , HQ_STIBBONS_U09_pduSize )
{
}

HQ_STIBBONS_U09_PDU::HQ_STIBBONS_U09_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U09_PDU::HQ_STIBBONS_U09_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U09_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U09_data) ;
}

void HQ_STIBBONS_U09_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U09_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_C01_PDU::HQ_STIBBONS_C01_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C01 , HQ_STIBBONS_C01_pduSize )
{
}

HQ_STIBBONS_C01_PDU::HQ_STIBBONS_C01_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C01_PDU::HQ_STIBBONS_C01_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C02_PDU::HQ_STIBBONS_C02_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C02 , HQ_STIBBONS_C02_pduSize )
{
}

HQ_STIBBONS_C02_PDU::HQ_STIBBONS_C02_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C02_PDU::HQ_STIBBONS_C02_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_ESCO_REQ_PDU::HQ_ESCO_REQ_PDU( )
: HQ_PDU( (uint16)HQVARID_ESCO_REQ , HQ_ESCO_REQ_pduSize )
{
}

HQ_ESCO_REQ_PDU::HQ_ESCO_REQ_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_ESCO_REQ_PDU::HQ_ESCO_REQ_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_ESCO_REQ_PDU::get_sco_handle(void) const
{
    return get_uint16(HQ_ESCO_REQ_sco_handle) ;
}

void HQ_ESCO_REQ_PDU::set_sco_handle(uint16 val)
{
    set_uint16(HQ_ESCO_REQ_sco_handle,val) ;
}

uint16 HQ_ESCO_REQ_PDU::get_hci_handle(void) const
{
    return get_uint16(HQ_ESCO_REQ_hci_handle) ;
}

void HQ_ESCO_REQ_PDU::set_hci_handle(uint16 val)
{
    set_uint16(HQ_ESCO_REQ_hci_handle,val) ;
}

uint16 HQ_ESCO_REQ_PDU::get_pt_s2m(void) const
{
    return get_uint16(HQ_ESCO_REQ_pt_s2m) ;
}

void HQ_ESCO_REQ_PDU::set_pt_s2m(uint16 val)
{
    set_uint16(HQ_ESCO_REQ_pt_s2m,val) ;
}

uint16 HQ_ESCO_REQ_PDU::get_pt_m2s(void) const
{
    return get_uint16(HQ_ESCO_REQ_pt_m2s) ;
}

void HQ_ESCO_REQ_PDU::set_pt_m2s(uint16 val)
{
    set_uint16(HQ_ESCO_REQ_pt_m2s,val) ;
}

uint16 HQ_ESCO_REQ_PDU::get_tesco(void) const
{
    return get_uint16(HQ_ESCO_REQ_tesco) ;
}

void HQ_ESCO_REQ_PDU::set_tesco(uint16 val)
{
    set_uint16(HQ_ESCO_REQ_tesco,val) ;
}

uint16 HQ_ESCO_REQ_PDU::get_wesco(void) const
{
    return get_uint16(HQ_ESCO_REQ_wesco) ;
}

void HQ_ESCO_REQ_PDU::set_wesco(uint16 val)
{
    set_uint16(HQ_ESCO_REQ_wesco,val) ;
}

uint16 HQ_ESCO_REQ_PDU::get_dsco(void) const
{
    return get_uint16(HQ_ESCO_REQ_dsco) ;
}

void HQ_ESCO_REQ_PDU::set_dsco(uint16 val)
{
    set_uint16(HQ_ESCO_REQ_dsco,val) ;
}

/*******************************************************************/


HQ_STIBBONS_C03_PDU::HQ_STIBBONS_C03_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C03 , HQ_STIBBONS_C03_pduSize )
{
}

HQ_STIBBONS_C03_PDU::HQ_STIBBONS_C03_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C03_PDU::HQ_STIBBONS_C03_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C04_PDU::HQ_STIBBONS_C04_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C04 , HQ_STIBBONS_C04_pduSize )
{
}

HQ_STIBBONS_C04_PDU::HQ_STIBBONS_C04_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C04_PDU::HQ_STIBBONS_C04_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C05_PDU::HQ_STIBBONS_C05_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C05 , HQ_STIBBONS_C05_pduSize )
{
}

HQ_STIBBONS_C05_PDU::HQ_STIBBONS_C05_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C05_PDU::HQ_STIBBONS_C05_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C06_PDU::HQ_STIBBONS_C06_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C06 , HQ_STIBBONS_C06_pduSize )
{
}

HQ_STIBBONS_C06_PDU::HQ_STIBBONS_C06_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C06_PDU::HQ_STIBBONS_C06_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C07_PDU::HQ_STIBBONS_C07_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C07 , HQ_STIBBONS_C07_pduSize )
{
}

HQ_STIBBONS_C07_PDU::HQ_STIBBONS_C07_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C07_PDU::HQ_STIBBONS_C07_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C08_PDU::HQ_STIBBONS_C08_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C08 , HQ_STIBBONS_C08_pduSize )
{
}

HQ_STIBBONS_C08_PDU::HQ_STIBBONS_C08_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C08_PDU::HQ_STIBBONS_C08_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C09_PDU::HQ_STIBBONS_C09_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C09 , HQ_STIBBONS_C09_pduSize )
{
}

HQ_STIBBONS_C09_PDU::HQ_STIBBONS_C09_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C09_PDU::HQ_STIBBONS_C09_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_SNIFF_REQ_PDU::HQ_SNIFF_REQ_PDU( )
: HQ_PDU( (uint16)HQVARID_SNIFF_REQ , HQ_SNIFF_REQ_pduSize )
{
}

HQ_SNIFF_REQ_PDU::HQ_SNIFF_REQ_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_SNIFF_REQ_PDU::HQ_SNIFF_REQ_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_SNIFF_REQ_PDU::get_id(void) const
{
    return get_uint16(HQ_SNIFF_REQ_id) ;
}

void HQ_SNIFF_REQ_PDU::set_id(uint16 val)
{
    set_uint16(HQ_SNIFF_REQ_id,val) ;
}

uint16 HQ_SNIFF_REQ_PDU::get_t(void) const
{
    return get_uint16(HQ_SNIFF_REQ_t) ;
}

void HQ_SNIFF_REQ_PDU::set_t(uint16 val)
{
    set_uint16(HQ_SNIFF_REQ_t,val) ;
}

uint16 HQ_SNIFF_REQ_PDU::get_d(void) const
{
    return get_uint16(HQ_SNIFF_REQ_d) ;
}

void HQ_SNIFF_REQ_PDU::set_d(uint16 val)
{
    set_uint16(HQ_SNIFF_REQ_d,val) ;
}

uint16 HQ_SNIFF_REQ_PDU::get_attempts(void) const
{
    return get_uint16(HQ_SNIFF_REQ_attempts) ;
}

void HQ_SNIFF_REQ_PDU::set_attempts(uint16 val)
{
    set_uint16(HQ_SNIFF_REQ_attempts,val) ;
}

uint16 HQ_SNIFF_REQ_PDU::get_timeout(void) const
{
    return get_uint16(HQ_SNIFF_REQ_timeout) ;
}

void HQ_SNIFF_REQ_PDU::set_timeout(uint16 val)
{
    set_uint16(HQ_SNIFF_REQ_timeout,val) ;
}

/*******************************************************************/


HQ_RSSI_PDU::HQ_RSSI_PDU( )
: HQ_PDU( (uint16)HQVARID_RSSI , HQ_RSSI_pduSize )
{
}

HQ_RSSI_PDU::HQ_RSSI_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_RSSI_PDU::HQ_RSSI_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_RSSI_PDU::get_data(void) const
{
    return get_uint16(HQ_RSSI_data) ;
}

void HQ_RSSI_PDU::set_data(uint16 val)
{
    set_uint16(HQ_RSSI_data,val) ;
}

/*******************************************************************/


HQ_BOOTED_PDU::HQ_BOOTED_PDU( )
: HQ_PDU( (uint16)HQVARID_BOOTED , HQ_BOOTED_pduSize )
{
}

HQ_BOOTED_PDU::HQ_BOOTED_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_BOOTED_PDU::HQ_BOOTED_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_EGPS_TIME_STAMP_PDU::HQ_EGPS_TIME_STAMP_PDU( )
: HQ_PDU( (uint16)HQVARID_EGPS_TIME_STAMP , HQ_EGPS_TIME_STAMP_pduSize )
{
}

HQ_EGPS_TIME_STAMP_PDU::HQ_EGPS_TIME_STAMP_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_EGPS_TIME_STAMP_PDU::HQ_EGPS_TIME_STAMP_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint32 HQ_EGPS_TIME_STAMP_PDU::get_time(void) const
{
    return get_uint32(HQ_EGPS_TIME_STAMP_time) ;
}

void HQ_EGPS_TIME_STAMP_PDU::set_time(uint32 val)
{
    set_uint32(HQ_EGPS_TIME_STAMP_time,val) ;
}

uint8 HQ_EGPS_TIME_STAMP_PDU::get_time_fine(void) const
{
    return get_uint8(HQ_EGPS_TIME_STAMP_time_fine) ;
}

void HQ_EGPS_TIME_STAMP_PDU::set_time_fine(uint8 val)
{
    set_uint8(HQ_EGPS_TIME_STAMP_time_fine,val) ;
}

uint8 HQ_EGPS_TIME_STAMP_PDU::get_flags(void) const
{
    return get_uint8(HQ_EGPS_TIME_STAMP_flags) ;
}

void HQ_EGPS_TIME_STAMP_PDU::set_flags(uint8 val)
{
    set_uint8(HQ_EGPS_TIME_STAMP_flags,val) ;
}

/*******************************************************************/


HQ_NO_VARIABLE_PDU::HQ_NO_VARIABLE_PDU( )
: HQ_PDU( (uint16)HQVARID_NO_VARIABLE , HQ_NO_VARIABLE_pduSize )
{
}

HQ_NO_VARIABLE_PDU::HQ_NO_VARIABLE_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_NO_VARIABLE_PDU::HQ_NO_VARIABLE_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_U10_PDU::HQ_STIBBONS_U10_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U10 , HQ_STIBBONS_U10_pduSize )
{
}

HQ_STIBBONS_U10_PDU::HQ_STIBBONS_U10_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U10_PDU::HQ_STIBBONS_U10_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U10_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U10_data) ;
}

void HQ_STIBBONS_U10_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U10_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U11_PDU::HQ_STIBBONS_U11_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U11 , HQ_STIBBONS_U11_pduSize )
{
}

HQ_STIBBONS_U11_PDU::HQ_STIBBONS_U11_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U11_PDU::HQ_STIBBONS_U11_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U11_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U11_data) ;
}

void HQ_STIBBONS_U11_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U11_data,val) ;
}

/*******************************************************************/


HQ_BIT_ERR_PDU::HQ_BIT_ERR_PDU( )
: HQ_PDU( (uint16)HQVARID_BIT_ERR , HQ_BIT_ERR_pduSize )
{
}

HQ_BIT_ERR_PDU::HQ_BIT_ERR_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_BIT_ERR_PDU::HQ_BIT_ERR_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_BIT_ERR_PDU::get_index(void) const
{
    return get_uint16(HQ_BIT_ERR_index) ;
}

void HQ_BIT_ERR_PDU::set_index(uint16 val)
{
    set_uint16(HQ_BIT_ERR_index,val) ;
}

uint32 HQ_BIT_ERR_PDU::get_value_last(void) const
{
    return get_uint32(HQ_BIT_ERR_value_last) ;
}

void HQ_BIT_ERR_PDU::set_value_last(uint32 val)
{
    set_uint32(HQ_BIT_ERR_value_last,val) ;
}

uint32 HQ_BIT_ERR_PDU::get_value_tot(void) const
{
    return get_uint32(HQ_BIT_ERR_value_tot) ;
}

void HQ_BIT_ERR_PDU::set_value_tot(uint32 val)
{
    set_uint32(HQ_BIT_ERR_value_tot,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U12_PDU::HQ_STIBBONS_U12_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U12 , HQ_STIBBONS_U12_pduSize )
{
}

HQ_STIBBONS_U12_PDU::HQ_STIBBONS_U12_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U12_PDU::HQ_STIBBONS_U12_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U12_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U12_data) ;
}

void HQ_STIBBONS_U12_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U12_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U13_PDU::HQ_STIBBONS_U13_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U13 , HQ_STIBBONS_U13_pduSize )
{
}

HQ_STIBBONS_U13_PDU::HQ_STIBBONS_U13_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U13_PDU::HQ_STIBBONS_U13_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U13_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U13_data) ;
}

void HQ_STIBBONS_U13_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U13_data,val) ;
}

/*******************************************************************/


HQ_GPS_STATUS_PDU::HQ_GPS_STATUS_PDU( )
: HQ_PDU( (uint16)HQVARID_GPS_STATUS , HQ_GPS_STATUS_pduSize )
{
}

HQ_GPS_STATUS_PDU::HQ_GPS_STATUS_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_GPS_STATUS_PDU::HQ_GPS_STATUS_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_GPS_STATUS_PDU::get_flags(void) const
{
    return get_uint16(HQ_GPS_STATUS_flags) ;
}

void HQ_GPS_STATUS_PDU::set_flags(uint16 val)
{
    set_uint16(HQ_GPS_STATUS_flags,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U14_PDU::HQ_STIBBONS_U14_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U14 , HQ_STIBBONS_U14_pduSize )
{
}

HQ_STIBBONS_U14_PDU::HQ_STIBBONS_U14_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U14_PDU::HQ_STIBBONS_U14_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U14_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U14_data) ;
}

void HQ_STIBBONS_U14_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U14_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U15_PDU::HQ_STIBBONS_U15_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U15 , HQ_STIBBONS_U15_pduSize )
{
}

HQ_STIBBONS_U15_PDU::HQ_STIBBONS_U15_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U15_PDU::HQ_STIBBONS_U15_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U15_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U15_data) ;
}

void HQ_STIBBONS_U15_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U15_data,val) ;
}

/*******************************************************************/


HQ_DELAYED_PANIC_PDU::HQ_DELAYED_PANIC_PDU( )
: HQ_PDU( (uint16)HQVARID_DELAYED_PANIC , HQ_DELAYED_PANIC_pduSize )
{
}

HQ_DELAYED_PANIC_PDU::HQ_DELAYED_PANIC_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_DELAYED_PANIC_PDU::HQ_DELAYED_PANIC_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_DELAYED_PANIC_PDU::get_data(void) const
{
    return get_uint16(HQ_DELAYED_PANIC_data) ;
}

void HQ_DELAYED_PANIC_PDU::set_data(uint16 val)
{
    set_uint16(HQ_DELAYED_PANIC_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_U16_PDU::HQ_STIBBONS_U16_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_U16 , HQ_STIBBONS_U16_pduSize )
{
}

HQ_STIBBONS_U16_PDU::HQ_STIBBONS_U16_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_U16_PDU::HQ_STIBBONS_U16_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_STIBBONS_U16_PDU::get_data(void) const
{
    return get_uint16(HQ_STIBBONS_U16_data) ;
}

void HQ_STIBBONS_U16_PDU::set_data(uint16 val)
{
    set_uint16(HQ_STIBBONS_U16_data,val) ;
}

/*******************************************************************/


HQ_STIBBONS_C10_PDU::HQ_STIBBONS_C10_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C10 , HQ_STIBBONS_C10_pduSize )
{
}

HQ_STIBBONS_C10_PDU::HQ_STIBBONS_C10_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C10_PDU::HQ_STIBBONS_C10_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_PROTOCOL_ERROR_PDU::HQ_PROTOCOL_ERROR_PDU( )
: HQ_PDU( (uint16)HQVARID_PROTOCOL_ERROR , HQ_PROTOCOL_ERROR_pduSize )
{
}

HQ_PROTOCOL_ERROR_PDU::HQ_PROTOCOL_ERROR_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_PROTOCOL_ERROR_PDU::HQ_PROTOCOL_ERROR_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_PROTOCOL_ERROR_PDU::get_layer(void) const
{
    return get_uint16(HQ_PROTOCOL_ERROR_layer) ;
}

void HQ_PROTOCOL_ERROR_PDU::set_layer(uint16 val)
{
    set_uint16(HQ_PROTOCOL_ERROR_layer,val) ;
}

uint16 HQ_PROTOCOL_ERROR_PDU::get_entity(void) const
{
    return get_uint16(HQ_PROTOCOL_ERROR_entity) ;
}

void HQ_PROTOCOL_ERROR_PDU::set_entity(uint16 val)
{
    set_uint16(HQ_PROTOCOL_ERROR_entity,val) ;
}

uint16 HQ_PROTOCOL_ERROR_PDU::get_error(void) const
{
    return get_uint16(HQ_PROTOCOL_ERROR_error) ;
}

void HQ_PROTOCOL_ERROR_PDU::set_error(uint16 val)
{
    set_uint16(HQ_PROTOCOL_ERROR_error,val) ;
}

uint16 HQ_PROTOCOL_ERROR_PDU::get_info0(void) const
{
    return get_uint16(HQ_PROTOCOL_ERROR_info0) ;
}

void HQ_PROTOCOL_ERROR_PDU::set_info0(uint16 val)
{
    set_uint16(HQ_PROTOCOL_ERROR_info0,val) ;
}

uint16 HQ_PROTOCOL_ERROR_PDU::get_info1(void) const
{
    return get_uint16(HQ_PROTOCOL_ERROR_info1) ;
}

void HQ_PROTOCOL_ERROR_PDU::set_info1(uint16 val)
{
    set_uint16(HQ_PROTOCOL_ERROR_info1,val) ;
}

uint16 HQ_PROTOCOL_ERROR_PDU::get_info2(void) const
{
    return get_uint16(HQ_PROTOCOL_ERROR_info2) ;
}

void HQ_PROTOCOL_ERROR_PDU::set_info2(uint16 val)
{
    set_uint16(HQ_PROTOCOL_ERROR_info2,val) ;
}

/*******************************************************************/


HQ_STIBBONS_C11_PDU::HQ_STIBBONS_C11_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C11 , HQ_STIBBONS_C11_pduSize )
{
}

HQ_STIBBONS_C11_PDU::HQ_STIBBONS_C11_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C11_PDU::HQ_STIBBONS_C11_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C12_PDU::HQ_STIBBONS_C12_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C12 , HQ_STIBBONS_C12_pduSize )
{
}

HQ_STIBBONS_C12_PDU::HQ_STIBBONS_C12_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C12_PDU::HQ_STIBBONS_C12_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C13_PDU::HQ_STIBBONS_C13_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C13 , HQ_STIBBONS_C13_pduSize )
{
}

HQ_STIBBONS_C13_PDU::HQ_STIBBONS_C13_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C13_PDU::HQ_STIBBONS_C13_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C14_PDU::HQ_STIBBONS_C14_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C14 , HQ_STIBBONS_C14_pduSize )
{
}

HQ_STIBBONS_C14_PDU::HQ_STIBBONS_C14_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C14_PDU::HQ_STIBBONS_C14_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_SCO_STREAM_HANDLES_PDU::HQ_SCO_STREAM_HANDLES_PDU( )
: HQ_PDU( (uint16)HQVARID_SCO_STREAM_HANDLES , HQ_SCO_STREAM_HANDLES_pduSize )
{
}

HQ_SCO_STREAM_HANDLES_PDU::HQ_SCO_STREAM_HANDLES_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_SCO_STREAM_HANDLES_PDU::HQ_SCO_STREAM_HANDLES_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_SCO_STREAM_HANDLES_PDU::get_sco_handle(void) const
{
    return get_uint16(HQ_SCO_STREAM_HANDLES_sco_handle) ;
}

void HQ_SCO_STREAM_HANDLES_PDU::set_sco_handle(uint16 val)
{
    set_uint16(HQ_SCO_STREAM_HANDLES_sco_handle,val) ;
}

uint16 HQ_SCO_STREAM_HANDLES_PDU::get_source_id(void) const
{
    return get_uint16(HQ_SCO_STREAM_HANDLES_source_id) ;
}

void HQ_SCO_STREAM_HANDLES_PDU::set_source_id(uint16 val)
{
    set_uint16(HQ_SCO_STREAM_HANDLES_source_id,val) ;
}

uint16 HQ_SCO_STREAM_HANDLES_PDU::get_sink_id(void) const
{
    return get_uint16(HQ_SCO_STREAM_HANDLES_sink_id) ;
}

void HQ_SCO_STREAM_HANDLES_PDU::set_sink_id(uint16 val)
{
    set_uint16(HQ_SCO_STREAM_HANDLES_sink_id,val) ;
}

/*******************************************************************/


HQ_STIBBONS_C15_PDU::HQ_STIBBONS_C15_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C15 , HQ_STIBBONS_C15_pduSize )
{
}

HQ_STIBBONS_C15_PDU::HQ_STIBBONS_C15_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C15_PDU::HQ_STIBBONS_C15_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_STIBBONS_C16_PDU::HQ_STIBBONS_C16_PDU( )
: HQ_PDU( (uint16)HQVARID_STIBBONS_C16 , HQ_STIBBONS_C16_pduSize )
{
}

HQ_STIBBONS_C16_PDU::HQ_STIBBONS_C16_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_STIBBONS_C16_PDU::HQ_STIBBONS_C16_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

/*******************************************************************/


HQ_ACCEPT_TDI_PDU::HQ_ACCEPT_TDI_PDU( )
: HQ_PDU( (uint16)HQVARID_ACCEPT_TDI , HQ_ACCEPT_TDI_pduSize )
{
}

HQ_ACCEPT_TDI_PDU::HQ_ACCEPT_TDI_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_ACCEPT_TDI_PDU::HQ_ACCEPT_TDI_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_ACCEPT_TDI_PDU::get_id(void) const
{
    return get_uint16(HQ_ACCEPT_TDI_id) ;
}

void HQ_ACCEPT_TDI_PDU::set_id(uint16 val)
{
    set_uint16(HQ_ACCEPT_TDI_id,val) ;
}

uint16 HQ_ACCEPT_TDI_PDU::get_t(void) const
{
    return get_uint16(HQ_ACCEPT_TDI_t) ;
}

void HQ_ACCEPT_TDI_PDU::set_t(uint16 val)
{
    set_uint16(HQ_ACCEPT_TDI_t,val) ;
}

uint16 HQ_ACCEPT_TDI_PDU::get_d(void) const
{
    return get_uint16(HQ_ACCEPT_TDI_d) ;
}

void HQ_ACCEPT_TDI_PDU::set_d(uint16 val)
{
    set_uint16(HQ_ACCEPT_TDI_d,val) ;
}

uint16 HQ_ACCEPT_TDI_PDU::get_attempts(void) const
{
    return get_uint16(HQ_ACCEPT_TDI_attempts) ;
}

void HQ_ACCEPT_TDI_PDU::set_attempts(uint16 val)
{
    set_uint16(HQ_ACCEPT_TDI_attempts,val) ;
}

uint16 HQ_ACCEPT_TDI_PDU::get_timeout(void) const
{
    return get_uint16(HQ_ACCEPT_TDI_timeout) ;
}

void HQ_ACCEPT_TDI_PDU::set_timeout(uint16 val)
{
    set_uint16(HQ_ACCEPT_TDI_timeout,val) ;
}

uint16 HQ_ACCEPT_TDI_PDU::get_event(void) const
{
    return get_uint16(HQ_ACCEPT_TDI_event) ;
}

void HQ_ACCEPT_TDI_PDU::set_event(uint16 val)
{
    set_uint16(HQ_ACCEPT_TDI_event,val) ;
}

/*******************************************************************/


HQ_FILTER_RESP_PDU::HQ_FILTER_RESP_PDU( )
: HQ_PDU( (uint16)HQVARID_FILTER_RESP , HQ_FILTER_RESP_pduSize )
{
}

HQ_FILTER_RESP_PDU::HQ_FILTER_RESP_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_FILTER_RESP_PDU::HQ_FILTER_RESP_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_FILTER_RESP_PDU::get_index(void) const
{
    return get_uint16(HQ_FILTER_RESP_index) ;
}

void HQ_FILTER_RESP_PDU::set_index(uint16 val)
{
    set_uint16(HQ_FILTER_RESP_index,val) ;
}

uint16 HQ_FILTER_RESP_PDU::get_freq(void) const
{
    return get_uint16(HQ_FILTER_RESP_freq) ;
}

void HQ_FILTER_RESP_PDU::set_freq(uint16 val)
{
    set_uint16(HQ_FILTER_RESP_freq,val) ;
}

uint16 HQ_FILTER_RESP_PDU::get_rssi(void) const
{
    return get_uint16(HQ_FILTER_RESP_rssi) ;
}

void HQ_FILTER_RESP_PDU::set_rssi(uint16 val)
{
    set_uint16(HQ_FILTER_RESP_rssi,val) ;
}

/*******************************************************************/


HQ_ADC_RESULT_PDU::HQ_ADC_RESULT_PDU( )
: HQ_PDU( (uint16)HQVARID_ADC_RESULT , HQ_ADC_RESULT_pduSize )
{
}

HQ_ADC_RESULT_PDU::HQ_ADC_RESULT_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_ADC_RESULT_PDU::HQ_ADC_RESULT_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_ADC_RESULT_PDU::get_result(void) const
{
    return get_uint16(HQ_ADC_RESULT_result) ;
}

void HQ_ADC_RESULT_PDU::set_result(uint16 val)
{
    set_uint16(HQ_ADC_RESULT_result,val) ;
}

uint16 HQ_ADC_RESULT_PDU::get_channel(void) const
{
    return get_uint16(HQ_ADC_RESULT_channel) ;
}

void HQ_ADC_RESULT_PDU::set_channel(uint16 val)
{
    set_uint16(HQ_ADC_RESULT_channel,val) ;
}

/*******************************************************************/


HQ_BLE_RADIO_TEST_PDU::HQ_BLE_RADIO_TEST_PDU( )
: HQ_PDU( (uint16)HQVARID_BLE_RADIO_TEST , HQ_BLE_RADIO_TEST_pduSize )
{
}

HQ_BLE_RADIO_TEST_PDU::HQ_BLE_RADIO_TEST_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_BLE_RADIO_TEST_PDU::HQ_BLE_RADIO_TEST_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_BLE_RADIO_TEST_PDU::get_data(void) const
{
    return get_uint16(HQ_BLE_RADIO_TEST_data) ;
}

void HQ_BLE_RADIO_TEST_PDU::set_data(uint16 val)
{
    set_uint16(HQ_BLE_RADIO_TEST_data,val) ;
}

/*******************************************************************/


HQ_RXPKTSTATS_PDU::HQ_RXPKTSTATS_PDU( )
: HQ_PDU( (uint16)HQVARID_RXPKTSTATS , HQ_RXPKTSTATS_pduSize )
{
}

HQ_RXPKTSTATS_PDU::HQ_RXPKTSTATS_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_RXPKTSTATS_PDU::HQ_RXPKTSTATS_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_RXPKTSTATS_PDU::get_n_pkts(void) const
{
    return get_uint16(HQ_RXPKTSTATS_n_pkts) ;
}

void HQ_RXPKTSTATS_PDU::set_n_pkts(uint16 val)
{
    set_uint16(HQ_RXPKTSTATS_n_pkts,val) ;
}

uint16 HQ_RXPKTSTATS_PDU::get_n_good_pkts(void) const
{
    return get_uint16(HQ_RXPKTSTATS_n_good_pkts) ;
}

void HQ_RXPKTSTATS_PDU::set_n_good_pkts(uint16 val)
{
    set_uint16(HQ_RXPKTSTATS_n_good_pkts,val) ;
}

uint16 HQ_RXPKTSTATS_PDU::get_n_correctable_pkts(void) const
{
    return get_uint16(HQ_RXPKTSTATS_n_correctable_pkts) ;
}

void HQ_RXPKTSTATS_PDU::set_n_correctable_pkts(uint16 val)
{
    set_uint16(HQ_RXPKTSTATS_n_correctable_pkts,val) ;
}

uint16 HQ_RXPKTSTATS_PDU::get_rssi(void) const
{
    return get_uint16(HQ_RXPKTSTATS_rssi) ;
}

void HQ_RXPKTSTATS_PDU::set_rssi(uint16 val)
{
    set_uint16(HQ_RXPKTSTATS_rssi,val) ;
}

bool HQ_RXPKTSTATS_PDU::get_rssi_valid(void) const
{
    return get_bool(HQ_RXPKTSTATS_rssi_valid) ;
}

void HQ_RXPKTSTATS_PDU::set_rssi_valid(bool val)
{
    set_bool(HQ_RXPKTSTATS_rssi_valid,val) ;
}

/*******************************************************************/


HQ_BER_TRIGGER_PDU::HQ_BER_TRIGGER_PDU( )
: HQ_PDU( (uint16)HQVARID_BER_TRIGGER , HQ_BER_TRIGGER_pduSize )
{
}

HQ_BER_TRIGGER_PDU::HQ_BER_TRIGGER_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_BER_TRIGGER_PDU::HQ_BER_TRIGGER_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_BER_TRIGGER_PDU::get_hci_handle(void) const
{
    return get_uint16(HQ_BER_TRIGGER_hci_handle) ;
}

void HQ_BER_TRIGGER_PDU::set_hci_handle(uint16 val)
{
    set_uint16(HQ_BER_TRIGGER_hci_handle,val) ;
}

uint16 HQ_BER_TRIGGER_PDU::get_avg_ber(void) const
{
    return get_uint16(HQ_BER_TRIGGER_avg_ber) ;
}

void HQ_BER_TRIGGER_PDU::set_avg_ber(uint16 val)
{
    set_uint16(HQ_BER_TRIGGER_avg_ber,val) ;
}

uint16 HQ_BER_TRIGGER_PDU::get_raw_ber(void) const
{
    return get_uint16(HQ_BER_TRIGGER_raw_ber) ;
}

void HQ_BER_TRIGGER_PDU::set_raw_ber(uint16 val)
{
    set_uint16(HQ_BER_TRIGGER_raw_ber,val) ;
}

uint16 HQ_BER_TRIGGER_PDU::get_ber_threshold(void) const
{
    return get_uint16(HQ_BER_TRIGGER_ber_threshold) ;
}

void HQ_BER_TRIGGER_PDU::set_ber_threshold(uint16 val)
{
    set_uint16(HQ_BER_TRIGGER_ber_threshold,val) ;
}

/*******************************************************************/


HQ_DRAIN_CALIBRATE_PDU::HQ_DRAIN_CALIBRATE_PDU( )
: HQ_PDU( (uint16)HQVARID_DRAIN_CALIBRATE , HQ_DRAIN_CALIBRATE_pduSize )
{
}

HQ_DRAIN_CALIBRATE_PDU::HQ_DRAIN_CALIBRATE_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_DRAIN_CALIBRATE_PDU::HQ_DRAIN_CALIBRATE_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint32 HQ_DRAIN_CALIBRATE_PDU::get_awake_time(void) const
{
    return get_uint32(HQ_DRAIN_CALIBRATE_awake_time) ;
}

void HQ_DRAIN_CALIBRATE_PDU::set_awake_time(uint32 val)
{
    set_uint32(HQ_DRAIN_CALIBRATE_awake_time,val) ;
}

uint32 HQ_DRAIN_CALIBRATE_PDU::get_sleep_time(void) const
{
    return get_uint32(HQ_DRAIN_CALIBRATE_sleep_time) ;
}

void HQ_DRAIN_CALIBRATE_PDU::set_sleep_time(uint32 val)
{
    set_uint32(HQ_DRAIN_CALIBRATE_sleep_time,val) ;
}

uint32 HQ_DRAIN_CALIBRATE_PDU::get_half_slots(void) const
{
    return get_uint32(HQ_DRAIN_CALIBRATE_half_slots) ;
}

void HQ_DRAIN_CALIBRATE_PDU::set_half_slots(uint32 val)
{
    set_uint32(HQ_DRAIN_CALIBRATE_half_slots,val) ;
}

uint32 HQ_DRAIN_CALIBRATE_PDU::get_half_slots_pa(void) const
{
    return get_uint32(HQ_DRAIN_CALIBRATE_half_slots_pa) ;
}

void HQ_DRAIN_CALIBRATE_PDU::set_half_slots_pa(uint32 val)
{
    set_uint32(HQ_DRAIN_CALIBRATE_half_slots_pa,val) ;
}

uint32 HQ_DRAIN_CALIBRATE_PDU::get_fm_radio(void) const
{
    return get_uint32(HQ_DRAIN_CALIBRATE_fm_radio) ;
}

void HQ_DRAIN_CALIBRATE_PDU::set_fm_radio(uint32 val)
{
    set_uint32(HQ_DRAIN_CALIBRATE_fm_radio,val) ;
}

uint32 HQ_DRAIN_CALIBRATE_PDU::get_fm_tx_radio(void) const
{
    return get_uint32(HQ_DRAIN_CALIBRATE_fm_tx_radio) ;
}

void HQ_DRAIN_CALIBRATE_PDU::set_fm_tx_radio(uint32 val)
{
    set_uint32(HQ_DRAIN_CALIBRATE_fm_tx_radio,val) ;
}

uint32 HQ_DRAIN_CALIBRATE_PDU::get_fm_lo(void) const
{
    return get_uint32(HQ_DRAIN_CALIBRATE_fm_lo) ;
}

void HQ_DRAIN_CALIBRATE_PDU::set_fm_lo(uint32 val)
{
    set_uint32(HQ_DRAIN_CALIBRATE_fm_lo,val) ;
}

/*******************************************************************/


HQ_RADIO_STATUS_ARRAY_PDU::HQ_RADIO_STATUS_ARRAY_PDU( )
: HQ_PDU( (uint16)HQVARID_RADIO_STATUS_ARRAY , HQ_RADIO_STATUS_ARRAY_pduSize )
{
}

HQ_RADIO_STATUS_ARRAY_PDU::HQ_RADIO_STATUS_ARRAY_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_RADIO_STATUS_ARRAY_PDU::HQ_RADIO_STATUS_ARRAY_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_RADIO_STATUS_ARRAY_PDU::get_index(void) const
{
    return get_uint16(HQ_RADIO_STATUS_ARRAY_index) ;
}

void HQ_RADIO_STATUS_ARRAY_PDU::set_index(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_ARRAY_index,val) ;
}

uint16 HQ_RADIO_STATUS_ARRAY_PDU::get_value(void) const
{
    return get_uint16(HQ_RADIO_STATUS_ARRAY_value) ;
}

void HQ_RADIO_STATUS_ARRAY_PDU::set_value(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_ARRAY_value,val) ;
}

/*******************************************************************/


HQ_SYNTH_SETTLE_PDU::HQ_SYNTH_SETTLE_PDU( )
: HQ_PDU( (uint16)HQVARID_SYNTH_SETTLE , HQ_SYNTH_SETTLE_pduSize )
{
}

HQ_SYNTH_SETTLE_PDU::HQ_SYNTH_SETTLE_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_SYNTH_SETTLE_PDU::HQ_SYNTH_SETTLE_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_SYNTH_SETTLE_PDU::get_index(void) const
{
    return get_uint16(HQ_SYNTH_SETTLE_index) ;
}

void HQ_SYNTH_SETTLE_PDU::set_index(uint16 val)
{
    set_uint16(HQ_SYNTH_SETTLE_index,val) ;
}

uint16 HQ_SYNTH_SETTLE_PDU::get_voltage(void) const
{
    return get_uint16(HQ_SYNTH_SETTLE_voltage) ;
}

void HQ_SYNTH_SETTLE_PDU::set_voltage(uint16 val)
{
    set_uint16(HQ_SYNTH_SETTLE_voltage,val) ;
}

/*******************************************************************/


HQ_FAULT_PDU::HQ_FAULT_PDU( )
: HQ_PDU( (uint16)HQVARID_FAULT , HQ_FAULT_pduSize )
{
}

HQ_FAULT_PDU::HQ_FAULT_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_FAULT_PDU::HQ_FAULT_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_FAULT_PDU::get_f(void) const
{
    return get_uint16(HQ_FAULT_f) ;
}

void HQ_FAULT_PDU::set_f(uint16 val)
{
    set_uint16(HQ_FAULT_f,val) ;
}

uint32 HQ_FAULT_PDU::get_t(void) const
{
    return get_uint32(HQ_FAULT_t) ;
}

void HQ_FAULT_PDU::set_t(uint32 val)
{
    set_uint32(HQ_FAULT_t,val) ;
}

uint16 HQ_FAULT_PDU::get_n(void) const
{
    return get_uint16(HQ_FAULT_n) ;
}

void HQ_FAULT_PDU::set_n(uint16 val)
{
    set_uint16(HQ_FAULT_n,val) ;
}

/*******************************************************************/


HQ_LUT_ENTRY_PDU::HQ_LUT_ENTRY_PDU( )
: HQ_PDU( (uint16)HQVARID_LUT_ENTRY , HQ_LUT_ENTRY_pduSize )
{
}

HQ_LUT_ENTRY_PDU::HQ_LUT_ENTRY_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_LUT_ENTRY_PDU::HQ_LUT_ENTRY_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_LUT_ENTRY_PDU::get_index(void) const
{
    return get_uint16(HQ_LUT_ENTRY_index) ;
}

void HQ_LUT_ENTRY_PDU::set_index(uint16 val)
{
    set_uint16(HQ_LUT_ENTRY_index,val) ;
}

uint16 HQ_LUT_ENTRY_PDU::get_trim(void) const
{
    return get_uint16(HQ_LUT_ENTRY_trim) ;
}

void HQ_LUT_ENTRY_PDU::set_trim(uint16 val)
{
    set_uint16(HQ_LUT_ENTRY_trim,val) ;
}

/*******************************************************************/


HQ_IQ_MATCH_PDU::HQ_IQ_MATCH_PDU( )
: HQ_PDU( (uint16)HQVARID_IQ_MATCH , HQ_IQ_MATCH_pduSize )
{
}

HQ_IQ_MATCH_PDU::HQ_IQ_MATCH_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_IQ_MATCH_PDU::HQ_IQ_MATCH_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_IQ_MATCH_PDU::get_index(void) const
{
    return get_uint16(HQ_IQ_MATCH_index) ;
}

void HQ_IQ_MATCH_PDU::set_index(uint16 val)
{
    set_uint16(HQ_IQ_MATCH_index,val) ;
}

uint16 HQ_IQ_MATCH_PDU::get_trim(void) const
{
    return get_uint16(HQ_IQ_MATCH_trim) ;
}

void HQ_IQ_MATCH_PDU::set_trim(uint16 val)
{
    set_uint16(HQ_IQ_MATCH_trim,val) ;
}

uint16 HQ_IQ_MATCH_PDU::get_rssi_chan(void) const
{
    return get_uint16(HQ_IQ_MATCH_rssi_chan) ;
}

void HQ_IQ_MATCH_PDU::set_rssi_chan(uint16 val)
{
    set_uint16(HQ_IQ_MATCH_rssi_chan,val) ;
}

uint16 HQ_IQ_MATCH_PDU::get_rssi_image(void) const
{
    return get_uint16(HQ_IQ_MATCH_rssi_image) ;
}

void HQ_IQ_MATCH_PDU::set_rssi_image(uint16 val)
{
    set_uint16(HQ_IQ_MATCH_rssi_image,val) ;
}

/*******************************************************************/


HQ_RADIO_STATUS_PDU::HQ_RADIO_STATUS_PDU( )
: HQ_PDU( (uint16)HQVARID_RADIO_STATUS , HQ_RADIO_STATUS_pduSize )
{
}

HQ_RADIO_STATUS_PDU::HQ_RADIO_STATUS_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_RADIO_STATUS_PDU::HQ_RADIO_STATUS_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_RADIO_STATUS_PDU::get_tx_lvl(void) const
{
    return get_uint16(HQ_RADIO_STATUS_tx_lvl) ;
}

void HQ_RADIO_STATUS_PDU::set_tx_lvl(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_tx_lvl,val) ;
}

uint16 HQ_RADIO_STATUS_PDU::get_tx_ext_lvl(void) const
{
    return get_uint16(HQ_RADIO_STATUS_tx_ext_lvl) ;
}

void HQ_RADIO_STATUS_PDU::set_tx_ext_lvl(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_tx_ext_lvl,val) ;
}

uint16 HQ_RADIO_STATUS_PDU::get_rx_lvl(void) const
{
    return get_uint16(HQ_RADIO_STATUS_rx_lvl) ;
}

void HQ_RADIO_STATUS_PDU::set_rx_lvl(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_rx_lvl,val) ;
}

uint16 HQ_RADIO_STATUS_PDU::get_lo_lvl(void) const
{
    return get_uint16(HQ_RADIO_STATUS_lo_lvl) ;
}

void HQ_RADIO_STATUS_PDU::set_lo_lvl(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_lo_lvl,val) ;
}

uint16 HQ_RADIO_STATUS_PDU::get_iq_trim(void) const
{
    return get_uint16(HQ_RADIO_STATUS_iq_trim) ;
}

void HQ_RADIO_STATUS_PDU::set_iq_trim(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_iq_trim,val) ;
}

uint16 HQ_RADIO_STATUS_PDU::get_sir(void) const
{
    return get_uint16(HQ_RADIO_STATUS_sir) ;
}

void HQ_RADIO_STATUS_PDU::set_sir(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_sir,val) ;
}

uint16 HQ_RADIO_STATUS_PDU::get_rx_atten(void) const
{
    return get_uint16(HQ_RADIO_STATUS_rx_atten) ;
}

void HQ_RADIO_STATUS_PDU::set_rx_atten(uint16 val)
{
    set_uint16(HQ_RADIO_STATUS_rx_atten,val) ;
}

/*******************************************************************/


HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU::HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU( )
: HQ_PDU( (uint16)HQVARID_CAPABILITY_DOWNLOAD_COMPLETE , HQ_CAPABILITY_DOWNLOAD_COMPLETE_pduSize )
{
}

HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU::HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU( const PDU& pdu )
: HQ_PDU(pdu)
{
}

HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU::HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU( const uint8* buffer , uint32 len )
: HQ_PDU( buffer , len )
{
}

uint16 HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU::get_data(void) const
{
    return get_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_data) ;
}

void HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU::set_data(uint16 val)
{
    set_uint16(HQ_CAPABILITY_DOWNLOAD_COMPLETE_data,val) ;
}

/*******************************************************************/


///////////////////////////////////////////////////////////////////////////////
//                Auto generated from hq_encode_pa.tpl                    //
///////////////////////////////////////////////////////////////////////////////
#include "hcipacker/legacy.h"

//  There is nothing to do with them, so why generate them like this?
//
HQ_PDU HCIPDUFactory::createHQ_PDU ( const uint32 * parameters )
{
    HQ_PDU pdu((const unsigned char *)0,0);
    if ( parameters && parameters[0] > 3 )
    {
        uint32 index = 3;
        switch ( parameters[3] )
        {
        case HQVARID_STIBBONS_U02:
            {
            HQ_STIBBONS_U02_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U03:
            {
            HQ_STIBBONS_U03_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U04:
            {
            HQ_STIBBONS_U04_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U05:
            {
            HQ_STIBBONS_U05_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U06:
            {
            HQ_STIBBONS_U06_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U07:
            {
            HQ_STIBBONS_U07_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U08:
            {
            HQ_STIBBONS_U08_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U09:
            {
            HQ_STIBBONS_U09_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C01:
            {
            HQ_STIBBONS_C01_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C02:
            {
            HQ_STIBBONS_C02_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_ESCO_REQ:
            {
            HQ_ESCO_REQ_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_sco_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pt_s2m ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pt_m2s ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_tesco ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_wesco ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_dsco ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C03:
            {
            HQ_STIBBONS_C03_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C04:
            {
            HQ_STIBBONS_C04_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C05:
            {
            HQ_STIBBONS_C05_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C06:
            {
            HQ_STIBBONS_C06_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C07:
            {
            HQ_STIBBONS_C07_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C08:
            {
            HQ_STIBBONS_C08_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C09:
            {
            HQ_STIBBONS_C09_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_FM_RDS_DATA:
            {
            HQ_FM_RDS_DATA_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_rds_data_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint16 lLen = HQ_FM_RDS_DATA_PDU::words_per_block * prim.get_rds_data_len();
                uint16 * lData = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint16) parameters[index];
                prim.set_rds_data ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case HQVARID_SNIFF_REQ:
            {
            HQ_SNIFF_REQ_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_t ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_d ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_attempts ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_timeout ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_RSSI:
            {
            HQ_RSSI_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_BOOTED:
            {
            HQ_BOOTED_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_EGPS_TIME_STAMP:
            {
            HQ_EGPS_TIME_STAMP_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_time ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_time_fine ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint8) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_NO_VARIABLE:
            {
            HQ_NO_VARIABLE_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U10:
            {
            HQ_STIBBONS_U10_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U11:
            {
            HQ_STIBBONS_U11_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_BIT_ERR:
            {
            HQ_BIT_ERR_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_index ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value_last ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value_tot ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U12:
            {
            HQ_STIBBONS_U12_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U13:
            {
            HQ_STIBBONS_U13_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_GPS_STATUS:
            {
            HQ_GPS_STATUS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U14:
            {
            HQ_STIBBONS_U14_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U15:
            {
            HQ_STIBBONS_U15_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_DELAYED_PANIC:
            {
            HQ_DELAYED_PANIC_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_U16:
            {
            HQ_STIBBONS_U16_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C10:
            {
            HQ_STIBBONS_C10_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_PROTOCOL_ERROR:
            {
            HQ_PROTOCOL_ERROR_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_layer ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_entity ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_error ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_info0 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_info1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_info2 ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C11:
            {
            HQ_STIBBONS_C11_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C12:
            {
            HQ_STIBBONS_C12_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C13:
            {
            HQ_STIBBONS_C13_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C14:
            {
            HQ_STIBBONS_C14_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_SCO_STREAM_HANDLES:
            {
            HQ_SCO_STREAM_HANDLES_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_sco_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_source_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sink_id ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C15:
            {
            HQ_STIBBONS_C15_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_STIBBONS_C16:
            {
            HQ_STIBBONS_C16_PDU prim ;
            pdu = prim;
            break;
            }
        case HQVARID_ACCEPT_TDI:
            {
            HQ_ACCEPT_TDI_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_t ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_d ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_attempts ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_timeout ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_event ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_FILTER_RESP:
            {
            HQ_FILTER_RESP_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_index ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rssi ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_ADC_RESULT:
            {
            HQ_ADC_RESULT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_result ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_channel ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_BLE_RADIO_TEST:
            {
            HQ_BLE_RADIO_TEST_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_RXPKTSTATS:
            {
            HQ_RXPKTSTATS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_n_pkts ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_n_good_pkts ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_n_correctable_pkts ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rssi ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rssi_valid ( (bool) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_MESSAGE_FROM_OPERATOR:
            {
            HQ_MESSAGE_FROM_OPERATOR_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_opid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint16 lLen = prim.get_msglen();
                uint16 * lData = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint16) parameters[index];
                prim.set_message ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case HQVARID_BER_TRIGGER:
            {
            HQ_BER_TRIGGER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_avg_ber ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_raw_ber ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_ber_threshold ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_DRAIN_CALIBRATE:
            {
            HQ_DRAIN_CALIBRATE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_awake_time ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sleep_time ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_half_slots ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_half_slots_pa ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_fm_radio ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_fm_tx_radio ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_fm_lo ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_RADIO_STATUS_ARRAY:
            {
            HQ_RADIO_STATUS_ARRAY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_index ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_SYNTH_SETTLE:
            {
            HQ_SYNTH_SETTLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_index ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_voltage ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_DSPMANAGER_DEBUG_INFO_B:
            {
            HQ_DSPMANAGER_DEBUG_INFO_B_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_time_us ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_msgid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_msglen ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint16 lLen = prim.get_msglen();
                uint16 * lData = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint16) parameters[index];
                prim.set_msg ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case HQVARID_FM_EVENT:
            {
            HQ_FM_EVENT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
		uint16 data[6];
                uint32 startdex = index;
                uint32 endex = index + 6;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    data[index-startdex] = (uint16) parameters[index];
                prim.set_reg_vals ( data );
	    }
            pdu = prim;
            break;
            }
        case HQVARID_FMTX_EVENT:
            {
            HQ_FMTX_EVENT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
		uint16 data[6];
                uint32 startdex = index;
                uint32 endex = index + 6;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    data[index-startdex] = (uint16) parameters[index];
                prim.set_reg_vals ( data );
	    }
            pdu = prim;
            break;
            }
        case HQVARID_FAULT:
            {
            HQ_FAULT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_f ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_t ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_n ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_LUT_ENTRY:
            {
            HQ_LUT_ENTRY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_index ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_trim ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_COEX_UART_MESSAGE:
            {
            HQ_COEX_UART_MESSAGE_PDU prim ;
            if ( ++index < parameters[0] )
            {
		uint16 data[8];
                uint32 startdex = index;
                uint32 endex = index + 8;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    data[index-startdex] = (uint16) parameters[index];
                prim.set_info ( data );
	    }
            pdu = prim;
            break;
            }
        case HQVARID_IQ_MATCH:
            {
            HQ_IQ_MATCH_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_index ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_trim ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rssi_chan ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rssi_image ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_RADIO_STATUS:
            {
            HQ_RADIO_STATUS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_tx_lvl ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_tx_ext_lvl ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rx_lvl ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_lo_lvl ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_iq_trim ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sir ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rx_atten ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case HQVARID_CAPABILITY_DOWNLOAD_COMPLETE:
            {
            HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        default: // this'll cause an error
            return HQ_PDU(PDU(PDU::zero));
            break;
        }
        pdu.set_req_type ( (uint16) parameters[1] );
        pdu.set_seq_no ( (uint16) parameters[2] );
    }
    if ( pdu.size() )
        return pdu;
    else
        return HQ_PDU(PDU(PDU::zero));
}

///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//               Auto generated from hqpdu_decode_pa.tpl                  //
///////////////////////////////////////////////////////////////////////////////

#include "hcipacker/legacy.h"
#include <cassert>

#ifdef _WIN32
#include <malloc.h>
#endif

uint32 HCIPDUFactory::decomposeHQ_PDU( const PDU& input , uint32 * parameters , BadPDUReason& failed )
{
#ifdef _WIN32
    /*
     * WARNING: _msize is only documentented to work using malloc, calloc, and realloc. It is not documented to work on new or new[] 
     *          but still works on Visual Studio 6. Linux should use valgrind if there are problems.
     *
     * Check that parameters[0] <= size of the allocated block.
	 */
	assert(parameters == 0 || _msize(parameters) >= parameters[0]);       
#endif

    uint32 length = 4;
    HQ_PDU prim ( input );

    //  Sanity checks
    if ( prim.get_req_type() != HQPDU_SETREQ && prim.get_req_type() != HQPDU_GETREQ )
    {
        failed = BP_WRONG_TYPE;
	return 0;
    }
    if ( prim.size() < prim.minimum_bytes )
    {
        failed = BP_PC_TOO_SMALL;
	return 0;
    }
    if ( ( prim.get_length() * sizeof (uint16) / sizeof(uint8) ) > prim.size() )
    {
        failed = BP_OUT_OF_DATA;
	return 0;
    }
    if ( parameters )
    {
        //  length and type:
        assert ( prim.get_req_type() == HQPDU_SETREQ || prim.get_req_type() == HQPDU_GETREQ );
        assert ( ( prim.get_length() * sizeof (uint16) / sizeof(uint8) ) == prim.size() );
        //  application useful data:
        parameters[1] = prim.get_varid();
        parameters[2] = prim.get_seq_no();
        parameters[3] = prim.get_status();
    }
    switch ( prim.get_varid() )
    {
    case HQVARID_STIBBONS_U02:
        {
        HQ_STIBBONS_U02_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U03:
        {
        HQ_STIBBONS_U03_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U04:
        {
        HQ_STIBBONS_U04_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U05:
        {
        HQ_STIBBONS_U05_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U06:
        {
        HQ_STIBBONS_U06_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U07:
        {
        HQ_STIBBONS_U07_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U08:
        {
        HQ_STIBBONS_U08_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U09:
        {
        HQ_STIBBONS_U09_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_C01:
        {
        HQ_STIBBONS_C01_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C02:
        {
        HQ_STIBBONS_C02_PDU pdu ( prim );
        }
        break;
    case HQVARID_ESCO_REQ:
        {
        HQ_ESCO_REQ_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_sco_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pt_s2m();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pt_m2s();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_tesco();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_wesco();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_dsco();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_C03:
        {
        HQ_STIBBONS_C03_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C04:
        {
        HQ_STIBBONS_C04_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C05:
        {
        HQ_STIBBONS_C05_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C06:
        {
        HQ_STIBBONS_C06_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C07:
        {
        HQ_STIBBONS_C07_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C08:
        {
        HQ_STIBBONS_C08_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C09:
        {
        HQ_STIBBONS_C09_PDU pdu ( prim );
        }
        break;
    case HQVARID_FM_RDS_DATA:
        {
        HQ_FM_RDS_DATA_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_rds_data_len();
        length ++;
        if ( parameters )
        {
            uint16 lLen = HQ_FM_RDS_DATA_PDU::words_per_block * pdu.get_rds_data_len();
            uint16 * lData = new uint16[lLen];
            pdu.get_rds_data ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += HQ_FM_RDS_DATA_PDU::words_per_block * pdu.get_rds_data_len();
        }
        break;
    case HQVARID_SNIFF_REQ:
        {
        HQ_SNIFF_REQ_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_t();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_d();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_attempts();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_timeout();
        length ++;
        }
        break;
    case HQVARID_RSSI:
        {
        HQ_RSSI_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_BOOTED:
        {
        HQ_BOOTED_PDU pdu ( prim );
        }
        break;
    case HQVARID_EGPS_TIME_STAMP:
        {
        HQ_EGPS_TIME_STAMP_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_time();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_time_fine();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        }
        break;
    case HQVARID_NO_VARIABLE:
        {
        HQ_NO_VARIABLE_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_U10:
        {
        HQ_STIBBONS_U10_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U11:
        {
        HQ_STIBBONS_U11_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_BIT_ERR:
        {
        HQ_BIT_ERR_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_index();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value_last();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value_tot();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U12:
        {
        HQ_STIBBONS_U12_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U13:
        {
        HQ_STIBBONS_U13_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_GPS_STATUS:
        {
        HQ_GPS_STATUS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U14:
        {
        HQ_STIBBONS_U14_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U15:
        {
        HQ_STIBBONS_U15_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_DELAYED_PANIC:
        {
        HQ_DELAYED_PANIC_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_U16:
        {
        HQ_STIBBONS_U16_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_C10:
        {
        HQ_STIBBONS_C10_PDU pdu ( prim );
        }
        break;
    case HQVARID_PROTOCOL_ERROR:
        {
        HQ_PROTOCOL_ERROR_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_layer();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_entity();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_error();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_info0();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_info1();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_info2();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_C11:
        {
        HQ_STIBBONS_C11_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C12:
        {
        HQ_STIBBONS_C12_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C13:
        {
        HQ_STIBBONS_C13_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C14:
        {
        HQ_STIBBONS_C14_PDU pdu ( prim );
        }
        break;
    case HQVARID_SCO_STREAM_HANDLES:
        {
        HQ_SCO_STREAM_HANDLES_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_sco_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_source_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sink_id();
        length ++;
        }
        break;
    case HQVARID_STIBBONS_C15:
        {
        HQ_STIBBONS_C15_PDU pdu ( prim );
        }
        break;
    case HQVARID_STIBBONS_C16:
        {
        HQ_STIBBONS_C16_PDU pdu ( prim );
        }
        break;
    case HQVARID_ACCEPT_TDI:
        {
        HQ_ACCEPT_TDI_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_t();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_d();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_attempts();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_timeout();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_event();
        length ++;
        }
        break;
    case HQVARID_FILTER_RESP:
        {
        HQ_FILTER_RESP_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_index();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_freq();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rssi();
        length ++;
        }
        break;
    case HQVARID_ADC_RESULT:
        {
        HQ_ADC_RESULT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_channel();
        length ++;
        }
        break;
    case HQVARID_BLE_RADIO_TEST:
        {
        HQ_BLE_RADIO_TEST_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case HQVARID_RXPKTSTATS:
        {
        HQ_RXPKTSTATS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_n_pkts();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_n_good_pkts();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_n_correctable_pkts();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rssi();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rssi_valid();
        length ++;
        }
        break;
    case HQVARID_MESSAGE_FROM_OPERATOR:
        {
        HQ_MESSAGE_FROM_OPERATOR_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_opid();
        length ++;
        if ( parameters )
        {
            uint16 lLen = pdu.get_msglen();
            uint16 * lData = new uint16[lLen];
            pdu.get_message ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += pdu.get_msglen();
        }
        break;
    case HQVARID_BER_TRIGGER:
        {
        HQ_BER_TRIGGER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_avg_ber();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_raw_ber();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_ber_threshold();
        length ++;
        }
        break;
    case HQVARID_DRAIN_CALIBRATE:
        {
        HQ_DRAIN_CALIBRATE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_awake_time();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sleep_time();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_half_slots();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_half_slots_pa();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_fm_radio();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_fm_tx_radio();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_fm_lo();
        length ++;
        }
        break;
    case HQVARID_RADIO_STATUS_ARRAY:
        {
        HQ_RADIO_STATUS_ARRAY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_index();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case HQVARID_SYNTH_SETTLE:
        {
        HQ_SYNTH_SETTLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_index();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_voltage();
        length ++;
        }
        break;
    case HQVARID_DSPMANAGER_DEBUG_INFO_B:
        {
        HQ_DSPMANAGER_DEBUG_INFO_B_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_time_us();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_msgid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_msglen();
        length ++;
        if ( parameters )
        {
            uint16 lLen = pdu.get_msglen();
            uint16 * lData = new uint16[lLen];
            pdu.get_msg ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += pdu.get_msglen();
        }
        break;
    case HQVARID_FM_EVENT:
        {
        HQ_FM_EVENT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        if ( parameters )
        {
	    uint16 data[6];
            pdu.get_reg_vals ( data );
            for ( uint32 i = 0; i < 6 && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = data[i];
	}
        length += 6;
        }
        break;
    case HQVARID_FMTX_EVENT:
        {
        HQ_FMTX_EVENT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        if ( parameters )
        {
	    uint16 data[6];
            pdu.get_reg_vals ( data );
            for ( uint32 i = 0; i < 6 && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = data[i];
	}
        length += 6;
        }
        break;
    case HQVARID_FAULT:
        {
        HQ_FAULT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_f();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_t();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_n();
        length ++;
        }
        break;
    case HQVARID_LUT_ENTRY:
        {
        HQ_LUT_ENTRY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_index();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_trim();
        length ++;
        }
        break;
    case HQVARID_COEX_UART_MESSAGE:
        {
        HQ_COEX_UART_MESSAGE_PDU pdu ( prim );
        if ( parameters )
        {
	    uint16 data[8];
            pdu.get_info ( data );
            for ( uint32 i = 0; i < 8 && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = data[i];
	}
        length += 8;
        }
        break;
    case HQVARID_IQ_MATCH:
        {
        HQ_IQ_MATCH_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_index();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_trim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rssi_chan();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rssi_image();
        length ++;
        }
        break;
    case HQVARID_RADIO_STATUS:
        {
        HQ_RADIO_STATUS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_tx_lvl();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_tx_ext_lvl();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rx_lvl();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_lo_lvl();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_iq_trim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sir();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rx_atten();
        length ++;
        }
        break;
    case HQVARID_CAPABILITY_DOWNLOAD_COMPLETE:
        {
        HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    default:
        //  failed = BP_NO_SUCH_VARID;
        //  pass up all the data as an array of uint16s.
        length += prim.get_payload_length();
        if ( parameters )
        {
            uint16 pl = prim.get_payload_length();
            uint16 * data = new uint16[pl];
            prim.get_payload(data,pl);
            for ( int i = 0 ; i < pl ; i++ )
                parameters[4+i] = data[i];
            delete[] data;
        }
        break;
    }
    assert ( ( parameters == 0 ) || ( parameters[0] >= length ) );
    if ( parameters )
        parameters[0] = length;
    return length;
}

///////////////////////////////////////////////////////////////////////////////
