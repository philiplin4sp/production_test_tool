////////////////////////////////////////////////////////////////////////////////
//
//  WARNING THIS IS AN AUTOGENERATED FILE DEFINING A BLUECORE-FRIENDY PROTOCOL
//
////////////////////////////////////////////////////////////////////////////////

#include "bcflayout.h"


enum {
	OFFSET_START(BCCMD_MAP_SCO_WBS)
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_req_type),
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_wordlength),
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_seq_no),
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_varid),
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_status),
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_source_sid),
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_sink_sid),
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_dummy2),
	OFFSET_uint16(BCCMD_MAP_SCO_WBS_dummy3),
	BCCMD_MAP_SCO_WBS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BLE_ADV_FILT_CLEAR)
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_req_type),
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_wordlength),
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_seq_no),
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_varid),
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_status),
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_dummy),
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_dummy1),
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_dummy2),
	OFFSET_uint16(BCCMD_BLE_ADV_FILT_CLEAR_dummy3),
	BCCMD_BLE_ADV_FILT_CLEAR_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U10)
	OFFSET_uint16(BCCMD_STIBBONS_U10_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U10_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U10_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U10_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U10_status),
	OFFSET_uint16(BCCMD_STIBBONS_U10_data),
	OFFSET_uint16(BCCMD_STIBBONS_U10_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U10_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U10_dummy3),
	BCCMD_STIBBONS_U10_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U11)
	OFFSET_uint16(BCCMD_STIBBONS_U11_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U11_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U11_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U11_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U11_status),
	OFFSET_uint16(BCCMD_STIBBONS_U11_data),
	OFFSET_uint16(BCCMD_STIBBONS_U11_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U11_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U11_dummy3),
	BCCMD_STIBBONS_U11_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U12)
	OFFSET_uint16(BCCMD_STIBBONS_U12_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U12_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U12_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U12_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U12_status),
	OFFSET_uint16(BCCMD_STIBBONS_U12_data),
	OFFSET_uint16(BCCMD_STIBBONS_U12_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U12_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U12_dummy3),
	BCCMD_STIBBONS_U12_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U13)
	OFFSET_uint16(BCCMD_STIBBONS_U13_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U13_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U13_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U13_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U13_status),
	OFFSET_uint16(BCCMD_STIBBONS_U13_data),
	OFFSET_uint16(BCCMD_STIBBONS_U13_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U13_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U13_dummy3),
	BCCMD_STIBBONS_U13_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U14)
	OFFSET_uint16(BCCMD_STIBBONS_U14_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U14_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U14_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U14_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U14_status),
	OFFSET_uint16(BCCMD_STIBBONS_U14_data),
	OFFSET_uint16(BCCMD_STIBBONS_U14_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U14_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U14_dummy3),
	BCCMD_STIBBONS_U14_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U15)
	OFFSET_uint16(BCCMD_STIBBONS_U15_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U15_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U15_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U15_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U15_status),
	OFFSET_uint16(BCCMD_STIBBONS_U15_data),
	OFFSET_uint16(BCCMD_STIBBONS_U15_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U15_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U15_dummy3),
	BCCMD_STIBBONS_U15_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U16)
	OFFSET_uint16(BCCMD_STIBBONS_U16_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U16_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U16_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U16_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U16_status),
	OFFSET_uint16(BCCMD_STIBBONS_U16_data),
	OFFSET_uint16(BCCMD_STIBBONS_U16_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U16_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U16_dummy3),
	BCCMD_STIBBONS_U16_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PCM_RATE_AND_ROUTE)
	OFFSET_uint16(BCCMD_PCM_RATE_AND_ROUTE_req_type),
	OFFSET_uint16(BCCMD_PCM_RATE_AND_ROUTE_wordlength),
	OFFSET_uint16(BCCMD_PCM_RATE_AND_ROUTE_seq_no),
	OFFSET_uint16(BCCMD_PCM_RATE_AND_ROUTE_varid),
	OFFSET_uint16(BCCMD_PCM_RATE_AND_ROUTE_status),
	OFFSET_uint16(BCCMD_PCM_RATE_AND_ROUTE_port_id),
	OFFSET_uint16(BCCMD_PCM_RATE_AND_ROUTE_sync_port),
	OFFSET_uint16(BCCMD_PCM_RATE_AND_ROUTE_io_type),
	OFFSET_uint32(BCCMD_PCM_RATE_AND_ROUTE_read_rate),
	OFFSET_uint32(BCCMD_PCM_RATE_AND_ROUTE_write_rate),
	BCCMD_PCM_RATE_AND_ROUTE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_VM_STATUS)
	OFFSET_uint16(BCCMD_VM_STATUS_req_type),
	OFFSET_uint16(BCCMD_VM_STATUS_wordlength),
	OFFSET_uint16(BCCMD_VM_STATUS_seq_no),
	OFFSET_uint16(BCCMD_VM_STATUS_varid),
	OFFSET_uint16(BCCMD_VM_STATUS_status),
	OFFSET_uint16(BCCMD_VM_STATUS_vmstatus),
	OFFSET_uint16(BCCMD_VM_STATUS_exit_code),
	OFFSET_uint16(BCCMD_VM_STATUS_dummy2),
	OFFSET_uint16(BCCMD_VM_STATUS_dummy3),
	BCCMD_VM_STATUS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COEX_ENABLE)
	OFFSET_uint16(BCCMD_COEX_ENABLE_req_type),
	OFFSET_uint16(BCCMD_COEX_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_COEX_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_COEX_ENABLE_varid),
	OFFSET_uint16(BCCMD_COEX_ENABLE_status),
	OFFSET_uint16(BCCMD_COEX_ENABLE_data),
	OFFSET_uint16(BCCMD_COEX_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_COEX_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_COEX_ENABLE_dummy3),
	BCCMD_COEX_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_MIC_BIAS_CTRL)
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_req_type),
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_wordlength),
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_seq_no),
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_varid),
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_status),
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_enable),
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_current),
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_voltage),
	OFFSET_uint16(BCCMD_MIC_BIAS_CTRL_enable_mic_bias_low_power_mode),
	BCCMD_MIC_BIAS_CTRL_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BABEL_SPI_RESET_AND_GO)
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_req_type),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_wordlength),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_seq_no),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_varid),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_status),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_dummy),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_dummy1),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_dummy2),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_GO_dummy3),
	BCCMD_BABEL_SPI_RESET_AND_GO_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSCLR)
	OFFSET_uint16(BCCMD_PSCLR_req_type),
	OFFSET_uint16(BCCMD_PSCLR_wordlength),
	OFFSET_uint16(BCCMD_PSCLR_seq_no),
	OFFSET_uint16(BCCMD_PSCLR_varid),
	OFFSET_uint16(BCCMD_PSCLR_status),
	OFFSET_uint16(BCCMD_PSCLR_data),
	OFFSET_uint16(BCCMD_PSCLR_dummy1),
	OFFSET_uint16(BCCMD_PSCLR_dummy2),
	OFFSET_uint16(BCCMD_PSCLR_dummy3),
	BCCMD_PSCLR_pduSize
} ;

enum {
	OFFSET_START(BCCMD_AFH_CHANNEL_RELEASE_TIME)
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_req_type),
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_wordlength),
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_seq_no),
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_varid),
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_status),
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_data),
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_dummy1),
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_dummy2),
	OFFSET_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_dummy3),
	BCCMD_AFH_CHANNEL_RELEASE_TIME_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CONFIG_UART)
	OFFSET_uint16(BCCMD_CONFIG_UART_req_type),
	OFFSET_uint16(BCCMD_CONFIG_UART_wordlength),
	OFFSET_uint16(BCCMD_CONFIG_UART_seq_no),
	OFFSET_uint16(BCCMD_CONFIG_UART_varid),
	OFFSET_uint16(BCCMD_CONFIG_UART_status),
	OFFSET_uint16(BCCMD_CONFIG_UART_data),
	OFFSET_uint16(BCCMD_CONFIG_UART_dummy1),
	OFFSET_uint16(BCCMD_CONFIG_UART_dummy2),
	OFFSET_uint16(BCCMD_CONFIG_UART_dummy3),
	BCCMD_CONFIG_UART_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHARGER_SET_TRIM_NOW)
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_req_type),
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_wordlength),
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_seq_no),
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_varid),
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_status),
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_data),
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_dummy1),
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_dummy2),
	OFFSET_uint16(BCCMD_CHARGER_SET_TRIM_NOW_dummy3),
	BCCMD_CHARGER_SET_TRIM_NOW_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHARGER_DISABLE)
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_req_type),
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_wordlength),
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_seq_no),
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_varid),
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_status),
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_data),
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_dummy1),
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_dummy2),
	OFFSET_uint16(BCCMD_CHARGER_DISABLE_dummy3),
	BCCMD_CHARGER_DISABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BUILDID_LOADER)
	OFFSET_uint16(BCCMD_BUILDID_LOADER_req_type),
	OFFSET_uint16(BCCMD_BUILDID_LOADER_wordlength),
	OFFSET_uint16(BCCMD_BUILDID_LOADER_seq_no),
	OFFSET_uint16(BCCMD_BUILDID_LOADER_varid),
	OFFSET_uint16(BCCMD_BUILDID_LOADER_status),
	OFFSET_uint16(BCCMD_BUILDID_LOADER_data),
	OFFSET_uint16(BCCMD_BUILDID_LOADER_dummy1),
	OFFSET_uint16(BCCMD_BUILDID_LOADER_dummy2),
	OFFSET_uint16(BCCMD_BUILDID_LOADER_dummy3),
	BCCMD_BUILDID_LOADER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_EXT_CLOCK_PERIOD)
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_req_type),
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_wordlength),
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_seq_no),
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_varid),
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_status),
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_data),
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_dummy1),
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_dummy2),
	OFFSET_uint16(BCCMD_EXT_CLOCK_PERIOD_dummy3),
	BCCMD_EXT_CLOCK_PERIOD_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FMTX_REG)
	OFFSET_uint16(BCCMD_FMTX_REG_req_type),
	OFFSET_uint16(BCCMD_FMTX_REG_wordlength),
	OFFSET_uint16(BCCMD_FMTX_REG_seq_no),
	OFFSET_uint16(BCCMD_FMTX_REG_varid),
	OFFSET_uint16(BCCMD_FMTX_REG_status),
	OFFSET_uint8(BCCMD_FMTX_REG_fmtx_register),
	OFFSET_uint16(BCCMD_FMTX_REG_value),
	OFFSET_uint16(BCCMD_FMTX_REG_dummy2),
	OFFSET_uint16(BCCMD_FMTX_REG_dummy3),
	BCCMD_FMTX_REG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADCRES)
	OFFSET_uint16(BCCMD_ADCRES_req_type),
	OFFSET_uint16(BCCMD_ADCRES_wordlength),
	OFFSET_uint16(BCCMD_ADCRES_seq_no),
	OFFSET_uint16(BCCMD_ADCRES_varid),
	OFFSET_uint16(BCCMD_ADCRES_status),
	OFFSET_uint16(BCCMD_ADCRES_channel),
	OFFSET_bool(BCCMD_ADCRES_valid),
	OFFSET_uint16(BCCMD_ADCRES_result),
	OFFSET_uint16(BCCMD_ADCRES_dummy3),
	BCCMD_ADCRES_pduSize
} ;

enum {
	OFFSET_START(BCCMD_VM_DEBUG)
	OFFSET_uint16(BCCMD_VM_DEBUG_req_type),
	OFFSET_uint16(BCCMD_VM_DEBUG_wordlength),
	OFFSET_uint16(BCCMD_VM_DEBUG_seq_no),
	OFFSET_uint16(BCCMD_VM_DEBUG_varid),
	OFFSET_uint16(BCCMD_VM_DEBUG_status),
	OFFSET_uint16(BCCMD_VM_DEBUG_function),
	OFFSET_uint16(BCCMD_VM_DEBUG_dummy1),
	OFFSET_uint16(BCCMD_VM_DEBUG_dummy2),
	OFFSET_uint16(BCCMD_VM_DEBUG_dummy3),
	BCCMD_VM_DEBUG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO_PROTECT_MASK)
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_req_type),
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_wordlength),
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_seq_no),
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_varid),
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_status),
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_data),
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_dummy1),
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_dummy2),
	OFFSET_uint16(BCCMD_PIO_PROTECT_MASK_dummy3),
	BCCMD_PIO_PROTECT_MASK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SCATTERNET_OVERRIDE_SCO)
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_req_type),
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_wordlength),
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_seq_no),
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_varid),
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_status),
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_data),
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_dummy1),
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_dummy2),
	OFFSET_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_dummy3),
	BCCMD_SCATTERNET_OVERRIDE_SCO_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_TRANSACTION_COMPLETE)
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_req_type),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_wordlength),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_seq_no),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_varid),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_status),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_dummy),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_dummy1),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_dummy2),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_COMPLETE_dummy3),
	BCCMD_STREAM_TRANSACTION_COMPLETE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_GSM_RX_ARFCN)
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_req_type),
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_wordlength),
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_seq_no),
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_varid),
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_status),
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_data),
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_dummy1),
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_dummy2),
	OFFSET_uint16(BCCMD_GSM_RX_ARFCN_dummy3),
	BCCMD_GSM_RX_ARFCN_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PS_FACTORY_SET)
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_req_type),
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_wordlength),
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_seq_no),
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_varid),
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_status),
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_dummy),
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_dummy1),
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_dummy2),
	OFFSET_uint16(BCCMD_PS_FACTORY_SET_dummy3),
	BCCMD_PS_FACTORY_SET_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SPI_LOCK_INITIATE_LOCK)
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_req_type),
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_wordlength),
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_seq_no),
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_varid),
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_status),
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_dummy),
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_dummy1),
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_dummy2),
	OFFSET_uint16(BCCMD_SPI_LOCK_INITIATE_LOCK_dummy3),
	BCCMD_SPI_LOCK_INITIATE_LOCK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO_DIRECTION_MASK)
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_req_type),
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_wordlength),
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_seq_no),
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_varid),
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_status),
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_data),
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_dummy1),
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_dummy2),
	OFFSET_uint16(BCCMD_PIO_DIRECTION_MASK_dummy3),
	BCCMD_PIO_DIRECTION_MASK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_AUX_DAC_ENABLE)
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_req_type),
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_varid),
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_status),
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_data),
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_AUX_DAC_ENABLE_dummy3),
	BCCMD_AUX_DAC_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHIPANAVER)
	OFFSET_uint16(BCCMD_CHIPANAVER_req_type),
	OFFSET_uint16(BCCMD_CHIPANAVER_wordlength),
	OFFSET_uint16(BCCMD_CHIPANAVER_seq_no),
	OFFSET_uint16(BCCMD_CHIPANAVER_varid),
	OFFSET_uint16(BCCMD_CHIPANAVER_status),
	OFFSET_uint16(BCCMD_CHIPANAVER_data),
	OFFSET_uint16(BCCMD_CHIPANAVER_dummy1),
	OFFSET_uint16(BCCMD_CHIPANAVER_dummy2),
	OFFSET_uint16(BCCMD_CHIPANAVER_dummy3),
	BCCMD_CHIPANAVER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ACTIVATE_BT_STACK)
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_req_type),
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_wordlength),
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_seq_no),
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_varid),
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_status),
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_dummy),
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_dummy1),
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_dummy2),
	OFFSET_uint16(BCCMD_ACTIVATE_BT_STACK_dummy3),
	BCCMD_ACTIVATE_BT_STACK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSCLRALL)
	OFFSET_uint16(BCCMD_PSCLRALL_req_type),
	OFFSET_uint16(BCCMD_PSCLRALL_wordlength),
	OFFSET_uint16(BCCMD_PSCLRALL_seq_no),
	OFFSET_uint16(BCCMD_PSCLRALL_varid),
	OFFSET_uint16(BCCMD_PSCLRALL_status),
	OFFSET_uint16(BCCMD_PSCLRALL_dummy),
	OFFSET_uint16(BCCMD_PSCLRALL_dummy1),
	OFFSET_uint16(BCCMD_PSCLRALL_dummy2),
	OFFSET_uint16(BCCMD_PSCLRALL_dummy3),
	BCCMD_PSCLRALL_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BLE_T_IFS)
	OFFSET_uint16(BCCMD_BLE_T_IFS_req_type),
	OFFSET_uint16(BCCMD_BLE_T_IFS_wordlength),
	OFFSET_uint16(BCCMD_BLE_T_IFS_seq_no),
	OFFSET_uint16(BCCMD_BLE_T_IFS_varid),
	OFFSET_uint16(BCCMD_BLE_T_IFS_status),
	OFFSET_uint16(BCCMD_BLE_T_IFS_data),
	OFFSET_uint16(BCCMD_BLE_T_IFS_dummy1),
	OFFSET_uint16(BCCMD_BLE_T_IFS_dummy2),
	OFFSET_uint16(BCCMD_BLE_T_IFS_dummy3),
	BCCMD_BLE_T_IFS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FM_AUDIO_ROUTING)
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_req_type),
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_wordlength),
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_seq_no),
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_varid),
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_status),
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_data),
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_dummy1),
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_dummy2),
	OFFSET_uint16(BCCMD_FM_AUDIO_ROUTING_dummy3),
	BCCMD_FM_AUDIO_ROUTING_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FASTPIPE_ENABLE)
	OFFSET_uint16(BCCMD_FASTPIPE_ENABLE_req_type),
	OFFSET_uint16(BCCMD_FASTPIPE_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_FASTPIPE_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_FASTPIPE_ENABLE_varid),
	OFFSET_uint16(BCCMD_FASTPIPE_ENABLE_status),
	OFFSET_uint32(BCCMD_FASTPIPE_ENABLE_limit_host),
	OFFSET_uint16(BCCMD_FASTPIPE_ENABLE_result),
	OFFSET_uint16(BCCMD_FASTPIPE_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_FASTPIPE_ENABLE_dummy3),
	BCCMD_FASTPIPE_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COEX_SYNC_PERIOD)
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_req_type),
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_wordlength),
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_seq_no),
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_varid),
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_status),
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_data),
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_dummy1),
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_dummy2),
	OFFSET_uint16(BCCMD_COEX_SYNC_PERIOD_dummy3),
	BCCMD_COEX_SYNC_PERIOD_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PICONET_INSTANT)
	OFFSET_uint16(BCCMD_PICONET_INSTANT_req_type),
	OFFSET_uint16(BCCMD_PICONET_INSTANT_wordlength),
	OFFSET_uint16(BCCMD_PICONET_INSTANT_seq_no),
	OFFSET_uint16(BCCMD_PICONET_INSTANT_varid),
	OFFSET_uint16(BCCMD_PICONET_INSTANT_status),
	OFFSET_uint16(BCCMD_PICONET_INSTANT_hci_handle),
	OFFSET_uint32(BCCMD_PICONET_INSTANT_h_instant),
	OFFSET_uint16(BCCMD_PICONET_INSTANT_dummy3),
	BCCMD_PICONET_INSTANT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CAPSENSE_RT_PADS)
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_req_type),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_wordlength),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_seq_no),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_varid),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_status),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_pad_sel),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_num_pads_board),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_shield),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap0),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap1),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap2),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap3),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap4),
	OFFSET_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap5),
	BCCMD_CAPSENSE_RT_PADS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SNIFF_MULTISLOT_ENABLE)
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_req_type),
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_varid),
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_status),
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_data),
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_dummy3),
	BCCMD_SNIFF_MULTISLOT_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RECAL)
	OFFSET_uint16(BCCMD_RECAL_req_type),
	OFFSET_uint16(BCCMD_RECAL_wordlength),
	OFFSET_uint16(BCCMD_RECAL_seq_no),
	OFFSET_uint16(BCCMD_RECAL_varid),
	OFFSET_uint16(BCCMD_RECAL_status),
	OFFSET_uint16(BCCMD_RECAL_dummy),
	OFFSET_uint16(BCCMD_RECAL_dummy1),
	OFFSET_uint16(BCCMD_RECAL_dummy2),
	OFFSET_uint16(BCCMD_RECAL_dummy3),
	BCCMD_RECAL_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSU_HV_LINEAR_ENABLE)
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_req_type),
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_varid),
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_status),
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_data),
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_dummy3),
	BCCMD_PSU_HV_LINEAR_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_TRANSFORM_DISCONNECT)
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_req_type),
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_wordlength),
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_seq_no),
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_varid),
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_status),
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_data),
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_dummy1),
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_dummy2),
	OFFSET_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_dummy3),
	BCCMD_STREAM_TRANSFORM_DISCONNECT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FAULT_ARG)
	OFFSET_uint16(BCCMD_FAULT_ARG_req_type),
	OFFSET_uint16(BCCMD_FAULT_ARG_wordlength),
	OFFSET_uint16(BCCMD_FAULT_ARG_seq_no),
	OFFSET_uint16(BCCMD_FAULT_ARG_varid),
	OFFSET_uint16(BCCMD_FAULT_ARG_status),
	OFFSET_uint16(BCCMD_FAULT_ARG_data),
	OFFSET_uint16(BCCMD_FAULT_ARG_dummy1),
	OFFSET_uint16(BCCMD_FAULT_ARG_dummy2),
	OFFSET_uint16(BCCMD_FAULT_ARG_dummy3),
	BCCMD_FAULT_ARG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RECLAIM_RAM_RESERVE)
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_req_type),
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_wordlength),
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_seq_no),
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_varid),
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_status),
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_type),
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_value),
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_dummy2),
	OFFSET_uint16(BCCMD_RECLAIM_RAM_RESERVE_dummy3),
	BCCMD_RECLAIM_RAM_RESERVE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_LC_FRAC_COUNT)
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_req_type),
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_wordlength),
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_seq_no),
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_varid),
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_status),
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_data),
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_dummy1),
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_dummy2),
	OFFSET_uint16(BCCMD_LC_FRAC_COUNT_dummy3),
	BCCMD_LC_FRAC_COUNT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_MAX_TX_POWER)
	OFFSET_uint16(BCCMD_MAX_TX_POWER_req_type),
	OFFSET_uint16(BCCMD_MAX_TX_POWER_wordlength),
	OFFSET_uint16(BCCMD_MAX_TX_POWER_seq_no),
	OFFSET_uint16(BCCMD_MAX_TX_POWER_varid),
	OFFSET_uint16(BCCMD_MAX_TX_POWER_status),
	OFFSET_uint16(BCCMD_MAX_TX_POWER_data),
	OFFSET_uint16(BCCMD_MAX_TX_POWER_dummy1),
	OFFSET_uint16(BCCMD_MAX_TX_POWER_dummy2),
	OFFSET_uint16(BCCMD_MAX_TX_POWER_dummy3),
	BCCMD_MAX_TX_POWER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COASTER_ADD_SV)
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_req_type),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_wordlength),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_seq_no),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_varid),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_status),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_num_entries),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_uSecs),
	OFFSET_uint8(BCCMD_COASTER_ADD_SV_uSec80ths),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_code_doppler),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_code_shift),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_carrier_doppler),
	OFFSET_uint8(BCCMD_COASTER_ADD_SV_data_transition),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_satid_prn),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_e1_dummy),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e1_uSecs),
	OFFSET_uint8(BCCMD_COASTER_ADD_SV_e1_uSec80ths),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e1_code_doppler),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e1_code_shift),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e1_carrier_doppler),
	OFFSET_uint8(BCCMD_COASTER_ADD_SV_e1_data_transition),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_e1_satid_prn),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_e2_dummy),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e2_uSecs),
	OFFSET_uint8(BCCMD_COASTER_ADD_SV_e2_uSec80ths),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e2_code_doppler),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e2_code_shift),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e2_carrier_doppler),
	OFFSET_uint8(BCCMD_COASTER_ADD_SV_e2_data_transition),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_e2_satid_prn),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_e3_dummy),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e3_uSecs),
	OFFSET_uint8(BCCMD_COASTER_ADD_SV_e3_uSec80ths),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e3_code_doppler),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e3_code_shift),
	OFFSET_uint32(BCCMD_COASTER_ADD_SV_e3_carrier_doppler),
	OFFSET_uint8(BCCMD_COASTER_ADD_SV_e3_data_transition),
	OFFSET_uint16(BCCMD_COASTER_ADD_SV_e3_satid_prn),
	BCCMD_COASTER_ADD_SV_pduSize
} ;

enum {
	OFFSET_START(BCCMD_DEEP_SLEEP_TIME)
	OFFSET_uint16(BCCMD_DEEP_SLEEP_TIME_req_type),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_TIME_wordlength),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_TIME_seq_no),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_TIME_varid),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_TIME_status),
	OFFSET_uint32(BCCMD_DEEP_SLEEP_TIME_data),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_TIME_dummy1),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_TIME_dummy2),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_TIME_dummy3),
	BCCMD_DEEP_SLEEP_TIME_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BLE_WHITELIST_FREE_SPACE)
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_req_type),
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_wordlength),
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_seq_no),
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_varid),
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_status),
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_data),
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_dummy1),
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_dummy2),
	OFFSET_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_dummy3),
	BCCMD_BLE_WHITELIST_FREE_SPACE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BABEL_SPI_RESET_AND_STOP)
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_req_type),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_wordlength),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_seq_no),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_varid),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_status),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_dummy),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_dummy1),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_dummy2),
	OFFSET_uint16(BCCMD_BABEL_SPI_RESET_AND_STOP_dummy3),
	BCCMD_BABEL_SPI_RESET_AND_STOP_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RDF_DATA_CAPTURE_ENABLE)
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_req_type),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_varid),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_status),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_modes),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_timer_delay),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_nsams),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_nap),
	OFFSET_uint8(BCCMD_RDF_DATA_CAPTURE_ENABLE_uap),
	OFFSET_uint32(BCCMD_RDF_DATA_CAPTURE_ENABLE_lap),
	BCCMD_RDF_DATA_CAPTURE_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CACHED_TEMPERATURE)
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_req_type),
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_wordlength),
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_seq_no),
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_varid),
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_status),
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_data),
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_dummy1),
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_dummy2),
	OFFSET_uint16(BCCMD_CACHED_TEMPERATURE_dummy3),
	BCCMD_CACHED_TEMPERATURE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COEX_PRIORITY_PIOS_ON)
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_req_type),
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_wordlength),
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_seq_no),
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_varid),
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_status),
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_data),
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_dummy1),
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_dummy2),
	OFFSET_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_dummy3),
	BCCMD_COEX_PRIORITY_PIOS_ON_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FM_REG)
	OFFSET_uint16(BCCMD_FM_REG_req_type),
	OFFSET_uint16(BCCMD_FM_REG_wordlength),
	OFFSET_uint16(BCCMD_FM_REG_seq_no),
	OFFSET_uint16(BCCMD_FM_REG_varid),
	OFFSET_uint16(BCCMD_FM_REG_status),
	OFFSET_uint8(BCCMD_FM_REG_fm_register),
	OFFSET_uint16(BCCMD_FM_REG_value),
	OFFSET_uint16(BCCMD_FM_REG_dummy2),
	OFFSET_uint16(BCCMD_FM_REG_dummy3),
	BCCMD_FM_REG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CODEC_INPUT_GAIN)
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_req_type),
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_wordlength),
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_seq_no),
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_varid),
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_status),
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_gain_a),
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_gain_b),
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_dummy2),
	OFFSET_uint16(BCCMD_CODEC_INPUT_GAIN_dummy3),
	BCCMD_CODEC_INPUT_GAIN_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_GET_SINK)
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_req_type),
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_wordlength),
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_seq_no),
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_varid),
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_status),
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_resource),
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_opt1),
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_opt2),
	OFFSET_uint16(BCCMD_STREAM_GET_SINK_dummy3),
	BCCMD_STREAM_GET_SINK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U01X)
	OFFSET_uint16(BCCMD_STIBBONS_U01X_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U01X_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U01X_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U01X_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U01X_status),
	OFFSET_uint16(BCCMD_STIBBONS_U01X_data),
	OFFSET_uint16(BCCMD_STIBBONS_U01X_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U01X_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U01X_dummy3),
	BCCMD_STIBBONS_U01X_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BYPASS_UART)
	OFFSET_uint16(BCCMD_BYPASS_UART_req_type),
	OFFSET_uint16(BCCMD_BYPASS_UART_wordlength),
	OFFSET_uint16(BCCMD_BYPASS_UART_seq_no),
	OFFSET_uint16(BCCMD_BYPASS_UART_varid),
	OFFSET_uint16(BCCMD_BYPASS_UART_status),
	OFFSET_uint16(BCCMD_BYPASS_UART_dummy),
	OFFSET_uint16(BCCMD_BYPASS_UART_dummy1),
	OFFSET_uint16(BCCMD_BYPASS_UART_dummy2),
	OFFSET_uint16(BCCMD_BYPASS_UART_dummy3),
	BCCMD_BYPASS_UART_pduSize
} ;

enum {
	OFFSET_START(BCCMD_INQUIRY_PRIORITY)
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_req_type),
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_wordlength),
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_seq_no),
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_varid),
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_status),
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_data),
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_dummy1),
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_dummy2),
	OFFSET_uint16(BCCMD_INQUIRY_PRIORITY_dummy3),
	BCCMD_INQUIRY_PRIORITY_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO32_DIRECTION_MASK)
	OFFSET_uint16(BCCMD_PIO32_DIRECTION_MASK_req_type),
	OFFSET_uint16(BCCMD_PIO32_DIRECTION_MASK_wordlength),
	OFFSET_uint16(BCCMD_PIO32_DIRECTION_MASK_seq_no),
	OFFSET_uint16(BCCMD_PIO32_DIRECTION_MASK_varid),
	OFFSET_uint16(BCCMD_PIO32_DIRECTION_MASK_status),
	OFFSET_uint32(BCCMD_PIO32_DIRECTION_MASK_mask),
	OFFSET_uint32(BCCMD_PIO32_DIRECTION_MASK_bits),
	OFFSET_uint32(BCCMD_PIO32_DIRECTION_MASK_result),
	BCCMD_PIO32_DIRECTION_MASK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SPI_LOCK_CUSTOMER_KEY)
	OFFSET_uint16(BCCMD_SPI_LOCK_CUSTOMER_KEY_req_type),
	OFFSET_uint16(BCCMD_SPI_LOCK_CUSTOMER_KEY_wordlength),
	OFFSET_uint16(BCCMD_SPI_LOCK_CUSTOMER_KEY_seq_no),
	OFFSET_uint16(BCCMD_SPI_LOCK_CUSTOMER_KEY_varid),
	OFFSET_uint16(BCCMD_SPI_LOCK_CUSTOMER_KEY_status),
	OFFSET_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key1),
	OFFSET_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key2),
	OFFSET_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key3),
	OFFSET_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key4),
	BCCMD_SPI_LOCK_CUSTOMER_KEY_pduSize
} ;

enum {
	OFFSET_START(BCCMD_HQ_SCRAPING_LEN)
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_req_type),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_wordlength),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_seq_no),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_varid),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_status),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_data),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_dummy1),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_dummy2),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_LEN_dummy3),
	BCCMD_HQ_SCRAPING_LEN_pduSize
} ;

enum {
	OFFSET_START(BCCMD_WLAN_COEX_PRIORITY)
	OFFSET_uint16(BCCMD_WLAN_COEX_PRIORITY_req_type),
	OFFSET_uint16(BCCMD_WLAN_COEX_PRIORITY_wordlength),
	OFFSET_uint16(BCCMD_WLAN_COEX_PRIORITY_seq_no),
	OFFSET_uint16(BCCMD_WLAN_COEX_PRIORITY_varid),
	OFFSET_uint16(BCCMD_WLAN_COEX_PRIORITY_status),
	OFFSET_uint16(BCCMD_WLAN_COEX_PRIORITY_handle),
	OFFSET_bool(BCCMD_WLAN_COEX_PRIORITY_enable),
	OFFSET_uint16(BCCMD_WLAN_COEX_PRIORITY_dummy2),
	OFFSET_uint16(BCCMD_WLAN_COEX_PRIORITY_dummy3),
	BCCMD_WLAN_COEX_PRIORITY_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BC01_STATUS)
	OFFSET_uint16(BCCMD_BC01_STATUS_req_type),
	OFFSET_uint16(BCCMD_BC01_STATUS_wordlength),
	OFFSET_uint16(BCCMD_BC01_STATUS_seq_no),
	OFFSET_uint16(BCCMD_BC01_STATUS_varid),
	OFFSET_uint16(BCCMD_BC01_STATUS_status),
	OFFSET_uint16(BCCMD_BC01_STATUS_data),
	OFFSET_uint16(BCCMD_BC01_STATUS_dummy1),
	OFFSET_uint16(BCCMD_BC01_STATUS_dummy2),
	OFFSET_uint16(BCCMD_BC01_STATUS_dummy3),
	BCCMD_BC01_STATUS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHECK_ROM_CRC32)
	OFFSET_uint16(BCCMD_CHECK_ROM_CRC32_req_type),
	OFFSET_uint16(BCCMD_CHECK_ROM_CRC32_wordlength),
	OFFSET_uint16(BCCMD_CHECK_ROM_CRC32_seq_no),
	OFFSET_uint16(BCCMD_CHECK_ROM_CRC32_varid),
	OFFSET_uint16(BCCMD_CHECK_ROM_CRC32_status),
	OFFSET_uint32(BCCMD_CHECK_ROM_CRC32_data),
	OFFSET_uint16(BCCMD_CHECK_ROM_CRC32_dummy1),
	OFFSET_uint16(BCCMD_CHECK_ROM_CRC32_dummy2),
	OFFSET_uint16(BCCMD_CHECK_ROM_CRC32_dummy3),
	BCCMD_CHECK_ROM_CRC32_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PS_FACTORY_RESTORE)
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_req_type),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_wordlength),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_seq_no),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_varid),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_status),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_dummy),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_dummy1),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_dummy2),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_dummy3),
	BCCMD_PS_FACTORY_RESTORE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SCO_PARAMETERS)
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_req_type),
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_wordlength),
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_seq_no),
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_varid),
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_status),
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_sco_handle),
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_tsco),
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_wesco),
	OFFSET_uint16(BCCMD_SCO_PARAMETERS_reserved_slots),
	BCCMD_SCO_PARAMETERS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PCM_ATTENUATION)
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_req_type),
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_wordlength),
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_seq_no),
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_varid),
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_status),
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_data),
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_dummy1),
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_dummy2),
	OFFSET_uint16(BCCMD_PCM_ATTENUATION_dummy3),
	BCCMD_PCM_ATTENUATION_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CODEC_OUTPUT_GAIN)
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_req_type),
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_wordlength),
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_seq_no),
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_varid),
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_status),
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_gain_a),
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_gain_b),
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_dummy2),
	OFFSET_uint16(BCCMD_CODEC_OUTPUT_GAIN_dummy3),
	BCCMD_CODEC_OUTPUT_GAIN_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RDF_DATA_CAPTURE_DISABLE)
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_req_type),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_wordlength),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_seq_no),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_varid),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_status),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_data),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_dummy1),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_dummy2),
	OFFSET_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_dummy3),
	BCCMD_RDF_DATA_CAPTURE_DISABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RSSI_ACL)
	OFFSET_uint16(BCCMD_RSSI_ACL_req_type),
	OFFSET_uint16(BCCMD_RSSI_ACL_wordlength),
	OFFSET_uint16(BCCMD_RSSI_ACL_seq_no),
	OFFSET_uint16(BCCMD_RSSI_ACL_varid),
	OFFSET_uint16(BCCMD_RSSI_ACL_status),
	OFFSET_uint16(BCCMD_RSSI_ACL_hci_handle),
	OFFSET_int16(BCCMD_RSSI_ACL_rssi),
	OFFSET_uint16(BCCMD_RSSI_ACL_dummy2),
	OFFSET_uint16(BCCMD_RSSI_ACL_dummy3),
	BCCMD_RSSI_ACL_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PCM_CONFIG32)
	OFFSET_uint16(BCCMD_PCM_CONFIG32_req_type),
	OFFSET_uint16(BCCMD_PCM_CONFIG32_wordlength),
	OFFSET_uint16(BCCMD_PCM_CONFIG32_seq_no),
	OFFSET_uint16(BCCMD_PCM_CONFIG32_varid),
	OFFSET_uint16(BCCMD_PCM_CONFIG32_status),
	OFFSET_uint16(BCCMD_PCM_CONFIG32_pcm_if_id),
	OFFSET_uint32(BCCMD_PCM_CONFIG32_config32),
	OFFSET_uint16(BCCMD_PCM_CONFIG32_dummy3),
	BCCMD_PCM_CONFIG32_pduSize
} ;

enum {
	OFFSET_START(BCCMD_INQUIRY_TX_POWER)
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_req_type),
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_wordlength),
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_seq_no),
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_varid),
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_status),
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_data),
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_dummy1),
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_dummy2),
	OFFSET_uint16(BCCMD_INQUIRY_TX_POWER_dummy3),
	BCCMD_INQUIRY_TX_POWER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BLE_AROPE_CAPABILITIES)
	OFFSET_uint16(BCCMD_BLE_AROPE_CAPABILITIES_req_type),
	OFFSET_uint16(BCCMD_BLE_AROPE_CAPABILITIES_wordlength),
	OFFSET_uint16(BCCMD_BLE_AROPE_CAPABILITIES_seq_no),
	OFFSET_uint16(BCCMD_BLE_AROPE_CAPABILITIES_varid),
	OFFSET_uint16(BCCMD_BLE_AROPE_CAPABILITIES_status),
	OFFSET_uint32(BCCMD_BLE_AROPE_CAPABILITIES_data),
	OFFSET_uint16(BCCMD_BLE_AROPE_CAPABILITIES_dummy1),
	OFFSET_uint16(BCCMD_BLE_AROPE_CAPABILITIES_dummy2),
	OFFSET_uint16(BCCMD_BLE_AROPE_CAPABILITIES_dummy3),
	BCCMD_BLE_AROPE_CAPABILITIES_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BLE_DEFAULT_TX_POWER)
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_req_type),
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_wordlength),
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_seq_no),
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_varid),
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_status),
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_data),
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_dummy1),
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_dummy2),
	OFFSET_uint16(BCCMD_BLE_DEFAULT_TX_POWER_dummy3),
	BCCMD_BLE_DEFAULT_TX_POWER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_DEFAULT_TX_POWER)
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_req_type),
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_wordlength),
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_seq_no),
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_varid),
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_status),
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_data),
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_dummy1),
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_dummy2),
	OFFSET_uint16(BCCMD_DEFAULT_TX_POWER_dummy3),
	BCCMD_DEFAULT_TX_POWER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_CLOSE_SINK)
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_req_type),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_wordlength),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_seq_no),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_varid),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_status),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_data),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_dummy1),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_dummy2),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SINK_dummy3),
	BCCMD_STREAM_CLOSE_SINK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COLD_RESET)
	OFFSET_uint16(BCCMD_COLD_RESET_req_type),
	OFFSET_uint16(BCCMD_COLD_RESET_wordlength),
	OFFSET_uint16(BCCMD_COLD_RESET_seq_no),
	OFFSET_uint16(BCCMD_COLD_RESET_varid),
	OFFSET_uint16(BCCMD_COLD_RESET_status),
	OFFSET_uint16(BCCMD_COLD_RESET_dummy),
	OFFSET_uint16(BCCMD_COLD_RESET_dummy1),
	OFFSET_uint16(BCCMD_COLD_RESET_dummy2),
	OFFSET_uint16(BCCMD_COLD_RESET_dummy3),
	BCCMD_COLD_RESET_pduSize
} ;

enum {
	OFFSET_START(BCCMD_MIC_BIAS_CONFIGURE)
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_req_type),
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_wordlength),
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_seq_no),
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_varid),
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_status),
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_instance),
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_key_config),
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_value),
	OFFSET_uint16(BCCMD_MIC_BIAS_CONFIGURE_dummy3),
	BCCMD_MIC_BIAS_CONFIGURE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHECK_ROM)
	OFFSET_uint16(BCCMD_CHECK_ROM_req_type),
	OFFSET_uint16(BCCMD_CHECK_ROM_wordlength),
	OFFSET_uint16(BCCMD_CHECK_ROM_seq_no),
	OFFSET_uint16(BCCMD_CHECK_ROM_varid),
	OFFSET_uint16(BCCMD_CHECK_ROM_status),
	OFFSET_uint16(BCCMD_CHECK_ROM_data),
	OFFSET_uint16(BCCMD_CHECK_ROM_dummy1),
	OFFSET_uint16(BCCMD_CHECK_ROM_dummy2),
	OFFSET_uint16(BCCMD_CHECK_ROM_dummy3),
	BCCMD_CHECK_ROM_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RAND)
	OFFSET_uint16(BCCMD_RAND_req_type),
	OFFSET_uint16(BCCMD_RAND_wordlength),
	OFFSET_uint16(BCCMD_RAND_seq_no),
	OFFSET_uint16(BCCMD_RAND_varid),
	OFFSET_uint16(BCCMD_RAND_status),
	OFFSET_uint16(BCCMD_RAND_data),
	OFFSET_uint16(BCCMD_RAND_dummy1),
	OFFSET_uint16(BCCMD_RAND_dummy2),
	OFFSET_uint16(BCCMD_RAND_dummy3),
	BCCMD_RAND_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COLD_HALT)
	OFFSET_uint16(BCCMD_COLD_HALT_req_type),
	OFFSET_uint16(BCCMD_COLD_HALT_wordlength),
	OFFSET_uint16(BCCMD_COLD_HALT_seq_no),
	OFFSET_uint16(BCCMD_COLD_HALT_varid),
	OFFSET_uint16(BCCMD_COLD_HALT_status),
	OFFSET_uint16(BCCMD_COLD_HALT_dummy),
	OFFSET_uint16(BCCMD_COLD_HALT_dummy1),
	OFFSET_uint16(BCCMD_COLD_HALT_dummy2),
	OFFSET_uint16(BCCMD_COLD_HALT_dummy3),
	BCCMD_COLD_HALT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO32_PROTECT_MASK)
	OFFSET_uint16(BCCMD_PIO32_PROTECT_MASK_req_type),
	OFFSET_uint16(BCCMD_PIO32_PROTECT_MASK_wordlength),
	OFFSET_uint16(BCCMD_PIO32_PROTECT_MASK_seq_no),
	OFFSET_uint16(BCCMD_PIO32_PROTECT_MASK_varid),
	OFFSET_uint16(BCCMD_PIO32_PROTECT_MASK_status),
	OFFSET_uint32(BCCMD_PIO32_PROTECT_MASK_mask),
	OFFSET_uint32(BCCMD_PIO32_PROTECT_MASK_bits),
	OFFSET_uint32(BCCMD_PIO32_PROTECT_MASK_result),
	BCCMD_PIO32_PROTECT_MASK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_DSPMANAGER_DEBUG)
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_req_type),
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_wordlength),
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_seq_no),
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_varid),
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_status),
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_subsystem),
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_arguments),
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_dummy2),
	OFFSET_uint16(BCCMD_DSPMANAGER_DEBUG_dummy3),
	BCCMD_DSPMANAGER_DEBUG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COASTER_STOP)
	OFFSET_uint16(BCCMD_COASTER_STOP_req_type),
	OFFSET_uint16(BCCMD_COASTER_STOP_wordlength),
	OFFSET_uint16(BCCMD_COASTER_STOP_seq_no),
	OFFSET_uint16(BCCMD_COASTER_STOP_varid),
	OFFSET_uint16(BCCMD_COASTER_STOP_status),
	OFFSET_uint16(BCCMD_COASTER_STOP_flags),
	OFFSET_uint16(BCCMD_COASTER_STOP_dummy1),
	OFFSET_uint16(BCCMD_COASTER_STOP_dummy2),
	OFFSET_uint16(BCCMD_COASTER_STOP_dummy3),
	BCCMD_COASTER_STOP_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ALLOCATE_RAM_RESERVE)
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_req_type),
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_wordlength),
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_seq_no),
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_varid),
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_status),
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_type),
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_value),
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_dummy2),
	OFFSET_uint16(BCCMD_ALLOCATE_RAM_RESERVE_dummy3),
	BCCMD_ALLOCATE_RAM_RESERVE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_TRANSACTION_START)
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_req_type),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_wordlength),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_seq_no),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_varid),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_status),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_dummy),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_dummy1),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_dummy2),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_START_dummy3),
	BCCMD_STREAM_TRANSACTION_START_pduSize
} ;

enum {
	OFFSET_START(BCCMD_EGPS_PULSE_CONFIG)
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_req_type),
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_wordlength),
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_seq_no),
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_varid),
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_status),
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_pio),
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_dummy1),
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_dummy2),
	OFFSET_uint16(BCCMD_EGPS_PULSE_CONFIG_dummy3),
	BCCMD_EGPS_PULSE_CONFIG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PANIC_ON_FAULT)
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_req_type),
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_wordlength),
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_seq_no),
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_varid),
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_status),
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_data),
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_dummy1),
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_dummy2),
	OFFSET_uint16(BCCMD_PANIC_ON_FAULT_dummy3),
	BCCMD_PANIC_ON_FAULT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_GET_NEXT_BUILDDEF)
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_req_type),
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_wordlength),
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_seq_no),
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_varid),
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_status),
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_id),
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_nextid),
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_dummy2),
	OFFSET_uint16(BCCMD_GET_NEXT_BUILDDEF_dummy3),
	BCCMD_GET_NEXT_BUILDDEF_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SHA256_INIT)
	OFFSET_uint16(BCCMD_SHA256_INIT_req_type),
	OFFSET_uint16(BCCMD_SHA256_INIT_wordlength),
	OFFSET_uint16(BCCMD_SHA256_INIT_seq_no),
	OFFSET_uint16(BCCMD_SHA256_INIT_varid),
	OFFSET_uint16(BCCMD_SHA256_INIT_status),
	OFFSET_uint16(BCCMD_SHA256_INIT_dummy),
	OFFSET_uint16(BCCMD_SHA256_INIT_dummy1),
	OFFSET_uint16(BCCMD_SHA256_INIT_dummy2),
	OFFSET_uint16(BCCMD_SHA256_INIT_dummy3),
	BCCMD_SHA256_INIT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ENABLE_DUT_MODE)
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_req_type),
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_wordlength),
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_seq_no),
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_varid),
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_status),
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_dummy),
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_dummy1),
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_dummy2),
	OFFSET_uint16(BCCMD_ENABLE_DUT_MODE_dummy3),
	BCCMD_ENABLE_DUT_MODE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BLE_SCAN_BACKOFF)
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_req_type),
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_wordlength),
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_seq_no),
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_varid),
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_status),
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_data),
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_dummy1),
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_dummy2),
	OFFSET_uint16(BCCMD_BLE_SCAN_BACKOFF_dummy3),
	BCCMD_BLE_SCAN_BACKOFF_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BT_CLOCK)
	OFFSET_uint16(BCCMD_BT_CLOCK_req_type),
	OFFSET_uint16(BCCMD_BT_CLOCK_wordlength),
	OFFSET_uint16(BCCMD_BT_CLOCK_seq_no),
	OFFSET_uint16(BCCMD_BT_CLOCK_varid),
	OFFSET_uint16(BCCMD_BT_CLOCK_status),
	OFFSET_uint32(BCCMD_BT_CLOCK_data),
	OFFSET_uint16(BCCMD_BT_CLOCK_dummy1),
	OFFSET_uint16(BCCMD_BT_CLOCK_dummy2),
	OFFSET_uint16(BCCMD_BT_CLOCK_dummy3),
	BCCMD_BT_CLOCK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SPI_BUFSIZE)
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_req_type),
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_wordlength),
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_seq_no),
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_varid),
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_status),
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_data),
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_dummy1),
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_dummy2),
	OFFSET_uint16(BCCMD_SPI_BUFSIZE_dummy3),
	BCCMD_SPI_BUFSIZE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C01)
	OFFSET_uint16(BCCMD_STIBBONS_C01_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C01_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C01_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C01_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C01_status),
	OFFSET_uint16(BCCMD_STIBBONS_C01_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C01_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C01_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C01_dummy3),
	BCCMD_STIBBONS_C01_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C02)
	OFFSET_uint16(BCCMD_STIBBONS_C02_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C02_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C02_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C02_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C02_status),
	OFFSET_uint16(BCCMD_STIBBONS_C02_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C02_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C02_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C02_dummy3),
	BCCMD_STIBBONS_C02_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PCM_SYNC_RATE)
	OFFSET_uint16(BCCMD_PCM_SYNC_RATE_req_type),
	OFFSET_uint16(BCCMD_PCM_SYNC_RATE_wordlength),
	OFFSET_uint16(BCCMD_PCM_SYNC_RATE_seq_no),
	OFFSET_uint16(BCCMD_PCM_SYNC_RATE_varid),
	OFFSET_uint16(BCCMD_PCM_SYNC_RATE_status),
	OFFSET_uint16(BCCMD_PCM_SYNC_RATE_pcm_interface),
	OFFSET_uint32(BCCMD_PCM_SYNC_RATE_sync_rate),
	OFFSET_uint16(BCCMD_PCM_SYNC_RATE_dummy3),
	BCCMD_PCM_SYNC_RATE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C03)
	OFFSET_uint16(BCCMD_STIBBONS_C03_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C03_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C03_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C03_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C03_status),
	OFFSET_uint16(BCCMD_STIBBONS_C03_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C03_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C03_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C03_dummy3),
	BCCMD_STIBBONS_C03_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C04)
	OFFSET_uint16(BCCMD_STIBBONS_C04_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C04_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C04_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C04_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C04_status),
	OFFSET_uint16(BCCMD_STIBBONS_C04_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C04_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C04_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C04_dummy3),
	BCCMD_STIBBONS_C04_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C05)
	OFFSET_uint16(BCCMD_STIBBONS_C05_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C05_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C05_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C05_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C05_status),
	OFFSET_uint16(BCCMD_STIBBONS_C05_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C05_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C05_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C05_dummy3),
	BCCMD_STIBBONS_C05_pduSize
} ;

enum {
	OFFSET_START(BCCMD_LED2_ENABLE)
	OFFSET_uint16(BCCMD_LED2_ENABLE_req_type),
	OFFSET_uint16(BCCMD_LED2_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_LED2_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_LED2_ENABLE_varid),
	OFFSET_uint16(BCCMD_LED2_ENABLE_status),
	OFFSET_uint16(BCCMD_LED2_ENABLE_data),
	OFFSET_uint16(BCCMD_LED2_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_LED2_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_LED2_ENABLE_dummy3),
	BCCMD_LED2_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHECK_RAM_RESULT)
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_req_type),
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_wordlength),
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_seq_no),
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_varid),
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_status),
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_data),
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_dummy1),
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_dummy2),
	OFFSET_uint16(BCCMD_CHECK_RAM_RESULT_dummy3),
	BCCMD_CHECK_RAM_RESULT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C06)
	OFFSET_uint16(BCCMD_STIBBONS_C06_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C06_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C06_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C06_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C06_status),
	OFFSET_uint16(BCCMD_STIBBONS_C06_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C06_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C06_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C06_dummy3),
	BCCMD_STIBBONS_C06_pduSize
} ;

enum {
	OFFSET_START(BCCMD_EGPS_PULSE_OUTPUT_START)
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_req_type),
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_wordlength),
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_seq_no),
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_varid),
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_status),
	OFFSET_uint8(BCCMD_EGPS_PULSE_OUTPUT_START_pio),
	OFFSET_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_start_time),
	OFFSET_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_duration_time),
	OFFSET_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_repeat_time),
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_start_time_fine),
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_duration_time_fine),
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_repeat_time_fine),
	OFFSET_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_flags),
	BCCMD_EGPS_PULSE_OUTPUT_START_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C07)
	OFFSET_uint16(BCCMD_STIBBONS_C07_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C07_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C07_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C07_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C07_status),
	OFFSET_uint16(BCCMD_STIBBONS_C07_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C07_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C07_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C07_dummy3),
	BCCMD_STIBBONS_C07_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C08)
	OFFSET_uint16(BCCMD_STIBBONS_C08_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C08_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C08_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C08_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C08_status),
	OFFSET_uint16(BCCMD_STIBBONS_C08_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C08_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C08_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C08_dummy3),
	BCCMD_STIBBONS_C08_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C09)
	OFFSET_uint16(BCCMD_STIBBONS_C09_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C09_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C09_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C09_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C09_status),
	OFFSET_uint16(BCCMD_STIBBONS_C09_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C09_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C09_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C09_dummy3),
	BCCMD_STIBBONS_C09_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHECK_RAM)
	OFFSET_uint16(BCCMD_CHECK_RAM_req_type),
	OFFSET_uint16(BCCMD_CHECK_RAM_wordlength),
	OFFSET_uint16(BCCMD_CHECK_RAM_seq_no),
	OFFSET_uint16(BCCMD_CHECK_RAM_varid),
	OFFSET_uint16(BCCMD_CHECK_RAM_status),
	OFFSET_uint16(BCCMD_CHECK_RAM_dummy),
	OFFSET_uint16(BCCMD_CHECK_RAM_dummy1),
	OFFSET_uint16(BCCMD_CHECK_RAM_dummy2),
	OFFSET_uint16(BCCMD_CHECK_RAM_dummy3),
	BCCMD_CHECK_RAM_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_GET_SOURCE)
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_req_type),
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_wordlength),
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_seq_no),
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_varid),
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_status),
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_resource),
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_opt1),
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_opt2),
	OFFSET_uint16(BCCMD_STREAM_GET_SOURCE_dummy3),
	BCCMD_STREAM_GET_SOURCE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ROUTE_CLOCK)
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_req_type),
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_wordlength),
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_seq_no),
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_varid),
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_status),
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_dummy),
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_dummy1),
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_dummy2),
	OFFSET_uint16(BCCMD_ROUTE_CLOCK_dummy3),
	BCCMD_ROUTE_CLOCK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BABEL_SPI_GO)
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_req_type),
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_wordlength),
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_seq_no),
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_varid),
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_status),
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_dummy),
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_dummy1),
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_dummy2),
	OFFSET_uint16(BCCMD_BABEL_SPI_GO_dummy3),
	BCCMD_BABEL_SPI_GO_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COASTER_SV_STATE)
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_req_type),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_wordlength),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_seq_no),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_varid),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_status),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_start_index_num_entries),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_uSecs),
	OFFSET_uint8(BCCMD_COASTER_SV_STATE_uSec80ths),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_code_doppler),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_code_shift),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_carrier_doppler),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_lock_status_bits),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_SNR),
	OFFSET_uint8(BCCMD_COASTER_SV_STATE_data_transition),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_satid_prn),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e1_dummy),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e1_uSecs),
	OFFSET_uint8(BCCMD_COASTER_SV_STATE_e1_uSec80ths),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e1_code_doppler),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e1_code_shift),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e1_carrier_doppler),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e1_lock_status_bits),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e1_SNR),
	OFFSET_uint8(BCCMD_COASTER_SV_STATE_e1_data_transition),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e1_satid_prn),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e2_dummy),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e2_uSecs),
	OFFSET_uint8(BCCMD_COASTER_SV_STATE_e2_uSec80ths),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e2_code_doppler),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e2_code_shift),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e2_carrier_doppler),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e2_lock_status_bits),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e2_SNR),
	OFFSET_uint8(BCCMD_COASTER_SV_STATE_e2_data_transition),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e2_satid_prn),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e3_dummy),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e3_uSecs),
	OFFSET_uint8(BCCMD_COASTER_SV_STATE_e3_uSec80ths),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e3_code_doppler),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e3_code_shift),
	OFFSET_uint32(BCCMD_COASTER_SV_STATE_e3_carrier_doppler),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e3_lock_status_bits),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e3_SNR),
	OFFSET_uint8(BCCMD_COASTER_SV_STATE_e3_data_transition),
	OFFSET_uint16(BCCMD_COASTER_SV_STATE_e3_satid_prn),
	BCCMD_COASTER_SV_STATE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RDF_BLE_SCAN_MODE)
	OFFSET_uint16(BCCMD_RDF_BLE_SCAN_MODE_req_type),
	OFFSET_uint16(BCCMD_RDF_BLE_SCAN_MODE_wordlength),
	OFFSET_uint16(BCCMD_RDF_BLE_SCAN_MODE_seq_no),
	OFFSET_uint16(BCCMD_RDF_BLE_SCAN_MODE_varid),
	OFFSET_uint16(BCCMD_RDF_BLE_SCAN_MODE_status),
	OFFSET_uint8(BCCMD_RDF_BLE_SCAN_MODE_mode),
	OFFSET_uint8(BCCMD_RDF_BLE_SCAN_MODE_samples),
	OFFSET_uint16(BCCMD_RDF_BLE_SCAN_MODE_dummy2),
	OFFSET_uint16(BCCMD_RDF_BLE_SCAN_MODE_dummy3),
	BCCMD_RDF_BLE_SCAN_MODE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PS_FACTORY_RESTORE_ALL)
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_req_type),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_wordlength),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_seq_no),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_varid),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_status),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_dummy),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_dummy1),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_dummy2),
	OFFSET_uint16(BCCMD_PS_FACTORY_RESTORE_ALL_dummy3),
	BCCMD_PS_FACTORY_RESTORE_ALL_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COEX_DUMP)
	OFFSET_uint16(BCCMD_COEX_DUMP_req_type),
	OFFSET_uint16(BCCMD_COEX_DUMP_wordlength),
	OFFSET_uint16(BCCMD_COEX_DUMP_seq_no),
	OFFSET_uint16(BCCMD_COEX_DUMP_varid),
	OFFSET_uint16(BCCMD_COEX_DUMP_status),
	OFFSET_uint16(BCCMD_COEX_DUMP_scheme),
	OFFSET_uint16(BCCMD_COEX_DUMP_options),
	OFFSET_uint16(BCCMD_COEX_DUMP_bt_priority),
	OFFSET_uint16(BCCMD_COEX_DUMP_wlan_active),
	OFFSET_uint16(BCCMD_COEX_DUMP_bt_active),
	OFFSET_uint16(BCCMD_COEX_DUMP_bt_status),
	OFFSET_uint16(BCCMD_COEX_DUMP_wlan_deny),
	OFFSET_uint16(BCCMD_COEX_DUMP_bt_periodic),
	OFFSET_uint16(BCCMD_COEX_DUMP_bt_inband),
	OFFSET_uint16(BCCMD_COEX_DUMP_uart_active),
	OFFSET_uint16(BCCMD_COEX_DUMP_uart_tx),
	OFFSET_uint16(BCCMD_COEX_DUMP_uart_rx),
	OFFSET_uint16(BCCMD_COEX_DUMP_time_t1),
	OFFSET_uint16(BCCMD_COEX_DUMP_time_t2),
	OFFSET_uint16(BCCMD_COEX_DUMP_btactive_lead),
	OFFSET_uint16(BCCMD_COEX_DUMP_btstatus_lead),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table00),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table01),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table02),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table03),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table04),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table05),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table06),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table07),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table08),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table09),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table10),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table11),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table12),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table13),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table14),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table15),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table16),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table17),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table18),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table19),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table20),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table21),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table22),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table23),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table24),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table25),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table26),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table27),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table28),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table29),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table30),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table31),
	OFFSET_uint16(BCCMD_COEX_DUMP_priority_table32),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug_enable),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug00),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug01),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug02),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug03),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug04),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug05),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug06),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug07),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug08),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug09),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug10),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug11),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug12),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug13),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug14),
	OFFSET_uint16(BCCMD_COEX_DUMP_debug15),
	BCCMD_COEX_DUMP_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CLOCK_MODULATION_ENABLE)
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_req_type),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_varid),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_status),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_data),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_ENABLE_dummy3),
	BCCMD_CLOCK_MODULATION_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C10)
	OFFSET_uint16(BCCMD_STIBBONS_C10_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C10_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C10_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C10_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C10_status),
	OFFSET_uint16(BCCMD_STIBBONS_C10_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C10_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C10_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C10_dummy3),
	BCCMD_STIBBONS_C10_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_TRANSACTION_CANCEL)
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_req_type),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_wordlength),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_seq_no),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_varid),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_status),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_dummy),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_dummy1),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_dummy2),
	OFFSET_uint16(BCCMD_STREAM_TRANSACTION_CANCEL_dummy3),
	BCCMD_STREAM_TRANSACTION_CANCEL_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C11)
	OFFSET_uint16(BCCMD_STIBBONS_C11_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C11_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C11_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C11_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C11_status),
	OFFSET_uint16(BCCMD_STIBBONS_C11_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C11_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C11_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C11_dummy3),
	BCCMD_STIBBONS_C11_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C12)
	OFFSET_uint16(BCCMD_STIBBONS_C12_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C12_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C12_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C12_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C12_status),
	OFFSET_uint16(BCCMD_STIBBONS_C12_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C12_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C12_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C12_dummy3),
	BCCMD_STIBBONS_C12_pduSize
} ;

enum {
	OFFSET_START(BCCMD_HOST_DECIDES_TIMING)
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_req_type),
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_wordlength),
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_seq_no),
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_varid),
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_status),
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_data),
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_dummy1),
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_dummy2),
	OFFSET_uint16(BCCMD_HOST_DECIDES_TIMING_dummy3),
	BCCMD_HOST_DECIDES_TIMING_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RADIOTEST)
	OFFSET_uint16(BCCMD_RADIOTEST_req_type),
	OFFSET_uint16(BCCMD_RADIOTEST_wordlength),
	OFFSET_uint16(BCCMD_RADIOTEST_seq_no),
	OFFSET_uint16(BCCMD_RADIOTEST_varid),
	OFFSET_uint16(BCCMD_RADIOTEST_status),
	OFFSET_uint16(BCCMD_RADIOTEST_radiotest),
	OFFSET_uint16(BCCMD_RADIOTEST_dummy1),
	OFFSET_uint16(BCCMD_RADIOTEST_dummy2),
	OFFSET_uint16(BCCMD_RADIOTEST_dummy3),
	BCCMD_RADIOTEST_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C13)
	OFFSET_uint16(BCCMD_STIBBONS_C13_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C13_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C13_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C13_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C13_status),
	OFFSET_uint16(BCCMD_STIBBONS_C13_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C13_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C13_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C13_dummy3),
	BCCMD_STIBBONS_C13_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C14)
	OFFSET_uint16(BCCMD_STIBBONS_C14_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C14_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C14_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C14_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C14_status),
	OFFSET_uint16(BCCMD_STIBBONS_C14_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C14_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C14_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C14_dummy3),
	BCCMD_STIBBONS_C14_pduSize
} ;

enum {
	OFFSET_START(BCCMD_VREF_CONSTANT)
	OFFSET_uint16(BCCMD_VREF_CONSTANT_req_type),
	OFFSET_uint16(BCCMD_VREF_CONSTANT_wordlength),
	OFFSET_uint16(BCCMD_VREF_CONSTANT_seq_no),
	OFFSET_uint16(BCCMD_VREF_CONSTANT_varid),
	OFFSET_uint16(BCCMD_VREF_CONSTANT_status),
	OFFSET_uint16(BCCMD_VREF_CONSTANT_data),
	OFFSET_uint16(BCCMD_VREF_CONSTANT_dummy1),
	OFFSET_uint16(BCCMD_VREF_CONSTANT_dummy2),
	OFFSET_uint16(BCCMD_VREF_CONSTANT_dummy3),
	BCCMD_VREF_CONSTANT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C15)
	OFFSET_uint16(BCCMD_STIBBONS_C15_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C15_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C15_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C15_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C15_status),
	OFFSET_uint16(BCCMD_STIBBONS_C15_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C15_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C15_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C15_dummy3),
	BCCMD_STIBBONS_C15_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CLK_SKEW_COUNT)
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_req_type),
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_wordlength),
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_seq_no),
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_varid),
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_status),
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_data),
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_dummy1),
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_dummy2),
	OFFSET_uint16(BCCMD_CLK_SKEW_COUNT_dummy3),
	BCCMD_CLK_SKEW_COUNT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_AWAY_TIME)
	OFFSET_uint16(BCCMD_AWAY_TIME_req_type),
	OFFSET_uint16(BCCMD_AWAY_TIME_wordlength),
	OFFSET_uint16(BCCMD_AWAY_TIME_seq_no),
	OFFSET_uint16(BCCMD_AWAY_TIME_varid),
	OFFSET_uint16(BCCMD_AWAY_TIME_status),
	OFFSET_uint16(BCCMD_AWAY_TIME_hci_handle),
	OFFSET_uint32(BCCMD_AWAY_TIME_time),
	OFFSET_uint16(BCCMD_AWAY_TIME_dummy3),
	BCCMD_AWAY_TIME_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_C16)
	OFFSET_uint16(BCCMD_STIBBONS_C16_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_C16_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_C16_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_C16_varid),
	OFFSET_uint16(BCCMD_STIBBONS_C16_status),
	OFFSET_uint16(BCCMD_STIBBONS_C16_dummy),
	OFFSET_uint16(BCCMD_STIBBONS_C16_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_C16_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_C16_dummy3),
	BCCMD_STIBBONS_C16_pduSize
} ;

enum {
	OFFSET_START(BCCMD_WAIT_FOR_N_MS)
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_req_type),
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_wordlength),
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_seq_no),
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_varid),
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_status),
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_data),
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_dummy1),
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_dummy2),
	OFFSET_uint16(BCCMD_WAIT_FOR_N_MS_dummy3),
	BCCMD_WAIT_FOR_N_MS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PCM_CLOCK_RATE)
	OFFSET_uint16(BCCMD_PCM_CLOCK_RATE_req_type),
	OFFSET_uint16(BCCMD_PCM_CLOCK_RATE_wordlength),
	OFFSET_uint16(BCCMD_PCM_CLOCK_RATE_seq_no),
	OFFSET_uint16(BCCMD_PCM_CLOCK_RATE_varid),
	OFFSET_uint16(BCCMD_PCM_CLOCK_RATE_status),
	OFFSET_uint16(BCCMD_PCM_CLOCK_RATE_pcm_interface),
	OFFSET_uint32(BCCMD_PCM_CLOCK_RATE_clock_rate),
	OFFSET_uint16(BCCMD_PCM_CLOCK_RATE_dummy3),
	BCCMD_PCM_CLOCK_RATE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_TESTB_AMUX)
	OFFSET_uint16(BCCMD_TESTB_AMUX_req_type),
	OFFSET_uint16(BCCMD_TESTB_AMUX_wordlength),
	OFFSET_uint16(BCCMD_TESTB_AMUX_seq_no),
	OFFSET_uint16(BCCMD_TESTB_AMUX_varid),
	OFFSET_uint16(BCCMD_TESTB_AMUX_status),
	OFFSET_uint16(BCCMD_TESTB_AMUX_data),
	OFFSET_uint16(BCCMD_TESTB_AMUX_dummy1),
	OFFSET_uint16(BCCMD_TESTB_AMUX_dummy2),
	OFFSET_uint16(BCCMD_TESTB_AMUX_dummy3),
	BCCMD_TESTB_AMUX_pduSize
} ;

enum {
	OFFSET_START(BCCMD_GPS_START)
	OFFSET_uint16(BCCMD_GPS_START_req_type),
	OFFSET_uint16(BCCMD_GPS_START_wordlength),
	OFFSET_uint16(BCCMD_GPS_START_seq_no),
	OFFSET_uint16(BCCMD_GPS_START_varid),
	OFFSET_uint16(BCCMD_GPS_START_status),
	OFFSET_uint16(BCCMD_GPS_START_flags),
	OFFSET_uint16(BCCMD_GPS_START_delay),
	OFFSET_uint16(BCCMD_GPS_START_dummy2),
	OFFSET_uint16(BCCMD_GPS_START_dummy3),
	BCCMD_GPS_START_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_ALIAS_SINK)
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_req_type),
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_wordlength),
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_seq_no),
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_varid),
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_status),
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_sink1_sid),
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_sink2_sid),
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_dummy2),
	OFFSET_uint16(BCCMD_STREAM_ALIAS_SINK_dummy3),
	BCCMD_STREAM_ALIAS_SINK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_LIMIT_EDR_POWER)
	OFFSET_uint16(BCCMD_LIMIT_EDR_POWER_req_type),
	OFFSET_uint16(BCCMD_LIMIT_EDR_POWER_wordlength),
	OFFSET_uint16(BCCMD_LIMIT_EDR_POWER_seq_no),
	OFFSET_uint16(BCCMD_LIMIT_EDR_POWER_varid),
	OFFSET_uint16(BCCMD_LIMIT_EDR_POWER_status),
	OFFSET_uint16(BCCMD_LIMIT_EDR_POWER_hci_handle),
	OFFSET_bool(BCCMD_LIMIT_EDR_POWER_enable),
	OFFSET_uint16(BCCMD_LIMIT_EDR_POWER_dummy2),
	OFFSET_uint16(BCCMD_LIMIT_EDR_POWER_dummy3),
	BCCMD_LIMIT_EDR_POWER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_HOSTIO_ENABLE_DEBUG)
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_req_type),
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_wordlength),
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_seq_no),
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_varid),
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_status),
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_data),
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_dummy1),
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_dummy2),
	OFFSET_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_dummy3),
	BCCMD_HOSTIO_ENABLE_DEBUG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_WARM_HALT)
	OFFSET_uint16(BCCMD_WARM_HALT_req_type),
	OFFSET_uint16(BCCMD_WARM_HALT_wordlength),
	OFFSET_uint16(BCCMD_WARM_HALT_seq_no),
	OFFSET_uint16(BCCMD_WARM_HALT_varid),
	OFFSET_uint16(BCCMD_WARM_HALT_status),
	OFFSET_uint16(BCCMD_WARM_HALT_dummy),
	OFFSET_uint16(BCCMD_WARM_HALT_dummy1),
	OFFSET_uint16(BCCMD_WARM_HALT_dummy2),
	OFFSET_uint16(BCCMD_WARM_HALT_dummy3),
	BCCMD_WARM_HALT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_CLOSE_SOURCE)
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_req_type),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_wordlength),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_seq_no),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_varid),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_status),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_data),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_dummy1),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_dummy2),
	OFFSET_uint16(BCCMD_STREAM_CLOSE_SOURCE_dummy3),
	BCCMD_STREAM_CLOSE_SOURCE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SINGLE_CHAN)
	OFFSET_uint16(BCCMD_SINGLE_CHAN_req_type),
	OFFSET_uint16(BCCMD_SINGLE_CHAN_wordlength),
	OFFSET_uint16(BCCMD_SINGLE_CHAN_seq_no),
	OFFSET_uint16(BCCMD_SINGLE_CHAN_varid),
	OFFSET_uint16(BCCMD_SINGLE_CHAN_status),
	OFFSET_uint16(BCCMD_SINGLE_CHAN_data),
	OFFSET_uint16(BCCMD_SINGLE_CHAN_dummy1),
	OFFSET_uint16(BCCMD_SINGLE_CHAN_dummy2),
	OFFSET_uint16(BCCMD_SINGLE_CHAN_dummy3),
	BCCMD_SINGLE_CHAN_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSCLRS)
	OFFSET_uint16(BCCMD_PSCLRS_req_type),
	OFFSET_uint16(BCCMD_PSCLRS_wordlength),
	OFFSET_uint16(BCCMD_PSCLRS_seq_no),
	OFFSET_uint16(BCCMD_PSCLRS_varid),
	OFFSET_uint16(BCCMD_PSCLRS_status),
	OFFSET_uint16(BCCMD_PSCLRS_id),
	OFFSET_uint16(BCCMD_PSCLRS_stores),
	OFFSET_uint16(BCCMD_PSCLRS_dummy2),
	OFFSET_uint16(BCCMD_PSCLRS_dummy3),
	BCCMD_PSCLRS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_LED_CONFIG)
	OFFSET_uint16(BCCMD_LED_CONFIG_req_type),
	OFFSET_uint16(BCCMD_LED_CONFIG_wordlength),
	OFFSET_uint16(BCCMD_LED_CONFIG_seq_no),
	OFFSET_uint16(BCCMD_LED_CONFIG_varid),
	OFFSET_uint16(BCCMD_LED_CONFIG_status),
	OFFSET_uint16(BCCMD_LED_CONFIG_led),
	OFFSET_uint16(BCCMD_LED_CONFIG_led_key),
	OFFSET_uint16(BCCMD_LED_CONFIG_value),
	OFFSET_uint16(BCCMD_LED_CONFIG_dummy3),
	BCCMD_LED_CONFIG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_LOCK_ACL_PACKET_TYPE)
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_req_type),
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_wordlength),
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_seq_no),
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_varid),
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_status),
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_data),
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_dummy1),
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_dummy2),
	OFFSET_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_dummy3),
	BCCMD_LOCK_ACL_PACKET_TYPE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY)
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_req_type),
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_wordlength),
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_seq_no),
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_varid),
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_status),
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_data),
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_dummy1),
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_dummy2),
	OFFSET_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_dummy3),
	BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_pduSize
} ;

enum {
	OFFSET_START(BCCMD_TESTA_AMUX)
	OFFSET_uint16(BCCMD_TESTA_AMUX_req_type),
	OFFSET_uint16(BCCMD_TESTA_AMUX_wordlength),
	OFFSET_uint16(BCCMD_TESTA_AMUX_seq_no),
	OFFSET_uint16(BCCMD_TESTA_AMUX_varid),
	OFFSET_uint16(BCCMD_TESTA_AMUX_status),
	OFFSET_uint16(BCCMD_TESTA_AMUX_data),
	OFFSET_uint16(BCCMD_TESTA_AMUX_dummy1),
	OFFSET_uint16(BCCMD_TESTA_AMUX_dummy2),
	OFFSET_uint16(BCCMD_TESTA_AMUX_dummy3),
	BCCMD_TESTA_AMUX_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO32_STRONG_BIAS)
	OFFSET_uint16(BCCMD_PIO32_STRONG_BIAS_req_type),
	OFFSET_uint16(BCCMD_PIO32_STRONG_BIAS_wordlength),
	OFFSET_uint16(BCCMD_PIO32_STRONG_BIAS_seq_no),
	OFFSET_uint16(BCCMD_PIO32_STRONG_BIAS_varid),
	OFFSET_uint16(BCCMD_PIO32_STRONG_BIAS_status),
	OFFSET_uint32(BCCMD_PIO32_STRONG_BIAS_mask),
	OFFSET_uint32(BCCMD_PIO32_STRONG_BIAS_bits),
	OFFSET_uint32(BCCMD_PIO32_STRONG_BIAS_result),
	BCCMD_PIO32_STRONG_BIAS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PS_MEMORY_TYPE)
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_req_type),
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_wordlength),
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_seq_no),
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_varid),
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_status),
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_stores),
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_memorytype),
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_dummy2),
	OFFSET_uint16(BCCMD_PS_MEMORY_TYPE_dummy3),
	BCCMD_PS_MEMORY_TYPE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BABEL_SPI_RUN_STATE)
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_req_type),
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_wordlength),
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_seq_no),
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_varid),
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_status),
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_data),
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_dummy1),
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_dummy2),
	OFFSET_uint16(BCCMD_BABEL_SPI_RUN_STATE_dummy3),
	BCCMD_BABEL_SPI_RUN_STATE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSSIZE)
	OFFSET_uint16(BCCMD_PSSIZE_req_type),
	OFFSET_uint16(BCCMD_PSSIZE_wordlength),
	OFFSET_uint16(BCCMD_PSSIZE_seq_no),
	OFFSET_uint16(BCCMD_PSSIZE_varid),
	OFFSET_uint16(BCCMD_PSSIZE_status),
	OFFSET_uint16(BCCMD_PSSIZE_id),
	OFFSET_uint16(BCCMD_PSSIZE_len),
	OFFSET_uint16(BCCMD_PSSIZE_stores),
	OFFSET_uint16(BCCMD_PSSIZE_dummy3),
	BCCMD_PSSIZE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_KILL_VM_APPLICATION)
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_req_type),
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_wordlength),
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_seq_no),
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_varid),
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_status),
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_dummy),
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_dummy1),
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_dummy2),
	OFFSET_uint16(BCCMD_KILL_VM_APPLICATION_dummy3),
	BCCMD_KILL_VM_APPLICATION_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ANA_FTRIM_READWRITE)
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_req_type),
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_wordlength),
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_seq_no),
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_varid),
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_status),
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_data),
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_dummy1),
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_dummy2),
	OFFSET_uint16(BCCMD_ANA_FTRIM_READWRITE_dummy3),
	BCCMD_ANA_FTRIM_READWRITE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ENABLE_DEV_CONNECT)
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_req_type),
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_wordlength),
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_seq_no),
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_varid),
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_status),
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_dummy),
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_dummy1),
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_dummy2),
	OFFSET_uint16(BCCMD_ENABLE_DEV_CONNECT_dummy3),
	BCCMD_ENABLE_DEV_CONNECT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BER_THRESHOLD)
	OFFSET_uint16(BCCMD_BER_THRESHOLD_req_type),
	OFFSET_uint16(BCCMD_BER_THRESHOLD_wordlength),
	OFFSET_uint16(BCCMD_BER_THRESHOLD_seq_no),
	OFFSET_uint16(BCCMD_BER_THRESHOLD_varid),
	OFFSET_uint16(BCCMD_BER_THRESHOLD_status),
	OFFSET_uint16(BCCMD_BER_THRESHOLD_hci_handle),
	OFFSET_uint16(BCCMD_BER_THRESHOLD_ber_threshold),
	OFFSET_uint16(BCCMD_BER_THRESHOLD_dummy2),
	OFFSET_uint16(BCCMD_BER_THRESHOLD_dummy3),
	BCCMD_BER_THRESHOLD_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COEX_INT_TEST)
	OFFSET_uint16(BCCMD_COEX_INT_TEST_req_type),
	OFFSET_uint16(BCCMD_COEX_INT_TEST_wordlength),
	OFFSET_uint16(BCCMD_COEX_INT_TEST_seq_no),
	OFFSET_uint16(BCCMD_COEX_INT_TEST_varid),
	OFFSET_uint16(BCCMD_COEX_INT_TEST_status),
	OFFSET_uint8(BCCMD_COEX_INT_TEST_mode),
	OFFSET_uint8(BCCMD_COEX_INT_TEST_value),
	OFFSET_uint16(BCCMD_COEX_INT_TEST_dummy2),
	OFFSET_uint16(BCCMD_COEX_INT_TEST_dummy3),
	BCCMD_COEX_INT_TEST_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RDF_PT)
	OFFSET_uint16(BCCMD_RDF_PT_req_type),
	OFFSET_uint16(BCCMD_RDF_PT_wordlength),
	OFFSET_uint16(BCCMD_RDF_PT_seq_no),
	OFFSET_uint16(BCCMD_RDF_PT_varid),
	OFFSET_uint16(BCCMD_RDF_PT_status),
	OFFSET_uint8(BCCMD_RDF_PT_enable),
	OFFSET_uint8(BCCMD_RDF_PT_antenna),
	OFFSET_uint16(BCCMD_RDF_PT_dummy2),
	OFFSET_uint16(BCCMD_RDF_PT_dummy3),
	BCCMD_RDF_PT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_EGPS_PULSE_INPUT_START)
	OFFSET_uint16(BCCMD_EGPS_PULSE_INPUT_START_req_type),
	OFFSET_uint16(BCCMD_EGPS_PULSE_INPUT_START_wordlength),
	OFFSET_uint16(BCCMD_EGPS_PULSE_INPUT_START_seq_no),
	OFFSET_uint16(BCCMD_EGPS_PULSE_INPUT_START_varid),
	OFFSET_uint16(BCCMD_EGPS_PULSE_INPUT_START_status),
	OFFSET_uint8(BCCMD_EGPS_PULSE_INPUT_START_pio),
	OFFSET_uint8(BCCMD_EGPS_PULSE_INPUT_START_edge_mode),
	OFFSET_uint16(BCCMD_EGPS_PULSE_INPUT_START_dummy2),
	OFFSET_uint16(BCCMD_EGPS_PULSE_INPUT_START_dummy3),
	BCCMD_EGPS_PULSE_INPUT_START_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RDF_PT_SELECT_ANTENNA)
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_req_type),
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_wordlength),
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_seq_no),
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_varid),
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_status),
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_data),
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_dummy1),
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_dummy2),
	OFFSET_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_dummy3),
	BCCMD_RDF_PT_SELECT_ANTENNA_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PCM_LOW_JITTER)
	OFFSET_uint16(BCCMD_PCM_LOW_JITTER_req_type),
	OFFSET_uint16(BCCMD_PCM_LOW_JITTER_wordlength),
	OFFSET_uint16(BCCMD_PCM_LOW_JITTER_seq_no),
	OFFSET_uint16(BCCMD_PCM_LOW_JITTER_varid),
	OFFSET_uint16(BCCMD_PCM_LOW_JITTER_status),
	OFFSET_uint16(BCCMD_PCM_LOW_JITTER_pcm_if_id),
	OFFSET_uint32(BCCMD_PCM_LOW_JITTER_low_jitter),
	OFFSET_uint16(BCCMD_PCM_LOW_JITTER_dummy3),
	BCCMD_PCM_LOW_JITTER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHARGER_TRIMS)
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_req_type),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_wordlength),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_seq_no),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_varid),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_status),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_chgref_trim),
	OFFSET_int16(BCCMD_CHARGER_TRIMS_hvref_trim),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_rtrim),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_itrim),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_iext_trim),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_iterm_trim),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_vfast_trim),
	OFFSET_uint16(BCCMD_CHARGER_TRIMS_hyst_trim),
	BCCMD_CHARGER_TRIMS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_KALSPIDEBUG_SETDEBUGMODE)
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_req_type),
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_wordlength),
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_seq_no),
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_varid),
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_status),
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_dummy),
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_dummy1),
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_dummy2),
	OFFSET_uint16(BCCMD_KALSPIDEBUG_SETDEBUGMODE_dummy3),
	BCCMD_KALSPIDEBUG_SETDEBUGMODE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PCM2_ATTENUATION)
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_req_type),
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_wordlength),
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_seq_no),
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_varid),
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_status),
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_data),
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_dummy1),
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_dummy2),
	OFFSET_uint16(BCCMD_PCM2_ATTENUATION_dummy3),
	BCCMD_PCM2_ATTENUATION_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SAVE_CONNECTION_EVENT_FILTERS)
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_req_type),
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_wordlength),
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_seq_no),
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_varid),
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_status),
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_dummy),
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_dummy1),
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_dummy2),
	OFFSET_uint16(BCCMD_SAVE_CONNECTION_EVENT_FILTERS_dummy3),
	BCCMD_SAVE_CONNECTION_EVENT_FILTERS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ESCOTEST)
	OFFSET_uint16(BCCMD_ESCOTEST_req_type),
	OFFSET_uint16(BCCMD_ESCOTEST_wordlength),
	OFFSET_uint16(BCCMD_ESCOTEST_seq_no),
	OFFSET_uint16(BCCMD_ESCOTEST_varid),
	OFFSET_uint16(BCCMD_ESCOTEST_status),
	OFFSET_uint16(BCCMD_ESCOTEST_function),
	OFFSET_uint16(BCCMD_ESCOTEST_data),
	OFFSET_uint16(BCCMD_ESCOTEST_dummy2),
	OFFSET_uint16(BCCMD_ESCOTEST_dummy3),
	BCCMD_ESCOTEST_pduSize
} ;

enum {
	OFFSET_START(BCCMD_E2_APP_SIZE)
	OFFSET_uint16(BCCMD_E2_APP_SIZE_req_type),
	OFFSET_uint16(BCCMD_E2_APP_SIZE_wordlength),
	OFFSET_uint16(BCCMD_E2_APP_SIZE_seq_no),
	OFFSET_uint16(BCCMD_E2_APP_SIZE_varid),
	OFFSET_uint16(BCCMD_E2_APP_SIZE_status),
	OFFSET_uint16(BCCMD_E2_APP_SIZE_data),
	OFFSET_uint16(BCCMD_E2_APP_SIZE_dummy1),
	OFFSET_uint16(BCCMD_E2_APP_SIZE_dummy2),
	OFFSET_uint16(BCCMD_E2_APP_SIZE_dummy3),
	BCCMD_E2_APP_SIZE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_CONFIGURE)
	OFFSET_uint16(BCCMD_STREAM_CONFIGURE_req_type),
	OFFSET_uint16(BCCMD_STREAM_CONFIGURE_wordlength),
	OFFSET_uint16(BCCMD_STREAM_CONFIGURE_seq_no),
	OFFSET_uint16(BCCMD_STREAM_CONFIGURE_varid),
	OFFSET_uint16(BCCMD_STREAM_CONFIGURE_status),
	OFFSET_uint16(BCCMD_STREAM_CONFIGURE_sid),
	OFFSET_uint16(BCCMD_STREAM_CONFIGURE_key_config),
	OFFSET_uint32(BCCMD_STREAM_CONFIGURE_value),
	BCCMD_STREAM_CONFIGURE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC)
	OFFSET_uint16(BCCMD_ADC_req_type),
	OFFSET_uint16(BCCMD_ADC_wordlength),
	OFFSET_uint16(BCCMD_ADC_seq_no),
	OFFSET_uint16(BCCMD_ADC_varid),
	OFFSET_uint16(BCCMD_ADC_status),
	OFFSET_uint16(BCCMD_ADC_data),
	OFFSET_uint16(BCCMD_ADC_dummy1),
	OFFSET_uint16(BCCMD_ADC_dummy2),
	OFFSET_uint16(BCCMD_ADC_dummy3),
	BCCMD_ADC_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSNEXT_ALL)
	OFFSET_uint16(BCCMD_PSNEXT_ALL_req_type),
	OFFSET_uint16(BCCMD_PSNEXT_ALL_wordlength),
	OFFSET_uint16(BCCMD_PSNEXT_ALL_seq_no),
	OFFSET_uint16(BCCMD_PSNEXT_ALL_varid),
	OFFSET_uint16(BCCMD_PSNEXT_ALL_status),
	OFFSET_uint16(BCCMD_PSNEXT_ALL_id),
	OFFSET_uint16(BCCMD_PSNEXT_ALL_nextid),
	OFFSET_uint16(BCCMD_PSNEXT_ALL_dummy2),
	OFFSET_uint16(BCCMD_PSNEXT_ALL_dummy3),
	BCCMD_PSNEXT_ALL_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_SYNC_SID)
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_req_type),
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_wordlength),
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_seq_no),
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_varid),
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_status),
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_sid1),
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_sid2),
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_dummy2),
	OFFSET_uint16(BCCMD_STREAM_SYNC_SID_dummy3),
	BCCMD_STREAM_SYNC_SID_pduSize
} ;

enum {
	OFFSET_START(BCCMD_MAP_SCO_PCM)
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_req_type),
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_wordlength),
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_seq_no),
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_varid),
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_status),
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_data),
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_dummy1),
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_dummy2),
	OFFSET_uint16(BCCMD_MAP_SCO_PCM_dummy3),
	BCCMD_MAP_SCO_PCM_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FASTPIPE_CREATE)
	OFFSET_uint16(BCCMD_FASTPIPE_CREATE_req_type),
	OFFSET_uint16(BCCMD_FASTPIPE_CREATE_wordlength),
	OFFSET_uint16(BCCMD_FASTPIPE_CREATE_seq_no),
	OFFSET_uint16(BCCMD_FASTPIPE_CREATE_varid),
	OFFSET_uint16(BCCMD_FASTPIPE_CREATE_status),
	OFFSET_uint16(BCCMD_FASTPIPE_CREATE_pipe_id),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_overhead_host),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_capacity_rx_host),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_required_tx_controller),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_desired_tx_controller),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_required_rx_controller),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_desired_rx_controller),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_overhead_controller),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_capacity_tx_controller),
	OFFSET_uint32(BCCMD_FASTPIPE_CREATE_capacity_rx_controller),
	OFFSET_uint16(BCCMD_FASTPIPE_CREATE_handle),
	OFFSET_uint16(BCCMD_FASTPIPE_CREATE_result),
	BCCMD_FASTPIPE_CREATE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COASTER_INDICATIONS)
	OFFSET_uint16(BCCMD_COASTER_INDICATIONS_req_type),
	OFFSET_uint16(BCCMD_COASTER_INDICATIONS_wordlength),
	OFFSET_uint16(BCCMD_COASTER_INDICATIONS_seq_no),
	OFFSET_uint16(BCCMD_COASTER_INDICATIONS_varid),
	OFFSET_uint16(BCCMD_COASTER_INDICATIONS_status),
	OFFSET_uint16(BCCMD_COASTER_INDICATIONS_events),
	OFFSET_uint32(BCCMD_COASTER_INDICATIONS_uu),
	OFFSET_uint16(BCCMD_COASTER_INDICATIONS_optflags),
	BCCMD_COASTER_INDICATIONS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_LED1_ENABLE)
	OFFSET_uint16(BCCMD_LED1_ENABLE_req_type),
	OFFSET_uint16(BCCMD_LED1_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_LED1_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_LED1_ENABLE_varid),
	OFFSET_uint16(BCCMD_LED1_ENABLE_status),
	OFFSET_uint16(BCCMD_LED1_ENABLE_data),
	OFFSET_uint16(BCCMD_LED1_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_LED1_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_LED1_ENABLE_dummy3),
	BCCMD_LED1_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ENABLE_COEX_MESSAGE_REPORTING)
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_req_type),
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_wordlength),
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_seq_no),
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_varid),
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_status),
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_data),
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_dummy1),
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_dummy2),
	OFFSET_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_dummy3),
	BCCMD_ENABLE_COEX_MESSAGE_REPORTING_pduSize
} ;

enum {
	OFFSET_START(BCCMD_DIGITAL_AUDIO_CONFIG)
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_req_type),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_wordlength),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_seq_no),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_varid),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_status),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_pcm_if_id),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_options),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_dummy2),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_dummy3),
	BCCMD_DIGITAL_AUDIO_CONFIG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHIPVER)
	OFFSET_uint16(BCCMD_CHIPVER_req_type),
	OFFSET_uint16(BCCMD_CHIPVER_wordlength),
	OFFSET_uint16(BCCMD_CHIPVER_seq_no),
	OFFSET_uint16(BCCMD_CHIPVER_varid),
	OFFSET_uint16(BCCMD_CHIPVER_status),
	OFFSET_uint16(BCCMD_CHIPVER_data),
	OFFSET_uint16(BCCMD_CHIPVER_dummy1),
	OFFSET_uint16(BCCMD_CHIPVER_dummy2),
	OFFSET_uint16(BCCMD_CHIPVER_dummy3),
	BCCMD_CHIPVER_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SPI_LOCK_STATUS)
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_req_type),
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_wordlength),
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_seq_no),
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_varid),
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_status),
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_data),
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_dummy1),
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_dummy2),
	OFFSET_uint16(BCCMD_SPI_LOCK_STATUS_dummy3),
	BCCMD_SPI_LOCK_STATUS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC0)
	OFFSET_uint16(BCCMD_ADC0_req_type),
	OFFSET_uint16(BCCMD_ADC0_wordlength),
	OFFSET_uint16(BCCMD_ADC0_seq_no),
	OFFSET_uint16(BCCMD_ADC0_varid),
	OFFSET_uint16(BCCMD_ADC0_status),
	OFFSET_uint16(BCCMD_ADC0_data),
	OFFSET_uint16(BCCMD_ADC0_dummy1),
	OFFSET_uint16(BCCMD_ADC0_dummy2),
	OFFSET_uint16(BCCMD_ADC0_dummy3),
	BCCMD_ADC0_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ENABLE_MEDIUM_RATE)
	OFFSET_uint16(BCCMD_ENABLE_MEDIUM_RATE_req_type),
	OFFSET_uint16(BCCMD_ENABLE_MEDIUM_RATE_wordlength),
	OFFSET_uint16(BCCMD_ENABLE_MEDIUM_RATE_seq_no),
	OFFSET_uint16(BCCMD_ENABLE_MEDIUM_RATE_varid),
	OFFSET_uint16(BCCMD_ENABLE_MEDIUM_RATE_status),
	OFFSET_uint16(BCCMD_ENABLE_MEDIUM_RATE_hci_handle),
	OFFSET_bool(BCCMD_ENABLE_MEDIUM_RATE_enable),
	OFFSET_uint16(BCCMD_ENABLE_MEDIUM_RATE_dummy2),
	OFFSET_uint16(BCCMD_ENABLE_MEDIUM_RATE_dummy3),
	BCCMD_ENABLE_MEDIUM_RATE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC1)
	OFFSET_uint16(BCCMD_ADC1_req_type),
	OFFSET_uint16(BCCMD_ADC1_wordlength),
	OFFSET_uint16(BCCMD_ADC1_seq_no),
	OFFSET_uint16(BCCMD_ADC1_varid),
	OFFSET_uint16(BCCMD_ADC1_status),
	OFFSET_uint16(BCCMD_ADC1_data),
	OFFSET_uint16(BCCMD_ADC1_dummy1),
	OFFSET_uint16(BCCMD_ADC1_dummy2),
	OFFSET_uint16(BCCMD_ADC1_dummy3),
	BCCMD_ADC1_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FMTX_SET_CDAC)
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_req_type),
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_wordlength),
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_seq_no),
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_varid),
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_status),
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_data),
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_dummy1),
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_dummy2),
	OFFSET_uint16(BCCMD_FMTX_SET_CDAC_dummy3),
	BCCMD_FMTX_SET_CDAC_pduSize
} ;

enum {
	OFFSET_START(BCCMD_DIGITAL_AUDIO_RATE)
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_RATE_req_type),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_RATE_wordlength),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_RATE_seq_no),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_RATE_varid),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_RATE_status),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_RATE_pcm_if_id),
	OFFSET_uint32(BCCMD_DIGITAL_AUDIO_RATE_frequency),
	OFFSET_uint16(BCCMD_DIGITAL_AUDIO_RATE_samp_size),
	BCCMD_DIGITAL_AUDIO_RATE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC2)
	OFFSET_uint16(BCCMD_ADC2_req_type),
	OFFSET_uint16(BCCMD_ADC2_wordlength),
	OFFSET_uint16(BCCMD_ADC2_seq_no),
	OFFSET_uint16(BCCMD_ADC2_varid),
	OFFSET_uint16(BCCMD_ADC2_status),
	OFFSET_uint16(BCCMD_ADC2_data),
	OFFSET_uint16(BCCMD_ADC2_dummy1),
	OFFSET_uint16(BCCMD_ADC2_dummy2),
	OFFSET_uint16(BCCMD_ADC2_dummy3),
	BCCMD_ADC2_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PROVOKE_PANIC)
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_req_type),
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_wordlength),
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_seq_no),
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_varid),
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_status),
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_data),
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_dummy1),
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_dummy2),
	OFFSET_uint16(BCCMD_PROVOKE_PANIC_dummy3),
	BCCMD_PROVOKE_PANIC_pduSize
} ;

enum {
	OFFSET_START(BCCMD_GET_CLR_EVT)
	OFFSET_uint16(BCCMD_GET_CLR_EVT_req_type),
	OFFSET_uint16(BCCMD_GET_CLR_EVT_wordlength),
	OFFSET_uint16(BCCMD_GET_CLR_EVT_seq_no),
	OFFSET_uint16(BCCMD_GET_CLR_EVT_varid),
	OFFSET_uint16(BCCMD_GET_CLR_EVT_status),
	OFFSET_uint16(BCCMD_GET_CLR_EVT_evtcntid),
	OFFSET_uint16(BCCMD_GET_CLR_EVT_cnt),
	OFFSET_uint16(BCCMD_GET_CLR_EVT_dummy2),
	OFFSET_uint16(BCCMD_GET_CLR_EVT_dummy3),
	BCCMD_GET_CLR_EVT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_E2_DEVICE)
	OFFSET_uint16(BCCMD_E2_DEVICE_req_type),
	OFFSET_uint16(BCCMD_E2_DEVICE_wordlength),
	OFFSET_uint16(BCCMD_E2_DEVICE_seq_no),
	OFFSET_uint16(BCCMD_E2_DEVICE_varid),
	OFFSET_uint16(BCCMD_E2_DEVICE_status),
	OFFSET_uint16(BCCMD_E2_DEVICE_log2_bytes),
	OFFSET_uint16(BCCMD_E2_DEVICE_addr_mask),
	OFFSET_uint16(BCCMD_E2_DEVICE_dummy2),
	OFFSET_uint16(BCCMD_E2_DEVICE_dummy3),
	BCCMD_E2_DEVICE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC3)
	OFFSET_uint16(BCCMD_ADC3_req_type),
	OFFSET_uint16(BCCMD_ADC3_wordlength),
	OFFSET_uint16(BCCMD_ADC3_seq_no),
	OFFSET_uint16(BCCMD_ADC3_varid),
	OFFSET_uint16(BCCMD_ADC3_status),
	OFFSET_uint16(BCCMD_ADC3_data),
	OFFSET_uint16(BCCMD_ADC3_dummy1),
	OFFSET_uint16(BCCMD_ADC3_dummy2),
	OFFSET_uint16(BCCMD_ADC3_dummy3),
	BCCMD_ADC3_pduSize
} ;

enum {
	OFFSET_START(BCCMD_INTERFACE_VERSION)
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_req_type),
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_wordlength),
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_seq_no),
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_varid),
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_status),
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_data),
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_dummy1),
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_dummy2),
	OFFSET_uint16(BCCMD_INTERFACE_VERSION_dummy3),
	BCCMD_INTERFACE_VERSION_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC4)
	OFFSET_uint16(BCCMD_ADC4_req_type),
	OFFSET_uint16(BCCMD_ADC4_wordlength),
	OFFSET_uint16(BCCMD_ADC4_seq_no),
	OFFSET_uint16(BCCMD_ADC4_varid),
	OFFSET_uint16(BCCMD_ADC4_status),
	OFFSET_uint16(BCCMD_ADC4_data),
	OFFSET_uint16(BCCMD_ADC4_dummy1),
	OFFSET_uint16(BCCMD_ADC4_dummy2),
	OFFSET_uint16(BCCMD_ADC4_dummy3),
	BCCMD_ADC4_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC5)
	OFFSET_uint16(BCCMD_ADC5_req_type),
	OFFSET_uint16(BCCMD_ADC5_wordlength),
	OFFSET_uint16(BCCMD_ADC5_seq_no),
	OFFSET_uint16(BCCMD_ADC5_varid),
	OFFSET_uint16(BCCMD_ADC5_status),
	OFFSET_uint16(BCCMD_ADC5_data),
	OFFSET_uint16(BCCMD_ADC5_dummy1),
	OFFSET_uint16(BCCMD_ADC5_dummy2),
	OFFSET_uint16(BCCMD_ADC5_dummy3),
	BCCMD_ADC5_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC6)
	OFFSET_uint16(BCCMD_ADC6_req_type),
	OFFSET_uint16(BCCMD_ADC6_wordlength),
	OFFSET_uint16(BCCMD_ADC6_seq_no),
	OFFSET_uint16(BCCMD_ADC6_varid),
	OFFSET_uint16(BCCMD_ADC6_status),
	OFFSET_uint16(BCCMD_ADC6_data),
	OFFSET_uint16(BCCMD_ADC6_dummy1),
	OFFSET_uint16(BCCMD_ADC6_dummy2),
	OFFSET_uint16(BCCMD_ADC6_dummy3),
	BCCMD_ADC6_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC7)
	OFFSET_uint16(BCCMD_ADC7_req_type),
	OFFSET_uint16(BCCMD_ADC7_wordlength),
	OFFSET_uint16(BCCMD_ADC7_seq_no),
	OFFSET_uint16(BCCMD_ADC7_varid),
	OFFSET_uint16(BCCMD_ADC7_status),
	OFFSET_uint16(BCCMD_ADC7_data),
	OFFSET_uint16(BCCMD_ADC7_dummy1),
	OFFSET_uint16(BCCMD_ADC7_dummy2),
	OFFSET_uint16(BCCMD_ADC7_dummy3),
	BCCMD_ADC7_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC8)
	OFFSET_uint16(BCCMD_ADC8_req_type),
	OFFSET_uint16(BCCMD_ADC8_wordlength),
	OFFSET_uint16(BCCMD_ADC8_seq_no),
	OFFSET_uint16(BCCMD_ADC8_varid),
	OFFSET_uint16(BCCMD_ADC8_status),
	OFFSET_uint16(BCCMD_ADC8_data),
	OFFSET_uint16(BCCMD_ADC8_dummy1),
	OFFSET_uint16(BCCMD_ADC8_dummy2),
	OFFSET_uint16(BCCMD_ADC8_dummy3),
	BCCMD_ADC8_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC9)
	OFFSET_uint16(BCCMD_ADC9_req_type),
	OFFSET_uint16(BCCMD_ADC9_wordlength),
	OFFSET_uint16(BCCMD_ADC9_seq_no),
	OFFSET_uint16(BCCMD_ADC9_varid),
	OFFSET_uint16(BCCMD_ADC9_status),
	OFFSET_uint16(BCCMD_ADC9_data),
	OFFSET_uint16(BCCMD_ADC9_dummy1),
	OFFSET_uint16(BCCMD_ADC9_dummy2),
	OFFSET_uint16(BCCMD_ADC9_dummy3),
	BCCMD_ADC9_pduSize
} ;

enum {
	OFFSET_START(BCCMD_KALDEBUG)
	OFFSET_uint16(BCCMD_KALDEBUG_req_type),
	OFFSET_uint16(BCCMD_KALDEBUG_wordlength),
	OFFSET_uint16(BCCMD_KALDEBUG_seq_no),
	OFFSET_uint16(BCCMD_KALDEBUG_varid),
	OFFSET_uint16(BCCMD_KALDEBUG_status),
	OFFSET_uint16(BCCMD_KALDEBUG_function),
	OFFSET_uint16(BCCMD_KALDEBUG_dummy1),
	OFFSET_uint16(BCCMD_KALDEBUG_dummy2),
	OFFSET_uint16(BCCMD_KALDEBUG_dummy3),
	BCCMD_KALDEBUG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHARGER_SUPPRESS_LED0)
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_req_type),
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_wordlength),
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_seq_no),
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_varid),
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_status),
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_data),
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_dummy1),
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_dummy2),
	OFFSET_uint16(BCCMD_CHARGER_SUPPRESS_LED0_dummy3),
	BCCMD_CHARGER_SUPPRESS_LED0_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO_STRONG_BIAS)
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_req_type),
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_wordlength),
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_seq_no),
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_varid),
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_status),
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_data),
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_dummy1),
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_dummy2),
	OFFSET_uint16(BCCMD_PIO_STRONG_BIAS_dummy3),
	BCCMD_PIO_STRONG_BIAS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHARGER_STATUS)
	OFFSET_uint16(BCCMD_CHARGER_STATUS_req_type),
	OFFSET_uint16(BCCMD_CHARGER_STATUS_wordlength),
	OFFSET_uint16(BCCMD_CHARGER_STATUS_seq_no),
	OFFSET_uint16(BCCMD_CHARGER_STATUS_varid),
	OFFSET_uint16(BCCMD_CHARGER_STATUS_status),
	OFFSET_uint16(BCCMD_CHARGER_STATUS_data),
	OFFSET_uint16(BCCMD_CHARGER_STATUS_dummy1),
	OFFSET_uint16(BCCMD_CHARGER_STATUS_dummy2),
	OFFSET_uint16(BCCMD_CHARGER_STATUS_dummy3),
	BCCMD_CHARGER_STATUS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PREVIN_TUNNEL)
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_req_type),
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_wordlength),
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_seq_no),
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_varid),
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_status),
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_message_num),
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_length),
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_message),
	OFFSET_uint16(BCCMD_PREVIN_TUNNEL_dummy3),
	BCCMD_PREVIN_TUNNEL_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CREATE_OPERATOR_C)
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_req_type),
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_wordlength),
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_seq_no),
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_varid),
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_status),
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_id),
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_num_patches),
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_skip_count),
	OFFSET_uint16(BCCMD_CREATE_OPERATOR_C_skip_flag),
	BCCMD_CREATE_OPERATOR_C_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COASTER_DEL_SV)
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_req_type),
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_wordlength),
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_seq_no),
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_varid),
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_status),
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_sv_pairs1),
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_sv_pairs2),
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_sv_pairs3),
	OFFSET_uint16(BCCMD_COASTER_DEL_SV_sv_pairs4),
	BCCMD_COASTER_DEL_SV_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FIRMWARE_CHECK_MASK)
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_req_type),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_wordlength),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_seq_no),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_varid),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_status),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_data),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_dummy1),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_dummy2),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_MASK_dummy3),
	BCCMD_FIRMWARE_CHECK_MASK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PRESERVE_VALID)
	OFFSET_uint16(BCCMD_PRESERVE_VALID_req_type),
	OFFSET_uint16(BCCMD_PRESERVE_VALID_wordlength),
	OFFSET_uint16(BCCMD_PRESERVE_VALID_seq_no),
	OFFSET_uint16(BCCMD_PRESERVE_VALID_varid),
	OFFSET_uint16(BCCMD_PRESERVE_VALID_status),
	OFFSET_uint16(BCCMD_PRESERVE_VALID_data),
	OFFSET_uint16(BCCMD_PRESERVE_VALID_dummy1),
	OFFSET_uint16(BCCMD_PRESERVE_VALID_dummy2),
	OFFSET_uint16(BCCMD_PRESERVE_VALID_dummy3),
	BCCMD_PRESERVE_VALID_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CLKSW_CURRENT_CLOCKS)
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_req_type),
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_wordlength),
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_seq_no),
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_varid),
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_status),
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_data),
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_dummy1),
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_dummy2),
	OFFSET_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_dummy3),
	BCCMD_CLKSW_CURRENT_CLOCKS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO32)
	OFFSET_uint16(BCCMD_PIO32_req_type),
	OFFSET_uint16(BCCMD_PIO32_wordlength),
	OFFSET_uint16(BCCMD_PIO32_seq_no),
	OFFSET_uint16(BCCMD_PIO32_varid),
	OFFSET_uint16(BCCMD_PIO32_status),
	OFFSET_uint32(BCCMD_PIO32_mask),
	OFFSET_uint32(BCCMD_PIO32_bits),
	OFFSET_uint32(BCCMD_PIO32_result),
	BCCMD_PIO32_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STREAM_CONNECT)
	OFFSET_uint16(BCCMD_STREAM_CONNECT_req_type),
	OFFSET_uint16(BCCMD_STREAM_CONNECT_wordlength),
	OFFSET_uint16(BCCMD_STREAM_CONNECT_seq_no),
	OFFSET_uint16(BCCMD_STREAM_CONNECT_varid),
	OFFSET_uint16(BCCMD_STREAM_CONNECT_status),
	OFFSET_uint16(BCCMD_STREAM_CONNECT_source_sid),
	OFFSET_uint16(BCCMD_STREAM_CONNECT_sink_sid),
	OFFSET_uint16(BCCMD_STREAM_CONNECT_dummy2),
	OFFSET_uint16(BCCMD_STREAM_CONNECT_dummy3),
	BCCMD_STREAM_CONNECT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_HQ_SCRAPING_ENABLE)
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_req_type),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_varid),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_status),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_data),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_HQ_SCRAPING_ENABLE_dummy3),
	BCCMD_HQ_SCRAPING_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CLOCK_MODULATION_CONFIG)
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_req_type),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_wordlength),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_seq_no),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_varid),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_status),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_amount),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_rate),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_wibbling),
	OFFSET_uint16(BCCMD_CLOCK_MODULATION_CONFIG_dummy3),
	BCCMD_CLOCK_MODULATION_CONFIG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_GPS_STOP)
	OFFSET_uint16(BCCMD_GPS_STOP_req_type),
	OFFSET_uint16(BCCMD_GPS_STOP_wordlength),
	OFFSET_uint16(BCCMD_GPS_STOP_seq_no),
	OFFSET_uint16(BCCMD_GPS_STOP_varid),
	OFFSET_uint16(BCCMD_GPS_STOP_status),
	OFFSET_uint16(BCCMD_GPS_STOP_flags),
	OFFSET_uint16(BCCMD_GPS_STOP_dummy1),
	OFFSET_uint16(BCCMD_GPS_STOP_dummy2),
	OFFSET_uint16(BCCMD_GPS_STOP_dummy3),
	BCCMD_GPS_STOP_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CRYPTKEYLEN)
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_req_type),
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_wordlength),
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_seq_no),
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_varid),
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_status),
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_hci_handle),
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_keylen),
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_dummy2),
	OFFSET_uint16(BCCMD_CRYPTKEYLEN_dummy3),
	BCCMD_CRYPTKEYLEN_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSCLRALLS)
	OFFSET_uint16(BCCMD_PSCLRALLS_req_type),
	OFFSET_uint16(BCCMD_PSCLRALLS_wordlength),
	OFFSET_uint16(BCCMD_PSCLRALLS_seq_no),
	OFFSET_uint16(BCCMD_PSCLRALLS_varid),
	OFFSET_uint16(BCCMD_PSCLRALLS_status),
	OFFSET_uint16(BCCMD_PSCLRALLS_data),
	OFFSET_uint16(BCCMD_PSCLRALLS_dummy1),
	OFFSET_uint16(BCCMD_PSCLRALLS_dummy2),
	OFFSET_uint16(BCCMD_PSCLRALLS_dummy3),
	BCCMD_PSCLRALLS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PCM_SLOTS_PER_FRAME)
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_req_type),
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_wordlength),
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_seq_no),
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_varid),
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_status),
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_pcm_interface),
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_slots_per_frame),
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_dummy2),
	OFFSET_uint16(BCCMD_PCM_SLOTS_PER_FRAME_dummy3),
	BCCMD_PCM_SLOTS_PER_FRAME_pduSize
} ;

enum {
	OFFSET_START(BCCMD_WARM_RESET)
	OFFSET_uint16(BCCMD_WARM_RESET_req_type),
	OFFSET_uint16(BCCMD_WARM_RESET_wordlength),
	OFFSET_uint16(BCCMD_WARM_RESET_seq_no),
	OFFSET_uint16(BCCMD_WARM_RESET_varid),
	OFFSET_uint16(BCCMD_WARM_RESET_status),
	OFFSET_uint16(BCCMD_WARM_RESET_dummy),
	OFFSET_uint16(BCCMD_WARM_RESET_dummy1),
	OFFSET_uint16(BCCMD_WARM_RESET_dummy2),
	OFFSET_uint16(BCCMD_WARM_RESET_dummy3),
	BCCMD_WARM_RESET_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FASTPIPE_DESTROY)
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_req_type),
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_wordlength),
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_seq_no),
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_varid),
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_status),
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_pipe_id),
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_result),
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_dummy2),
	OFFSET_uint16(BCCMD_FASTPIPE_DESTROY_dummy3),
	BCCMD_FASTPIPE_DESTROY_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SYNC_CLOCK)
	OFFSET_uint16(BCCMD_SYNC_CLOCK_req_type),
	OFFSET_uint16(BCCMD_SYNC_CLOCK_wordlength),
	OFFSET_uint16(BCCMD_SYNC_CLOCK_seq_no),
	OFFSET_uint16(BCCMD_SYNC_CLOCK_varid),
	OFFSET_uint16(BCCMD_SYNC_CLOCK_status),
	OFFSET_uint16(BCCMD_SYNC_CLOCK_dummy),
	OFFSET_uint16(BCCMD_SYNC_CLOCK_dummy1),
	OFFSET_uint16(BCCMD_SYNC_CLOCK_dummy2),
	OFFSET_uint16(BCCMD_SYNC_CLOCK_dummy3),
	BCCMD_SYNC_CLOCK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BLE_RADIO_TEST)
	OFFSET_uint16(BCCMD_BLE_RADIO_TEST_req_type),
	OFFSET_uint16(BCCMD_BLE_RADIO_TEST_wordlength),
	OFFSET_uint16(BCCMD_BLE_RADIO_TEST_seq_no),
	OFFSET_uint16(BCCMD_BLE_RADIO_TEST_varid),
	OFFSET_uint16(BCCMD_BLE_RADIO_TEST_status),
	OFFSET_uint16(BCCMD_BLE_RADIO_TEST_command),
	OFFSET_uint8(BCCMD_BLE_RADIO_TEST_channel),
	OFFSET_uint8(BCCMD_BLE_RADIO_TEST_length),
	OFFSET_uint8(BCCMD_BLE_RADIO_TEST_payload),
	BCCMD_BLE_RADIO_TEST_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSNEXT)
	OFFSET_uint16(BCCMD_PSNEXT_req_type),
	OFFSET_uint16(BCCMD_PSNEXT_wordlength),
	OFFSET_uint16(BCCMD_PSNEXT_seq_no),
	OFFSET_uint16(BCCMD_PSNEXT_varid),
	OFFSET_uint16(BCCMD_PSNEXT_status),
	OFFSET_uint16(BCCMD_PSNEXT_id),
	OFFSET_uint16(BCCMD_PSNEXT_stores),
	OFFSET_uint16(BCCMD_PSNEXT_nextid),
	OFFSET_uint16(BCCMD_PSNEXT_dummy3),
	BCCMD_PSNEXT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ENABLE_TX)
	OFFSET_uint16(BCCMD_ENABLE_TX_req_type),
	OFFSET_uint16(BCCMD_ENABLE_TX_wordlength),
	OFFSET_uint16(BCCMD_ENABLE_TX_seq_no),
	OFFSET_uint16(BCCMD_ENABLE_TX_varid),
	OFFSET_uint16(BCCMD_ENABLE_TX_status),
	OFFSET_uint16(BCCMD_ENABLE_TX_dummy),
	OFFSET_uint16(BCCMD_ENABLE_TX_dummy1),
	OFFSET_uint16(BCCMD_ENABLE_TX_dummy2),
	OFFSET_uint16(BCCMD_ENABLE_TX_dummy3),
	BCCMD_ENABLE_TX_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PSU_SMPS_ENABLE)
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_req_type),
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_varid),
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_status),
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_data),
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_PSU_SMPS_ENABLE_dummy3),
	BCCMD_PSU_SMPS_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_UNLOCK_OTP)
	OFFSET_uint16(BCCMD_UNLOCK_OTP_req_type),
	OFFSET_uint16(BCCMD_UNLOCK_OTP_wordlength),
	OFFSET_uint16(BCCMD_UNLOCK_OTP_seq_no),
	OFFSET_uint16(BCCMD_UNLOCK_OTP_varid),
	OFFSET_uint16(BCCMD_UNLOCK_OTP_status),
	OFFSET_uint16(BCCMD_UNLOCK_OTP_data),
	OFFSET_uint16(BCCMD_UNLOCK_OTP_dummy1),
	OFFSET_uint16(BCCMD_UNLOCK_OTP_dummy2),
	OFFSET_uint16(BCCMD_UNLOCK_OTP_dummy3),
	BCCMD_UNLOCK_OTP_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BABEL_SPI_GET_LINE_STATUS)
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_req_type),
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_wordlength),
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_seq_no),
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_varid),
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_status),
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_data),
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_dummy1),
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_dummy2),
	OFFSET_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_dummy3),
	BCCMD_BABEL_SPI_GET_LINE_STATUS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_GPS_CONFIG)
	OFFSET_uint16(BCCMD_GPS_CONFIG_req_type),
	OFFSET_uint16(BCCMD_GPS_CONFIG_wordlength),
	OFFSET_uint16(BCCMD_GPS_CONFIG_seq_no),
	OFFSET_uint16(BCCMD_GPS_CONFIG_varid),
	OFFSET_uint16(BCCMD_GPS_CONFIG_status),
	OFFSET_uint16(BCCMD_GPS_CONFIG_dummy),
	OFFSET_uint16(BCCMD_GPS_CONFIG_dummy1),
	OFFSET_uint16(BCCMD_GPS_CONFIG_dummy2),
	OFFSET_uint16(BCCMD_GPS_CONFIG_dummy3),
	BCCMD_GPS_CONFIG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BC3PSU)
	OFFSET_uint16(BCCMD_BC3PSU_req_type),
	OFFSET_uint16(BCCMD_BC3PSU_wordlength),
	OFFSET_uint16(BCCMD_BC3PSU_seq_no),
	OFFSET_uint16(BCCMD_BC3PSU_varid),
	OFFSET_uint16(BCCMD_BC3PSU_status),
	OFFSET_uint16(BCCMD_BC3PSU_function),
	OFFSET_uint16(BCCMD_BC3PSU_data),
	OFFSET_uint16(BCCMD_BC3PSU_dummy2),
	OFFSET_uint16(BCCMD_BC3PSU_dummy3),
	BCCMD_BC3PSU_pduSize
} ;

enum {
	OFFSET_START(BCCMD_DEEP_SLEEP_PERIOD)
	OFFSET_uint16(BCCMD_DEEP_SLEEP_PERIOD_req_type),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_PERIOD_wordlength),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_PERIOD_seq_no),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_PERIOD_varid),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_PERIOD_status),
	OFFSET_uint32(BCCMD_DEEP_SLEEP_PERIOD_data),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_PERIOD_dummy1),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_PERIOD_dummy2),
	OFFSET_uint16(BCCMD_DEEP_SLEEP_PERIOD_dummy3),
	BCCMD_DEEP_SLEEP_PERIOD_pduSize
} ;

enum {
	OFFSET_START(BCCMD_HOPPING_ON)
	OFFSET_uint16(BCCMD_HOPPING_ON_req_type),
	OFFSET_uint16(BCCMD_HOPPING_ON_wordlength),
	OFFSET_uint16(BCCMD_HOPPING_ON_seq_no),
	OFFSET_uint16(BCCMD_HOPPING_ON_varid),
	OFFSET_uint16(BCCMD_HOPPING_ON_status),
	OFFSET_uint16(BCCMD_HOPPING_ON_dummy),
	OFFSET_uint16(BCCMD_HOPPING_ON_dummy1),
	OFFSET_uint16(BCCMD_HOPPING_ON_dummy2),
	OFFSET_uint16(BCCMD_HOPPING_ON_dummy3),
	BCCMD_HOPPING_ON_pduSize
} ;

enum {
	OFFSET_START(BCCMD_GSM_RX_MODE)
	OFFSET_uint16(BCCMD_GSM_RX_MODE_req_type),
	OFFSET_uint16(BCCMD_GSM_RX_MODE_wordlength),
	OFFSET_uint16(BCCMD_GSM_RX_MODE_seq_no),
	OFFSET_uint16(BCCMD_GSM_RX_MODE_varid),
	OFFSET_uint16(BCCMD_GSM_RX_MODE_status),
	OFFSET_uint16(BCCMD_GSM_RX_MODE_data),
	OFFSET_uint16(BCCMD_GSM_RX_MODE_dummy1),
	OFFSET_uint16(BCCMD_GSM_RX_MODE_dummy2),
	OFFSET_uint16(BCCMD_GSM_RX_MODE_dummy3),
	BCCMD_GSM_RX_MODE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO32_SET_PIN_FUNCTION)
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_req_type),
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_wordlength),
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_seq_no),
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_varid),
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_status),
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_pin_number),
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_function),
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_dummy2),
	OFFSET_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_dummy3),
	BCCMD_PIO32_SET_PIN_FUNCTION_pduSize
} ;

enum {
	OFFSET_START(BCCMD_RADIOTEST_INTERFACE_VERSION)
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_req_type),
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_wordlength),
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_seq_no),
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_varid),
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_status),
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_data),
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_dummy1),
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_dummy2),
	OFFSET_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_dummy3),
	BCCMD_RADIOTEST_INTERFACE_VERSION_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BOOTMODE)
	OFFSET_uint16(BCCMD_BOOTMODE_req_type),
	OFFSET_uint16(BCCMD_BOOTMODE_wordlength),
	OFFSET_uint16(BCCMD_BOOTMODE_seq_no),
	OFFSET_uint16(BCCMD_BOOTMODE_varid),
	OFFSET_uint16(BCCMD_BOOTMODE_status),
	OFFSET_uint16(BCCMD_BOOTMODE_data),
	OFFSET_uint16(BCCMD_BOOTMODE_dummy1),
	OFFSET_uint16(BCCMD_BOOTMODE_dummy2),
	OFFSET_uint16(BCCMD_BOOTMODE_dummy3),
	BCCMD_BOOTMODE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_DEFRAG_RESET)
	OFFSET_uint16(BCCMD_DEFRAG_RESET_req_type),
	OFFSET_uint16(BCCMD_DEFRAG_RESET_wordlength),
	OFFSET_uint16(BCCMD_DEFRAG_RESET_seq_no),
	OFFSET_uint16(BCCMD_DEFRAG_RESET_varid),
	OFFSET_uint16(BCCMD_DEFRAG_RESET_status),
	OFFSET_uint16(BCCMD_DEFRAG_RESET_dummy),
	OFFSET_uint16(BCCMD_DEFRAG_RESET_dummy1),
	OFFSET_uint16(BCCMD_DEFRAG_RESET_dummy2),
	OFFSET_uint16(BCCMD_DEFRAG_RESET_dummy3),
	BCCMD_DEFRAG_RESET_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CANCEL_PAGE)
	OFFSET_uint16(BCCMD_CANCEL_PAGE_req_type),
	OFFSET_uint16(BCCMD_CANCEL_PAGE_wordlength),
	OFFSET_uint16(BCCMD_CANCEL_PAGE_seq_no),
	OFFSET_uint16(BCCMD_CANCEL_PAGE_varid),
	OFFSET_uint16(BCCMD_CANCEL_PAGE_status),
	OFFSET_uint16(BCCMD_CANCEL_PAGE_dummy),
	OFFSET_uint16(BCCMD_CANCEL_PAGE_dummy1),
	OFFSET_uint16(BCCMD_CANCEL_PAGE_dummy2),
	OFFSET_uint16(BCCMD_CANCEL_PAGE_dummy3),
	BCCMD_CANCEL_PAGE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_MAP_SCO_AUDIO)
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_req_type),
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_wordlength),
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_seq_no),
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_varid),
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_status),
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_source_sid),
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_sink_sid),
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_dummy2),
	OFFSET_uint16(BCCMD_MAP_SCO_AUDIO_dummy3),
	BCCMD_MAP_SCO_AUDIO_pduSize
} ;

enum {
	OFFSET_START(BCCMD_NO_VARIABLE)
	OFFSET_uint16(BCCMD_NO_VARIABLE_req_type),
	OFFSET_uint16(BCCMD_NO_VARIABLE_wordlength),
	OFFSET_uint16(BCCMD_NO_VARIABLE_seq_no),
	OFFSET_uint16(BCCMD_NO_VARIABLE_varid),
	OFFSET_uint16(BCCMD_NO_VARIABLE_status),
	OFFSET_uint16(BCCMD_NO_VARIABLE_dummy),
	OFFSET_uint16(BCCMD_NO_VARIABLE_dummy1),
	OFFSET_uint16(BCCMD_NO_VARIABLE_dummy2),
	OFFSET_uint16(BCCMD_NO_VARIABLE_dummy3),
	BCCMD_NO_VARIABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_L2CAP_CRC)
	OFFSET_uint16(BCCMD_L2CAP_CRC_req_type),
	OFFSET_uint16(BCCMD_L2CAP_CRC_wordlength),
	OFFSET_uint16(BCCMD_L2CAP_CRC_seq_no),
	OFFSET_uint16(BCCMD_L2CAP_CRC_varid),
	OFFSET_uint16(BCCMD_L2CAP_CRC_status),
	OFFSET_uint16(BCCMD_L2CAP_CRC_hci_handle),
	OFFSET_bool(BCCMD_L2CAP_CRC_tx_cid),
	OFFSET_uint16(BCCMD_L2CAP_CRC_cid),
	OFFSET_bool(BCCMD_L2CAP_CRC_enable),
	BCCMD_L2CAP_CRC_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC_READ)
	OFFSET_uint16(BCCMD_ADC_READ_req_type),
	OFFSET_uint16(BCCMD_ADC_READ_wordlength),
	OFFSET_uint16(BCCMD_ADC_READ_seq_no),
	OFFSET_uint16(BCCMD_ADC_READ_varid),
	OFFSET_uint16(BCCMD_ADC_READ_status),
	OFFSET_uint16(BCCMD_ADC_READ_data),
	OFFSET_uint16(BCCMD_ADC_READ_dummy1),
	OFFSET_uint16(BCCMD_ADC_READ_dummy2),
	OFFSET_uint16(BCCMD_ADC_READ_dummy3),
	BCCMD_ADC_READ_pduSize
} ;

enum {
	OFFSET_START(BCCMD_AUX_DAC)
	OFFSET_uint16(BCCMD_AUX_DAC_req_type),
	OFFSET_uint16(BCCMD_AUX_DAC_wordlength),
	OFFSET_uint16(BCCMD_AUX_DAC_seq_no),
	OFFSET_uint16(BCCMD_AUX_DAC_varid),
	OFFSET_uint16(BCCMD_AUX_DAC_status),
	OFFSET_uint16(BCCMD_AUX_DAC_data),
	OFFSET_uint16(BCCMD_AUX_DAC_dummy1),
	OFFSET_uint16(BCCMD_AUX_DAC_dummy2),
	OFFSET_uint16(BCCMD_AUX_DAC_dummy3),
	BCCMD_AUX_DAC_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PROVOKE_DELAYED_PANIC)
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_req_type),
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_wordlength),
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_seq_no),
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_varid),
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_status),
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_data),
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_dummy1),
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_dummy2),
	OFFSET_uint16(BCCMD_PROVOKE_DELAYED_PANIC_dummy3),
	BCCMD_PROVOKE_DELAYED_PANIC_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BABEL_SPI_STOP)
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_req_type),
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_wordlength),
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_seq_no),
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_varid),
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_status),
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_dummy),
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_dummy1),
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_dummy2),
	OFFSET_uint16(BCCMD_BABEL_SPI_STOP_dummy3),
	BCCMD_BABEL_SPI_STOP_pduSize
} ;

enum {
	OFFSET_START(BCCMD_SPI_LOCK_STAY_LOCKED_KEY)
	OFFSET_uint16(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_req_type),
	OFFSET_uint16(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_wordlength),
	OFFSET_uint16(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_seq_no),
	OFFSET_uint16(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_varid),
	OFFSET_uint16(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_status),
	OFFSET_uint32(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_data),
	OFFSET_uint16(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_dummy1),
	OFFSET_uint16(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_dummy2),
	OFFSET_uint16(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_dummy3),
	BCCMD_SPI_LOCK_STAY_LOCKED_KEY_pduSize
} ;

enum {
	OFFSET_START(BCCMD_INFORM_LINK_PROFILES)
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_req_type),
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_wordlength),
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_seq_no),
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_varid),
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_status),
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_handle),
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_profiles),
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_dummy2),
	OFFSET_uint16(BCCMD_INFORM_LINK_PROFILES_dummy3),
	BCCMD_INFORM_LINK_PROFILES_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC10)
	OFFSET_uint16(BCCMD_ADC10_req_type),
	OFFSET_uint16(BCCMD_ADC10_wordlength),
	OFFSET_uint16(BCCMD_ADC10_seq_no),
	OFFSET_uint16(BCCMD_ADC10_varid),
	OFFSET_uint16(BCCMD_ADC10_status),
	OFFSET_uint16(BCCMD_ADC10_data),
	OFFSET_uint16(BCCMD_ADC10_dummy1),
	OFFSET_uint16(BCCMD_ADC10_dummy2),
	OFFSET_uint16(BCCMD_ADC10_dummy3),
	BCCMD_ADC10_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC11)
	OFFSET_uint16(BCCMD_ADC11_req_type),
	OFFSET_uint16(BCCMD_ADC11_wordlength),
	OFFSET_uint16(BCCMD_ADC11_seq_no),
	OFFSET_uint16(BCCMD_ADC11_varid),
	OFFSET_uint16(BCCMD_ADC11_status),
	OFFSET_uint16(BCCMD_ADC11_data),
	OFFSET_uint16(BCCMD_ADC11_dummy1),
	OFFSET_uint16(BCCMD_ADC11_dummy2),
	OFFSET_uint16(BCCMD_ADC11_dummy3),
	BCCMD_ADC11_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BABEL_SPI_DELAY)
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_req_type),
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_wordlength),
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_seq_no),
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_varid),
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_status),
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_data),
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_dummy1),
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_dummy2),
	OFFSET_uint16(BCCMD_BABEL_SPI_DELAY_dummy3),
	BCCMD_BABEL_SPI_DELAY_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC12)
	OFFSET_uint16(BCCMD_ADC12_req_type),
	OFFSET_uint16(BCCMD_ADC12_wordlength),
	OFFSET_uint16(BCCMD_ADC12_seq_no),
	OFFSET_uint16(BCCMD_ADC12_varid),
	OFFSET_uint16(BCCMD_ADC12_status),
	OFFSET_uint16(BCCMD_ADC12_data),
	OFFSET_uint16(BCCMD_ADC12_dummy1),
	OFFSET_uint16(BCCMD_ADC12_dummy2),
	OFFSET_uint16(BCCMD_ADC12_dummy3),
	BCCMD_ADC12_pduSize
} ;

enum {
	OFFSET_START(BCCMD_EGPS_PULSE_STOP)
	OFFSET_uint16(BCCMD_EGPS_PULSE_STOP_req_type),
	OFFSET_uint16(BCCMD_EGPS_PULSE_STOP_wordlength),
	OFFSET_uint16(BCCMD_EGPS_PULSE_STOP_seq_no),
	OFFSET_uint16(BCCMD_EGPS_PULSE_STOP_varid),
	OFFSET_uint16(BCCMD_EGPS_PULSE_STOP_status),
	OFFSET_uint8(BCCMD_EGPS_PULSE_STOP_pio_stop),
	OFFSET_uint16(BCCMD_EGPS_PULSE_STOP_flags),
	OFFSET_uint16(BCCMD_EGPS_PULSE_STOP_dummy2),
	OFFSET_uint16(BCCMD_EGPS_PULSE_STOP_dummy3),
	BCCMD_EGPS_PULSE_STOP_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC13)
	OFFSET_uint16(BCCMD_ADC13_req_type),
	OFFSET_uint16(BCCMD_ADC13_wordlength),
	OFFSET_uint16(BCCMD_ADC13_seq_no),
	OFFSET_uint16(BCCMD_ADC13_varid),
	OFFSET_uint16(BCCMD_ADC13_status),
	OFFSET_uint16(BCCMD_ADC13_data),
	OFFSET_uint16(BCCMD_ADC13_dummy1),
	OFFSET_uint16(BCCMD_ADC13_dummy2),
	OFFSET_uint16(BCCMD_ADC13_dummy3),
	BCCMD_ADC13_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC14)
	OFFSET_uint16(BCCMD_ADC14_req_type),
	OFFSET_uint16(BCCMD_ADC14_wordlength),
	OFFSET_uint16(BCCMD_ADC14_seq_no),
	OFFSET_uint16(BCCMD_ADC14_varid),
	OFFSET_uint16(BCCMD_ADC14_status),
	OFFSET_uint16(BCCMD_ADC14_data),
	OFFSET_uint16(BCCMD_ADC14_dummy1),
	OFFSET_uint16(BCCMD_ADC14_dummy2),
	OFFSET_uint16(BCCMD_ADC14_dummy3),
	BCCMD_ADC14_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ADC15)
	OFFSET_uint16(BCCMD_ADC15_req_type),
	OFFSET_uint16(BCCMD_ADC15_wordlength),
	OFFSET_uint16(BCCMD_ADC15_seq_no),
	OFFSET_uint16(BCCMD_ADC15_varid),
	OFFSET_uint16(BCCMD_ADC15_status),
	OFFSET_uint16(BCCMD_ADC15_data),
	OFFSET_uint16(BCCMD_ADC15_dummy1),
	OFFSET_uint16(BCCMD_ADC15_dummy2),
	OFFSET_uint16(BCCMD_ADC15_dummy3),
	BCCMD_ADC15_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ENABLE_SCO_STREAMS)
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_req_type),
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_wordlength),
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_seq_no),
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_varid),
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_status),
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_data),
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_dummy1),
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_dummy2),
	OFFSET_uint16(BCCMD_ENABLE_SCO_STREAMS_dummy3),
	BCCMD_ENABLE_SCO_STREAMS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_COASTER_START)
	OFFSET_uint16(BCCMD_COASTER_START_req_type),
	OFFSET_uint16(BCCMD_COASTER_START_wordlength),
	OFFSET_uint16(BCCMD_COASTER_START_seq_no),
	OFFSET_uint16(BCCMD_COASTER_START_varid),
	OFFSET_uint16(BCCMD_COASTER_START_status),
	OFFSET_uint16(BCCMD_COASTER_START_flags),
	OFFSET_uint16(BCCMD_COASTER_START_delay),
	OFFSET_uint16(BCCMD_COASTER_START_dummy2),
	OFFSET_uint16(BCCMD_COASTER_START_dummy3),
	BCCMD_COASTER_START_pduSize
} ;

enum {
	OFFSET_START(BCCMD_LED0_ENABLE)
	OFFSET_uint16(BCCMD_LED0_ENABLE_req_type),
	OFFSET_uint16(BCCMD_LED0_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_LED0_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_LED0_ENABLE_varid),
	OFFSET_uint16(BCCMD_LED0_ENABLE_status),
	OFFSET_uint16(BCCMD_LED0_ENABLE_data),
	OFFSET_uint16(BCCMD_LED0_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_LED0_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_LED0_ENABLE_dummy3),
	BCCMD_LED0_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ENABLE_AFH)
	OFFSET_uint16(BCCMD_ENABLE_AFH_req_type),
	OFFSET_uint16(BCCMD_ENABLE_AFH_wordlength),
	OFFSET_uint16(BCCMD_ENABLE_AFH_seq_no),
	OFFSET_uint16(BCCMD_ENABLE_AFH_varid),
	OFFSET_uint16(BCCMD_ENABLE_AFH_status),
	OFFSET_uint16(BCCMD_ENABLE_AFH_hci_handle),
	OFFSET_bool(BCCMD_ENABLE_AFH_enable),
	OFFSET_uint16(BCCMD_ENABLE_AFH_dummy2),
	OFFSET_uint16(BCCMD_ENABLE_AFH_dummy3),
	BCCMD_ENABLE_AFH_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHIPREV)
	OFFSET_uint16(BCCMD_CHIPREV_req_type),
	OFFSET_uint16(BCCMD_CHIPREV_wordlength),
	OFFSET_uint16(BCCMD_CHIPREV_seq_no),
	OFFSET_uint16(BCCMD_CHIPREV_varid),
	OFFSET_uint16(BCCMD_CHIPREV_status),
	OFFSET_uint16(BCCMD_CHIPREV_data),
	OFFSET_uint16(BCCMD_CHIPREV_dummy1),
	OFFSET_uint16(BCCMD_CHIPREV_dummy2),
	OFFSET_uint16(BCCMD_CHIPREV_dummy3),
	BCCMD_CHIPREV_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO)
	OFFSET_uint16(BCCMD_PIO_req_type),
	OFFSET_uint16(BCCMD_PIO_wordlength),
	OFFSET_uint16(BCCMD_PIO_seq_no),
	OFFSET_uint16(BCCMD_PIO_varid),
	OFFSET_uint16(BCCMD_PIO_status),
	OFFSET_uint16(BCCMD_PIO_data),
	OFFSET_uint16(BCCMD_PIO_dummy1),
	OFFSET_uint16(BCCMD_PIO_dummy2),
	OFFSET_uint16(BCCMD_PIO_dummy3),
	BCCMD_PIO_pduSize
} ;

enum {
	OFFSET_START(BCCMD_CHARGER_PSU_TRIM)
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_req_type),
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_wordlength),
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_seq_no),
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_varid),
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_status),
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_data),
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_dummy1),
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_dummy2),
	OFFSET_uint16(BCCMD_CHARGER_PSU_TRIM_dummy3),
	BCCMD_CHARGER_PSU_TRIM_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U03)
	OFFSET_uint16(BCCMD_STIBBONS_U03_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U03_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U03_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U03_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U03_status),
	OFFSET_uint16(BCCMD_STIBBONS_U03_data),
	OFFSET_uint16(BCCMD_STIBBONS_U03_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U03_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U03_dummy3),
	BCCMD_STIBBONS_U03_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U04)
	OFFSET_uint16(BCCMD_STIBBONS_U04_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U04_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U04_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U04_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U04_status),
	OFFSET_uint16(BCCMD_STIBBONS_U04_data),
	OFFSET_uint16(BCCMD_STIBBONS_U04_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U04_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U04_dummy3),
	BCCMD_STIBBONS_U04_pduSize
} ;

enum {
	OFFSET_START(BCCMD_BUILDID)
	OFFSET_uint16(BCCMD_BUILDID_req_type),
	OFFSET_uint16(BCCMD_BUILDID_wordlength),
	OFFSET_uint16(BCCMD_BUILDID_seq_no),
	OFFSET_uint16(BCCMD_BUILDID_varid),
	OFFSET_uint16(BCCMD_BUILDID_status),
	OFFSET_uint16(BCCMD_BUILDID_data),
	OFFSET_uint16(BCCMD_BUILDID_dummy1),
	OFFSET_uint16(BCCMD_BUILDID_dummy2),
	OFFSET_uint16(BCCMD_BUILDID_dummy3),
	BCCMD_BUILDID_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U05)
	OFFSET_uint16(BCCMD_STIBBONS_U05_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U05_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U05_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U05_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U05_status),
	OFFSET_uint16(BCCMD_STIBBONS_U05_data),
	OFFSET_uint16(BCCMD_STIBBONS_U05_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U05_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U05_dummy3),
	BCCMD_STIBBONS_U05_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U06)
	OFFSET_uint16(BCCMD_STIBBONS_U06_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U06_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U06_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U06_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U06_status),
	OFFSET_uint16(BCCMD_STIBBONS_U06_data),
	OFFSET_uint16(BCCMD_STIBBONS_U06_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U06_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U06_dummy3),
	BCCMD_STIBBONS_U06_pduSize
} ;

enum {
	OFFSET_START(BCCMD_REMOVE_DOWNLOADED_CAPABILITY)
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_req_type),
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_wordlength),
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_seq_no),
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_varid),
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_status),
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_data),
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_dummy1),
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_dummy2),
	OFFSET_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_dummy3),
	BCCMD_REMOVE_DOWNLOADED_CAPABILITY_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U07)
	OFFSET_uint16(BCCMD_STIBBONS_U07_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U07_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U07_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U07_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U07_status),
	OFFSET_uint16(BCCMD_STIBBONS_U07_data),
	OFFSET_uint16(BCCMD_STIBBONS_U07_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U07_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U07_dummy3),
	BCCMD_STIBBONS_U07_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U08)
	OFFSET_uint16(BCCMD_STIBBONS_U08_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U08_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U08_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U08_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U08_status),
	OFFSET_uint16(BCCMD_STIBBONS_U08_data),
	OFFSET_uint16(BCCMD_STIBBONS_U08_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U08_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U08_dummy3),
	BCCMD_STIBBONS_U08_pduSize
} ;

enum {
	OFFSET_START(BCCMD_STIBBONS_U09)
	OFFSET_uint16(BCCMD_STIBBONS_U09_req_type),
	OFFSET_uint16(BCCMD_STIBBONS_U09_wordlength),
	OFFSET_uint16(BCCMD_STIBBONS_U09_seq_no),
	OFFSET_uint16(BCCMD_STIBBONS_U09_varid),
	OFFSET_uint16(BCCMD_STIBBONS_U09_status),
	OFFSET_uint16(BCCMD_STIBBONS_U09_data),
	OFFSET_uint16(BCCMD_STIBBONS_U09_dummy1),
	OFFSET_uint16(BCCMD_STIBBONS_U09_dummy2),
	OFFSET_uint16(BCCMD_STIBBONS_U09_dummy3),
	BCCMD_STIBBONS_U09_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PIO32_MAP_PINS)
	OFFSET_uint16(BCCMD_PIO32_MAP_PINS_req_type),
	OFFSET_uint16(BCCMD_PIO32_MAP_PINS_wordlength),
	OFFSET_uint16(BCCMD_PIO32_MAP_PINS_seq_no),
	OFFSET_uint16(BCCMD_PIO32_MAP_PINS_varid),
	OFFSET_uint16(BCCMD_PIO32_MAP_PINS_status),
	OFFSET_uint32(BCCMD_PIO32_MAP_PINS_mask),
	OFFSET_uint32(BCCMD_PIO32_MAP_PINS_bits),
	OFFSET_uint32(BCCMD_PIO32_MAP_PINS_result),
	BCCMD_PIO32_MAP_PINS_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PROVOKE_FAULT)
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_req_type),
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_wordlength),
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_seq_no),
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_varid),
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_status),
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_data),
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_dummy1),
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_dummy2),
	OFFSET_uint16(BCCMD_PROVOKE_FAULT_dummy3),
	BCCMD_PROVOKE_FAULT_pduSize
} ;

enum {
	OFFSET_START(BCCMD_ANA_FTRIM)
	OFFSET_uint16(BCCMD_ANA_FTRIM_req_type),
	OFFSET_uint16(BCCMD_ANA_FTRIM_wordlength),
	OFFSET_uint16(BCCMD_ANA_FTRIM_seq_no),
	OFFSET_uint16(BCCMD_ANA_FTRIM_varid),
	OFFSET_uint16(BCCMD_ANA_FTRIM_status),
	OFFSET_uint16(BCCMD_ANA_FTRIM_data),
	OFFSET_uint16(BCCMD_ANA_FTRIM_dummy1),
	OFFSET_uint16(BCCMD_ANA_FTRIM_dummy2),
	OFFSET_uint16(BCCMD_ANA_FTRIM_dummy3),
	BCCMD_ANA_FTRIM_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FIRMWARE_CHECK)
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_req_type),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_wordlength),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_seq_no),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_varid),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_status),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_data),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_dummy1),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_dummy2),
	OFFSET_uint16(BCCMD_FIRMWARE_CHECK_dummy3),
	BCCMD_FIRMWARE_CHECK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_INIT_BT_STACK)
	OFFSET_uint16(BCCMD_INIT_BT_STACK_req_type),
	OFFSET_uint16(BCCMD_INIT_BT_STACK_wordlength),
	OFFSET_uint16(BCCMD_INIT_BT_STACK_seq_no),
	OFFSET_uint16(BCCMD_INIT_BT_STACK_varid),
	OFFSET_uint16(BCCMD_INIT_BT_STACK_status),
	OFFSET_uint16(BCCMD_INIT_BT_STACK_dummy),
	OFFSET_uint16(BCCMD_INIT_BT_STACK_dummy1),
	OFFSET_uint16(BCCMD_INIT_BT_STACK_dummy2),
	OFFSET_uint16(BCCMD_INIT_BT_STACK_dummy3),
	BCCMD_INIT_BT_STACK_pduSize
} ;

enum {
	OFFSET_START(BCCMD_MAXCRYPTKEYLEN)
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_req_type),
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_wordlength),
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_seq_no),
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_varid),
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_status),
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_data),
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_dummy1),
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_dummy2),
	OFFSET_uint16(BCCMD_MAXCRYPTKEYLEN_dummy3),
	BCCMD_MAXCRYPTKEYLEN_pduSize
} ;

enum {
	OFFSET_START(BCCMD_GPS_DSP_ENABLE)
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_req_type),
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_wordlength),
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_seq_no),
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_varid),
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_status),
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_data),
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_dummy1),
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_dummy2),
	OFFSET_uint16(BCCMD_GPS_DSP_ENABLE_dummy3),
	BCCMD_GPS_DSP_ENABLE_pduSize
} ;

enum {
	OFFSET_START(BCCMD_KALEXTADDRDEBUG)
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_req_type),
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_wordlength),
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_seq_no),
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_varid),
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_status),
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_function),
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_dummy1),
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_dummy2),
	OFFSET_uint16(BCCMD_KALEXTADDRDEBUG_dummy3),
	BCCMD_KALEXTADDRDEBUG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_PANIC_ARG)
	OFFSET_uint16(BCCMD_PANIC_ARG_req_type),
	OFFSET_uint16(BCCMD_PANIC_ARG_wordlength),
	OFFSET_uint16(BCCMD_PANIC_ARG_seq_no),
	OFFSET_uint16(BCCMD_PANIC_ARG_varid),
	OFFSET_uint16(BCCMD_PANIC_ARG_status),
	OFFSET_uint16(BCCMD_PANIC_ARG_data),
	OFFSET_uint16(BCCMD_PANIC_ARG_dummy1),
	OFFSET_uint16(BCCMD_PANIC_ARG_dummy2),
	OFFSET_uint16(BCCMD_PANIC_ARG_dummy3),
	BCCMD_PANIC_ARG_pduSize
} ;

enum {
	OFFSET_START(BCCMD_DISABLE_TX)
	OFFSET_uint16(BCCMD_DISABLE_TX_req_type),
	OFFSET_uint16(BCCMD_DISABLE_TX_wordlength),
	OFFSET_uint16(BCCMD_DISABLE_TX_seq_no),
	OFFSET_uint16(BCCMD_DISABLE_TX_varid),
	OFFSET_uint16(BCCMD_DISABLE_TX_status),
	OFFSET_uint16(BCCMD_DISABLE_TX_dummy),
	OFFSET_uint16(BCCMD_DISABLE_TX_dummy1),
	OFFSET_uint16(BCCMD_DISABLE_TX_dummy2),
	OFFSET_uint16(BCCMD_DISABLE_TX_dummy3),
	BCCMD_DISABLE_TX_pduSize
} ;

enum {
	OFFSET_START(BCCMD_FASTPIPE_RESIZE)
	OFFSET_uint16(BCCMD_FASTPIPE_RESIZE_req_type),
	OFFSET_uint16(BCCMD_FASTPIPE_RESIZE_wordlength),
	OFFSET_uint16(BCCMD_FASTPIPE_RESIZE_seq_no),
	OFFSET_uint16(BCCMD_FASTPIPE_RESIZE_varid),
	OFFSET_uint16(BCCMD_FASTPIPE_RESIZE_status),
	OFFSET_int32(BCCMD_FASTPIPE_RESIZE_delta_controller),
	OFFSET_uint32(BCCMD_FASTPIPE_RESIZE_limit_controller),
	OFFSET_uint16(BCCMD_FASTPIPE_RESIZE_result),
	BCCMD_FASTPIPE_RESIZE_pduSize
} ;

#include "hcipacker/gen_bccmd.h"


BCCMD_MAP_SCO_WBS_PDU::BCCMD_MAP_SCO_WBS_PDU()
: BCCMD_PDU( BCCMDVARID_MAP_SCO_WBS , BCCMD_MAP_SCO_WBS_pduSize )
{
}

BCCMD_MAP_SCO_WBS_PDU::BCCMD_MAP_SCO_WBS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_MAP_SCO_WBS_PDU::BCCMD_MAP_SCO_WBS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_MAP_SCO_WBS_PDU::BCCMD_MAP_SCO_WBS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_MAP_SCO_WBS_PDU::get_source_sid(void) const
{
    return get_uint16(BCCMD_MAP_SCO_WBS_source_sid) ;
}

void BCCMD_MAP_SCO_WBS_PDU::set_source_sid(uint16 val)
{
    set_uint16(BCCMD_MAP_SCO_WBS_source_sid,val) ;
}

uint16 BCCMD_MAP_SCO_WBS_PDU::get_sink_sid(void) const
{
    return get_uint16(BCCMD_MAP_SCO_WBS_sink_sid) ;
}

void BCCMD_MAP_SCO_WBS_PDU::set_sink_sid(uint16 val)
{
    set_uint16(BCCMD_MAP_SCO_WBS_sink_sid,val) ;
}

/*******************************************************************/


BCCMD_BLE_ADV_FILT_CLEAR_PDU::BCCMD_BLE_ADV_FILT_CLEAR_PDU()
: BCCMD_PDU( BCCMDVARID_BLE_ADV_FILT_CLEAR , BCCMD_BLE_ADV_FILT_CLEAR_pduSize )
{
}

BCCMD_BLE_ADV_FILT_CLEAR_PDU::BCCMD_BLE_ADV_FILT_CLEAR_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BLE_ADV_FILT_CLEAR_PDU::BCCMD_BLE_ADV_FILT_CLEAR_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BLE_ADV_FILT_CLEAR_PDU::BCCMD_BLE_ADV_FILT_CLEAR_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_U10_PDU::BCCMD_STIBBONS_U10_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U10 , BCCMD_STIBBONS_U10_pduSize )
{
}

BCCMD_STIBBONS_U10_PDU::BCCMD_STIBBONS_U10_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U10_PDU::BCCMD_STIBBONS_U10_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U10_PDU::BCCMD_STIBBONS_U10_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U10_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U10_data) ;
}

void BCCMD_STIBBONS_U10_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U10_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U11_PDU::BCCMD_STIBBONS_U11_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U11 , BCCMD_STIBBONS_U11_pduSize )
{
}

BCCMD_STIBBONS_U11_PDU::BCCMD_STIBBONS_U11_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U11_PDU::BCCMD_STIBBONS_U11_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U11_PDU::BCCMD_STIBBONS_U11_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U11_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U11_data) ;
}

void BCCMD_STIBBONS_U11_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U11_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U12_PDU::BCCMD_STIBBONS_U12_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U12 , BCCMD_STIBBONS_U12_pduSize )
{
}

BCCMD_STIBBONS_U12_PDU::BCCMD_STIBBONS_U12_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U12_PDU::BCCMD_STIBBONS_U12_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U12_PDU::BCCMD_STIBBONS_U12_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U12_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U12_data) ;
}

void BCCMD_STIBBONS_U12_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U12_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U13_PDU::BCCMD_STIBBONS_U13_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U13 , BCCMD_STIBBONS_U13_pduSize )
{
}

BCCMD_STIBBONS_U13_PDU::BCCMD_STIBBONS_U13_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U13_PDU::BCCMD_STIBBONS_U13_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U13_PDU::BCCMD_STIBBONS_U13_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U13_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U13_data) ;
}

void BCCMD_STIBBONS_U13_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U13_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U14_PDU::BCCMD_STIBBONS_U14_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U14 , BCCMD_STIBBONS_U14_pduSize )
{
}

BCCMD_STIBBONS_U14_PDU::BCCMD_STIBBONS_U14_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U14_PDU::BCCMD_STIBBONS_U14_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U14_PDU::BCCMD_STIBBONS_U14_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U14_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U14_data) ;
}

void BCCMD_STIBBONS_U14_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U14_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U15_PDU::BCCMD_STIBBONS_U15_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U15 , BCCMD_STIBBONS_U15_pduSize )
{
}

BCCMD_STIBBONS_U15_PDU::BCCMD_STIBBONS_U15_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U15_PDU::BCCMD_STIBBONS_U15_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U15_PDU::BCCMD_STIBBONS_U15_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U15_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U15_data) ;
}

void BCCMD_STIBBONS_U15_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U15_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U16_PDU::BCCMD_STIBBONS_U16_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U16 , BCCMD_STIBBONS_U16_pduSize )
{
}

BCCMD_STIBBONS_U16_PDU::BCCMD_STIBBONS_U16_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U16_PDU::BCCMD_STIBBONS_U16_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U16_PDU::BCCMD_STIBBONS_U16_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U16_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U16_data) ;
}

void BCCMD_STIBBONS_U16_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U16_data,val) ;
}

/*******************************************************************/


BCCMD_PCM_RATE_AND_ROUTE_PDU::BCCMD_PCM_RATE_AND_ROUTE_PDU()
: BCCMD_PDU( BCCMDVARID_PCM_RATE_AND_ROUTE , BCCMD_PCM_RATE_AND_ROUTE_pduSize )
{
}

BCCMD_PCM_RATE_AND_ROUTE_PDU::BCCMD_PCM_RATE_AND_ROUTE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PCM_RATE_AND_ROUTE_PDU::BCCMD_PCM_RATE_AND_ROUTE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PCM_RATE_AND_ROUTE_PDU::BCCMD_PCM_RATE_AND_ROUTE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PCM_RATE_AND_ROUTE_PDU::get_port_id(void) const
{
    return get_uint16(BCCMD_PCM_RATE_AND_ROUTE_port_id) ;
}

void BCCMD_PCM_RATE_AND_ROUTE_PDU::set_port_id(uint16 val)
{
    set_uint16(BCCMD_PCM_RATE_AND_ROUTE_port_id,val) ;
}

uint16 BCCMD_PCM_RATE_AND_ROUTE_PDU::get_sync_port(void) const
{
    return get_uint16(BCCMD_PCM_RATE_AND_ROUTE_sync_port) ;
}

void BCCMD_PCM_RATE_AND_ROUTE_PDU::set_sync_port(uint16 val)
{
    set_uint16(BCCMD_PCM_RATE_AND_ROUTE_sync_port,val) ;
}

uint16 BCCMD_PCM_RATE_AND_ROUTE_PDU::get_io_type(void) const
{
    return get_uint16(BCCMD_PCM_RATE_AND_ROUTE_io_type) ;
}

void BCCMD_PCM_RATE_AND_ROUTE_PDU::set_io_type(uint16 val)
{
    set_uint16(BCCMD_PCM_RATE_AND_ROUTE_io_type,val) ;
}

uint32 BCCMD_PCM_RATE_AND_ROUTE_PDU::get_read_rate(void) const
{
    return get_uint32(BCCMD_PCM_RATE_AND_ROUTE_read_rate) ;
}

void BCCMD_PCM_RATE_AND_ROUTE_PDU::set_read_rate(uint32 val)
{
    set_uint32(BCCMD_PCM_RATE_AND_ROUTE_read_rate,val) ;
}

uint32 BCCMD_PCM_RATE_AND_ROUTE_PDU::get_write_rate(void) const
{
    return get_uint32(BCCMD_PCM_RATE_AND_ROUTE_write_rate) ;
}

void BCCMD_PCM_RATE_AND_ROUTE_PDU::set_write_rate(uint32 val)
{
    set_uint32(BCCMD_PCM_RATE_AND_ROUTE_write_rate,val) ;
}

/*******************************************************************/


BCCMD_VM_STATUS_PDU::BCCMD_VM_STATUS_PDU()
: BCCMD_PDU( BCCMDVARID_VM_STATUS , BCCMD_VM_STATUS_pduSize )
{
}

BCCMD_VM_STATUS_PDU::BCCMD_VM_STATUS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_VM_STATUS_PDU::BCCMD_VM_STATUS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_VM_STATUS_PDU::BCCMD_VM_STATUS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_VM_STATUS_PDU::get_vmstatus(void) const
{
    return get_uint16(BCCMD_VM_STATUS_vmstatus) ;
}

void BCCMD_VM_STATUS_PDU::set_vmstatus(uint16 val)
{
    set_uint16(BCCMD_VM_STATUS_vmstatus,val) ;
}

uint16 BCCMD_VM_STATUS_PDU::get_exit_code(void) const
{
    return get_uint16(BCCMD_VM_STATUS_exit_code) ;
}

void BCCMD_VM_STATUS_PDU::set_exit_code(uint16 val)
{
    set_uint16(BCCMD_VM_STATUS_exit_code,val) ;
}

/*******************************************************************/


BCCMD_COEX_ENABLE_PDU::BCCMD_COEX_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_COEX_ENABLE , BCCMD_COEX_ENABLE_pduSize )
{
}

BCCMD_COEX_ENABLE_PDU::BCCMD_COEX_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COEX_ENABLE_PDU::BCCMD_COEX_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COEX_ENABLE_PDU::BCCMD_COEX_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COEX_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_COEX_ENABLE_data) ;
}

void BCCMD_COEX_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_COEX_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_MIC_BIAS_CTRL_PDU::BCCMD_MIC_BIAS_CTRL_PDU()
: BCCMD_PDU( BCCMDVARID_MIC_BIAS_CTRL , BCCMD_MIC_BIAS_CTRL_pduSize )
{
}

BCCMD_MIC_BIAS_CTRL_PDU::BCCMD_MIC_BIAS_CTRL_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_MIC_BIAS_CTRL_PDU::BCCMD_MIC_BIAS_CTRL_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_MIC_BIAS_CTRL_PDU::BCCMD_MIC_BIAS_CTRL_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_MIC_BIAS_CTRL_PDU::get_mic_bias_enable(void) const
{
    return get_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_enable) ;
}

void BCCMD_MIC_BIAS_CTRL_PDU::set_mic_bias_enable(uint16 val)
{
    set_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_enable,val) ;
}

uint16 BCCMD_MIC_BIAS_CTRL_PDU::get_mic_bias_current(void) const
{
    return get_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_current) ;
}

void BCCMD_MIC_BIAS_CTRL_PDU::set_mic_bias_current(uint16 val)
{
    set_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_current,val) ;
}

uint16 BCCMD_MIC_BIAS_CTRL_PDU::get_mic_bias_voltage(void) const
{
    return get_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_voltage) ;
}

void BCCMD_MIC_BIAS_CTRL_PDU::set_mic_bias_voltage(uint16 val)
{
    set_uint16(BCCMD_MIC_BIAS_CTRL_mic_bias_voltage,val) ;
}

uint16 BCCMD_MIC_BIAS_CTRL_PDU::get_enable_mic_bias_low_power_mode(void) const
{
    return get_uint16(BCCMD_MIC_BIAS_CTRL_enable_mic_bias_low_power_mode) ;
}

void BCCMD_MIC_BIAS_CTRL_PDU::set_enable_mic_bias_low_power_mode(uint16 val)
{
    set_uint16(BCCMD_MIC_BIAS_CTRL_enable_mic_bias_low_power_mode,val) ;
}

/*******************************************************************/


BCCMD_BABEL_SPI_RESET_AND_GO_PDU::BCCMD_BABEL_SPI_RESET_AND_GO_PDU()
: BCCMD_PDU( BCCMDVARID_BABEL_SPI_RESET_AND_GO , BCCMD_BABEL_SPI_RESET_AND_GO_pduSize )
{
}

BCCMD_BABEL_SPI_RESET_AND_GO_PDU::BCCMD_BABEL_SPI_RESET_AND_GO_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BABEL_SPI_RESET_AND_GO_PDU::BCCMD_BABEL_SPI_RESET_AND_GO_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BABEL_SPI_RESET_AND_GO_PDU::BCCMD_BABEL_SPI_RESET_AND_GO_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_PSCLR_PDU::BCCMD_PSCLR_PDU()
: BCCMD_PDU( BCCMDVARID_PSCLR , BCCMD_PSCLR_pduSize )
{
}

BCCMD_PSCLR_PDU::BCCMD_PSCLR_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSCLR_PDU::BCCMD_PSCLR_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSCLR_PDU::BCCMD_PSCLR_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PSCLR_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PSCLR_data) ;
}

void BCCMD_PSCLR_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PSCLR_data,val) ;
}

/*******************************************************************/


BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU::BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU()
: BCCMD_PDU( BCCMDVARID_AFH_CHANNEL_RELEASE_TIME , BCCMD_AFH_CHANNEL_RELEASE_TIME_pduSize )
{
}

BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU::BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU::BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU::BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU::get_data(void) const
{
    return get_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_data) ;
}

void BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_AFH_CHANNEL_RELEASE_TIME_data,val) ;
}

/*******************************************************************/


BCCMD_CONFIG_UART_PDU::BCCMD_CONFIG_UART_PDU()
: BCCMD_PDU( BCCMDVARID_CONFIG_UART , BCCMD_CONFIG_UART_pduSize )
{
}

BCCMD_CONFIG_UART_PDU::BCCMD_CONFIG_UART_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CONFIG_UART_PDU::BCCMD_CONFIG_UART_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CONFIG_UART_PDU::BCCMD_CONFIG_UART_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CONFIG_UART_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CONFIG_UART_data) ;
}

void BCCMD_CONFIG_UART_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CONFIG_UART_data,val) ;
}

/*******************************************************************/


BCCMD_CHARGER_SET_TRIM_NOW_PDU::BCCMD_CHARGER_SET_TRIM_NOW_PDU()
: BCCMD_PDU( BCCMDVARID_CHARGER_SET_TRIM_NOW , BCCMD_CHARGER_SET_TRIM_NOW_pduSize )
{
}

BCCMD_CHARGER_SET_TRIM_NOW_PDU::BCCMD_CHARGER_SET_TRIM_NOW_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHARGER_SET_TRIM_NOW_PDU::BCCMD_CHARGER_SET_TRIM_NOW_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHARGER_SET_TRIM_NOW_PDU::BCCMD_CHARGER_SET_TRIM_NOW_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHARGER_SET_TRIM_NOW_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHARGER_SET_TRIM_NOW_data) ;
}

void BCCMD_CHARGER_SET_TRIM_NOW_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHARGER_SET_TRIM_NOW_data,val) ;
}

/*******************************************************************/


BCCMD_CHARGER_DISABLE_PDU::BCCMD_CHARGER_DISABLE_PDU()
: BCCMD_PDU( BCCMDVARID_CHARGER_DISABLE , BCCMD_CHARGER_DISABLE_pduSize )
{
}

BCCMD_CHARGER_DISABLE_PDU::BCCMD_CHARGER_DISABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHARGER_DISABLE_PDU::BCCMD_CHARGER_DISABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHARGER_DISABLE_PDU::BCCMD_CHARGER_DISABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHARGER_DISABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHARGER_DISABLE_data) ;
}

void BCCMD_CHARGER_DISABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHARGER_DISABLE_data,val) ;
}

/*******************************************************************/


BCCMD_BUILDID_LOADER_PDU::BCCMD_BUILDID_LOADER_PDU()
: BCCMD_PDU( BCCMDVARID_BUILDID_LOADER , BCCMD_BUILDID_LOADER_pduSize )
{
}

BCCMD_BUILDID_LOADER_PDU::BCCMD_BUILDID_LOADER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BUILDID_LOADER_PDU::BCCMD_BUILDID_LOADER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BUILDID_LOADER_PDU::BCCMD_BUILDID_LOADER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BUILDID_LOADER_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BUILDID_LOADER_data) ;
}

void BCCMD_BUILDID_LOADER_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BUILDID_LOADER_data,val) ;
}

/*******************************************************************/


BCCMD_EXT_CLOCK_PERIOD_PDU::BCCMD_EXT_CLOCK_PERIOD_PDU()
: BCCMD_PDU( BCCMDVARID_EXT_CLOCK_PERIOD , BCCMD_EXT_CLOCK_PERIOD_pduSize )
{
}

BCCMD_EXT_CLOCK_PERIOD_PDU::BCCMD_EXT_CLOCK_PERIOD_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_EXT_CLOCK_PERIOD_PDU::BCCMD_EXT_CLOCK_PERIOD_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_EXT_CLOCK_PERIOD_PDU::BCCMD_EXT_CLOCK_PERIOD_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_EXT_CLOCK_PERIOD_PDU::get_data(void) const
{
    return get_uint16(BCCMD_EXT_CLOCK_PERIOD_data) ;
}

void BCCMD_EXT_CLOCK_PERIOD_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_EXT_CLOCK_PERIOD_data,val) ;
}

/*******************************************************************/


BCCMD_FMTX_REG_PDU::BCCMD_FMTX_REG_PDU()
: BCCMD_PDU( BCCMDVARID_FMTX_REG , BCCMD_FMTX_REG_pduSize )
{
}

BCCMD_FMTX_REG_PDU::BCCMD_FMTX_REG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FMTX_REG_PDU::BCCMD_FMTX_REG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FMTX_REG_PDU::BCCMD_FMTX_REG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint8 BCCMD_FMTX_REG_PDU::get_fmtx_register(void) const
{
    return get_uint8(BCCMD_FMTX_REG_fmtx_register) ;
}

void BCCMD_FMTX_REG_PDU::set_fmtx_register(uint8 val)
{
    set_uint8(BCCMD_FMTX_REG_fmtx_register,val) ;
}

uint16 BCCMD_FMTX_REG_PDU::get_value(void) const
{
    return get_uint16(BCCMD_FMTX_REG_value) ;
}

void BCCMD_FMTX_REG_PDU::set_value(uint16 val)
{
    set_uint16(BCCMD_FMTX_REG_value,val) ;
}

/*******************************************************************/


BCCMD_ADCRES_PDU::BCCMD_ADCRES_PDU()
: BCCMD_PDU( BCCMDVARID_ADCRES , BCCMD_ADCRES_pduSize )
{
}

BCCMD_ADCRES_PDU::BCCMD_ADCRES_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADCRES_PDU::BCCMD_ADCRES_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADCRES_PDU::BCCMD_ADCRES_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADCRES_PDU::get_channel(void) const
{
    return get_uint16(BCCMD_ADCRES_channel) ;
}

void BCCMD_ADCRES_PDU::set_channel(uint16 val)
{
    set_uint16(BCCMD_ADCRES_channel,val) ;
}

bool BCCMD_ADCRES_PDU::get_valid(void) const
{
    return get_bool(BCCMD_ADCRES_valid) ;
}

void BCCMD_ADCRES_PDU::set_valid(bool val)
{
    set_bool(BCCMD_ADCRES_valid,val) ;
}

uint16 BCCMD_ADCRES_PDU::get_result(void) const
{
    return get_uint16(BCCMD_ADCRES_result) ;
}

void BCCMD_ADCRES_PDU::set_result(uint16 val)
{
    set_uint16(BCCMD_ADCRES_result,val) ;
}

/*******************************************************************/


BCCMD_VM_DEBUG_PDU::BCCMD_VM_DEBUG_PDU()
: BCCMD_PDU( BCCMDVARID_VM_DEBUG , BCCMD_VM_DEBUG_pduSize )
{
}

BCCMD_VM_DEBUG_PDU::BCCMD_VM_DEBUG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_VM_DEBUG_PDU::BCCMD_VM_DEBUG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_VM_DEBUG_PDU::BCCMD_VM_DEBUG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_VM_DEBUG_PDU::get_function(void) const
{
    return get_uint16(BCCMD_VM_DEBUG_function) ;
}

void BCCMD_VM_DEBUG_PDU::set_function(uint16 val)
{
    set_uint16(BCCMD_VM_DEBUG_function,val) ;
}

/*******************************************************************/


BCCMD_PIO_PROTECT_MASK_PDU::BCCMD_PIO_PROTECT_MASK_PDU()
: BCCMD_PDU( BCCMDVARID_PIO_PROTECT_MASK , BCCMD_PIO_PROTECT_MASK_pduSize )
{
}

BCCMD_PIO_PROTECT_MASK_PDU::BCCMD_PIO_PROTECT_MASK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO_PROTECT_MASK_PDU::BCCMD_PIO_PROTECT_MASK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO_PROTECT_MASK_PDU::BCCMD_PIO_PROTECT_MASK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PIO_PROTECT_MASK_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PIO_PROTECT_MASK_data) ;
}

void BCCMD_PIO_PROTECT_MASK_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PIO_PROTECT_MASK_data,val) ;
}

/*******************************************************************/


BCCMD_SCATTERNET_OVERRIDE_SCO_PDU::BCCMD_SCATTERNET_OVERRIDE_SCO_PDU()
: BCCMD_PDU( BCCMDVARID_SCATTERNET_OVERRIDE_SCO , BCCMD_SCATTERNET_OVERRIDE_SCO_pduSize )
{
}

BCCMD_SCATTERNET_OVERRIDE_SCO_PDU::BCCMD_SCATTERNET_OVERRIDE_SCO_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SCATTERNET_OVERRIDE_SCO_PDU::BCCMD_SCATTERNET_OVERRIDE_SCO_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SCATTERNET_OVERRIDE_SCO_PDU::BCCMD_SCATTERNET_OVERRIDE_SCO_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_SCATTERNET_OVERRIDE_SCO_PDU::get_data(void) const
{
    return get_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_data) ;
}

void BCCMD_SCATTERNET_OVERRIDE_SCO_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_SCATTERNET_OVERRIDE_SCO_data,val) ;
}

/*******************************************************************/


BCCMD_STREAM_TRANSACTION_COMPLETE_PDU::BCCMD_STREAM_TRANSACTION_COMPLETE_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_TRANSACTION_COMPLETE , BCCMD_STREAM_TRANSACTION_COMPLETE_pduSize )
{
}

BCCMD_STREAM_TRANSACTION_COMPLETE_PDU::BCCMD_STREAM_TRANSACTION_COMPLETE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_TRANSACTION_COMPLETE_PDU::BCCMD_STREAM_TRANSACTION_COMPLETE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_TRANSACTION_COMPLETE_PDU::BCCMD_STREAM_TRANSACTION_COMPLETE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_GSM_RX_ARFCN_PDU::BCCMD_GSM_RX_ARFCN_PDU()
: BCCMD_PDU( BCCMDVARID_GSM_RX_ARFCN , BCCMD_GSM_RX_ARFCN_pduSize )
{
}

BCCMD_GSM_RX_ARFCN_PDU::BCCMD_GSM_RX_ARFCN_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_GSM_RX_ARFCN_PDU::BCCMD_GSM_RX_ARFCN_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_GSM_RX_ARFCN_PDU::BCCMD_GSM_RX_ARFCN_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_GSM_RX_ARFCN_PDU::get_data(void) const
{
    return get_uint16(BCCMD_GSM_RX_ARFCN_data) ;
}

void BCCMD_GSM_RX_ARFCN_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_GSM_RX_ARFCN_data,val) ;
}

/*******************************************************************/


BCCMD_PS_FACTORY_SET_PDU::BCCMD_PS_FACTORY_SET_PDU()
: BCCMD_PDU( BCCMDVARID_PS_FACTORY_SET , BCCMD_PS_FACTORY_SET_pduSize )
{
}

BCCMD_PS_FACTORY_SET_PDU::BCCMD_PS_FACTORY_SET_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PS_FACTORY_SET_PDU::BCCMD_PS_FACTORY_SET_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PS_FACTORY_SET_PDU::BCCMD_PS_FACTORY_SET_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_SPI_LOCK_INITIATE_LOCK_PDU::BCCMD_SPI_LOCK_INITIATE_LOCK_PDU()
: BCCMD_PDU( BCCMDVARID_SPI_LOCK_INITIATE_LOCK , BCCMD_SPI_LOCK_INITIATE_LOCK_pduSize )
{
}

BCCMD_SPI_LOCK_INITIATE_LOCK_PDU::BCCMD_SPI_LOCK_INITIATE_LOCK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SPI_LOCK_INITIATE_LOCK_PDU::BCCMD_SPI_LOCK_INITIATE_LOCK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SPI_LOCK_INITIATE_LOCK_PDU::BCCMD_SPI_LOCK_INITIATE_LOCK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_PIO_DIRECTION_MASK_PDU::BCCMD_PIO_DIRECTION_MASK_PDU()
: BCCMD_PDU( BCCMDVARID_PIO_DIRECTION_MASK , BCCMD_PIO_DIRECTION_MASK_pduSize )
{
}

BCCMD_PIO_DIRECTION_MASK_PDU::BCCMD_PIO_DIRECTION_MASK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO_DIRECTION_MASK_PDU::BCCMD_PIO_DIRECTION_MASK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO_DIRECTION_MASK_PDU::BCCMD_PIO_DIRECTION_MASK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PIO_DIRECTION_MASK_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PIO_DIRECTION_MASK_data) ;
}

void BCCMD_PIO_DIRECTION_MASK_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PIO_DIRECTION_MASK_data,val) ;
}

/*******************************************************************/


BCCMD_AUX_DAC_ENABLE_PDU::BCCMD_AUX_DAC_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_AUX_DAC_ENABLE , BCCMD_AUX_DAC_ENABLE_pduSize )
{
}

BCCMD_AUX_DAC_ENABLE_PDU::BCCMD_AUX_DAC_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_AUX_DAC_ENABLE_PDU::BCCMD_AUX_DAC_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_AUX_DAC_ENABLE_PDU::BCCMD_AUX_DAC_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_AUX_DAC_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_AUX_DAC_ENABLE_data) ;
}

void BCCMD_AUX_DAC_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_AUX_DAC_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_CHIPANAVER_PDU::BCCMD_CHIPANAVER_PDU()
: BCCMD_PDU( BCCMDVARID_CHIPANAVER , BCCMD_CHIPANAVER_pduSize )
{
}

BCCMD_CHIPANAVER_PDU::BCCMD_CHIPANAVER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHIPANAVER_PDU::BCCMD_CHIPANAVER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHIPANAVER_PDU::BCCMD_CHIPANAVER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHIPANAVER_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHIPANAVER_data) ;
}

void BCCMD_CHIPANAVER_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHIPANAVER_data,val) ;
}

/*******************************************************************/


BCCMD_ACTIVATE_BT_STACK_PDU::BCCMD_ACTIVATE_BT_STACK_PDU()
: BCCMD_PDU( BCCMDVARID_ACTIVATE_BT_STACK , BCCMD_ACTIVATE_BT_STACK_pduSize )
{
}

BCCMD_ACTIVATE_BT_STACK_PDU::BCCMD_ACTIVATE_BT_STACK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ACTIVATE_BT_STACK_PDU::BCCMD_ACTIVATE_BT_STACK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ACTIVATE_BT_STACK_PDU::BCCMD_ACTIVATE_BT_STACK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_PSCLRALL_PDU::BCCMD_PSCLRALL_PDU()
: BCCMD_PDU( BCCMDVARID_PSCLRALL , BCCMD_PSCLRALL_pduSize )
{
}

BCCMD_PSCLRALL_PDU::BCCMD_PSCLRALL_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSCLRALL_PDU::BCCMD_PSCLRALL_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSCLRALL_PDU::BCCMD_PSCLRALL_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_BLE_T_IFS_PDU::BCCMD_BLE_T_IFS_PDU()
: BCCMD_PDU( BCCMDVARID_BLE_T_IFS , BCCMD_BLE_T_IFS_pduSize )
{
}

BCCMD_BLE_T_IFS_PDU::BCCMD_BLE_T_IFS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BLE_T_IFS_PDU::BCCMD_BLE_T_IFS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BLE_T_IFS_PDU::BCCMD_BLE_T_IFS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BLE_T_IFS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BLE_T_IFS_data) ;
}

void BCCMD_BLE_T_IFS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BLE_T_IFS_data,val) ;
}

/*******************************************************************/


BCCMD_FM_AUDIO_ROUTING_PDU::BCCMD_FM_AUDIO_ROUTING_PDU()
: BCCMD_PDU( BCCMDVARID_FM_AUDIO_ROUTING , BCCMD_FM_AUDIO_ROUTING_pduSize )
{
}

BCCMD_FM_AUDIO_ROUTING_PDU::BCCMD_FM_AUDIO_ROUTING_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FM_AUDIO_ROUTING_PDU::BCCMD_FM_AUDIO_ROUTING_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FM_AUDIO_ROUTING_PDU::BCCMD_FM_AUDIO_ROUTING_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_FM_AUDIO_ROUTING_PDU::get_data(void) const
{
    return get_uint16(BCCMD_FM_AUDIO_ROUTING_data) ;
}

void BCCMD_FM_AUDIO_ROUTING_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_FM_AUDIO_ROUTING_data,val) ;
}

/*******************************************************************/


BCCMD_FASTPIPE_ENABLE_PDU::BCCMD_FASTPIPE_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_FASTPIPE_ENABLE , BCCMD_FASTPIPE_ENABLE_pduSize )
{
}

BCCMD_FASTPIPE_ENABLE_PDU::BCCMD_FASTPIPE_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FASTPIPE_ENABLE_PDU::BCCMD_FASTPIPE_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FASTPIPE_ENABLE_PDU::BCCMD_FASTPIPE_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_FASTPIPE_ENABLE_PDU::get_limit_host(void) const
{
    return get_uint32(BCCMD_FASTPIPE_ENABLE_limit_host) ;
}

void BCCMD_FASTPIPE_ENABLE_PDU::set_limit_host(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_ENABLE_limit_host,val) ;
}

uint16 BCCMD_FASTPIPE_ENABLE_PDU::get_result(void) const
{
    return get_uint16(BCCMD_FASTPIPE_ENABLE_result) ;
}

void BCCMD_FASTPIPE_ENABLE_PDU::set_result(uint16 val)
{
    set_uint16(BCCMD_FASTPIPE_ENABLE_result,val) ;
}

/*******************************************************************/


BCCMD_COEX_SYNC_PERIOD_PDU::BCCMD_COEX_SYNC_PERIOD_PDU()
: BCCMD_PDU( BCCMDVARID_COEX_SYNC_PERIOD , BCCMD_COEX_SYNC_PERIOD_pduSize )
{
}

BCCMD_COEX_SYNC_PERIOD_PDU::BCCMD_COEX_SYNC_PERIOD_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COEX_SYNC_PERIOD_PDU::BCCMD_COEX_SYNC_PERIOD_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COEX_SYNC_PERIOD_PDU::BCCMD_COEX_SYNC_PERIOD_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COEX_SYNC_PERIOD_PDU::get_data(void) const
{
    return get_uint16(BCCMD_COEX_SYNC_PERIOD_data) ;
}

void BCCMD_COEX_SYNC_PERIOD_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_COEX_SYNC_PERIOD_data,val) ;
}

/*******************************************************************/


BCCMD_PICONET_INSTANT_PDU::BCCMD_PICONET_INSTANT_PDU()
: BCCMD_PDU( BCCMDVARID_PICONET_INSTANT , BCCMD_PICONET_INSTANT_pduSize )
{
}

BCCMD_PICONET_INSTANT_PDU::BCCMD_PICONET_INSTANT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PICONET_INSTANT_PDU::BCCMD_PICONET_INSTANT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PICONET_INSTANT_PDU::BCCMD_PICONET_INSTANT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PICONET_INSTANT_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_PICONET_INSTANT_hci_handle) ;
}

void BCCMD_PICONET_INSTANT_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_PICONET_INSTANT_hci_handle,val) ;
}

uint32 BCCMD_PICONET_INSTANT_PDU::get_h_instant(void) const
{
    return get_uint32(BCCMD_PICONET_INSTANT_h_instant) ;
}

void BCCMD_PICONET_INSTANT_PDU::set_h_instant(uint32 val)
{
    set_uint32(BCCMD_PICONET_INSTANT_h_instant,val) ;
}

/*******************************************************************/


BCCMD_CAPSENSE_RT_PADS_PDU::BCCMD_CAPSENSE_RT_PADS_PDU()
: BCCMD_PDU( BCCMDVARID_CAPSENSE_RT_PADS , BCCMD_CAPSENSE_RT_PADS_pduSize )
{
}

BCCMD_CAPSENSE_RT_PADS_PDU::BCCMD_CAPSENSE_RT_PADS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CAPSENSE_RT_PADS_PDU::BCCMD_CAPSENSE_RT_PADS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CAPSENSE_RT_PADS_PDU::BCCMD_CAPSENSE_RT_PADS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_pad_sel(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_pad_sel) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_pad_sel(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_pad_sel,val) ;
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_num_pads_board(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_num_pads_board) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_num_pads_board(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_num_pads_board,val) ;
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_shield(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_shield) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_shield(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_shield,val) ;
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_pad_cap0(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap0) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_pad_cap0(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap0,val) ;
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_pad_cap1(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap1) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_pad_cap1(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap1,val) ;
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_pad_cap2(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap2) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_pad_cap2(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap2,val) ;
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_pad_cap3(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap3) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_pad_cap3(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap3,val) ;
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_pad_cap4(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap4) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_pad_cap4(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap4,val) ;
}

uint16 BCCMD_CAPSENSE_RT_PADS_PDU::get_pad_cap5(void) const
{
    return get_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap5) ;
}

void BCCMD_CAPSENSE_RT_PADS_PDU::set_pad_cap5(uint16 val)
{
    set_uint16(BCCMD_CAPSENSE_RT_PADS_pad_cap5,val) ;
}

/*******************************************************************/


BCCMD_SNIFF_MULTISLOT_ENABLE_PDU::BCCMD_SNIFF_MULTISLOT_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_SNIFF_MULTISLOT_ENABLE , BCCMD_SNIFF_MULTISLOT_ENABLE_pduSize )
{
}

BCCMD_SNIFF_MULTISLOT_ENABLE_PDU::BCCMD_SNIFF_MULTISLOT_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SNIFF_MULTISLOT_ENABLE_PDU::BCCMD_SNIFF_MULTISLOT_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SNIFF_MULTISLOT_ENABLE_PDU::BCCMD_SNIFF_MULTISLOT_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_SNIFF_MULTISLOT_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_data) ;
}

void BCCMD_SNIFF_MULTISLOT_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_SNIFF_MULTISLOT_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_RECAL_PDU::BCCMD_RECAL_PDU()
: BCCMD_PDU( BCCMDVARID_RECAL , BCCMD_RECAL_pduSize )
{
}

BCCMD_RECAL_PDU::BCCMD_RECAL_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RECAL_PDU::BCCMD_RECAL_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RECAL_PDU::BCCMD_RECAL_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_PSU_HV_LINEAR_ENABLE_PDU::BCCMD_PSU_HV_LINEAR_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_PSU_HV_LINEAR_ENABLE , BCCMD_PSU_HV_LINEAR_ENABLE_pduSize )
{
}

BCCMD_PSU_HV_LINEAR_ENABLE_PDU::BCCMD_PSU_HV_LINEAR_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSU_HV_LINEAR_ENABLE_PDU::BCCMD_PSU_HV_LINEAR_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSU_HV_LINEAR_ENABLE_PDU::BCCMD_PSU_HV_LINEAR_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PSU_HV_LINEAR_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_data) ;
}

void BCCMD_PSU_HV_LINEAR_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PSU_HV_LINEAR_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU::BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_TRANSFORM_DISCONNECT , BCCMD_STREAM_TRANSFORM_DISCONNECT_pduSize )
{
}

BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU::BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU::BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU::BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_data) ;
}

void BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STREAM_TRANSFORM_DISCONNECT_data,val) ;
}

/*******************************************************************/


BCCMD_FAULT_ARG_PDU::BCCMD_FAULT_ARG_PDU()
: BCCMD_PDU( BCCMDVARID_FAULT_ARG , BCCMD_FAULT_ARG_pduSize )
{
}

BCCMD_FAULT_ARG_PDU::BCCMD_FAULT_ARG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FAULT_ARG_PDU::BCCMD_FAULT_ARG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FAULT_ARG_PDU::BCCMD_FAULT_ARG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_FAULT_ARG_PDU::get_data(void) const
{
    return get_uint16(BCCMD_FAULT_ARG_data) ;
}

void BCCMD_FAULT_ARG_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_FAULT_ARG_data,val) ;
}

/*******************************************************************/


BCCMD_RECLAIM_RAM_RESERVE_PDU::BCCMD_RECLAIM_RAM_RESERVE_PDU()
: BCCMD_PDU( BCCMDVARID_RECLAIM_RAM_RESERVE , BCCMD_RECLAIM_RAM_RESERVE_pduSize )
{
}

BCCMD_RECLAIM_RAM_RESERVE_PDU::BCCMD_RECLAIM_RAM_RESERVE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RECLAIM_RAM_RESERVE_PDU::BCCMD_RECLAIM_RAM_RESERVE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RECLAIM_RAM_RESERVE_PDU::BCCMD_RECLAIM_RAM_RESERVE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_RECLAIM_RAM_RESERVE_PDU::get_type(void) const
{
    return get_uint16(BCCMD_RECLAIM_RAM_RESERVE_type) ;
}

void BCCMD_RECLAIM_RAM_RESERVE_PDU::set_type(uint16 val)
{
    set_uint16(BCCMD_RECLAIM_RAM_RESERVE_type,val) ;
}

uint16 BCCMD_RECLAIM_RAM_RESERVE_PDU::get_value(void) const
{
    return get_uint16(BCCMD_RECLAIM_RAM_RESERVE_value) ;
}

void BCCMD_RECLAIM_RAM_RESERVE_PDU::set_value(uint16 val)
{
    set_uint16(BCCMD_RECLAIM_RAM_RESERVE_value,val) ;
}

/*******************************************************************/


BCCMD_LC_FRAC_COUNT_PDU::BCCMD_LC_FRAC_COUNT_PDU()
: BCCMD_PDU( BCCMDVARID_LC_FRAC_COUNT , BCCMD_LC_FRAC_COUNT_pduSize )
{
}

BCCMD_LC_FRAC_COUNT_PDU::BCCMD_LC_FRAC_COUNT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_LC_FRAC_COUNT_PDU::BCCMD_LC_FRAC_COUNT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_LC_FRAC_COUNT_PDU::BCCMD_LC_FRAC_COUNT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_LC_FRAC_COUNT_PDU::get_data(void) const
{
    return get_uint16(BCCMD_LC_FRAC_COUNT_data) ;
}

void BCCMD_LC_FRAC_COUNT_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_LC_FRAC_COUNT_data,val) ;
}

/*******************************************************************/


BCCMD_MAX_TX_POWER_PDU::BCCMD_MAX_TX_POWER_PDU()
: BCCMD_PDU( BCCMDVARID_MAX_TX_POWER , BCCMD_MAX_TX_POWER_pduSize )
{
}

BCCMD_MAX_TX_POWER_PDU::BCCMD_MAX_TX_POWER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_MAX_TX_POWER_PDU::BCCMD_MAX_TX_POWER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_MAX_TX_POWER_PDU::BCCMD_MAX_TX_POWER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_MAX_TX_POWER_PDU::get_data(void) const
{
    return get_uint16(BCCMD_MAX_TX_POWER_data) ;
}

void BCCMD_MAX_TX_POWER_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_MAX_TX_POWER_data,val) ;
}

/*******************************************************************/


BCCMD_COASTER_ADD_SV_PDU::BCCMD_COASTER_ADD_SV_PDU()
: BCCMD_PDU( BCCMDVARID_COASTER_ADD_SV , BCCMD_COASTER_ADD_SV_pduSize )
{
}

BCCMD_COASTER_ADD_SV_PDU::BCCMD_COASTER_ADD_SV_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COASTER_ADD_SV_PDU::BCCMD_COASTER_ADD_SV_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COASTER_ADD_SV_PDU::BCCMD_COASTER_ADD_SV_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COASTER_ADD_SV_PDU::get_num_entries(void) const
{
    return get_uint16(BCCMD_COASTER_ADD_SV_num_entries) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_num_entries(uint16 val)
{
    set_uint16(BCCMD_COASTER_ADD_SV_num_entries,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_uSecs(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_uSecs) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_uSecs(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_uSecs,val) ;
}

uint8 BCCMD_COASTER_ADD_SV_PDU::get_uSec80ths(void) const
{
    return get_uint8(BCCMD_COASTER_ADD_SV_uSec80ths) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_uSec80ths(uint8 val)
{
    set_uint8(BCCMD_COASTER_ADD_SV_uSec80ths,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_code_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_code_doppler) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_code_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_code_doppler,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_code_shift(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_code_shift) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_code_shift(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_code_shift,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_carrier_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_carrier_doppler) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_carrier_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_carrier_doppler,val) ;
}

uint8 BCCMD_COASTER_ADD_SV_PDU::get_data_transition(void) const
{
    return get_uint8(BCCMD_COASTER_ADD_SV_data_transition) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_data_transition(uint8 val)
{
    set_uint8(BCCMD_COASTER_ADD_SV_data_transition,val) ;
}

uint16 BCCMD_COASTER_ADD_SV_PDU::get_satid_prn(void) const
{
    return get_uint16(BCCMD_COASTER_ADD_SV_satid_prn) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_satid_prn(uint16 val)
{
    set_uint16(BCCMD_COASTER_ADD_SV_satid_prn,val) ;
}

uint16 BCCMD_COASTER_ADD_SV_PDU::get_e1_dummy(void) const
{
    return get_uint16(BCCMD_COASTER_ADD_SV_e1_dummy) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e1_dummy(uint16 val)
{
    set_uint16(BCCMD_COASTER_ADD_SV_e1_dummy,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e1_uSecs(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e1_uSecs) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e1_uSecs(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e1_uSecs,val) ;
}

uint8 BCCMD_COASTER_ADD_SV_PDU::get_e1_uSec80ths(void) const
{
    return get_uint8(BCCMD_COASTER_ADD_SV_e1_uSec80ths) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e1_uSec80ths(uint8 val)
{
    set_uint8(BCCMD_COASTER_ADD_SV_e1_uSec80ths,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e1_code_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e1_code_doppler) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e1_code_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e1_code_doppler,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e1_code_shift(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e1_code_shift) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e1_code_shift(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e1_code_shift,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e1_carrier_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e1_carrier_doppler) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e1_carrier_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e1_carrier_doppler,val) ;
}

uint8 BCCMD_COASTER_ADD_SV_PDU::get_e1_data_transition(void) const
{
    return get_uint8(BCCMD_COASTER_ADD_SV_e1_data_transition) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e1_data_transition(uint8 val)
{
    set_uint8(BCCMD_COASTER_ADD_SV_e1_data_transition,val) ;
}

uint16 BCCMD_COASTER_ADD_SV_PDU::get_e1_satid_prn(void) const
{
    return get_uint16(BCCMD_COASTER_ADD_SV_e1_satid_prn) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e1_satid_prn(uint16 val)
{
    set_uint16(BCCMD_COASTER_ADD_SV_e1_satid_prn,val) ;
}

uint16 BCCMD_COASTER_ADD_SV_PDU::get_e2_dummy(void) const
{
    return get_uint16(BCCMD_COASTER_ADD_SV_e2_dummy) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e2_dummy(uint16 val)
{
    set_uint16(BCCMD_COASTER_ADD_SV_e2_dummy,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e2_uSecs(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e2_uSecs) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e2_uSecs(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e2_uSecs,val) ;
}

uint8 BCCMD_COASTER_ADD_SV_PDU::get_e2_uSec80ths(void) const
{
    return get_uint8(BCCMD_COASTER_ADD_SV_e2_uSec80ths) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e2_uSec80ths(uint8 val)
{
    set_uint8(BCCMD_COASTER_ADD_SV_e2_uSec80ths,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e2_code_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e2_code_doppler) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e2_code_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e2_code_doppler,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e2_code_shift(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e2_code_shift) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e2_code_shift(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e2_code_shift,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e2_carrier_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e2_carrier_doppler) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e2_carrier_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e2_carrier_doppler,val) ;
}

uint8 BCCMD_COASTER_ADD_SV_PDU::get_e2_data_transition(void) const
{
    return get_uint8(BCCMD_COASTER_ADD_SV_e2_data_transition) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e2_data_transition(uint8 val)
{
    set_uint8(BCCMD_COASTER_ADD_SV_e2_data_transition,val) ;
}

uint16 BCCMD_COASTER_ADD_SV_PDU::get_e2_satid_prn(void) const
{
    return get_uint16(BCCMD_COASTER_ADD_SV_e2_satid_prn) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e2_satid_prn(uint16 val)
{
    set_uint16(BCCMD_COASTER_ADD_SV_e2_satid_prn,val) ;
}

uint16 BCCMD_COASTER_ADD_SV_PDU::get_e3_dummy(void) const
{
    return get_uint16(BCCMD_COASTER_ADD_SV_e3_dummy) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e3_dummy(uint16 val)
{
    set_uint16(BCCMD_COASTER_ADD_SV_e3_dummy,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e3_uSecs(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e3_uSecs) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e3_uSecs(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e3_uSecs,val) ;
}

uint8 BCCMD_COASTER_ADD_SV_PDU::get_e3_uSec80ths(void) const
{
    return get_uint8(BCCMD_COASTER_ADD_SV_e3_uSec80ths) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e3_uSec80ths(uint8 val)
{
    set_uint8(BCCMD_COASTER_ADD_SV_e3_uSec80ths,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e3_code_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e3_code_doppler) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e3_code_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e3_code_doppler,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e3_code_shift(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e3_code_shift) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e3_code_shift(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e3_code_shift,val) ;
}

uint32 BCCMD_COASTER_ADD_SV_PDU::get_e3_carrier_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_ADD_SV_e3_carrier_doppler) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e3_carrier_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_ADD_SV_e3_carrier_doppler,val) ;
}

uint8 BCCMD_COASTER_ADD_SV_PDU::get_e3_data_transition(void) const
{
    return get_uint8(BCCMD_COASTER_ADD_SV_e3_data_transition) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e3_data_transition(uint8 val)
{
    set_uint8(BCCMD_COASTER_ADD_SV_e3_data_transition,val) ;
}

uint16 BCCMD_COASTER_ADD_SV_PDU::get_e3_satid_prn(void) const
{
    return get_uint16(BCCMD_COASTER_ADD_SV_e3_satid_prn) ;
}

void BCCMD_COASTER_ADD_SV_PDU::set_e3_satid_prn(uint16 val)
{
    set_uint16(BCCMD_COASTER_ADD_SV_e3_satid_prn,val) ;
}

/*******************************************************************/


BCCMD_DEEP_SLEEP_TIME_PDU::BCCMD_DEEP_SLEEP_TIME_PDU()
: BCCMD_PDU( BCCMDVARID_DEEP_SLEEP_TIME , BCCMD_DEEP_SLEEP_TIME_pduSize )
{
}

BCCMD_DEEP_SLEEP_TIME_PDU::BCCMD_DEEP_SLEEP_TIME_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_DEEP_SLEEP_TIME_PDU::BCCMD_DEEP_SLEEP_TIME_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_DEEP_SLEEP_TIME_PDU::BCCMD_DEEP_SLEEP_TIME_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_DEEP_SLEEP_TIME_PDU::get_data(void) const
{
    return get_uint32(BCCMD_DEEP_SLEEP_TIME_data) ;
}

void BCCMD_DEEP_SLEEP_TIME_PDU::set_data(uint32 val)
{
    set_uint32(BCCMD_DEEP_SLEEP_TIME_data,val) ;
}

/*******************************************************************/


BCCMD_BLE_WHITELIST_FREE_SPACE_PDU::BCCMD_BLE_WHITELIST_FREE_SPACE_PDU()
: BCCMD_PDU( BCCMDVARID_BLE_WHITELIST_FREE_SPACE , BCCMD_BLE_WHITELIST_FREE_SPACE_pduSize )
{
}

BCCMD_BLE_WHITELIST_FREE_SPACE_PDU::BCCMD_BLE_WHITELIST_FREE_SPACE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BLE_WHITELIST_FREE_SPACE_PDU::BCCMD_BLE_WHITELIST_FREE_SPACE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BLE_WHITELIST_FREE_SPACE_PDU::BCCMD_BLE_WHITELIST_FREE_SPACE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BLE_WHITELIST_FREE_SPACE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_data) ;
}

void BCCMD_BLE_WHITELIST_FREE_SPACE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BLE_WHITELIST_FREE_SPACE_data,val) ;
}

/*******************************************************************/


BCCMD_BABEL_SPI_RESET_AND_STOP_PDU::BCCMD_BABEL_SPI_RESET_AND_STOP_PDU()
: BCCMD_PDU( BCCMDVARID_BABEL_SPI_RESET_AND_STOP , BCCMD_BABEL_SPI_RESET_AND_STOP_pduSize )
{
}

BCCMD_BABEL_SPI_RESET_AND_STOP_PDU::BCCMD_BABEL_SPI_RESET_AND_STOP_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BABEL_SPI_RESET_AND_STOP_PDU::BCCMD_BABEL_SPI_RESET_AND_STOP_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BABEL_SPI_RESET_AND_STOP_PDU::BCCMD_BABEL_SPI_RESET_AND_STOP_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_RDF_DATA_CAPTURE_ENABLE , BCCMD_RDF_DATA_CAPTURE_ENABLE_pduSize )
{
}

BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::get_modes(void) const
{
    return get_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_modes) ;
}

void BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::set_modes(uint16 val)
{
    set_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_modes,val) ;
}

uint16 BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::get_timer_delay(void) const
{
    return get_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_timer_delay) ;
}

void BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::set_timer_delay(uint16 val)
{
    set_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_timer_delay,val) ;
}

uint16 BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::get_nsams(void) const
{
    return get_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_nsams) ;
}

void BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::set_nsams(uint16 val)
{
    set_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_nsams,val) ;
}

uint16 BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::get_nap(void) const
{
    return get_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_nap) ;
}

void BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::set_nap(uint16 val)
{
    set_uint16(BCCMD_RDF_DATA_CAPTURE_ENABLE_nap,val) ;
}

uint8 BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::get_uap(void) const
{
    return get_uint8(BCCMD_RDF_DATA_CAPTURE_ENABLE_uap) ;
}

void BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::set_uap(uint8 val)
{
    set_uint8(BCCMD_RDF_DATA_CAPTURE_ENABLE_uap,val) ;
}

uint32 BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::get_lap(void) const
{
    return get_uint32(BCCMD_RDF_DATA_CAPTURE_ENABLE_lap) ;
}

void BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU::set_lap(uint32 val)
{
    set_uint32(BCCMD_RDF_DATA_CAPTURE_ENABLE_lap,val) ;
}

/*******************************************************************/


BCCMD_CACHED_TEMPERATURE_PDU::BCCMD_CACHED_TEMPERATURE_PDU()
: BCCMD_PDU( BCCMDVARID_CACHED_TEMPERATURE , BCCMD_CACHED_TEMPERATURE_pduSize )
{
}

BCCMD_CACHED_TEMPERATURE_PDU::BCCMD_CACHED_TEMPERATURE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CACHED_TEMPERATURE_PDU::BCCMD_CACHED_TEMPERATURE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CACHED_TEMPERATURE_PDU::BCCMD_CACHED_TEMPERATURE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CACHED_TEMPERATURE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CACHED_TEMPERATURE_data) ;
}

void BCCMD_CACHED_TEMPERATURE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CACHED_TEMPERATURE_data,val) ;
}

/*******************************************************************/


BCCMD_COEX_PRIORITY_PIOS_ON_PDU::BCCMD_COEX_PRIORITY_PIOS_ON_PDU()
: BCCMD_PDU( BCCMDVARID_COEX_PRIORITY_PIOS_ON , BCCMD_COEX_PRIORITY_PIOS_ON_pduSize )
{
}

BCCMD_COEX_PRIORITY_PIOS_ON_PDU::BCCMD_COEX_PRIORITY_PIOS_ON_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COEX_PRIORITY_PIOS_ON_PDU::BCCMD_COEX_PRIORITY_PIOS_ON_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COEX_PRIORITY_PIOS_ON_PDU::BCCMD_COEX_PRIORITY_PIOS_ON_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COEX_PRIORITY_PIOS_ON_PDU::get_data(void) const
{
    return get_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_data) ;
}

void BCCMD_COEX_PRIORITY_PIOS_ON_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_COEX_PRIORITY_PIOS_ON_data,val) ;
}

/*******************************************************************/


BCCMD_FM_REG_PDU::BCCMD_FM_REG_PDU()
: BCCMD_PDU( BCCMDVARID_FM_REG , BCCMD_FM_REG_pduSize )
{
}

BCCMD_FM_REG_PDU::BCCMD_FM_REG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FM_REG_PDU::BCCMD_FM_REG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FM_REG_PDU::BCCMD_FM_REG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint8 BCCMD_FM_REG_PDU::get_fm_register(void) const
{
    return get_uint8(BCCMD_FM_REG_fm_register) ;
}

void BCCMD_FM_REG_PDU::set_fm_register(uint8 val)
{
    set_uint8(BCCMD_FM_REG_fm_register,val) ;
}

uint16 BCCMD_FM_REG_PDU::get_value(void) const
{
    return get_uint16(BCCMD_FM_REG_value) ;
}

void BCCMD_FM_REG_PDU::set_value(uint16 val)
{
    set_uint16(BCCMD_FM_REG_value,val) ;
}

/*******************************************************************/


BCCMD_CODEC_INPUT_GAIN_PDU::BCCMD_CODEC_INPUT_GAIN_PDU()
: BCCMD_PDU( BCCMDVARID_CODEC_INPUT_GAIN , BCCMD_CODEC_INPUT_GAIN_pduSize )
{
}

BCCMD_CODEC_INPUT_GAIN_PDU::BCCMD_CODEC_INPUT_GAIN_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CODEC_INPUT_GAIN_PDU::BCCMD_CODEC_INPUT_GAIN_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CODEC_INPUT_GAIN_PDU::BCCMD_CODEC_INPUT_GAIN_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CODEC_INPUT_GAIN_PDU::get_gain_a(void) const
{
    return get_uint16(BCCMD_CODEC_INPUT_GAIN_gain_a) ;
}

void BCCMD_CODEC_INPUT_GAIN_PDU::set_gain_a(uint16 val)
{
    set_uint16(BCCMD_CODEC_INPUT_GAIN_gain_a,val) ;
}

uint16 BCCMD_CODEC_INPUT_GAIN_PDU::get_gain_b(void) const
{
    return get_uint16(BCCMD_CODEC_INPUT_GAIN_gain_b) ;
}

void BCCMD_CODEC_INPUT_GAIN_PDU::set_gain_b(uint16 val)
{
    set_uint16(BCCMD_CODEC_INPUT_GAIN_gain_b,val) ;
}

/*******************************************************************/


BCCMD_STREAM_GET_SINK_PDU::BCCMD_STREAM_GET_SINK_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_GET_SINK , BCCMD_STREAM_GET_SINK_pduSize )
{
}

BCCMD_STREAM_GET_SINK_PDU::BCCMD_STREAM_GET_SINK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_GET_SINK_PDU::BCCMD_STREAM_GET_SINK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_GET_SINK_PDU::BCCMD_STREAM_GET_SINK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_GET_SINK_PDU::get_resource(void) const
{
    return get_uint16(BCCMD_STREAM_GET_SINK_resource) ;
}

void BCCMD_STREAM_GET_SINK_PDU::set_resource(uint16 val)
{
    set_uint16(BCCMD_STREAM_GET_SINK_resource,val) ;
}

uint16 BCCMD_STREAM_GET_SINK_PDU::get_opt1(void) const
{
    return get_uint16(BCCMD_STREAM_GET_SINK_opt1) ;
}

void BCCMD_STREAM_GET_SINK_PDU::set_opt1(uint16 val)
{
    set_uint16(BCCMD_STREAM_GET_SINK_opt1,val) ;
}

uint16 BCCMD_STREAM_GET_SINK_PDU::get_opt2(void) const
{
    return get_uint16(BCCMD_STREAM_GET_SINK_opt2) ;
}

void BCCMD_STREAM_GET_SINK_PDU::set_opt2(uint16 val)
{
    set_uint16(BCCMD_STREAM_GET_SINK_opt2,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U01X_PDU::BCCMD_STIBBONS_U01X_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U01X , BCCMD_STIBBONS_U01X_pduSize )
{
}

BCCMD_STIBBONS_U01X_PDU::BCCMD_STIBBONS_U01X_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U01X_PDU::BCCMD_STIBBONS_U01X_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U01X_PDU::BCCMD_STIBBONS_U01X_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U01X_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U01X_data) ;
}

void BCCMD_STIBBONS_U01X_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U01X_data,val) ;
}

/*******************************************************************/


BCCMD_BYPASS_UART_PDU::BCCMD_BYPASS_UART_PDU()
: BCCMD_PDU( BCCMDVARID_BYPASS_UART , BCCMD_BYPASS_UART_pduSize )
{
}

BCCMD_BYPASS_UART_PDU::BCCMD_BYPASS_UART_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BYPASS_UART_PDU::BCCMD_BYPASS_UART_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BYPASS_UART_PDU::BCCMD_BYPASS_UART_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_INQUIRY_PRIORITY_PDU::BCCMD_INQUIRY_PRIORITY_PDU()
: BCCMD_PDU( BCCMDVARID_INQUIRY_PRIORITY , BCCMD_INQUIRY_PRIORITY_pduSize )
{
}

BCCMD_INQUIRY_PRIORITY_PDU::BCCMD_INQUIRY_PRIORITY_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_INQUIRY_PRIORITY_PDU::BCCMD_INQUIRY_PRIORITY_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_INQUIRY_PRIORITY_PDU::BCCMD_INQUIRY_PRIORITY_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_INQUIRY_PRIORITY_PDU::get_data(void) const
{
    return get_uint16(BCCMD_INQUIRY_PRIORITY_data) ;
}

void BCCMD_INQUIRY_PRIORITY_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_INQUIRY_PRIORITY_data,val) ;
}

/*******************************************************************/


BCCMD_PIO32_DIRECTION_MASK_PDU::BCCMD_PIO32_DIRECTION_MASK_PDU()
: BCCMD_PDU( BCCMDVARID_PIO32_DIRECTION_MASK , BCCMD_PIO32_DIRECTION_MASK_pduSize )
{
}

BCCMD_PIO32_DIRECTION_MASK_PDU::BCCMD_PIO32_DIRECTION_MASK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO32_DIRECTION_MASK_PDU::BCCMD_PIO32_DIRECTION_MASK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO32_DIRECTION_MASK_PDU::BCCMD_PIO32_DIRECTION_MASK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_PIO32_DIRECTION_MASK_PDU::get_mask(void) const
{
    return get_uint32(BCCMD_PIO32_DIRECTION_MASK_mask) ;
}

void BCCMD_PIO32_DIRECTION_MASK_PDU::set_mask(uint32 val)
{
    set_uint32(BCCMD_PIO32_DIRECTION_MASK_mask,val) ;
}

uint32 BCCMD_PIO32_DIRECTION_MASK_PDU::get_bits(void) const
{
    return get_uint32(BCCMD_PIO32_DIRECTION_MASK_bits) ;
}

void BCCMD_PIO32_DIRECTION_MASK_PDU::set_bits(uint32 val)
{
    set_uint32(BCCMD_PIO32_DIRECTION_MASK_bits,val) ;
}

uint32 BCCMD_PIO32_DIRECTION_MASK_PDU::get_result(void) const
{
    return get_uint32(BCCMD_PIO32_DIRECTION_MASK_result) ;
}

void BCCMD_PIO32_DIRECTION_MASK_PDU::set_result(uint32 val)
{
    set_uint32(BCCMD_PIO32_DIRECTION_MASK_result,val) ;
}

/*******************************************************************/


BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU()
: BCCMD_PDU( BCCMDVARID_SPI_LOCK_CUSTOMER_KEY , BCCMD_SPI_LOCK_CUSTOMER_KEY_pduSize )
{
}

BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::get_cust_key1(void) const
{
    return get_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key1) ;
}

void BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::set_cust_key1(uint32 val)
{
    set_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key1,val) ;
}

uint32 BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::get_cust_key2(void) const
{
    return get_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key2) ;
}

void BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::set_cust_key2(uint32 val)
{
    set_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key2,val) ;
}

uint32 BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::get_cust_key3(void) const
{
    return get_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key3) ;
}

void BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::set_cust_key3(uint32 val)
{
    set_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key3,val) ;
}

uint32 BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::get_cust_key4(void) const
{
    return get_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key4) ;
}

void BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU::set_cust_key4(uint32 val)
{
    set_uint32(BCCMD_SPI_LOCK_CUSTOMER_KEY_cust_key4,val) ;
}

/*******************************************************************/


BCCMD_HQ_SCRAPING_LEN_PDU::BCCMD_HQ_SCRAPING_LEN_PDU()
: BCCMD_PDU( BCCMDVARID_HQ_SCRAPING_LEN , BCCMD_HQ_SCRAPING_LEN_pduSize )
{
}

BCCMD_HQ_SCRAPING_LEN_PDU::BCCMD_HQ_SCRAPING_LEN_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_HQ_SCRAPING_LEN_PDU::BCCMD_HQ_SCRAPING_LEN_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_HQ_SCRAPING_LEN_PDU::BCCMD_HQ_SCRAPING_LEN_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_HQ_SCRAPING_LEN_PDU::get_data(void) const
{
    return get_uint16(BCCMD_HQ_SCRAPING_LEN_data) ;
}

void BCCMD_HQ_SCRAPING_LEN_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_HQ_SCRAPING_LEN_data,val) ;
}

/*******************************************************************/


BCCMD_WLAN_COEX_PRIORITY_PDU::BCCMD_WLAN_COEX_PRIORITY_PDU()
: BCCMD_PDU( BCCMDVARID_WLAN_COEX_PRIORITY , BCCMD_WLAN_COEX_PRIORITY_pduSize )
{
}

BCCMD_WLAN_COEX_PRIORITY_PDU::BCCMD_WLAN_COEX_PRIORITY_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_WLAN_COEX_PRIORITY_PDU::BCCMD_WLAN_COEX_PRIORITY_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_WLAN_COEX_PRIORITY_PDU::BCCMD_WLAN_COEX_PRIORITY_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_WLAN_COEX_PRIORITY_PDU::get_handle(void) const
{
    return get_uint16(BCCMD_WLAN_COEX_PRIORITY_handle) ;
}

void BCCMD_WLAN_COEX_PRIORITY_PDU::set_handle(uint16 val)
{
    set_uint16(BCCMD_WLAN_COEX_PRIORITY_handle,val) ;
}

bool BCCMD_WLAN_COEX_PRIORITY_PDU::get_enable(void) const
{
    return get_bool(BCCMD_WLAN_COEX_PRIORITY_enable) ;
}

void BCCMD_WLAN_COEX_PRIORITY_PDU::set_enable(bool val)
{
    set_bool(BCCMD_WLAN_COEX_PRIORITY_enable,val) ;
}

/*******************************************************************/


BCCMD_BC01_STATUS_PDU::BCCMD_BC01_STATUS_PDU()
: BCCMD_PDU( BCCMDVARID_BC01_STATUS , BCCMD_BC01_STATUS_pduSize )
{
}

BCCMD_BC01_STATUS_PDU::BCCMD_BC01_STATUS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BC01_STATUS_PDU::BCCMD_BC01_STATUS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BC01_STATUS_PDU::BCCMD_BC01_STATUS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BC01_STATUS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BC01_STATUS_data) ;
}

void BCCMD_BC01_STATUS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BC01_STATUS_data,val) ;
}

/*******************************************************************/


BCCMD_CHECK_ROM_CRC32_PDU::BCCMD_CHECK_ROM_CRC32_PDU()
: BCCMD_PDU( BCCMDVARID_CHECK_ROM_CRC32 , BCCMD_CHECK_ROM_CRC32_pduSize )
{
}

BCCMD_CHECK_ROM_CRC32_PDU::BCCMD_CHECK_ROM_CRC32_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHECK_ROM_CRC32_PDU::BCCMD_CHECK_ROM_CRC32_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHECK_ROM_CRC32_PDU::BCCMD_CHECK_ROM_CRC32_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_CHECK_ROM_CRC32_PDU::get_data(void) const
{
    return get_uint32(BCCMD_CHECK_ROM_CRC32_data) ;
}

void BCCMD_CHECK_ROM_CRC32_PDU::set_data(uint32 val)
{
    set_uint32(BCCMD_CHECK_ROM_CRC32_data,val) ;
}

/*******************************************************************/


BCCMD_PS_FACTORY_RESTORE_PDU::BCCMD_PS_FACTORY_RESTORE_PDU()
: BCCMD_PDU( BCCMDVARID_PS_FACTORY_RESTORE , BCCMD_PS_FACTORY_RESTORE_pduSize )
{
}

BCCMD_PS_FACTORY_RESTORE_PDU::BCCMD_PS_FACTORY_RESTORE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PS_FACTORY_RESTORE_PDU::BCCMD_PS_FACTORY_RESTORE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PS_FACTORY_RESTORE_PDU::BCCMD_PS_FACTORY_RESTORE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_SCO_PARAMETERS_PDU::BCCMD_SCO_PARAMETERS_PDU()
: BCCMD_PDU( BCCMDVARID_SCO_PARAMETERS , BCCMD_SCO_PARAMETERS_pduSize )
{
}

BCCMD_SCO_PARAMETERS_PDU::BCCMD_SCO_PARAMETERS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SCO_PARAMETERS_PDU::BCCMD_SCO_PARAMETERS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SCO_PARAMETERS_PDU::BCCMD_SCO_PARAMETERS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_SCO_PARAMETERS_PDU::get_sco_handle(void) const
{
    return get_uint16(BCCMD_SCO_PARAMETERS_sco_handle) ;
}

void BCCMD_SCO_PARAMETERS_PDU::set_sco_handle(uint16 val)
{
    set_uint16(BCCMD_SCO_PARAMETERS_sco_handle,val) ;
}

uint16 BCCMD_SCO_PARAMETERS_PDU::get_tsco(void) const
{
    return get_uint16(BCCMD_SCO_PARAMETERS_tsco) ;
}

void BCCMD_SCO_PARAMETERS_PDU::set_tsco(uint16 val)
{
    set_uint16(BCCMD_SCO_PARAMETERS_tsco,val) ;
}

uint16 BCCMD_SCO_PARAMETERS_PDU::get_wesco(void) const
{
    return get_uint16(BCCMD_SCO_PARAMETERS_wesco) ;
}

void BCCMD_SCO_PARAMETERS_PDU::set_wesco(uint16 val)
{
    set_uint16(BCCMD_SCO_PARAMETERS_wesco,val) ;
}

uint16 BCCMD_SCO_PARAMETERS_PDU::get_reserved_slots(void) const
{
    return get_uint16(BCCMD_SCO_PARAMETERS_reserved_slots) ;
}

void BCCMD_SCO_PARAMETERS_PDU::set_reserved_slots(uint16 val)
{
    set_uint16(BCCMD_SCO_PARAMETERS_reserved_slots,val) ;
}

/*******************************************************************/


BCCMD_PCM_ATTENUATION_PDU::BCCMD_PCM_ATTENUATION_PDU()
: BCCMD_PDU( BCCMDVARID_PCM_ATTENUATION , BCCMD_PCM_ATTENUATION_pduSize )
{
}

BCCMD_PCM_ATTENUATION_PDU::BCCMD_PCM_ATTENUATION_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PCM_ATTENUATION_PDU::BCCMD_PCM_ATTENUATION_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PCM_ATTENUATION_PDU::BCCMD_PCM_ATTENUATION_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PCM_ATTENUATION_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PCM_ATTENUATION_data) ;
}

void BCCMD_PCM_ATTENUATION_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PCM_ATTENUATION_data,val) ;
}

/*******************************************************************/


BCCMD_CODEC_OUTPUT_GAIN_PDU::BCCMD_CODEC_OUTPUT_GAIN_PDU()
: BCCMD_PDU( BCCMDVARID_CODEC_OUTPUT_GAIN , BCCMD_CODEC_OUTPUT_GAIN_pduSize )
{
}

BCCMD_CODEC_OUTPUT_GAIN_PDU::BCCMD_CODEC_OUTPUT_GAIN_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CODEC_OUTPUT_GAIN_PDU::BCCMD_CODEC_OUTPUT_GAIN_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CODEC_OUTPUT_GAIN_PDU::BCCMD_CODEC_OUTPUT_GAIN_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CODEC_OUTPUT_GAIN_PDU::get_gain_a(void) const
{
    return get_uint16(BCCMD_CODEC_OUTPUT_GAIN_gain_a) ;
}

void BCCMD_CODEC_OUTPUT_GAIN_PDU::set_gain_a(uint16 val)
{
    set_uint16(BCCMD_CODEC_OUTPUT_GAIN_gain_a,val) ;
}

uint16 BCCMD_CODEC_OUTPUT_GAIN_PDU::get_gain_b(void) const
{
    return get_uint16(BCCMD_CODEC_OUTPUT_GAIN_gain_b) ;
}

void BCCMD_CODEC_OUTPUT_GAIN_PDU::set_gain_b(uint16 val)
{
    set_uint16(BCCMD_CODEC_OUTPUT_GAIN_gain_b,val) ;
}

/*******************************************************************/


BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU::BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU()
: BCCMD_PDU( BCCMDVARID_RDF_DATA_CAPTURE_DISABLE , BCCMD_RDF_DATA_CAPTURE_DISABLE_pduSize )
{
}

BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU::BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU::BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU::BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_data) ;
}

void BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_RDF_DATA_CAPTURE_DISABLE_data,val) ;
}

/*******************************************************************/


BCCMD_RSSI_ACL_PDU::BCCMD_RSSI_ACL_PDU()
: BCCMD_PDU( BCCMDVARID_RSSI_ACL , BCCMD_RSSI_ACL_pduSize )
{
}

BCCMD_RSSI_ACL_PDU::BCCMD_RSSI_ACL_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RSSI_ACL_PDU::BCCMD_RSSI_ACL_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RSSI_ACL_PDU::BCCMD_RSSI_ACL_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_RSSI_ACL_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_RSSI_ACL_hci_handle) ;
}

void BCCMD_RSSI_ACL_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_RSSI_ACL_hci_handle,val) ;
}

int16 BCCMD_RSSI_ACL_PDU::get_rssi(void) const
{
    return get_int16(BCCMD_RSSI_ACL_rssi) ;
}

void BCCMD_RSSI_ACL_PDU::set_rssi(int16 val)
{
    set_int16(BCCMD_RSSI_ACL_rssi,val) ;
}

/*******************************************************************/


BCCMD_PCM_CONFIG32_PDU::BCCMD_PCM_CONFIG32_PDU()
: BCCMD_PDU( BCCMDVARID_PCM_CONFIG32 , BCCMD_PCM_CONFIG32_pduSize )
{
}

BCCMD_PCM_CONFIG32_PDU::BCCMD_PCM_CONFIG32_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PCM_CONFIG32_PDU::BCCMD_PCM_CONFIG32_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PCM_CONFIG32_PDU::BCCMD_PCM_CONFIG32_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PCM_CONFIG32_PDU::get_pcm_if_id(void) const
{
    return get_uint16(BCCMD_PCM_CONFIG32_pcm_if_id) ;
}

void BCCMD_PCM_CONFIG32_PDU::set_pcm_if_id(uint16 val)
{
    set_uint16(BCCMD_PCM_CONFIG32_pcm_if_id,val) ;
}

uint32 BCCMD_PCM_CONFIG32_PDU::get_config32(void) const
{
    return get_uint32(BCCMD_PCM_CONFIG32_config32) ;
}

void BCCMD_PCM_CONFIG32_PDU::set_config32(uint32 val)
{
    set_uint32(BCCMD_PCM_CONFIG32_config32,val) ;
}

/*******************************************************************/


BCCMD_INQUIRY_TX_POWER_PDU::BCCMD_INQUIRY_TX_POWER_PDU()
: BCCMD_PDU( BCCMDVARID_INQUIRY_TX_POWER , BCCMD_INQUIRY_TX_POWER_pduSize )
{
}

BCCMD_INQUIRY_TX_POWER_PDU::BCCMD_INQUIRY_TX_POWER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_INQUIRY_TX_POWER_PDU::BCCMD_INQUIRY_TX_POWER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_INQUIRY_TX_POWER_PDU::BCCMD_INQUIRY_TX_POWER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_INQUIRY_TX_POWER_PDU::get_data(void) const
{
    return get_uint16(BCCMD_INQUIRY_TX_POWER_data) ;
}

void BCCMD_INQUIRY_TX_POWER_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_INQUIRY_TX_POWER_data,val) ;
}

/*******************************************************************/


BCCMD_BLE_AROPE_CAPABILITIES_PDU::BCCMD_BLE_AROPE_CAPABILITIES_PDU()
: BCCMD_PDU( BCCMDVARID_BLE_AROPE_CAPABILITIES , BCCMD_BLE_AROPE_CAPABILITIES_pduSize )
{
}

BCCMD_BLE_AROPE_CAPABILITIES_PDU::BCCMD_BLE_AROPE_CAPABILITIES_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BLE_AROPE_CAPABILITIES_PDU::BCCMD_BLE_AROPE_CAPABILITIES_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BLE_AROPE_CAPABILITIES_PDU::BCCMD_BLE_AROPE_CAPABILITIES_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_BLE_AROPE_CAPABILITIES_PDU::get_data(void) const
{
    return get_uint32(BCCMD_BLE_AROPE_CAPABILITIES_data) ;
}

void BCCMD_BLE_AROPE_CAPABILITIES_PDU::set_data(uint32 val)
{
    set_uint32(BCCMD_BLE_AROPE_CAPABILITIES_data,val) ;
}

/*******************************************************************/


BCCMD_BLE_DEFAULT_TX_POWER_PDU::BCCMD_BLE_DEFAULT_TX_POWER_PDU()
: BCCMD_PDU( BCCMDVARID_BLE_DEFAULT_TX_POWER , BCCMD_BLE_DEFAULT_TX_POWER_pduSize )
{
}

BCCMD_BLE_DEFAULT_TX_POWER_PDU::BCCMD_BLE_DEFAULT_TX_POWER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BLE_DEFAULT_TX_POWER_PDU::BCCMD_BLE_DEFAULT_TX_POWER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BLE_DEFAULT_TX_POWER_PDU::BCCMD_BLE_DEFAULT_TX_POWER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BLE_DEFAULT_TX_POWER_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BLE_DEFAULT_TX_POWER_data) ;
}

void BCCMD_BLE_DEFAULT_TX_POWER_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BLE_DEFAULT_TX_POWER_data,val) ;
}

/*******************************************************************/


BCCMD_DEFAULT_TX_POWER_PDU::BCCMD_DEFAULT_TX_POWER_PDU()
: BCCMD_PDU( BCCMDVARID_DEFAULT_TX_POWER , BCCMD_DEFAULT_TX_POWER_pduSize )
{
}

BCCMD_DEFAULT_TX_POWER_PDU::BCCMD_DEFAULT_TX_POWER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_DEFAULT_TX_POWER_PDU::BCCMD_DEFAULT_TX_POWER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_DEFAULT_TX_POWER_PDU::BCCMD_DEFAULT_TX_POWER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_DEFAULT_TX_POWER_PDU::get_data(void) const
{
    return get_uint16(BCCMD_DEFAULT_TX_POWER_data) ;
}

void BCCMD_DEFAULT_TX_POWER_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_DEFAULT_TX_POWER_data,val) ;
}

/*******************************************************************/


BCCMD_STREAM_CLOSE_SINK_PDU::BCCMD_STREAM_CLOSE_SINK_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_CLOSE_SINK , BCCMD_STREAM_CLOSE_SINK_pduSize )
{
}

BCCMD_STREAM_CLOSE_SINK_PDU::BCCMD_STREAM_CLOSE_SINK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_CLOSE_SINK_PDU::BCCMD_STREAM_CLOSE_SINK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_CLOSE_SINK_PDU::BCCMD_STREAM_CLOSE_SINK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_CLOSE_SINK_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STREAM_CLOSE_SINK_data) ;
}

void BCCMD_STREAM_CLOSE_SINK_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STREAM_CLOSE_SINK_data,val) ;
}

/*******************************************************************/


BCCMD_COLD_RESET_PDU::BCCMD_COLD_RESET_PDU()
: BCCMD_PDU( BCCMDVARID_COLD_RESET , BCCMD_COLD_RESET_pduSize )
{
}

BCCMD_COLD_RESET_PDU::BCCMD_COLD_RESET_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COLD_RESET_PDU::BCCMD_COLD_RESET_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COLD_RESET_PDU::BCCMD_COLD_RESET_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_MIC_BIAS_CONFIGURE_PDU::BCCMD_MIC_BIAS_CONFIGURE_PDU()
: BCCMD_PDU( BCCMDVARID_MIC_BIAS_CONFIGURE , BCCMD_MIC_BIAS_CONFIGURE_pduSize )
{
}

BCCMD_MIC_BIAS_CONFIGURE_PDU::BCCMD_MIC_BIAS_CONFIGURE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_MIC_BIAS_CONFIGURE_PDU::BCCMD_MIC_BIAS_CONFIGURE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_MIC_BIAS_CONFIGURE_PDU::BCCMD_MIC_BIAS_CONFIGURE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_MIC_BIAS_CONFIGURE_PDU::get_instance(void) const
{
    return get_uint16(BCCMD_MIC_BIAS_CONFIGURE_instance) ;
}

void BCCMD_MIC_BIAS_CONFIGURE_PDU::set_instance(uint16 val)
{
    set_uint16(BCCMD_MIC_BIAS_CONFIGURE_instance,val) ;
}

uint16 BCCMD_MIC_BIAS_CONFIGURE_PDU::get_key_config(void) const
{
    return get_uint16(BCCMD_MIC_BIAS_CONFIGURE_key_config) ;
}

void BCCMD_MIC_BIAS_CONFIGURE_PDU::set_key_config(uint16 val)
{
    set_uint16(BCCMD_MIC_BIAS_CONFIGURE_key_config,val) ;
}

uint16 BCCMD_MIC_BIAS_CONFIGURE_PDU::get_value(void) const
{
    return get_uint16(BCCMD_MIC_BIAS_CONFIGURE_value) ;
}

void BCCMD_MIC_BIAS_CONFIGURE_PDU::set_value(uint16 val)
{
    set_uint16(BCCMD_MIC_BIAS_CONFIGURE_value,val) ;
}

/*******************************************************************/


BCCMD_CHECK_ROM_PDU::BCCMD_CHECK_ROM_PDU()
: BCCMD_PDU( BCCMDVARID_CHECK_ROM , BCCMD_CHECK_ROM_pduSize )
{
}

BCCMD_CHECK_ROM_PDU::BCCMD_CHECK_ROM_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHECK_ROM_PDU::BCCMD_CHECK_ROM_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHECK_ROM_PDU::BCCMD_CHECK_ROM_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHECK_ROM_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHECK_ROM_data) ;
}

void BCCMD_CHECK_ROM_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHECK_ROM_data,val) ;
}

/*******************************************************************/


BCCMD_RAND_PDU::BCCMD_RAND_PDU()
: BCCMD_PDU( BCCMDVARID_RAND , BCCMD_RAND_pduSize )
{
}

BCCMD_RAND_PDU::BCCMD_RAND_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RAND_PDU::BCCMD_RAND_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RAND_PDU::BCCMD_RAND_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_RAND_PDU::get_data(void) const
{
    return get_uint16(BCCMD_RAND_data) ;
}

void BCCMD_RAND_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_RAND_data,val) ;
}

/*******************************************************************/


BCCMD_COLD_HALT_PDU::BCCMD_COLD_HALT_PDU()
: BCCMD_PDU( BCCMDVARID_COLD_HALT , BCCMD_COLD_HALT_pduSize )
{
}

BCCMD_COLD_HALT_PDU::BCCMD_COLD_HALT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COLD_HALT_PDU::BCCMD_COLD_HALT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COLD_HALT_PDU::BCCMD_COLD_HALT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_PIO32_PROTECT_MASK_PDU::BCCMD_PIO32_PROTECT_MASK_PDU()
: BCCMD_PDU( BCCMDVARID_PIO32_PROTECT_MASK , BCCMD_PIO32_PROTECT_MASK_pduSize )
{
}

BCCMD_PIO32_PROTECT_MASK_PDU::BCCMD_PIO32_PROTECT_MASK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO32_PROTECT_MASK_PDU::BCCMD_PIO32_PROTECT_MASK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO32_PROTECT_MASK_PDU::BCCMD_PIO32_PROTECT_MASK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_PIO32_PROTECT_MASK_PDU::get_mask(void) const
{
    return get_uint32(BCCMD_PIO32_PROTECT_MASK_mask) ;
}

void BCCMD_PIO32_PROTECT_MASK_PDU::set_mask(uint32 val)
{
    set_uint32(BCCMD_PIO32_PROTECT_MASK_mask,val) ;
}

uint32 BCCMD_PIO32_PROTECT_MASK_PDU::get_bits(void) const
{
    return get_uint32(BCCMD_PIO32_PROTECT_MASK_bits) ;
}

void BCCMD_PIO32_PROTECT_MASK_PDU::set_bits(uint32 val)
{
    set_uint32(BCCMD_PIO32_PROTECT_MASK_bits,val) ;
}

uint32 BCCMD_PIO32_PROTECT_MASK_PDU::get_result(void) const
{
    return get_uint32(BCCMD_PIO32_PROTECT_MASK_result) ;
}

void BCCMD_PIO32_PROTECT_MASK_PDU::set_result(uint32 val)
{
    set_uint32(BCCMD_PIO32_PROTECT_MASK_result,val) ;
}

/*******************************************************************/


BCCMD_DSPMANAGER_DEBUG_PDU::BCCMD_DSPMANAGER_DEBUG_PDU()
: BCCMD_PDU( BCCMDVARID_DSPMANAGER_DEBUG , BCCMD_DSPMANAGER_DEBUG_pduSize )
{
}

BCCMD_DSPMANAGER_DEBUG_PDU::BCCMD_DSPMANAGER_DEBUG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_DSPMANAGER_DEBUG_PDU::BCCMD_DSPMANAGER_DEBUG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_DSPMANAGER_DEBUG_PDU::BCCMD_DSPMANAGER_DEBUG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_DSPMANAGER_DEBUG_PDU::get_subsystem(void) const
{
    return get_uint16(BCCMD_DSPMANAGER_DEBUG_subsystem) ;
}

void BCCMD_DSPMANAGER_DEBUG_PDU::set_subsystem(uint16 val)
{
    set_uint16(BCCMD_DSPMANAGER_DEBUG_subsystem,val) ;
}

uint16 BCCMD_DSPMANAGER_DEBUG_PDU::get_arguments(void) const
{
    return get_uint16(BCCMD_DSPMANAGER_DEBUG_arguments) ;
}

void BCCMD_DSPMANAGER_DEBUG_PDU::set_arguments(uint16 val)
{
    set_uint16(BCCMD_DSPMANAGER_DEBUG_arguments,val) ;
}

/*******************************************************************/


BCCMD_COASTER_STOP_PDU::BCCMD_COASTER_STOP_PDU()
: BCCMD_PDU( BCCMDVARID_COASTER_STOP , BCCMD_COASTER_STOP_pduSize )
{
}

BCCMD_COASTER_STOP_PDU::BCCMD_COASTER_STOP_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COASTER_STOP_PDU::BCCMD_COASTER_STOP_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COASTER_STOP_PDU::BCCMD_COASTER_STOP_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COASTER_STOP_PDU::get_flags(void) const
{
    return get_uint16(BCCMD_COASTER_STOP_flags) ;
}

void BCCMD_COASTER_STOP_PDU::set_flags(uint16 val)
{
    set_uint16(BCCMD_COASTER_STOP_flags,val) ;
}

/*******************************************************************/


BCCMD_ALLOCATE_RAM_RESERVE_PDU::BCCMD_ALLOCATE_RAM_RESERVE_PDU()
: BCCMD_PDU( BCCMDVARID_ALLOCATE_RAM_RESERVE , BCCMD_ALLOCATE_RAM_RESERVE_pduSize )
{
}

BCCMD_ALLOCATE_RAM_RESERVE_PDU::BCCMD_ALLOCATE_RAM_RESERVE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ALLOCATE_RAM_RESERVE_PDU::BCCMD_ALLOCATE_RAM_RESERVE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ALLOCATE_RAM_RESERVE_PDU::BCCMD_ALLOCATE_RAM_RESERVE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ALLOCATE_RAM_RESERVE_PDU::get_type(void) const
{
    return get_uint16(BCCMD_ALLOCATE_RAM_RESERVE_type) ;
}

void BCCMD_ALLOCATE_RAM_RESERVE_PDU::set_type(uint16 val)
{
    set_uint16(BCCMD_ALLOCATE_RAM_RESERVE_type,val) ;
}

uint16 BCCMD_ALLOCATE_RAM_RESERVE_PDU::get_value(void) const
{
    return get_uint16(BCCMD_ALLOCATE_RAM_RESERVE_value) ;
}

void BCCMD_ALLOCATE_RAM_RESERVE_PDU::set_value(uint16 val)
{
    set_uint16(BCCMD_ALLOCATE_RAM_RESERVE_value,val) ;
}

/*******************************************************************/


BCCMD_STREAM_TRANSACTION_START_PDU::BCCMD_STREAM_TRANSACTION_START_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_TRANSACTION_START , BCCMD_STREAM_TRANSACTION_START_pduSize )
{
}

BCCMD_STREAM_TRANSACTION_START_PDU::BCCMD_STREAM_TRANSACTION_START_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_TRANSACTION_START_PDU::BCCMD_STREAM_TRANSACTION_START_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_TRANSACTION_START_PDU::BCCMD_STREAM_TRANSACTION_START_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_EGPS_PULSE_CONFIG_PDU::BCCMD_EGPS_PULSE_CONFIG_PDU()
: BCCMD_PDU( BCCMDVARID_EGPS_PULSE_CONFIG , BCCMD_EGPS_PULSE_CONFIG_pduSize )
{
}

BCCMD_EGPS_PULSE_CONFIG_PDU::BCCMD_EGPS_PULSE_CONFIG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_EGPS_PULSE_CONFIG_PDU::BCCMD_EGPS_PULSE_CONFIG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_EGPS_PULSE_CONFIG_PDU::BCCMD_EGPS_PULSE_CONFIG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_EGPS_PULSE_CONFIG_PDU::get_pio(void) const
{
    return get_uint16(BCCMD_EGPS_PULSE_CONFIG_pio) ;
}

void BCCMD_EGPS_PULSE_CONFIG_PDU::set_pio(uint16 val)
{
    set_uint16(BCCMD_EGPS_PULSE_CONFIG_pio,val) ;
}

/*******************************************************************/


BCCMD_PANIC_ON_FAULT_PDU::BCCMD_PANIC_ON_FAULT_PDU()
: BCCMD_PDU( BCCMDVARID_PANIC_ON_FAULT , BCCMD_PANIC_ON_FAULT_pduSize )
{
}

BCCMD_PANIC_ON_FAULT_PDU::BCCMD_PANIC_ON_FAULT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PANIC_ON_FAULT_PDU::BCCMD_PANIC_ON_FAULT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PANIC_ON_FAULT_PDU::BCCMD_PANIC_ON_FAULT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PANIC_ON_FAULT_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PANIC_ON_FAULT_data) ;
}

void BCCMD_PANIC_ON_FAULT_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PANIC_ON_FAULT_data,val) ;
}

/*******************************************************************/


BCCMD_GET_NEXT_BUILDDEF_PDU::BCCMD_GET_NEXT_BUILDDEF_PDU()
: BCCMD_PDU( BCCMDVARID_GET_NEXT_BUILDDEF , BCCMD_GET_NEXT_BUILDDEF_pduSize )
{
}

BCCMD_GET_NEXT_BUILDDEF_PDU::BCCMD_GET_NEXT_BUILDDEF_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_GET_NEXT_BUILDDEF_PDU::BCCMD_GET_NEXT_BUILDDEF_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_GET_NEXT_BUILDDEF_PDU::BCCMD_GET_NEXT_BUILDDEF_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_GET_NEXT_BUILDDEF_PDU::get_id(void) const
{
    return get_uint16(BCCMD_GET_NEXT_BUILDDEF_id) ;
}

void BCCMD_GET_NEXT_BUILDDEF_PDU::set_id(uint16 val)
{
    set_uint16(BCCMD_GET_NEXT_BUILDDEF_id,val) ;
}

uint16 BCCMD_GET_NEXT_BUILDDEF_PDU::get_nextid(void) const
{
    return get_uint16(BCCMD_GET_NEXT_BUILDDEF_nextid) ;
}

void BCCMD_GET_NEXT_BUILDDEF_PDU::set_nextid(uint16 val)
{
    set_uint16(BCCMD_GET_NEXT_BUILDDEF_nextid,val) ;
}

/*******************************************************************/


BCCMD_SHA256_INIT_PDU::BCCMD_SHA256_INIT_PDU()
: BCCMD_PDU( BCCMDVARID_SHA256_INIT , BCCMD_SHA256_INIT_pduSize )
{
}

BCCMD_SHA256_INIT_PDU::BCCMD_SHA256_INIT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SHA256_INIT_PDU::BCCMD_SHA256_INIT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SHA256_INIT_PDU::BCCMD_SHA256_INIT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_ENABLE_DUT_MODE_PDU::BCCMD_ENABLE_DUT_MODE_PDU()
: BCCMD_PDU( BCCMDVARID_ENABLE_DUT_MODE , BCCMD_ENABLE_DUT_MODE_pduSize )
{
}

BCCMD_ENABLE_DUT_MODE_PDU::BCCMD_ENABLE_DUT_MODE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ENABLE_DUT_MODE_PDU::BCCMD_ENABLE_DUT_MODE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ENABLE_DUT_MODE_PDU::BCCMD_ENABLE_DUT_MODE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_BLE_SCAN_BACKOFF_PDU::BCCMD_BLE_SCAN_BACKOFF_PDU()
: BCCMD_PDU( BCCMDVARID_BLE_SCAN_BACKOFF , BCCMD_BLE_SCAN_BACKOFF_pduSize )
{
}

BCCMD_BLE_SCAN_BACKOFF_PDU::BCCMD_BLE_SCAN_BACKOFF_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BLE_SCAN_BACKOFF_PDU::BCCMD_BLE_SCAN_BACKOFF_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BLE_SCAN_BACKOFF_PDU::BCCMD_BLE_SCAN_BACKOFF_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BLE_SCAN_BACKOFF_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BLE_SCAN_BACKOFF_data) ;
}

void BCCMD_BLE_SCAN_BACKOFF_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BLE_SCAN_BACKOFF_data,val) ;
}

/*******************************************************************/


BCCMD_BT_CLOCK_PDU::BCCMD_BT_CLOCK_PDU()
: BCCMD_PDU( BCCMDVARID_BT_CLOCK , BCCMD_BT_CLOCK_pduSize )
{
}

BCCMD_BT_CLOCK_PDU::BCCMD_BT_CLOCK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BT_CLOCK_PDU::BCCMD_BT_CLOCK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BT_CLOCK_PDU::BCCMD_BT_CLOCK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_BT_CLOCK_PDU::get_data(void) const
{
    return get_uint32(BCCMD_BT_CLOCK_data) ;
}

void BCCMD_BT_CLOCK_PDU::set_data(uint32 val)
{
    set_uint32(BCCMD_BT_CLOCK_data,val) ;
}

/*******************************************************************/


BCCMD_SPI_BUFSIZE_PDU::BCCMD_SPI_BUFSIZE_PDU()
: BCCMD_PDU( BCCMDVARID_SPI_BUFSIZE , BCCMD_SPI_BUFSIZE_pduSize )
{
}

BCCMD_SPI_BUFSIZE_PDU::BCCMD_SPI_BUFSIZE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SPI_BUFSIZE_PDU::BCCMD_SPI_BUFSIZE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SPI_BUFSIZE_PDU::BCCMD_SPI_BUFSIZE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_SPI_BUFSIZE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_SPI_BUFSIZE_data) ;
}

void BCCMD_SPI_BUFSIZE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_SPI_BUFSIZE_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_C01_PDU::BCCMD_STIBBONS_C01_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C01 , BCCMD_STIBBONS_C01_pduSize )
{
}

BCCMD_STIBBONS_C01_PDU::BCCMD_STIBBONS_C01_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C01_PDU::BCCMD_STIBBONS_C01_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C01_PDU::BCCMD_STIBBONS_C01_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_C02_PDU::BCCMD_STIBBONS_C02_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C02 , BCCMD_STIBBONS_C02_pduSize )
{
}

BCCMD_STIBBONS_C02_PDU::BCCMD_STIBBONS_C02_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C02_PDU::BCCMD_STIBBONS_C02_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C02_PDU::BCCMD_STIBBONS_C02_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_PCM_SYNC_RATE_PDU::BCCMD_PCM_SYNC_RATE_PDU()
: BCCMD_PDU( BCCMDVARID_PCM_SYNC_RATE , BCCMD_PCM_SYNC_RATE_pduSize )
{
}

BCCMD_PCM_SYNC_RATE_PDU::BCCMD_PCM_SYNC_RATE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PCM_SYNC_RATE_PDU::BCCMD_PCM_SYNC_RATE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PCM_SYNC_RATE_PDU::BCCMD_PCM_SYNC_RATE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PCM_SYNC_RATE_PDU::get_pcm_interface(void) const
{
    return get_uint16(BCCMD_PCM_SYNC_RATE_pcm_interface) ;
}

void BCCMD_PCM_SYNC_RATE_PDU::set_pcm_interface(uint16 val)
{
    set_uint16(BCCMD_PCM_SYNC_RATE_pcm_interface,val) ;
}

uint32 BCCMD_PCM_SYNC_RATE_PDU::get_sync_rate(void) const
{
    return get_uint32(BCCMD_PCM_SYNC_RATE_sync_rate) ;
}

void BCCMD_PCM_SYNC_RATE_PDU::set_sync_rate(uint32 val)
{
    set_uint32(BCCMD_PCM_SYNC_RATE_sync_rate,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_C03_PDU::BCCMD_STIBBONS_C03_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C03 , BCCMD_STIBBONS_C03_pduSize )
{
}

BCCMD_STIBBONS_C03_PDU::BCCMD_STIBBONS_C03_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C03_PDU::BCCMD_STIBBONS_C03_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C03_PDU::BCCMD_STIBBONS_C03_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_C04_PDU::BCCMD_STIBBONS_C04_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C04 , BCCMD_STIBBONS_C04_pduSize )
{
}

BCCMD_STIBBONS_C04_PDU::BCCMD_STIBBONS_C04_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C04_PDU::BCCMD_STIBBONS_C04_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C04_PDU::BCCMD_STIBBONS_C04_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_C05_PDU::BCCMD_STIBBONS_C05_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C05 , BCCMD_STIBBONS_C05_pduSize )
{
}

BCCMD_STIBBONS_C05_PDU::BCCMD_STIBBONS_C05_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C05_PDU::BCCMD_STIBBONS_C05_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C05_PDU::BCCMD_STIBBONS_C05_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_LED2_ENABLE_PDU::BCCMD_LED2_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_LED2_ENABLE , BCCMD_LED2_ENABLE_pduSize )
{
}

BCCMD_LED2_ENABLE_PDU::BCCMD_LED2_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_LED2_ENABLE_PDU::BCCMD_LED2_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_LED2_ENABLE_PDU::BCCMD_LED2_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_LED2_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_LED2_ENABLE_data) ;
}

void BCCMD_LED2_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_LED2_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_CHECK_RAM_RESULT_PDU::BCCMD_CHECK_RAM_RESULT_PDU()
: BCCMD_PDU( BCCMDVARID_CHECK_RAM_RESULT , BCCMD_CHECK_RAM_RESULT_pduSize )
{
}

BCCMD_CHECK_RAM_RESULT_PDU::BCCMD_CHECK_RAM_RESULT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHECK_RAM_RESULT_PDU::BCCMD_CHECK_RAM_RESULT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHECK_RAM_RESULT_PDU::BCCMD_CHECK_RAM_RESULT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHECK_RAM_RESULT_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHECK_RAM_RESULT_data) ;
}

void BCCMD_CHECK_RAM_RESULT_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHECK_RAM_RESULT_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_C06_PDU::BCCMD_STIBBONS_C06_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C06 , BCCMD_STIBBONS_C06_pduSize )
{
}

BCCMD_STIBBONS_C06_PDU::BCCMD_STIBBONS_C06_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C06_PDU::BCCMD_STIBBONS_C06_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C06_PDU::BCCMD_STIBBONS_C06_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_EGPS_PULSE_OUTPUT_START_PDU::BCCMD_EGPS_PULSE_OUTPUT_START_PDU()
: BCCMD_PDU( BCCMDVARID_EGPS_PULSE_OUTPUT_START , BCCMD_EGPS_PULSE_OUTPUT_START_pduSize )
{
}

BCCMD_EGPS_PULSE_OUTPUT_START_PDU::BCCMD_EGPS_PULSE_OUTPUT_START_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_EGPS_PULSE_OUTPUT_START_PDU::BCCMD_EGPS_PULSE_OUTPUT_START_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_EGPS_PULSE_OUTPUT_START_PDU::BCCMD_EGPS_PULSE_OUTPUT_START_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint8 BCCMD_EGPS_PULSE_OUTPUT_START_PDU::get_pio(void) const
{
    return get_uint8(BCCMD_EGPS_PULSE_OUTPUT_START_pio) ;
}

void BCCMD_EGPS_PULSE_OUTPUT_START_PDU::set_pio(uint8 val)
{
    set_uint8(BCCMD_EGPS_PULSE_OUTPUT_START_pio,val) ;
}

uint32 BCCMD_EGPS_PULSE_OUTPUT_START_PDU::get_start_time(void) const
{
    return get_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_start_time) ;
}

void BCCMD_EGPS_PULSE_OUTPUT_START_PDU::set_start_time(uint32 val)
{
    set_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_start_time,val) ;
}

uint32 BCCMD_EGPS_PULSE_OUTPUT_START_PDU::get_duration_time(void) const
{
    return get_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_duration_time) ;
}

void BCCMD_EGPS_PULSE_OUTPUT_START_PDU::set_duration_time(uint32 val)
{
    set_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_duration_time,val) ;
}

uint32 BCCMD_EGPS_PULSE_OUTPUT_START_PDU::get_repeat_time(void) const
{
    return get_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_repeat_time) ;
}

void BCCMD_EGPS_PULSE_OUTPUT_START_PDU::set_repeat_time(uint32 val)
{
    set_uint32(BCCMD_EGPS_PULSE_OUTPUT_START_repeat_time,val) ;
}

uint16 BCCMD_EGPS_PULSE_OUTPUT_START_PDU::get_start_time_fine(void) const
{
    return get_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_start_time_fine) ;
}

void BCCMD_EGPS_PULSE_OUTPUT_START_PDU::set_start_time_fine(uint16 val)
{
    set_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_start_time_fine,val) ;
}

uint16 BCCMD_EGPS_PULSE_OUTPUT_START_PDU::get_duration_time_fine(void) const
{
    return get_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_duration_time_fine) ;
}

void BCCMD_EGPS_PULSE_OUTPUT_START_PDU::set_duration_time_fine(uint16 val)
{
    set_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_duration_time_fine,val) ;
}

uint16 BCCMD_EGPS_PULSE_OUTPUT_START_PDU::get_repeat_time_fine(void) const
{
    return get_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_repeat_time_fine) ;
}

void BCCMD_EGPS_PULSE_OUTPUT_START_PDU::set_repeat_time_fine(uint16 val)
{
    set_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_repeat_time_fine,val) ;
}

uint16 BCCMD_EGPS_PULSE_OUTPUT_START_PDU::get_flags(void) const
{
    return get_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_flags) ;
}

void BCCMD_EGPS_PULSE_OUTPUT_START_PDU::set_flags(uint16 val)
{
    set_uint16(BCCMD_EGPS_PULSE_OUTPUT_START_flags,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_C07_PDU::BCCMD_STIBBONS_C07_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C07 , BCCMD_STIBBONS_C07_pduSize )
{
}

BCCMD_STIBBONS_C07_PDU::BCCMD_STIBBONS_C07_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C07_PDU::BCCMD_STIBBONS_C07_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C07_PDU::BCCMD_STIBBONS_C07_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_C08_PDU::BCCMD_STIBBONS_C08_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C08 , BCCMD_STIBBONS_C08_pduSize )
{
}

BCCMD_STIBBONS_C08_PDU::BCCMD_STIBBONS_C08_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C08_PDU::BCCMD_STIBBONS_C08_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C08_PDU::BCCMD_STIBBONS_C08_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_C09_PDU::BCCMD_STIBBONS_C09_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C09 , BCCMD_STIBBONS_C09_pduSize )
{
}

BCCMD_STIBBONS_C09_PDU::BCCMD_STIBBONS_C09_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C09_PDU::BCCMD_STIBBONS_C09_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C09_PDU::BCCMD_STIBBONS_C09_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_CHECK_RAM_PDU::BCCMD_CHECK_RAM_PDU()
: BCCMD_PDU( BCCMDVARID_CHECK_RAM , BCCMD_CHECK_RAM_pduSize )
{
}

BCCMD_CHECK_RAM_PDU::BCCMD_CHECK_RAM_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHECK_RAM_PDU::BCCMD_CHECK_RAM_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHECK_RAM_PDU::BCCMD_CHECK_RAM_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STREAM_GET_SOURCE_PDU::BCCMD_STREAM_GET_SOURCE_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_GET_SOURCE , BCCMD_STREAM_GET_SOURCE_pduSize )
{
}

BCCMD_STREAM_GET_SOURCE_PDU::BCCMD_STREAM_GET_SOURCE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_GET_SOURCE_PDU::BCCMD_STREAM_GET_SOURCE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_GET_SOURCE_PDU::BCCMD_STREAM_GET_SOURCE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_GET_SOURCE_PDU::get_resource(void) const
{
    return get_uint16(BCCMD_STREAM_GET_SOURCE_resource) ;
}

void BCCMD_STREAM_GET_SOURCE_PDU::set_resource(uint16 val)
{
    set_uint16(BCCMD_STREAM_GET_SOURCE_resource,val) ;
}

uint16 BCCMD_STREAM_GET_SOURCE_PDU::get_opt1(void) const
{
    return get_uint16(BCCMD_STREAM_GET_SOURCE_opt1) ;
}

void BCCMD_STREAM_GET_SOURCE_PDU::set_opt1(uint16 val)
{
    set_uint16(BCCMD_STREAM_GET_SOURCE_opt1,val) ;
}

uint16 BCCMD_STREAM_GET_SOURCE_PDU::get_opt2(void) const
{
    return get_uint16(BCCMD_STREAM_GET_SOURCE_opt2) ;
}

void BCCMD_STREAM_GET_SOURCE_PDU::set_opt2(uint16 val)
{
    set_uint16(BCCMD_STREAM_GET_SOURCE_opt2,val) ;
}

/*******************************************************************/


BCCMD_ROUTE_CLOCK_PDU::BCCMD_ROUTE_CLOCK_PDU()
: BCCMD_PDU( BCCMDVARID_ROUTE_CLOCK , BCCMD_ROUTE_CLOCK_pduSize )
{
}

BCCMD_ROUTE_CLOCK_PDU::BCCMD_ROUTE_CLOCK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ROUTE_CLOCK_PDU::BCCMD_ROUTE_CLOCK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ROUTE_CLOCK_PDU::BCCMD_ROUTE_CLOCK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_BABEL_SPI_GO_PDU::BCCMD_BABEL_SPI_GO_PDU()
: BCCMD_PDU( BCCMDVARID_BABEL_SPI_GO , BCCMD_BABEL_SPI_GO_pduSize )
{
}

BCCMD_BABEL_SPI_GO_PDU::BCCMD_BABEL_SPI_GO_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BABEL_SPI_GO_PDU::BCCMD_BABEL_SPI_GO_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BABEL_SPI_GO_PDU::BCCMD_BABEL_SPI_GO_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_COASTER_SV_STATE_PDU::BCCMD_COASTER_SV_STATE_PDU()
: BCCMD_PDU( BCCMDVARID_COASTER_SV_STATE , BCCMD_COASTER_SV_STATE_pduSize )
{
}

BCCMD_COASTER_SV_STATE_PDU::BCCMD_COASTER_SV_STATE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COASTER_SV_STATE_PDU::BCCMD_COASTER_SV_STATE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COASTER_SV_STATE_PDU::BCCMD_COASTER_SV_STATE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_start_index_num_entries(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_start_index_num_entries) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_start_index_num_entries(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_start_index_num_entries,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_uSecs(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_uSecs) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_uSecs(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_uSecs,val) ;
}

uint8 BCCMD_COASTER_SV_STATE_PDU::get_uSec80ths(void) const
{
    return get_uint8(BCCMD_COASTER_SV_STATE_uSec80ths) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_uSec80ths(uint8 val)
{
    set_uint8(BCCMD_COASTER_SV_STATE_uSec80ths,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_code_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_code_doppler) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_code_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_code_doppler,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_code_shift(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_code_shift) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_code_shift(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_code_shift,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_carrier_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_carrier_doppler) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_carrier_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_carrier_doppler,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_lock_status_bits(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_lock_status_bits) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_lock_status_bits(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_lock_status_bits,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_SNR(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_SNR) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_SNR(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_SNR,val) ;
}

uint8 BCCMD_COASTER_SV_STATE_PDU::get_data_transition(void) const
{
    return get_uint8(BCCMD_COASTER_SV_STATE_data_transition) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_data_transition(uint8 val)
{
    set_uint8(BCCMD_COASTER_SV_STATE_data_transition,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_satid_prn(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_satid_prn) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_satid_prn(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_satid_prn,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e1_dummy(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e1_dummy) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_dummy(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e1_dummy,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e1_uSecs(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e1_uSecs) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_uSecs(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e1_uSecs,val) ;
}

uint8 BCCMD_COASTER_SV_STATE_PDU::get_e1_uSec80ths(void) const
{
    return get_uint8(BCCMD_COASTER_SV_STATE_e1_uSec80ths) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_uSec80ths(uint8 val)
{
    set_uint8(BCCMD_COASTER_SV_STATE_e1_uSec80ths,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e1_code_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e1_code_doppler) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_code_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e1_code_doppler,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e1_code_shift(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e1_code_shift) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_code_shift(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e1_code_shift,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e1_carrier_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e1_carrier_doppler) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_carrier_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e1_carrier_doppler,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e1_lock_status_bits(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e1_lock_status_bits) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_lock_status_bits(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e1_lock_status_bits,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e1_SNR(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e1_SNR) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_SNR(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e1_SNR,val) ;
}

uint8 BCCMD_COASTER_SV_STATE_PDU::get_e1_data_transition(void) const
{
    return get_uint8(BCCMD_COASTER_SV_STATE_e1_data_transition) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_data_transition(uint8 val)
{
    set_uint8(BCCMD_COASTER_SV_STATE_e1_data_transition,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e1_satid_prn(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e1_satid_prn) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e1_satid_prn(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e1_satid_prn,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e2_dummy(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e2_dummy) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_dummy(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e2_dummy,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e2_uSecs(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e2_uSecs) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_uSecs(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e2_uSecs,val) ;
}

uint8 BCCMD_COASTER_SV_STATE_PDU::get_e2_uSec80ths(void) const
{
    return get_uint8(BCCMD_COASTER_SV_STATE_e2_uSec80ths) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_uSec80ths(uint8 val)
{
    set_uint8(BCCMD_COASTER_SV_STATE_e2_uSec80ths,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e2_code_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e2_code_doppler) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_code_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e2_code_doppler,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e2_code_shift(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e2_code_shift) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_code_shift(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e2_code_shift,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e2_carrier_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e2_carrier_doppler) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_carrier_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e2_carrier_doppler,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e2_lock_status_bits(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e2_lock_status_bits) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_lock_status_bits(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e2_lock_status_bits,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e2_SNR(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e2_SNR) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_SNR(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e2_SNR,val) ;
}

uint8 BCCMD_COASTER_SV_STATE_PDU::get_e2_data_transition(void) const
{
    return get_uint8(BCCMD_COASTER_SV_STATE_e2_data_transition) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_data_transition(uint8 val)
{
    set_uint8(BCCMD_COASTER_SV_STATE_e2_data_transition,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e2_satid_prn(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e2_satid_prn) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e2_satid_prn(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e2_satid_prn,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e3_dummy(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e3_dummy) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_dummy(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e3_dummy,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e3_uSecs(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e3_uSecs) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_uSecs(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e3_uSecs,val) ;
}

uint8 BCCMD_COASTER_SV_STATE_PDU::get_e3_uSec80ths(void) const
{
    return get_uint8(BCCMD_COASTER_SV_STATE_e3_uSec80ths) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_uSec80ths(uint8 val)
{
    set_uint8(BCCMD_COASTER_SV_STATE_e3_uSec80ths,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e3_code_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e3_code_doppler) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_code_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e3_code_doppler,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e3_code_shift(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e3_code_shift) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_code_shift(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e3_code_shift,val) ;
}

uint32 BCCMD_COASTER_SV_STATE_PDU::get_e3_carrier_doppler(void) const
{
    return get_uint32(BCCMD_COASTER_SV_STATE_e3_carrier_doppler) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_carrier_doppler(uint32 val)
{
    set_uint32(BCCMD_COASTER_SV_STATE_e3_carrier_doppler,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e3_lock_status_bits(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e3_lock_status_bits) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_lock_status_bits(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e3_lock_status_bits,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e3_SNR(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e3_SNR) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_SNR(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e3_SNR,val) ;
}

uint8 BCCMD_COASTER_SV_STATE_PDU::get_e3_data_transition(void) const
{
    return get_uint8(BCCMD_COASTER_SV_STATE_e3_data_transition) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_data_transition(uint8 val)
{
    set_uint8(BCCMD_COASTER_SV_STATE_e3_data_transition,val) ;
}

uint16 BCCMD_COASTER_SV_STATE_PDU::get_e3_satid_prn(void) const
{
    return get_uint16(BCCMD_COASTER_SV_STATE_e3_satid_prn) ;
}

void BCCMD_COASTER_SV_STATE_PDU::set_e3_satid_prn(uint16 val)
{
    set_uint16(BCCMD_COASTER_SV_STATE_e3_satid_prn,val) ;
}

/*******************************************************************/


BCCMD_RDF_BLE_SCAN_MODE_PDU::BCCMD_RDF_BLE_SCAN_MODE_PDU()
: BCCMD_PDU( BCCMDVARID_RDF_BLE_SCAN_MODE , BCCMD_RDF_BLE_SCAN_MODE_pduSize )
{
}

BCCMD_RDF_BLE_SCAN_MODE_PDU::BCCMD_RDF_BLE_SCAN_MODE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RDF_BLE_SCAN_MODE_PDU::BCCMD_RDF_BLE_SCAN_MODE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RDF_BLE_SCAN_MODE_PDU::BCCMD_RDF_BLE_SCAN_MODE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint8 BCCMD_RDF_BLE_SCAN_MODE_PDU::get_mode(void) const
{
    return get_uint8(BCCMD_RDF_BLE_SCAN_MODE_mode) ;
}

void BCCMD_RDF_BLE_SCAN_MODE_PDU::set_mode(uint8 val)
{
    set_uint8(BCCMD_RDF_BLE_SCAN_MODE_mode,val) ;
}

uint8 BCCMD_RDF_BLE_SCAN_MODE_PDU::get_samples(void) const
{
    return get_uint8(BCCMD_RDF_BLE_SCAN_MODE_samples) ;
}

void BCCMD_RDF_BLE_SCAN_MODE_PDU::set_samples(uint8 val)
{
    set_uint8(BCCMD_RDF_BLE_SCAN_MODE_samples,val) ;
}

/*******************************************************************/


BCCMD_PS_FACTORY_RESTORE_ALL_PDU::BCCMD_PS_FACTORY_RESTORE_ALL_PDU()
: BCCMD_PDU( BCCMDVARID_PS_FACTORY_RESTORE_ALL , BCCMD_PS_FACTORY_RESTORE_ALL_pduSize )
{
}

BCCMD_PS_FACTORY_RESTORE_ALL_PDU::BCCMD_PS_FACTORY_RESTORE_ALL_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PS_FACTORY_RESTORE_ALL_PDU::BCCMD_PS_FACTORY_RESTORE_ALL_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PS_FACTORY_RESTORE_ALL_PDU::BCCMD_PS_FACTORY_RESTORE_ALL_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_COEX_DUMP_PDU::BCCMD_COEX_DUMP_PDU()
: BCCMD_PDU( BCCMDVARID_COEX_DUMP , BCCMD_COEX_DUMP_pduSize )
{
}

BCCMD_COEX_DUMP_PDU::BCCMD_COEX_DUMP_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COEX_DUMP_PDU::BCCMD_COEX_DUMP_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COEX_DUMP_PDU::BCCMD_COEX_DUMP_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COEX_DUMP_PDU::get_scheme(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_scheme) ;
}

void BCCMD_COEX_DUMP_PDU::set_scheme(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_scheme,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_options(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_options) ;
}

void BCCMD_COEX_DUMP_PDU::set_options(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_options,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_bt_priority(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_bt_priority) ;
}

void BCCMD_COEX_DUMP_PDU::set_bt_priority(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_bt_priority,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_wlan_active(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_wlan_active) ;
}

void BCCMD_COEX_DUMP_PDU::set_wlan_active(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_wlan_active,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_bt_active(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_bt_active) ;
}

void BCCMD_COEX_DUMP_PDU::set_bt_active(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_bt_active,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_bt_status(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_bt_status) ;
}

void BCCMD_COEX_DUMP_PDU::set_bt_status(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_bt_status,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_wlan_deny(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_wlan_deny) ;
}

void BCCMD_COEX_DUMP_PDU::set_wlan_deny(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_wlan_deny,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_bt_periodic(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_bt_periodic) ;
}

void BCCMD_COEX_DUMP_PDU::set_bt_periodic(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_bt_periodic,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_bt_inband(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_bt_inband) ;
}

void BCCMD_COEX_DUMP_PDU::set_bt_inband(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_bt_inband,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_uart_active(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_uart_active) ;
}

void BCCMD_COEX_DUMP_PDU::set_uart_active(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_uart_active,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_uart_tx(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_uart_tx) ;
}

void BCCMD_COEX_DUMP_PDU::set_uart_tx(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_uart_tx,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_uart_rx(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_uart_rx) ;
}

void BCCMD_COEX_DUMP_PDU::set_uart_rx(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_uart_rx,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_time_t1(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_time_t1) ;
}

void BCCMD_COEX_DUMP_PDU::set_time_t1(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_time_t1,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_time_t2(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_time_t2) ;
}

void BCCMD_COEX_DUMP_PDU::set_time_t2(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_time_t2,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_btactive_lead(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_btactive_lead) ;
}

void BCCMD_COEX_DUMP_PDU::set_btactive_lead(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_btactive_lead,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_btstatus_lead(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_btstatus_lead) ;
}

void BCCMD_COEX_DUMP_PDU::set_btstatus_lead(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_btstatus_lead,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table00(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table00) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table00(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table00,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table01(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table01) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table01(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table01,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table02(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table02) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table02(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table02,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table03(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table03) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table03(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table03,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table04(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table04) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table04(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table04,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table05(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table05) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table05(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table05,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table06(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table06) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table06(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table06,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table07(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table07) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table07(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table07,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table08(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table08) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table08(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table08,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table09(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table09) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table09(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table09,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table10(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table10) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table10(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table10,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table11(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table11) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table11(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table11,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table12(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table12) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table12(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table12,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table13(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table13) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table13(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table13,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table14(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table14) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table14(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table14,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table15(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table15) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table15(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table15,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table16(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table16) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table16(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table16,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table17(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table17) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table17(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table17,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table18(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table18) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table18(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table18,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table19(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table19) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table19(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table19,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table20(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table20) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table20(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table20,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table21(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table21) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table21(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table21,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table22(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table22) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table22(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table22,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table23(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table23) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table23(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table23,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table24(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table24) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table24(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table24,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table25(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table25) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table25(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table25,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table26(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table26) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table26(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table26,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table27(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table27) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table27(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table27,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table28(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table28) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table28(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table28,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table29(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table29) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table29(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table29,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table30(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table30) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table30(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table30,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table31(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table31) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table31(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table31,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_priority_table32(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_priority_table32) ;
}

void BCCMD_COEX_DUMP_PDU::set_priority_table32(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_priority_table32,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug_enable(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug_enable) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug_enable(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug_enable,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug00(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug00) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug00(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug00,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug01(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug01) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug01(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug01,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug02(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug02) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug02(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug02,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug03(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug03) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug03(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug03,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug04(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug04) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug04(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug04,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug05(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug05) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug05(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug05,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug06(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug06) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug06(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug06,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug07(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug07) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug07(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug07,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug08(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug08) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug08(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug08,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug09(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug09) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug09(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug09,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug10(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug10) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug10(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug10,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug11(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug11) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug11(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug11,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug12(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug12) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug12(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug12,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug13(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug13) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug13(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug13,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug14(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug14) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug14(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug14,val) ;
}

uint16 BCCMD_COEX_DUMP_PDU::get_debug15(void) const
{
    return get_uint16(BCCMD_COEX_DUMP_debug15) ;
}

void BCCMD_COEX_DUMP_PDU::set_debug15(uint16 val)
{
    set_uint16(BCCMD_COEX_DUMP_debug15,val) ;
}

/*******************************************************************/


BCCMD_CLOCK_MODULATION_ENABLE_PDU::BCCMD_CLOCK_MODULATION_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_CLOCK_MODULATION_ENABLE , BCCMD_CLOCK_MODULATION_ENABLE_pduSize )
{
}

BCCMD_CLOCK_MODULATION_ENABLE_PDU::BCCMD_CLOCK_MODULATION_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CLOCK_MODULATION_ENABLE_PDU::BCCMD_CLOCK_MODULATION_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CLOCK_MODULATION_ENABLE_PDU::BCCMD_CLOCK_MODULATION_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CLOCK_MODULATION_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CLOCK_MODULATION_ENABLE_data) ;
}

void BCCMD_CLOCK_MODULATION_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CLOCK_MODULATION_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_C10_PDU::BCCMD_STIBBONS_C10_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C10 , BCCMD_STIBBONS_C10_pduSize )
{
}

BCCMD_STIBBONS_C10_PDU::BCCMD_STIBBONS_C10_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C10_PDU::BCCMD_STIBBONS_C10_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C10_PDU::BCCMD_STIBBONS_C10_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STREAM_TRANSACTION_CANCEL_PDU::BCCMD_STREAM_TRANSACTION_CANCEL_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_TRANSACTION_CANCEL , BCCMD_STREAM_TRANSACTION_CANCEL_pduSize )
{
}

BCCMD_STREAM_TRANSACTION_CANCEL_PDU::BCCMD_STREAM_TRANSACTION_CANCEL_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_TRANSACTION_CANCEL_PDU::BCCMD_STREAM_TRANSACTION_CANCEL_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_TRANSACTION_CANCEL_PDU::BCCMD_STREAM_TRANSACTION_CANCEL_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_C11_PDU::BCCMD_STIBBONS_C11_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C11 , BCCMD_STIBBONS_C11_pduSize )
{
}

BCCMD_STIBBONS_C11_PDU::BCCMD_STIBBONS_C11_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C11_PDU::BCCMD_STIBBONS_C11_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C11_PDU::BCCMD_STIBBONS_C11_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_C12_PDU::BCCMD_STIBBONS_C12_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C12 , BCCMD_STIBBONS_C12_pduSize )
{
}

BCCMD_STIBBONS_C12_PDU::BCCMD_STIBBONS_C12_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C12_PDU::BCCMD_STIBBONS_C12_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C12_PDU::BCCMD_STIBBONS_C12_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_HOST_DECIDES_TIMING_PDU::BCCMD_HOST_DECIDES_TIMING_PDU()
: BCCMD_PDU( BCCMDVARID_HOST_DECIDES_TIMING , BCCMD_HOST_DECIDES_TIMING_pduSize )
{
}

BCCMD_HOST_DECIDES_TIMING_PDU::BCCMD_HOST_DECIDES_TIMING_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_HOST_DECIDES_TIMING_PDU::BCCMD_HOST_DECIDES_TIMING_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_HOST_DECIDES_TIMING_PDU::BCCMD_HOST_DECIDES_TIMING_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_HOST_DECIDES_TIMING_PDU::get_data(void) const
{
    return get_uint16(BCCMD_HOST_DECIDES_TIMING_data) ;
}

void BCCMD_HOST_DECIDES_TIMING_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_HOST_DECIDES_TIMING_data,val) ;
}

/*******************************************************************/


BCCMD_RADIOTEST_PDU::BCCMD_RADIOTEST_PDU()
: BCCMD_PDU( BCCMDVARID_RADIOTEST , BCCMD_RADIOTEST_pduSize )
{
}

BCCMD_RADIOTEST_PDU::BCCMD_RADIOTEST_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RADIOTEST_PDU::BCCMD_RADIOTEST_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RADIOTEST_PDU::BCCMD_RADIOTEST_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_RADIOTEST_PDU::get_radiotest(void) const
{
    return get_uint16(BCCMD_RADIOTEST_radiotest) ;
}

void BCCMD_RADIOTEST_PDU::set_radiotest(uint16 val)
{
    set_uint16(BCCMD_RADIOTEST_radiotest,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_C13_PDU::BCCMD_STIBBONS_C13_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C13 , BCCMD_STIBBONS_C13_pduSize )
{
}

BCCMD_STIBBONS_C13_PDU::BCCMD_STIBBONS_C13_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C13_PDU::BCCMD_STIBBONS_C13_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C13_PDU::BCCMD_STIBBONS_C13_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STIBBONS_C14_PDU::BCCMD_STIBBONS_C14_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C14 , BCCMD_STIBBONS_C14_pduSize )
{
}

BCCMD_STIBBONS_C14_PDU::BCCMD_STIBBONS_C14_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C14_PDU::BCCMD_STIBBONS_C14_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C14_PDU::BCCMD_STIBBONS_C14_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_VREF_CONSTANT_PDU::BCCMD_VREF_CONSTANT_PDU()
: BCCMD_PDU( BCCMDVARID_VREF_CONSTANT , BCCMD_VREF_CONSTANT_pduSize )
{
}

BCCMD_VREF_CONSTANT_PDU::BCCMD_VREF_CONSTANT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_VREF_CONSTANT_PDU::BCCMD_VREF_CONSTANT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_VREF_CONSTANT_PDU::BCCMD_VREF_CONSTANT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_VREF_CONSTANT_PDU::get_data(void) const
{
    return get_uint16(BCCMD_VREF_CONSTANT_data) ;
}

void BCCMD_VREF_CONSTANT_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_VREF_CONSTANT_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_C15_PDU::BCCMD_STIBBONS_C15_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C15 , BCCMD_STIBBONS_C15_pduSize )
{
}

BCCMD_STIBBONS_C15_PDU::BCCMD_STIBBONS_C15_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C15_PDU::BCCMD_STIBBONS_C15_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C15_PDU::BCCMD_STIBBONS_C15_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_CLK_SKEW_COUNT_PDU::BCCMD_CLK_SKEW_COUNT_PDU()
: BCCMD_PDU( BCCMDVARID_CLK_SKEW_COUNT , BCCMD_CLK_SKEW_COUNT_pduSize )
{
}

BCCMD_CLK_SKEW_COUNT_PDU::BCCMD_CLK_SKEW_COUNT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CLK_SKEW_COUNT_PDU::BCCMD_CLK_SKEW_COUNT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CLK_SKEW_COUNT_PDU::BCCMD_CLK_SKEW_COUNT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CLK_SKEW_COUNT_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CLK_SKEW_COUNT_data) ;
}

void BCCMD_CLK_SKEW_COUNT_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CLK_SKEW_COUNT_data,val) ;
}

/*******************************************************************/


BCCMD_AWAY_TIME_PDU::BCCMD_AWAY_TIME_PDU()
: BCCMD_PDU( BCCMDVARID_AWAY_TIME , BCCMD_AWAY_TIME_pduSize )
{
}

BCCMD_AWAY_TIME_PDU::BCCMD_AWAY_TIME_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_AWAY_TIME_PDU::BCCMD_AWAY_TIME_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_AWAY_TIME_PDU::BCCMD_AWAY_TIME_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_AWAY_TIME_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_AWAY_TIME_hci_handle) ;
}

void BCCMD_AWAY_TIME_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_AWAY_TIME_hci_handle,val) ;
}

uint32 BCCMD_AWAY_TIME_PDU::get_time(void) const
{
    return get_uint32(BCCMD_AWAY_TIME_time) ;
}

void BCCMD_AWAY_TIME_PDU::set_time(uint32 val)
{
    set_uint32(BCCMD_AWAY_TIME_time,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_C16_PDU::BCCMD_STIBBONS_C16_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_C16 , BCCMD_STIBBONS_C16_pduSize )
{
}

BCCMD_STIBBONS_C16_PDU::BCCMD_STIBBONS_C16_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_C16_PDU::BCCMD_STIBBONS_C16_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_C16_PDU::BCCMD_STIBBONS_C16_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_WAIT_FOR_N_MS_PDU::BCCMD_WAIT_FOR_N_MS_PDU()
: BCCMD_PDU( BCCMDVARID_WAIT_FOR_N_MS , BCCMD_WAIT_FOR_N_MS_pduSize )
{
}

BCCMD_WAIT_FOR_N_MS_PDU::BCCMD_WAIT_FOR_N_MS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_WAIT_FOR_N_MS_PDU::BCCMD_WAIT_FOR_N_MS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_WAIT_FOR_N_MS_PDU::BCCMD_WAIT_FOR_N_MS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_WAIT_FOR_N_MS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_WAIT_FOR_N_MS_data) ;
}

void BCCMD_WAIT_FOR_N_MS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_WAIT_FOR_N_MS_data,val) ;
}

/*******************************************************************/


BCCMD_PCM_CLOCK_RATE_PDU::BCCMD_PCM_CLOCK_RATE_PDU()
: BCCMD_PDU( BCCMDVARID_PCM_CLOCK_RATE , BCCMD_PCM_CLOCK_RATE_pduSize )
{
}

BCCMD_PCM_CLOCK_RATE_PDU::BCCMD_PCM_CLOCK_RATE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PCM_CLOCK_RATE_PDU::BCCMD_PCM_CLOCK_RATE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PCM_CLOCK_RATE_PDU::BCCMD_PCM_CLOCK_RATE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PCM_CLOCK_RATE_PDU::get_pcm_interface(void) const
{
    return get_uint16(BCCMD_PCM_CLOCK_RATE_pcm_interface) ;
}

void BCCMD_PCM_CLOCK_RATE_PDU::set_pcm_interface(uint16 val)
{
    set_uint16(BCCMD_PCM_CLOCK_RATE_pcm_interface,val) ;
}

uint32 BCCMD_PCM_CLOCK_RATE_PDU::get_clock_rate(void) const
{
    return get_uint32(BCCMD_PCM_CLOCK_RATE_clock_rate) ;
}

void BCCMD_PCM_CLOCK_RATE_PDU::set_clock_rate(uint32 val)
{
    set_uint32(BCCMD_PCM_CLOCK_RATE_clock_rate,val) ;
}

/*******************************************************************/


BCCMD_TESTB_AMUX_PDU::BCCMD_TESTB_AMUX_PDU()
: BCCMD_PDU( BCCMDVARID_TESTB_AMUX , BCCMD_TESTB_AMUX_pduSize )
{
}

BCCMD_TESTB_AMUX_PDU::BCCMD_TESTB_AMUX_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_TESTB_AMUX_PDU::BCCMD_TESTB_AMUX_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_TESTB_AMUX_PDU::BCCMD_TESTB_AMUX_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_TESTB_AMUX_PDU::get_data(void) const
{
    return get_uint16(BCCMD_TESTB_AMUX_data) ;
}

void BCCMD_TESTB_AMUX_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_TESTB_AMUX_data,val) ;
}

/*******************************************************************/


BCCMD_GPS_START_PDU::BCCMD_GPS_START_PDU()
: BCCMD_PDU( BCCMDVARID_GPS_START , BCCMD_GPS_START_pduSize )
{
}

BCCMD_GPS_START_PDU::BCCMD_GPS_START_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_GPS_START_PDU::BCCMD_GPS_START_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_GPS_START_PDU::BCCMD_GPS_START_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_GPS_START_PDU::get_flags(void) const
{
    return get_uint16(BCCMD_GPS_START_flags) ;
}

void BCCMD_GPS_START_PDU::set_flags(uint16 val)
{
    set_uint16(BCCMD_GPS_START_flags,val) ;
}

uint16 BCCMD_GPS_START_PDU::get_delay(void) const
{
    return get_uint16(BCCMD_GPS_START_delay) ;
}

void BCCMD_GPS_START_PDU::set_delay(uint16 val)
{
    set_uint16(BCCMD_GPS_START_delay,val) ;
}

/*******************************************************************/


BCCMD_STREAM_ALIAS_SINK_PDU::BCCMD_STREAM_ALIAS_SINK_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_ALIAS_SINK , BCCMD_STREAM_ALIAS_SINK_pduSize )
{
}

BCCMD_STREAM_ALIAS_SINK_PDU::BCCMD_STREAM_ALIAS_SINK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_ALIAS_SINK_PDU::BCCMD_STREAM_ALIAS_SINK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_ALIAS_SINK_PDU::BCCMD_STREAM_ALIAS_SINK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_ALIAS_SINK_PDU::get_sink1_sid(void) const
{
    return get_uint16(BCCMD_STREAM_ALIAS_SINK_sink1_sid) ;
}

void BCCMD_STREAM_ALIAS_SINK_PDU::set_sink1_sid(uint16 val)
{
    set_uint16(BCCMD_STREAM_ALIAS_SINK_sink1_sid,val) ;
}

uint16 BCCMD_STREAM_ALIAS_SINK_PDU::get_sink2_sid(void) const
{
    return get_uint16(BCCMD_STREAM_ALIAS_SINK_sink2_sid) ;
}

void BCCMD_STREAM_ALIAS_SINK_PDU::set_sink2_sid(uint16 val)
{
    set_uint16(BCCMD_STREAM_ALIAS_SINK_sink2_sid,val) ;
}

/*******************************************************************/


BCCMD_LIMIT_EDR_POWER_PDU::BCCMD_LIMIT_EDR_POWER_PDU()
: BCCMD_PDU( BCCMDVARID_LIMIT_EDR_POWER , BCCMD_LIMIT_EDR_POWER_pduSize )
{
}

BCCMD_LIMIT_EDR_POWER_PDU::BCCMD_LIMIT_EDR_POWER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_LIMIT_EDR_POWER_PDU::BCCMD_LIMIT_EDR_POWER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_LIMIT_EDR_POWER_PDU::BCCMD_LIMIT_EDR_POWER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_LIMIT_EDR_POWER_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_LIMIT_EDR_POWER_hci_handle) ;
}

void BCCMD_LIMIT_EDR_POWER_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_LIMIT_EDR_POWER_hci_handle,val) ;
}

bool BCCMD_LIMIT_EDR_POWER_PDU::get_enable(void) const
{
    return get_bool(BCCMD_LIMIT_EDR_POWER_enable) ;
}

void BCCMD_LIMIT_EDR_POWER_PDU::set_enable(bool val)
{
    set_bool(BCCMD_LIMIT_EDR_POWER_enable,val) ;
}

/*******************************************************************/


BCCMD_HOSTIO_ENABLE_DEBUG_PDU::BCCMD_HOSTIO_ENABLE_DEBUG_PDU()
: BCCMD_PDU( BCCMDVARID_HOSTIO_ENABLE_DEBUG , BCCMD_HOSTIO_ENABLE_DEBUG_pduSize )
{
}

BCCMD_HOSTIO_ENABLE_DEBUG_PDU::BCCMD_HOSTIO_ENABLE_DEBUG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_HOSTIO_ENABLE_DEBUG_PDU::BCCMD_HOSTIO_ENABLE_DEBUG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_HOSTIO_ENABLE_DEBUG_PDU::BCCMD_HOSTIO_ENABLE_DEBUG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_HOSTIO_ENABLE_DEBUG_PDU::get_data(void) const
{
    return get_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_data) ;
}

void BCCMD_HOSTIO_ENABLE_DEBUG_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_HOSTIO_ENABLE_DEBUG_data,val) ;
}

/*******************************************************************/


BCCMD_WARM_HALT_PDU::BCCMD_WARM_HALT_PDU()
: BCCMD_PDU( BCCMDVARID_WARM_HALT , BCCMD_WARM_HALT_pduSize )
{
}

BCCMD_WARM_HALT_PDU::BCCMD_WARM_HALT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_WARM_HALT_PDU::BCCMD_WARM_HALT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_WARM_HALT_PDU::BCCMD_WARM_HALT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_STREAM_CLOSE_SOURCE_PDU::BCCMD_STREAM_CLOSE_SOURCE_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_CLOSE_SOURCE , BCCMD_STREAM_CLOSE_SOURCE_pduSize )
{
}

BCCMD_STREAM_CLOSE_SOURCE_PDU::BCCMD_STREAM_CLOSE_SOURCE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_CLOSE_SOURCE_PDU::BCCMD_STREAM_CLOSE_SOURCE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_CLOSE_SOURCE_PDU::BCCMD_STREAM_CLOSE_SOURCE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_CLOSE_SOURCE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STREAM_CLOSE_SOURCE_data) ;
}

void BCCMD_STREAM_CLOSE_SOURCE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STREAM_CLOSE_SOURCE_data,val) ;
}

/*******************************************************************/


BCCMD_SINGLE_CHAN_PDU::BCCMD_SINGLE_CHAN_PDU()
: BCCMD_PDU( BCCMDVARID_SINGLE_CHAN , BCCMD_SINGLE_CHAN_pduSize )
{
}

BCCMD_SINGLE_CHAN_PDU::BCCMD_SINGLE_CHAN_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SINGLE_CHAN_PDU::BCCMD_SINGLE_CHAN_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SINGLE_CHAN_PDU::BCCMD_SINGLE_CHAN_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_SINGLE_CHAN_PDU::get_data(void) const
{
    return get_uint16(BCCMD_SINGLE_CHAN_data) ;
}

void BCCMD_SINGLE_CHAN_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_SINGLE_CHAN_data,val) ;
}

/*******************************************************************/


BCCMD_PSCLRS_PDU::BCCMD_PSCLRS_PDU()
: BCCMD_PDU( BCCMDVARID_PSCLRS , BCCMD_PSCLRS_pduSize )
{
}

BCCMD_PSCLRS_PDU::BCCMD_PSCLRS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSCLRS_PDU::BCCMD_PSCLRS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSCLRS_PDU::BCCMD_PSCLRS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PSCLRS_PDU::get_id(void) const
{
    return get_uint16(BCCMD_PSCLRS_id) ;
}

void BCCMD_PSCLRS_PDU::set_id(uint16 val)
{
    set_uint16(BCCMD_PSCLRS_id,val) ;
}

uint16 BCCMD_PSCLRS_PDU::get_stores(void) const
{
    return get_uint16(BCCMD_PSCLRS_stores) ;
}

void BCCMD_PSCLRS_PDU::set_stores(uint16 val)
{
    set_uint16(BCCMD_PSCLRS_stores,val) ;
}

/*******************************************************************/


BCCMD_LED_CONFIG_PDU::BCCMD_LED_CONFIG_PDU()
: BCCMD_PDU( BCCMDVARID_LED_CONFIG , BCCMD_LED_CONFIG_pduSize )
{
}

BCCMD_LED_CONFIG_PDU::BCCMD_LED_CONFIG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_LED_CONFIG_PDU::BCCMD_LED_CONFIG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_LED_CONFIG_PDU::BCCMD_LED_CONFIG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_LED_CONFIG_PDU::get_led(void) const
{
    return get_uint16(BCCMD_LED_CONFIG_led) ;
}

void BCCMD_LED_CONFIG_PDU::set_led(uint16 val)
{
    set_uint16(BCCMD_LED_CONFIG_led,val) ;
}

uint16 BCCMD_LED_CONFIG_PDU::get_led_key(void) const
{
    return get_uint16(BCCMD_LED_CONFIG_led_key) ;
}

void BCCMD_LED_CONFIG_PDU::set_led_key(uint16 val)
{
    set_uint16(BCCMD_LED_CONFIG_led_key,val) ;
}

uint16 BCCMD_LED_CONFIG_PDU::get_value(void) const
{
    return get_uint16(BCCMD_LED_CONFIG_value) ;
}

void BCCMD_LED_CONFIG_PDU::set_value(uint16 val)
{
    set_uint16(BCCMD_LED_CONFIG_value,val) ;
}

/*******************************************************************/


BCCMD_LOCK_ACL_PACKET_TYPE_PDU::BCCMD_LOCK_ACL_PACKET_TYPE_PDU()
: BCCMD_PDU( BCCMDVARID_LOCK_ACL_PACKET_TYPE , BCCMD_LOCK_ACL_PACKET_TYPE_pduSize )
{
}

BCCMD_LOCK_ACL_PACKET_TYPE_PDU::BCCMD_LOCK_ACL_PACKET_TYPE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_LOCK_ACL_PACKET_TYPE_PDU::BCCMD_LOCK_ACL_PACKET_TYPE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_LOCK_ACL_PACKET_TYPE_PDU::BCCMD_LOCK_ACL_PACKET_TYPE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_LOCK_ACL_PACKET_TYPE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_data) ;
}

void BCCMD_LOCK_ACL_PACKET_TYPE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_LOCK_ACL_PACKET_TYPE_data,val) ;
}

/*******************************************************************/


BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU::BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU()
: BCCMD_PDU( BCCMDVARID_COMBO_DOT11_ESCO_RTX_PRIORITY , BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_pduSize )
{
}

BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU::BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU::BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU::BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU::get_data(void) const
{
    return get_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_data) ;
}

void BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_data,val) ;
}

/*******************************************************************/


BCCMD_TESTA_AMUX_PDU::BCCMD_TESTA_AMUX_PDU()
: BCCMD_PDU( BCCMDVARID_TESTA_AMUX , BCCMD_TESTA_AMUX_pduSize )
{
}

BCCMD_TESTA_AMUX_PDU::BCCMD_TESTA_AMUX_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_TESTA_AMUX_PDU::BCCMD_TESTA_AMUX_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_TESTA_AMUX_PDU::BCCMD_TESTA_AMUX_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_TESTA_AMUX_PDU::get_data(void) const
{
    return get_uint16(BCCMD_TESTA_AMUX_data) ;
}

void BCCMD_TESTA_AMUX_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_TESTA_AMUX_data,val) ;
}

/*******************************************************************/


BCCMD_PIO32_STRONG_BIAS_PDU::BCCMD_PIO32_STRONG_BIAS_PDU()
: BCCMD_PDU( BCCMDVARID_PIO32_STRONG_BIAS , BCCMD_PIO32_STRONG_BIAS_pduSize )
{
}

BCCMD_PIO32_STRONG_BIAS_PDU::BCCMD_PIO32_STRONG_BIAS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO32_STRONG_BIAS_PDU::BCCMD_PIO32_STRONG_BIAS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO32_STRONG_BIAS_PDU::BCCMD_PIO32_STRONG_BIAS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_PIO32_STRONG_BIAS_PDU::get_mask(void) const
{
    return get_uint32(BCCMD_PIO32_STRONG_BIAS_mask) ;
}

void BCCMD_PIO32_STRONG_BIAS_PDU::set_mask(uint32 val)
{
    set_uint32(BCCMD_PIO32_STRONG_BIAS_mask,val) ;
}

uint32 BCCMD_PIO32_STRONG_BIAS_PDU::get_bits(void) const
{
    return get_uint32(BCCMD_PIO32_STRONG_BIAS_bits) ;
}

void BCCMD_PIO32_STRONG_BIAS_PDU::set_bits(uint32 val)
{
    set_uint32(BCCMD_PIO32_STRONG_BIAS_bits,val) ;
}

uint32 BCCMD_PIO32_STRONG_BIAS_PDU::get_result(void) const
{
    return get_uint32(BCCMD_PIO32_STRONG_BIAS_result) ;
}

void BCCMD_PIO32_STRONG_BIAS_PDU::set_result(uint32 val)
{
    set_uint32(BCCMD_PIO32_STRONG_BIAS_result,val) ;
}

/*******************************************************************/


BCCMD_PS_MEMORY_TYPE_PDU::BCCMD_PS_MEMORY_TYPE_PDU()
: BCCMD_PDU( BCCMDVARID_PS_MEMORY_TYPE , BCCMD_PS_MEMORY_TYPE_pduSize )
{
}

BCCMD_PS_MEMORY_TYPE_PDU::BCCMD_PS_MEMORY_TYPE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PS_MEMORY_TYPE_PDU::BCCMD_PS_MEMORY_TYPE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PS_MEMORY_TYPE_PDU::BCCMD_PS_MEMORY_TYPE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PS_MEMORY_TYPE_PDU::get_stores(void) const
{
    return get_uint16(BCCMD_PS_MEMORY_TYPE_stores) ;
}

void BCCMD_PS_MEMORY_TYPE_PDU::set_stores(uint16 val)
{
    set_uint16(BCCMD_PS_MEMORY_TYPE_stores,val) ;
}

uint16 BCCMD_PS_MEMORY_TYPE_PDU::get_memorytype(void) const
{
    return get_uint16(BCCMD_PS_MEMORY_TYPE_memorytype) ;
}

void BCCMD_PS_MEMORY_TYPE_PDU::set_memorytype(uint16 val)
{
    set_uint16(BCCMD_PS_MEMORY_TYPE_memorytype,val) ;
}

/*******************************************************************/


BCCMD_BABEL_SPI_RUN_STATE_PDU::BCCMD_BABEL_SPI_RUN_STATE_PDU()
: BCCMD_PDU( BCCMDVARID_BABEL_SPI_RUN_STATE , BCCMD_BABEL_SPI_RUN_STATE_pduSize )
{
}

BCCMD_BABEL_SPI_RUN_STATE_PDU::BCCMD_BABEL_SPI_RUN_STATE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BABEL_SPI_RUN_STATE_PDU::BCCMD_BABEL_SPI_RUN_STATE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BABEL_SPI_RUN_STATE_PDU::BCCMD_BABEL_SPI_RUN_STATE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BABEL_SPI_RUN_STATE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BABEL_SPI_RUN_STATE_data) ;
}

void BCCMD_BABEL_SPI_RUN_STATE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BABEL_SPI_RUN_STATE_data,val) ;
}

/*******************************************************************/


BCCMD_PSSIZE_PDU::BCCMD_PSSIZE_PDU()
: BCCMD_PDU( BCCMDVARID_PSSIZE , BCCMD_PSSIZE_pduSize )
{
}

BCCMD_PSSIZE_PDU::BCCMD_PSSIZE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSSIZE_PDU::BCCMD_PSSIZE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSSIZE_PDU::BCCMD_PSSIZE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PSSIZE_PDU::get_id(void) const
{
    return get_uint16(BCCMD_PSSIZE_id) ;
}

void BCCMD_PSSIZE_PDU::set_id(uint16 val)
{
    set_uint16(BCCMD_PSSIZE_id,val) ;
}

uint16 BCCMD_PSSIZE_PDU::get_len(void) const
{
    return get_uint16(BCCMD_PSSIZE_len) ;
}

void BCCMD_PSSIZE_PDU::set_len(uint16 val)
{
    set_uint16(BCCMD_PSSIZE_len,val) ;
}

uint16 BCCMD_PSSIZE_PDU::get_stores(void) const
{
    return get_uint16(BCCMD_PSSIZE_stores) ;
}

void BCCMD_PSSIZE_PDU::set_stores(uint16 val)
{
    set_uint16(BCCMD_PSSIZE_stores,val) ;
}

/*******************************************************************/


BCCMD_KILL_VM_APPLICATION_PDU::BCCMD_KILL_VM_APPLICATION_PDU()
: BCCMD_PDU( BCCMDVARID_KILL_VM_APPLICATION , BCCMD_KILL_VM_APPLICATION_pduSize )
{
}

BCCMD_KILL_VM_APPLICATION_PDU::BCCMD_KILL_VM_APPLICATION_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_KILL_VM_APPLICATION_PDU::BCCMD_KILL_VM_APPLICATION_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_KILL_VM_APPLICATION_PDU::BCCMD_KILL_VM_APPLICATION_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_ANA_FTRIM_READWRITE_PDU::BCCMD_ANA_FTRIM_READWRITE_PDU()
: BCCMD_PDU( BCCMDVARID_ANA_FTRIM_READWRITE , BCCMD_ANA_FTRIM_READWRITE_pduSize )
{
}

BCCMD_ANA_FTRIM_READWRITE_PDU::BCCMD_ANA_FTRIM_READWRITE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ANA_FTRIM_READWRITE_PDU::BCCMD_ANA_FTRIM_READWRITE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ANA_FTRIM_READWRITE_PDU::BCCMD_ANA_FTRIM_READWRITE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ANA_FTRIM_READWRITE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ANA_FTRIM_READWRITE_data) ;
}

void BCCMD_ANA_FTRIM_READWRITE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ANA_FTRIM_READWRITE_data,val) ;
}

/*******************************************************************/


BCCMD_ENABLE_DEV_CONNECT_PDU::BCCMD_ENABLE_DEV_CONNECT_PDU()
: BCCMD_PDU( BCCMDVARID_ENABLE_DEV_CONNECT , BCCMD_ENABLE_DEV_CONNECT_pduSize )
{
}

BCCMD_ENABLE_DEV_CONNECT_PDU::BCCMD_ENABLE_DEV_CONNECT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ENABLE_DEV_CONNECT_PDU::BCCMD_ENABLE_DEV_CONNECT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ENABLE_DEV_CONNECT_PDU::BCCMD_ENABLE_DEV_CONNECT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_BER_THRESHOLD_PDU::BCCMD_BER_THRESHOLD_PDU()
: BCCMD_PDU( BCCMDVARID_BER_THRESHOLD , BCCMD_BER_THRESHOLD_pduSize )
{
}

BCCMD_BER_THRESHOLD_PDU::BCCMD_BER_THRESHOLD_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BER_THRESHOLD_PDU::BCCMD_BER_THRESHOLD_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BER_THRESHOLD_PDU::BCCMD_BER_THRESHOLD_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BER_THRESHOLD_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_BER_THRESHOLD_hci_handle) ;
}

void BCCMD_BER_THRESHOLD_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_BER_THRESHOLD_hci_handle,val) ;
}

uint16 BCCMD_BER_THRESHOLD_PDU::get_ber_threshold(void) const
{
    return get_uint16(BCCMD_BER_THRESHOLD_ber_threshold) ;
}

void BCCMD_BER_THRESHOLD_PDU::set_ber_threshold(uint16 val)
{
    set_uint16(BCCMD_BER_THRESHOLD_ber_threshold,val) ;
}

/*******************************************************************/


BCCMD_COEX_INT_TEST_PDU::BCCMD_COEX_INT_TEST_PDU()
: BCCMD_PDU( BCCMDVARID_COEX_INT_TEST , BCCMD_COEX_INT_TEST_pduSize )
{
}

BCCMD_COEX_INT_TEST_PDU::BCCMD_COEX_INT_TEST_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COEX_INT_TEST_PDU::BCCMD_COEX_INT_TEST_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COEX_INT_TEST_PDU::BCCMD_COEX_INT_TEST_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint8 BCCMD_COEX_INT_TEST_PDU::get_mode(void) const
{
    return get_uint8(BCCMD_COEX_INT_TEST_mode) ;
}

void BCCMD_COEX_INT_TEST_PDU::set_mode(uint8 val)
{
    set_uint8(BCCMD_COEX_INT_TEST_mode,val) ;
}

uint8 BCCMD_COEX_INT_TEST_PDU::get_value(void) const
{
    return get_uint8(BCCMD_COEX_INT_TEST_value) ;
}

void BCCMD_COEX_INT_TEST_PDU::set_value(uint8 val)
{
    set_uint8(BCCMD_COEX_INT_TEST_value,val) ;
}

/*******************************************************************/


BCCMD_RDF_PT_PDU::BCCMD_RDF_PT_PDU()
: BCCMD_PDU( BCCMDVARID_RDF_PT , BCCMD_RDF_PT_pduSize )
{
}

BCCMD_RDF_PT_PDU::BCCMD_RDF_PT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RDF_PT_PDU::BCCMD_RDF_PT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RDF_PT_PDU::BCCMD_RDF_PT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint8 BCCMD_RDF_PT_PDU::get_enable(void) const
{
    return get_uint8(BCCMD_RDF_PT_enable) ;
}

void BCCMD_RDF_PT_PDU::set_enable(uint8 val)
{
    set_uint8(BCCMD_RDF_PT_enable,val) ;
}

uint8 BCCMD_RDF_PT_PDU::get_antenna(void) const
{
    return get_uint8(BCCMD_RDF_PT_antenna) ;
}

void BCCMD_RDF_PT_PDU::set_antenna(uint8 val)
{
    set_uint8(BCCMD_RDF_PT_antenna,val) ;
}

/*******************************************************************/


BCCMD_EGPS_PULSE_INPUT_START_PDU::BCCMD_EGPS_PULSE_INPUT_START_PDU()
: BCCMD_PDU( BCCMDVARID_EGPS_PULSE_INPUT_START , BCCMD_EGPS_PULSE_INPUT_START_pduSize )
{
}

BCCMD_EGPS_PULSE_INPUT_START_PDU::BCCMD_EGPS_PULSE_INPUT_START_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_EGPS_PULSE_INPUT_START_PDU::BCCMD_EGPS_PULSE_INPUT_START_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_EGPS_PULSE_INPUT_START_PDU::BCCMD_EGPS_PULSE_INPUT_START_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint8 BCCMD_EGPS_PULSE_INPUT_START_PDU::get_pio(void) const
{
    return get_uint8(BCCMD_EGPS_PULSE_INPUT_START_pio) ;
}

void BCCMD_EGPS_PULSE_INPUT_START_PDU::set_pio(uint8 val)
{
    set_uint8(BCCMD_EGPS_PULSE_INPUT_START_pio,val) ;
}

uint8 BCCMD_EGPS_PULSE_INPUT_START_PDU::get_edge_mode(void) const
{
    return get_uint8(BCCMD_EGPS_PULSE_INPUT_START_edge_mode) ;
}

void BCCMD_EGPS_PULSE_INPUT_START_PDU::set_edge_mode(uint8 val)
{
    set_uint8(BCCMD_EGPS_PULSE_INPUT_START_edge_mode,val) ;
}

/*******************************************************************/


BCCMD_RDF_PT_SELECT_ANTENNA_PDU::BCCMD_RDF_PT_SELECT_ANTENNA_PDU()
: BCCMD_PDU( BCCMDVARID_RDF_PT_SELECT_ANTENNA , BCCMD_RDF_PT_SELECT_ANTENNA_pduSize )
{
}

BCCMD_RDF_PT_SELECT_ANTENNA_PDU::BCCMD_RDF_PT_SELECT_ANTENNA_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RDF_PT_SELECT_ANTENNA_PDU::BCCMD_RDF_PT_SELECT_ANTENNA_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RDF_PT_SELECT_ANTENNA_PDU::BCCMD_RDF_PT_SELECT_ANTENNA_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_RDF_PT_SELECT_ANTENNA_PDU::get_data(void) const
{
    return get_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_data) ;
}

void BCCMD_RDF_PT_SELECT_ANTENNA_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_RDF_PT_SELECT_ANTENNA_data,val) ;
}

/*******************************************************************/


BCCMD_PCM_LOW_JITTER_PDU::BCCMD_PCM_LOW_JITTER_PDU()
: BCCMD_PDU( BCCMDVARID_PCM_LOW_JITTER , BCCMD_PCM_LOW_JITTER_pduSize )
{
}

BCCMD_PCM_LOW_JITTER_PDU::BCCMD_PCM_LOW_JITTER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PCM_LOW_JITTER_PDU::BCCMD_PCM_LOW_JITTER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PCM_LOW_JITTER_PDU::BCCMD_PCM_LOW_JITTER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PCM_LOW_JITTER_PDU::get_pcm_if_id(void) const
{
    return get_uint16(BCCMD_PCM_LOW_JITTER_pcm_if_id) ;
}

void BCCMD_PCM_LOW_JITTER_PDU::set_pcm_if_id(uint16 val)
{
    set_uint16(BCCMD_PCM_LOW_JITTER_pcm_if_id,val) ;
}

uint32 BCCMD_PCM_LOW_JITTER_PDU::get_low_jitter(void) const
{
    return get_uint32(BCCMD_PCM_LOW_JITTER_low_jitter) ;
}

void BCCMD_PCM_LOW_JITTER_PDU::set_low_jitter(uint32 val)
{
    set_uint32(BCCMD_PCM_LOW_JITTER_low_jitter,val) ;
}

/*******************************************************************/


BCCMD_CHARGER_TRIMS_PDU::BCCMD_CHARGER_TRIMS_PDU()
: BCCMD_PDU( BCCMDVARID_CHARGER_TRIMS , BCCMD_CHARGER_TRIMS_pduSize )
{
}

BCCMD_CHARGER_TRIMS_PDU::BCCMD_CHARGER_TRIMS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHARGER_TRIMS_PDU::BCCMD_CHARGER_TRIMS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHARGER_TRIMS_PDU::BCCMD_CHARGER_TRIMS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHARGER_TRIMS_PDU::get_chgref_trim(void) const
{
    return get_uint16(BCCMD_CHARGER_TRIMS_chgref_trim) ;
}

void BCCMD_CHARGER_TRIMS_PDU::set_chgref_trim(uint16 val)
{
    set_uint16(BCCMD_CHARGER_TRIMS_chgref_trim,val) ;
}

int16 BCCMD_CHARGER_TRIMS_PDU::get_hvref_trim(void) const
{
    return get_int16(BCCMD_CHARGER_TRIMS_hvref_trim) ;
}

void BCCMD_CHARGER_TRIMS_PDU::set_hvref_trim(int16 val)
{
    set_int16(BCCMD_CHARGER_TRIMS_hvref_trim,val) ;
}

uint16 BCCMD_CHARGER_TRIMS_PDU::get_rtrim(void) const
{
    return get_uint16(BCCMD_CHARGER_TRIMS_rtrim) ;
}

void BCCMD_CHARGER_TRIMS_PDU::set_rtrim(uint16 val)
{
    set_uint16(BCCMD_CHARGER_TRIMS_rtrim,val) ;
}

uint16 BCCMD_CHARGER_TRIMS_PDU::get_itrim(void) const
{
    return get_uint16(BCCMD_CHARGER_TRIMS_itrim) ;
}

void BCCMD_CHARGER_TRIMS_PDU::set_itrim(uint16 val)
{
    set_uint16(BCCMD_CHARGER_TRIMS_itrim,val) ;
}

uint16 BCCMD_CHARGER_TRIMS_PDU::get_iext_trim(void) const
{
    return get_uint16(BCCMD_CHARGER_TRIMS_iext_trim) ;
}

void BCCMD_CHARGER_TRIMS_PDU::set_iext_trim(uint16 val)
{
    set_uint16(BCCMD_CHARGER_TRIMS_iext_trim,val) ;
}

uint16 BCCMD_CHARGER_TRIMS_PDU::get_iterm_trim(void) const
{
    return get_uint16(BCCMD_CHARGER_TRIMS_iterm_trim) ;
}

void BCCMD_CHARGER_TRIMS_PDU::set_iterm_trim(uint16 val)
{
    set_uint16(BCCMD_CHARGER_TRIMS_iterm_trim,val) ;
}

uint16 BCCMD_CHARGER_TRIMS_PDU::get_vfast_trim(void) const
{
    return get_uint16(BCCMD_CHARGER_TRIMS_vfast_trim) ;
}

void BCCMD_CHARGER_TRIMS_PDU::set_vfast_trim(uint16 val)
{
    set_uint16(BCCMD_CHARGER_TRIMS_vfast_trim,val) ;
}

uint16 BCCMD_CHARGER_TRIMS_PDU::get_hyst_trim(void) const
{
    return get_uint16(BCCMD_CHARGER_TRIMS_hyst_trim) ;
}

void BCCMD_CHARGER_TRIMS_PDU::set_hyst_trim(uint16 val)
{
    set_uint16(BCCMD_CHARGER_TRIMS_hyst_trim,val) ;
}

/*******************************************************************/


BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU::BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU()
: BCCMD_PDU( BCCMDVARID_KALSPIDEBUG_SETDEBUGMODE , BCCMD_KALSPIDEBUG_SETDEBUGMODE_pduSize )
{
}

BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU::BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU::BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU::BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_PCM2_ATTENUATION_PDU::BCCMD_PCM2_ATTENUATION_PDU()
: BCCMD_PDU( BCCMDVARID_PCM2_ATTENUATION , BCCMD_PCM2_ATTENUATION_pduSize )
{
}

BCCMD_PCM2_ATTENUATION_PDU::BCCMD_PCM2_ATTENUATION_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PCM2_ATTENUATION_PDU::BCCMD_PCM2_ATTENUATION_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PCM2_ATTENUATION_PDU::BCCMD_PCM2_ATTENUATION_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PCM2_ATTENUATION_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PCM2_ATTENUATION_data) ;
}

void BCCMD_PCM2_ATTENUATION_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PCM2_ATTENUATION_data,val) ;
}

/*******************************************************************/


BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU::BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU()
: BCCMD_PDU( BCCMDVARID_SAVE_CONNECTION_EVENT_FILTERS , BCCMD_SAVE_CONNECTION_EVENT_FILTERS_pduSize )
{
}

BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU::BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU::BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU::BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_ESCOTEST_PDU::BCCMD_ESCOTEST_PDU()
: BCCMD_PDU( BCCMDVARID_ESCOTEST , BCCMD_ESCOTEST_pduSize )
{
}

BCCMD_ESCOTEST_PDU::BCCMD_ESCOTEST_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ESCOTEST_PDU::BCCMD_ESCOTEST_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ESCOTEST_PDU::BCCMD_ESCOTEST_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ESCOTEST_PDU::get_function(void) const
{
    return get_uint16(BCCMD_ESCOTEST_function) ;
}

void BCCMD_ESCOTEST_PDU::set_function(uint16 val)
{
    set_uint16(BCCMD_ESCOTEST_function,val) ;
}

uint16 BCCMD_ESCOTEST_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ESCOTEST_data) ;
}

void BCCMD_ESCOTEST_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ESCOTEST_data,val) ;
}

/*******************************************************************/


BCCMD_E2_APP_SIZE_PDU::BCCMD_E2_APP_SIZE_PDU()
: BCCMD_PDU( BCCMDVARID_E2_APP_SIZE , BCCMD_E2_APP_SIZE_pduSize )
{
}

BCCMD_E2_APP_SIZE_PDU::BCCMD_E2_APP_SIZE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_E2_APP_SIZE_PDU::BCCMD_E2_APP_SIZE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_E2_APP_SIZE_PDU::BCCMD_E2_APP_SIZE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_E2_APP_SIZE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_E2_APP_SIZE_data) ;
}

void BCCMD_E2_APP_SIZE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_E2_APP_SIZE_data,val) ;
}

/*******************************************************************/


BCCMD_STREAM_CONFIGURE_PDU::BCCMD_STREAM_CONFIGURE_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_CONFIGURE , BCCMD_STREAM_CONFIGURE_pduSize )
{
}

BCCMD_STREAM_CONFIGURE_PDU::BCCMD_STREAM_CONFIGURE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_CONFIGURE_PDU::BCCMD_STREAM_CONFIGURE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_CONFIGURE_PDU::BCCMD_STREAM_CONFIGURE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_CONFIGURE_PDU::get_sid(void) const
{
    return get_uint16(BCCMD_STREAM_CONFIGURE_sid) ;
}

void BCCMD_STREAM_CONFIGURE_PDU::set_sid(uint16 val)
{
    set_uint16(BCCMD_STREAM_CONFIGURE_sid,val) ;
}

uint16 BCCMD_STREAM_CONFIGURE_PDU::get_key_config(void) const
{
    return get_uint16(BCCMD_STREAM_CONFIGURE_key_config) ;
}

void BCCMD_STREAM_CONFIGURE_PDU::set_key_config(uint16 val)
{
    set_uint16(BCCMD_STREAM_CONFIGURE_key_config,val) ;
}

uint32 BCCMD_STREAM_CONFIGURE_PDU::get_value(void) const
{
    return get_uint32(BCCMD_STREAM_CONFIGURE_value) ;
}

void BCCMD_STREAM_CONFIGURE_PDU::set_value(uint32 val)
{
    set_uint32(BCCMD_STREAM_CONFIGURE_value,val) ;
}

/*******************************************************************/


BCCMD_ADC_PDU::BCCMD_ADC_PDU()
: BCCMD_PDU( BCCMDVARID_ADC , BCCMD_ADC_pduSize )
{
}

BCCMD_ADC_PDU::BCCMD_ADC_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC_PDU::BCCMD_ADC_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC_PDU::BCCMD_ADC_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC_data) ;
}

void BCCMD_ADC_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC_data,val) ;
}

/*******************************************************************/


BCCMD_PSNEXT_ALL_PDU::BCCMD_PSNEXT_ALL_PDU()
: BCCMD_PDU( BCCMDVARID_PSNEXT_ALL , BCCMD_PSNEXT_ALL_pduSize )
{
}

BCCMD_PSNEXT_ALL_PDU::BCCMD_PSNEXT_ALL_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSNEXT_ALL_PDU::BCCMD_PSNEXT_ALL_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSNEXT_ALL_PDU::BCCMD_PSNEXT_ALL_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PSNEXT_ALL_PDU::get_id(void) const
{
    return get_uint16(BCCMD_PSNEXT_ALL_id) ;
}

void BCCMD_PSNEXT_ALL_PDU::set_id(uint16 val)
{
    set_uint16(BCCMD_PSNEXT_ALL_id,val) ;
}

uint16 BCCMD_PSNEXT_ALL_PDU::get_nextid(void) const
{
    return get_uint16(BCCMD_PSNEXT_ALL_nextid) ;
}

void BCCMD_PSNEXT_ALL_PDU::set_nextid(uint16 val)
{
    set_uint16(BCCMD_PSNEXT_ALL_nextid,val) ;
}

/*******************************************************************/


BCCMD_STREAM_SYNC_SID_PDU::BCCMD_STREAM_SYNC_SID_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_SYNC_SID , BCCMD_STREAM_SYNC_SID_pduSize )
{
}

BCCMD_STREAM_SYNC_SID_PDU::BCCMD_STREAM_SYNC_SID_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_SYNC_SID_PDU::BCCMD_STREAM_SYNC_SID_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_SYNC_SID_PDU::BCCMD_STREAM_SYNC_SID_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_SYNC_SID_PDU::get_sid1(void) const
{
    return get_uint16(BCCMD_STREAM_SYNC_SID_sid1) ;
}

void BCCMD_STREAM_SYNC_SID_PDU::set_sid1(uint16 val)
{
    set_uint16(BCCMD_STREAM_SYNC_SID_sid1,val) ;
}

uint16 BCCMD_STREAM_SYNC_SID_PDU::get_sid2(void) const
{
    return get_uint16(BCCMD_STREAM_SYNC_SID_sid2) ;
}

void BCCMD_STREAM_SYNC_SID_PDU::set_sid2(uint16 val)
{
    set_uint16(BCCMD_STREAM_SYNC_SID_sid2,val) ;
}

/*******************************************************************/


BCCMD_MAP_SCO_PCM_PDU::BCCMD_MAP_SCO_PCM_PDU()
: BCCMD_PDU( BCCMDVARID_MAP_SCO_PCM , BCCMD_MAP_SCO_PCM_pduSize )
{
}

BCCMD_MAP_SCO_PCM_PDU::BCCMD_MAP_SCO_PCM_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_MAP_SCO_PCM_PDU::BCCMD_MAP_SCO_PCM_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_MAP_SCO_PCM_PDU::BCCMD_MAP_SCO_PCM_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_MAP_SCO_PCM_PDU::get_data(void) const
{
    return get_uint16(BCCMD_MAP_SCO_PCM_data) ;
}

void BCCMD_MAP_SCO_PCM_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_MAP_SCO_PCM_data,val) ;
}

/*******************************************************************/


BCCMD_FASTPIPE_CREATE_PDU::BCCMD_FASTPIPE_CREATE_PDU()
: BCCMD_PDU( BCCMDVARID_FASTPIPE_CREATE , BCCMD_FASTPIPE_CREATE_pduSize )
{
}

BCCMD_FASTPIPE_CREATE_PDU::BCCMD_FASTPIPE_CREATE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FASTPIPE_CREATE_PDU::BCCMD_FASTPIPE_CREATE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FASTPIPE_CREATE_PDU::BCCMD_FASTPIPE_CREATE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_FASTPIPE_CREATE_PDU::get_pipe_id(void) const
{
    return get_uint16(BCCMD_FASTPIPE_CREATE_pipe_id) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_pipe_id(uint16 val)
{
    set_uint16(BCCMD_FASTPIPE_CREATE_pipe_id,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_overhead_host(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_overhead_host) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_overhead_host(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_overhead_host,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_capacity_rx_host(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_capacity_rx_host) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_capacity_rx_host(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_capacity_rx_host,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_required_tx_controller(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_required_tx_controller) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_required_tx_controller(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_required_tx_controller,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_desired_tx_controller(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_desired_tx_controller) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_desired_tx_controller(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_desired_tx_controller,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_required_rx_controller(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_required_rx_controller) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_required_rx_controller(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_required_rx_controller,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_desired_rx_controller(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_desired_rx_controller) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_desired_rx_controller(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_desired_rx_controller,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_overhead_controller(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_overhead_controller) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_overhead_controller(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_overhead_controller,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_capacity_tx_controller(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_capacity_tx_controller) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_capacity_tx_controller(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_capacity_tx_controller,val) ;
}

uint32 BCCMD_FASTPIPE_CREATE_PDU::get_capacity_rx_controller(void) const
{
    return get_uint32(BCCMD_FASTPIPE_CREATE_capacity_rx_controller) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_capacity_rx_controller(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_CREATE_capacity_rx_controller,val) ;
}

uint16 BCCMD_FASTPIPE_CREATE_PDU::get_handle(void) const
{
    return get_uint16(BCCMD_FASTPIPE_CREATE_handle) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_handle(uint16 val)
{
    set_uint16(BCCMD_FASTPIPE_CREATE_handle,val) ;
}

uint16 BCCMD_FASTPIPE_CREATE_PDU::get_result(void) const
{
    return get_uint16(BCCMD_FASTPIPE_CREATE_result) ;
}

void BCCMD_FASTPIPE_CREATE_PDU::set_result(uint16 val)
{
    set_uint16(BCCMD_FASTPIPE_CREATE_result,val) ;
}

/*******************************************************************/


BCCMD_COASTER_INDICATIONS_PDU::BCCMD_COASTER_INDICATIONS_PDU()
: BCCMD_PDU( BCCMDVARID_COASTER_INDICATIONS , BCCMD_COASTER_INDICATIONS_pduSize )
{
}

BCCMD_COASTER_INDICATIONS_PDU::BCCMD_COASTER_INDICATIONS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COASTER_INDICATIONS_PDU::BCCMD_COASTER_INDICATIONS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COASTER_INDICATIONS_PDU::BCCMD_COASTER_INDICATIONS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COASTER_INDICATIONS_PDU::get_events(void) const
{
    return get_uint16(BCCMD_COASTER_INDICATIONS_events) ;
}

void BCCMD_COASTER_INDICATIONS_PDU::set_events(uint16 val)
{
    set_uint16(BCCMD_COASTER_INDICATIONS_events,val) ;
}

uint32 BCCMD_COASTER_INDICATIONS_PDU::get_uu(void) const
{
    return get_uint32(BCCMD_COASTER_INDICATIONS_uu) ;
}

void BCCMD_COASTER_INDICATIONS_PDU::set_uu(uint32 val)
{
    set_uint32(BCCMD_COASTER_INDICATIONS_uu,val) ;
}

uint16 BCCMD_COASTER_INDICATIONS_PDU::get_optflags(void) const
{
    return get_uint16(BCCMD_COASTER_INDICATIONS_optflags) ;
}

void BCCMD_COASTER_INDICATIONS_PDU::set_optflags(uint16 val)
{
    set_uint16(BCCMD_COASTER_INDICATIONS_optflags,val) ;
}

/*******************************************************************/


BCCMD_LED1_ENABLE_PDU::BCCMD_LED1_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_LED1_ENABLE , BCCMD_LED1_ENABLE_pduSize )
{
}

BCCMD_LED1_ENABLE_PDU::BCCMD_LED1_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_LED1_ENABLE_PDU::BCCMD_LED1_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_LED1_ENABLE_PDU::BCCMD_LED1_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_LED1_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_LED1_ENABLE_data) ;
}

void BCCMD_LED1_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_LED1_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU::BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU()
: BCCMD_PDU( BCCMDVARID_ENABLE_COEX_MESSAGE_REPORTING , BCCMD_ENABLE_COEX_MESSAGE_REPORTING_pduSize )
{
}

BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU::BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU::BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU::BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_data) ;
}

void BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ENABLE_COEX_MESSAGE_REPORTING_data,val) ;
}

/*******************************************************************/


BCCMD_DIGITAL_AUDIO_CONFIG_PDU::BCCMD_DIGITAL_AUDIO_CONFIG_PDU()
: BCCMD_PDU( BCCMDVARID_DIGITAL_AUDIO_CONFIG , BCCMD_DIGITAL_AUDIO_CONFIG_pduSize )
{
}

BCCMD_DIGITAL_AUDIO_CONFIG_PDU::BCCMD_DIGITAL_AUDIO_CONFIG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_DIGITAL_AUDIO_CONFIG_PDU::BCCMD_DIGITAL_AUDIO_CONFIG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_DIGITAL_AUDIO_CONFIG_PDU::BCCMD_DIGITAL_AUDIO_CONFIG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_DIGITAL_AUDIO_CONFIG_PDU::get_pcm_if_id(void) const
{
    return get_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_pcm_if_id) ;
}

void BCCMD_DIGITAL_AUDIO_CONFIG_PDU::set_pcm_if_id(uint16 val)
{
    set_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_pcm_if_id,val) ;
}

uint16 BCCMD_DIGITAL_AUDIO_CONFIG_PDU::get_options(void) const
{
    return get_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_options) ;
}

void BCCMD_DIGITAL_AUDIO_CONFIG_PDU::set_options(uint16 val)
{
    set_uint16(BCCMD_DIGITAL_AUDIO_CONFIG_options,val) ;
}

/*******************************************************************/


BCCMD_CHIPVER_PDU::BCCMD_CHIPVER_PDU()
: BCCMD_PDU( BCCMDVARID_CHIPVER , BCCMD_CHIPVER_pduSize )
{
}

BCCMD_CHIPVER_PDU::BCCMD_CHIPVER_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHIPVER_PDU::BCCMD_CHIPVER_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHIPVER_PDU::BCCMD_CHIPVER_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHIPVER_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHIPVER_data) ;
}

void BCCMD_CHIPVER_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHIPVER_data,val) ;
}

/*******************************************************************/


BCCMD_SPI_LOCK_STATUS_PDU::BCCMD_SPI_LOCK_STATUS_PDU()
: BCCMD_PDU( BCCMDVARID_SPI_LOCK_STATUS , BCCMD_SPI_LOCK_STATUS_pduSize )
{
}

BCCMD_SPI_LOCK_STATUS_PDU::BCCMD_SPI_LOCK_STATUS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SPI_LOCK_STATUS_PDU::BCCMD_SPI_LOCK_STATUS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SPI_LOCK_STATUS_PDU::BCCMD_SPI_LOCK_STATUS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_SPI_LOCK_STATUS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_SPI_LOCK_STATUS_data) ;
}

void BCCMD_SPI_LOCK_STATUS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_SPI_LOCK_STATUS_data,val) ;
}

/*******************************************************************/


BCCMD_ADC0_PDU::BCCMD_ADC0_PDU()
: BCCMD_PDU( BCCMDVARID_ADC0 , BCCMD_ADC0_pduSize )
{
}

BCCMD_ADC0_PDU::BCCMD_ADC0_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC0_PDU::BCCMD_ADC0_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC0_PDU::BCCMD_ADC0_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC0_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC0_data) ;
}

void BCCMD_ADC0_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC0_data,val) ;
}

/*******************************************************************/


BCCMD_ENABLE_MEDIUM_RATE_PDU::BCCMD_ENABLE_MEDIUM_RATE_PDU()
: BCCMD_PDU( BCCMDVARID_ENABLE_MEDIUM_RATE , BCCMD_ENABLE_MEDIUM_RATE_pduSize )
{
}

BCCMD_ENABLE_MEDIUM_RATE_PDU::BCCMD_ENABLE_MEDIUM_RATE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ENABLE_MEDIUM_RATE_PDU::BCCMD_ENABLE_MEDIUM_RATE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ENABLE_MEDIUM_RATE_PDU::BCCMD_ENABLE_MEDIUM_RATE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ENABLE_MEDIUM_RATE_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_ENABLE_MEDIUM_RATE_hci_handle) ;
}

void BCCMD_ENABLE_MEDIUM_RATE_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_ENABLE_MEDIUM_RATE_hci_handle,val) ;
}

bool BCCMD_ENABLE_MEDIUM_RATE_PDU::get_enable(void) const
{
    return get_bool(BCCMD_ENABLE_MEDIUM_RATE_enable) ;
}

void BCCMD_ENABLE_MEDIUM_RATE_PDU::set_enable(bool val)
{
    set_bool(BCCMD_ENABLE_MEDIUM_RATE_enable,val) ;
}

/*******************************************************************/


BCCMD_ADC1_PDU::BCCMD_ADC1_PDU()
: BCCMD_PDU( BCCMDVARID_ADC1 , BCCMD_ADC1_pduSize )
{
}

BCCMD_ADC1_PDU::BCCMD_ADC1_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC1_PDU::BCCMD_ADC1_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC1_PDU::BCCMD_ADC1_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC1_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC1_data) ;
}

void BCCMD_ADC1_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC1_data,val) ;
}

/*******************************************************************/


BCCMD_FMTX_SET_CDAC_PDU::BCCMD_FMTX_SET_CDAC_PDU()
: BCCMD_PDU( BCCMDVARID_FMTX_SET_CDAC , BCCMD_FMTX_SET_CDAC_pduSize )
{
}

BCCMD_FMTX_SET_CDAC_PDU::BCCMD_FMTX_SET_CDAC_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FMTX_SET_CDAC_PDU::BCCMD_FMTX_SET_CDAC_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FMTX_SET_CDAC_PDU::BCCMD_FMTX_SET_CDAC_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_FMTX_SET_CDAC_PDU::get_data(void) const
{
    return get_uint16(BCCMD_FMTX_SET_CDAC_data) ;
}

void BCCMD_FMTX_SET_CDAC_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_FMTX_SET_CDAC_data,val) ;
}

/*******************************************************************/


BCCMD_DIGITAL_AUDIO_RATE_PDU::BCCMD_DIGITAL_AUDIO_RATE_PDU()
: BCCMD_PDU( BCCMDVARID_DIGITAL_AUDIO_RATE , BCCMD_DIGITAL_AUDIO_RATE_pduSize )
{
}

BCCMD_DIGITAL_AUDIO_RATE_PDU::BCCMD_DIGITAL_AUDIO_RATE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_DIGITAL_AUDIO_RATE_PDU::BCCMD_DIGITAL_AUDIO_RATE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_DIGITAL_AUDIO_RATE_PDU::BCCMD_DIGITAL_AUDIO_RATE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_DIGITAL_AUDIO_RATE_PDU::get_pcm_if_id(void) const
{
    return get_uint16(BCCMD_DIGITAL_AUDIO_RATE_pcm_if_id) ;
}

void BCCMD_DIGITAL_AUDIO_RATE_PDU::set_pcm_if_id(uint16 val)
{
    set_uint16(BCCMD_DIGITAL_AUDIO_RATE_pcm_if_id,val) ;
}

uint32 BCCMD_DIGITAL_AUDIO_RATE_PDU::get_frequency(void) const
{
    return get_uint32(BCCMD_DIGITAL_AUDIO_RATE_frequency) ;
}

void BCCMD_DIGITAL_AUDIO_RATE_PDU::set_frequency(uint32 val)
{
    set_uint32(BCCMD_DIGITAL_AUDIO_RATE_frequency,val) ;
}

uint16 BCCMD_DIGITAL_AUDIO_RATE_PDU::get_samp_size(void) const
{
    return get_uint16(BCCMD_DIGITAL_AUDIO_RATE_samp_size) ;
}

void BCCMD_DIGITAL_AUDIO_RATE_PDU::set_samp_size(uint16 val)
{
    set_uint16(BCCMD_DIGITAL_AUDIO_RATE_samp_size,val) ;
}

/*******************************************************************/


BCCMD_ADC2_PDU::BCCMD_ADC2_PDU()
: BCCMD_PDU( BCCMDVARID_ADC2 , BCCMD_ADC2_pduSize )
{
}

BCCMD_ADC2_PDU::BCCMD_ADC2_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC2_PDU::BCCMD_ADC2_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC2_PDU::BCCMD_ADC2_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC2_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC2_data) ;
}

void BCCMD_ADC2_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC2_data,val) ;
}

/*******************************************************************/


BCCMD_PROVOKE_PANIC_PDU::BCCMD_PROVOKE_PANIC_PDU()
: BCCMD_PDU( BCCMDVARID_PROVOKE_PANIC , BCCMD_PROVOKE_PANIC_pduSize )
{
}

BCCMD_PROVOKE_PANIC_PDU::BCCMD_PROVOKE_PANIC_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PROVOKE_PANIC_PDU::BCCMD_PROVOKE_PANIC_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PROVOKE_PANIC_PDU::BCCMD_PROVOKE_PANIC_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PROVOKE_PANIC_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PROVOKE_PANIC_data) ;
}

void BCCMD_PROVOKE_PANIC_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PROVOKE_PANIC_data,val) ;
}

/*******************************************************************/


BCCMD_GET_CLR_EVT_PDU::BCCMD_GET_CLR_EVT_PDU()
: BCCMD_PDU( BCCMDVARID_GET_CLR_EVT , BCCMD_GET_CLR_EVT_pduSize )
{
}

BCCMD_GET_CLR_EVT_PDU::BCCMD_GET_CLR_EVT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_GET_CLR_EVT_PDU::BCCMD_GET_CLR_EVT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_GET_CLR_EVT_PDU::BCCMD_GET_CLR_EVT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_GET_CLR_EVT_PDU::get_evtcntid(void) const
{
    return get_uint16(BCCMD_GET_CLR_EVT_evtcntid) ;
}

void BCCMD_GET_CLR_EVT_PDU::set_evtcntid(uint16 val)
{
    set_uint16(BCCMD_GET_CLR_EVT_evtcntid,val) ;
}

uint16 BCCMD_GET_CLR_EVT_PDU::get_cnt(void) const
{
    return get_uint16(BCCMD_GET_CLR_EVT_cnt) ;
}

void BCCMD_GET_CLR_EVT_PDU::set_cnt(uint16 val)
{
    set_uint16(BCCMD_GET_CLR_EVT_cnt,val) ;
}

/*******************************************************************/


BCCMD_E2_DEVICE_PDU::BCCMD_E2_DEVICE_PDU()
: BCCMD_PDU( BCCMDVARID_E2_DEVICE , BCCMD_E2_DEVICE_pduSize )
{
}

BCCMD_E2_DEVICE_PDU::BCCMD_E2_DEVICE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_E2_DEVICE_PDU::BCCMD_E2_DEVICE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_E2_DEVICE_PDU::BCCMD_E2_DEVICE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_E2_DEVICE_PDU::get_log2_bytes(void) const
{
    return get_uint16(BCCMD_E2_DEVICE_log2_bytes) ;
}

void BCCMD_E2_DEVICE_PDU::set_log2_bytes(uint16 val)
{
    set_uint16(BCCMD_E2_DEVICE_log2_bytes,val) ;
}

uint16 BCCMD_E2_DEVICE_PDU::get_addr_mask(void) const
{
    return get_uint16(BCCMD_E2_DEVICE_addr_mask) ;
}

void BCCMD_E2_DEVICE_PDU::set_addr_mask(uint16 val)
{
    set_uint16(BCCMD_E2_DEVICE_addr_mask,val) ;
}

/*******************************************************************/


BCCMD_ADC3_PDU::BCCMD_ADC3_PDU()
: BCCMD_PDU( BCCMDVARID_ADC3 , BCCMD_ADC3_pduSize )
{
}

BCCMD_ADC3_PDU::BCCMD_ADC3_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC3_PDU::BCCMD_ADC3_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC3_PDU::BCCMD_ADC3_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC3_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC3_data) ;
}

void BCCMD_ADC3_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC3_data,val) ;
}

/*******************************************************************/


BCCMD_INTERFACE_VERSION_PDU::BCCMD_INTERFACE_VERSION_PDU()
: BCCMD_PDU( BCCMDVARID_INTERFACE_VERSION , BCCMD_INTERFACE_VERSION_pduSize )
{
}

BCCMD_INTERFACE_VERSION_PDU::BCCMD_INTERFACE_VERSION_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_INTERFACE_VERSION_PDU::BCCMD_INTERFACE_VERSION_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_INTERFACE_VERSION_PDU::BCCMD_INTERFACE_VERSION_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_INTERFACE_VERSION_PDU::get_data(void) const
{
    return get_uint16(BCCMD_INTERFACE_VERSION_data) ;
}

void BCCMD_INTERFACE_VERSION_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_INTERFACE_VERSION_data,val) ;
}

/*******************************************************************/


BCCMD_ADC4_PDU::BCCMD_ADC4_PDU()
: BCCMD_PDU( BCCMDVARID_ADC4 , BCCMD_ADC4_pduSize )
{
}

BCCMD_ADC4_PDU::BCCMD_ADC4_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC4_PDU::BCCMD_ADC4_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC4_PDU::BCCMD_ADC4_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC4_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC4_data) ;
}

void BCCMD_ADC4_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC4_data,val) ;
}

/*******************************************************************/


BCCMD_ADC5_PDU::BCCMD_ADC5_PDU()
: BCCMD_PDU( BCCMDVARID_ADC5 , BCCMD_ADC5_pduSize )
{
}

BCCMD_ADC5_PDU::BCCMD_ADC5_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC5_PDU::BCCMD_ADC5_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC5_PDU::BCCMD_ADC5_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC5_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC5_data) ;
}

void BCCMD_ADC5_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC5_data,val) ;
}

/*******************************************************************/


BCCMD_ADC6_PDU::BCCMD_ADC6_PDU()
: BCCMD_PDU( BCCMDVARID_ADC6 , BCCMD_ADC6_pduSize )
{
}

BCCMD_ADC6_PDU::BCCMD_ADC6_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC6_PDU::BCCMD_ADC6_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC6_PDU::BCCMD_ADC6_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC6_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC6_data) ;
}

void BCCMD_ADC6_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC6_data,val) ;
}

/*******************************************************************/


BCCMD_ADC7_PDU::BCCMD_ADC7_PDU()
: BCCMD_PDU( BCCMDVARID_ADC7 , BCCMD_ADC7_pduSize )
{
}

BCCMD_ADC7_PDU::BCCMD_ADC7_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC7_PDU::BCCMD_ADC7_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC7_PDU::BCCMD_ADC7_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC7_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC7_data) ;
}

void BCCMD_ADC7_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC7_data,val) ;
}

/*******************************************************************/


BCCMD_ADC8_PDU::BCCMD_ADC8_PDU()
: BCCMD_PDU( BCCMDVARID_ADC8 , BCCMD_ADC8_pduSize )
{
}

BCCMD_ADC8_PDU::BCCMD_ADC8_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC8_PDU::BCCMD_ADC8_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC8_PDU::BCCMD_ADC8_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC8_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC8_data) ;
}

void BCCMD_ADC8_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC8_data,val) ;
}

/*******************************************************************/


BCCMD_ADC9_PDU::BCCMD_ADC9_PDU()
: BCCMD_PDU( BCCMDVARID_ADC9 , BCCMD_ADC9_pduSize )
{
}

BCCMD_ADC9_PDU::BCCMD_ADC9_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC9_PDU::BCCMD_ADC9_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC9_PDU::BCCMD_ADC9_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC9_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC9_data) ;
}

void BCCMD_ADC9_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC9_data,val) ;
}

/*******************************************************************/


BCCMD_KALDEBUG_PDU::BCCMD_KALDEBUG_PDU()
: BCCMD_PDU( BCCMDVARID_KALDEBUG , BCCMD_KALDEBUG_pduSize )
{
}

BCCMD_KALDEBUG_PDU::BCCMD_KALDEBUG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_KALDEBUG_PDU::BCCMD_KALDEBUG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_KALDEBUG_PDU::BCCMD_KALDEBUG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_KALDEBUG_PDU::get_function(void) const
{
    return get_uint16(BCCMD_KALDEBUG_function) ;
}

void BCCMD_KALDEBUG_PDU::set_function(uint16 val)
{
    set_uint16(BCCMD_KALDEBUG_function,val) ;
}

/*******************************************************************/


BCCMD_CHARGER_SUPPRESS_LED0_PDU::BCCMD_CHARGER_SUPPRESS_LED0_PDU()
: BCCMD_PDU( BCCMDVARID_CHARGER_SUPPRESS_LED0 , BCCMD_CHARGER_SUPPRESS_LED0_pduSize )
{
}

BCCMD_CHARGER_SUPPRESS_LED0_PDU::BCCMD_CHARGER_SUPPRESS_LED0_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHARGER_SUPPRESS_LED0_PDU::BCCMD_CHARGER_SUPPRESS_LED0_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHARGER_SUPPRESS_LED0_PDU::BCCMD_CHARGER_SUPPRESS_LED0_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHARGER_SUPPRESS_LED0_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHARGER_SUPPRESS_LED0_data) ;
}

void BCCMD_CHARGER_SUPPRESS_LED0_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHARGER_SUPPRESS_LED0_data,val) ;
}

/*******************************************************************/


BCCMD_PIO_STRONG_BIAS_PDU::BCCMD_PIO_STRONG_BIAS_PDU()
: BCCMD_PDU( BCCMDVARID_PIO_STRONG_BIAS , BCCMD_PIO_STRONG_BIAS_pduSize )
{
}

BCCMD_PIO_STRONG_BIAS_PDU::BCCMD_PIO_STRONG_BIAS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO_STRONG_BIAS_PDU::BCCMD_PIO_STRONG_BIAS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO_STRONG_BIAS_PDU::BCCMD_PIO_STRONG_BIAS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PIO_STRONG_BIAS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PIO_STRONG_BIAS_data) ;
}

void BCCMD_PIO_STRONG_BIAS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PIO_STRONG_BIAS_data,val) ;
}

/*******************************************************************/


BCCMD_CHARGER_STATUS_PDU::BCCMD_CHARGER_STATUS_PDU()
: BCCMD_PDU( BCCMDVARID_CHARGER_STATUS , BCCMD_CHARGER_STATUS_pduSize )
{
}

BCCMD_CHARGER_STATUS_PDU::BCCMD_CHARGER_STATUS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHARGER_STATUS_PDU::BCCMD_CHARGER_STATUS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHARGER_STATUS_PDU::BCCMD_CHARGER_STATUS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHARGER_STATUS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHARGER_STATUS_data) ;
}

void BCCMD_CHARGER_STATUS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHARGER_STATUS_data,val) ;
}

/*******************************************************************/


BCCMD_PREVIN_TUNNEL_PDU::BCCMD_PREVIN_TUNNEL_PDU()
: BCCMD_PDU( BCCMDVARID_PREVIN_TUNNEL , BCCMD_PREVIN_TUNNEL_pduSize )
{
}

BCCMD_PREVIN_TUNNEL_PDU::BCCMD_PREVIN_TUNNEL_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PREVIN_TUNNEL_PDU::BCCMD_PREVIN_TUNNEL_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PREVIN_TUNNEL_PDU::BCCMD_PREVIN_TUNNEL_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PREVIN_TUNNEL_PDU::get_message_num(void) const
{
    return get_uint16(BCCMD_PREVIN_TUNNEL_message_num) ;
}

void BCCMD_PREVIN_TUNNEL_PDU::set_message_num(uint16 val)
{
    set_uint16(BCCMD_PREVIN_TUNNEL_message_num,val) ;
}

uint16 BCCMD_PREVIN_TUNNEL_PDU::get_length(void) const
{
    return get_uint16(BCCMD_PREVIN_TUNNEL_length) ;
}

void BCCMD_PREVIN_TUNNEL_PDU::set_length(uint16 val)
{
    set_uint16(BCCMD_PREVIN_TUNNEL_length,val) ;
}

uint16 BCCMD_PREVIN_TUNNEL_PDU::get_message(void) const
{
    return get_uint16(BCCMD_PREVIN_TUNNEL_message) ;
}

void BCCMD_PREVIN_TUNNEL_PDU::set_message(uint16 val)
{
    set_uint16(BCCMD_PREVIN_TUNNEL_message,val) ;
}

/*******************************************************************/


BCCMD_CREATE_OPERATOR_C_PDU::BCCMD_CREATE_OPERATOR_C_PDU()
: BCCMD_PDU( BCCMDVARID_CREATE_OPERATOR_C , BCCMD_CREATE_OPERATOR_C_pduSize )
{
}

BCCMD_CREATE_OPERATOR_C_PDU::BCCMD_CREATE_OPERATOR_C_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CREATE_OPERATOR_C_PDU::BCCMD_CREATE_OPERATOR_C_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CREATE_OPERATOR_C_PDU::BCCMD_CREATE_OPERATOR_C_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CREATE_OPERATOR_C_PDU::get_id(void) const
{
    return get_uint16(BCCMD_CREATE_OPERATOR_C_id) ;
}

void BCCMD_CREATE_OPERATOR_C_PDU::set_id(uint16 val)
{
    set_uint16(BCCMD_CREATE_OPERATOR_C_id,val) ;
}

uint16 BCCMD_CREATE_OPERATOR_C_PDU::get_num_patches(void) const
{
    return get_uint16(BCCMD_CREATE_OPERATOR_C_num_patches) ;
}

void BCCMD_CREATE_OPERATOR_C_PDU::set_num_patches(uint16 val)
{
    set_uint16(BCCMD_CREATE_OPERATOR_C_num_patches,val) ;
}

uint16 BCCMD_CREATE_OPERATOR_C_PDU::get_skip_count(void) const
{
    return get_uint16(BCCMD_CREATE_OPERATOR_C_skip_count) ;
}

void BCCMD_CREATE_OPERATOR_C_PDU::set_skip_count(uint16 val)
{
    set_uint16(BCCMD_CREATE_OPERATOR_C_skip_count,val) ;
}

uint16 BCCMD_CREATE_OPERATOR_C_PDU::get_skip_flag(void) const
{
    return get_uint16(BCCMD_CREATE_OPERATOR_C_skip_flag) ;
}

void BCCMD_CREATE_OPERATOR_C_PDU::set_skip_flag(uint16 val)
{
    set_uint16(BCCMD_CREATE_OPERATOR_C_skip_flag,val) ;
}

/*******************************************************************/


BCCMD_COASTER_DEL_SV_PDU::BCCMD_COASTER_DEL_SV_PDU()
: BCCMD_PDU( BCCMDVARID_COASTER_DEL_SV , BCCMD_COASTER_DEL_SV_pduSize )
{
}

BCCMD_COASTER_DEL_SV_PDU::BCCMD_COASTER_DEL_SV_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COASTER_DEL_SV_PDU::BCCMD_COASTER_DEL_SV_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COASTER_DEL_SV_PDU::BCCMD_COASTER_DEL_SV_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COASTER_DEL_SV_PDU::get_sv_pairs1(void) const
{
    return get_uint16(BCCMD_COASTER_DEL_SV_sv_pairs1) ;
}

void BCCMD_COASTER_DEL_SV_PDU::set_sv_pairs1(uint16 val)
{
    set_uint16(BCCMD_COASTER_DEL_SV_sv_pairs1,val) ;
}

uint16 BCCMD_COASTER_DEL_SV_PDU::get_sv_pairs2(void) const
{
    return get_uint16(BCCMD_COASTER_DEL_SV_sv_pairs2) ;
}

void BCCMD_COASTER_DEL_SV_PDU::set_sv_pairs2(uint16 val)
{
    set_uint16(BCCMD_COASTER_DEL_SV_sv_pairs2,val) ;
}

uint16 BCCMD_COASTER_DEL_SV_PDU::get_sv_pairs3(void) const
{
    return get_uint16(BCCMD_COASTER_DEL_SV_sv_pairs3) ;
}

void BCCMD_COASTER_DEL_SV_PDU::set_sv_pairs3(uint16 val)
{
    set_uint16(BCCMD_COASTER_DEL_SV_sv_pairs3,val) ;
}

uint16 BCCMD_COASTER_DEL_SV_PDU::get_sv_pairs4(void) const
{
    return get_uint16(BCCMD_COASTER_DEL_SV_sv_pairs4) ;
}

void BCCMD_COASTER_DEL_SV_PDU::set_sv_pairs4(uint16 val)
{
    set_uint16(BCCMD_COASTER_DEL_SV_sv_pairs4,val) ;
}

/*******************************************************************/


BCCMD_FIRMWARE_CHECK_MASK_PDU::BCCMD_FIRMWARE_CHECK_MASK_PDU()
: BCCMD_PDU( BCCMDVARID_FIRMWARE_CHECK_MASK , BCCMD_FIRMWARE_CHECK_MASK_pduSize )
{
}

BCCMD_FIRMWARE_CHECK_MASK_PDU::BCCMD_FIRMWARE_CHECK_MASK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FIRMWARE_CHECK_MASK_PDU::BCCMD_FIRMWARE_CHECK_MASK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FIRMWARE_CHECK_MASK_PDU::BCCMD_FIRMWARE_CHECK_MASK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_FIRMWARE_CHECK_MASK_PDU::get_data(void) const
{
    return get_uint16(BCCMD_FIRMWARE_CHECK_MASK_data) ;
}

void BCCMD_FIRMWARE_CHECK_MASK_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_FIRMWARE_CHECK_MASK_data,val) ;
}

/*******************************************************************/


BCCMD_PRESERVE_VALID_PDU::BCCMD_PRESERVE_VALID_PDU()
: BCCMD_PDU( BCCMDVARID_PRESERVE_VALID , BCCMD_PRESERVE_VALID_pduSize )
{
}

BCCMD_PRESERVE_VALID_PDU::BCCMD_PRESERVE_VALID_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PRESERVE_VALID_PDU::BCCMD_PRESERVE_VALID_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PRESERVE_VALID_PDU::BCCMD_PRESERVE_VALID_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PRESERVE_VALID_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PRESERVE_VALID_data) ;
}

void BCCMD_PRESERVE_VALID_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PRESERVE_VALID_data,val) ;
}

/*******************************************************************/


BCCMD_CLKSW_CURRENT_CLOCKS_PDU::BCCMD_CLKSW_CURRENT_CLOCKS_PDU()
: BCCMD_PDU( BCCMDVARID_CLKSW_CURRENT_CLOCKS , BCCMD_CLKSW_CURRENT_CLOCKS_pduSize )
{
}

BCCMD_CLKSW_CURRENT_CLOCKS_PDU::BCCMD_CLKSW_CURRENT_CLOCKS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CLKSW_CURRENT_CLOCKS_PDU::BCCMD_CLKSW_CURRENT_CLOCKS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CLKSW_CURRENT_CLOCKS_PDU::BCCMD_CLKSW_CURRENT_CLOCKS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CLKSW_CURRENT_CLOCKS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_data) ;
}

void BCCMD_CLKSW_CURRENT_CLOCKS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CLKSW_CURRENT_CLOCKS_data,val) ;
}

/*******************************************************************/


BCCMD_PIO32_PDU::BCCMD_PIO32_PDU()
: BCCMD_PDU( BCCMDVARID_PIO32 , BCCMD_PIO32_pduSize )
{
}

BCCMD_PIO32_PDU::BCCMD_PIO32_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO32_PDU::BCCMD_PIO32_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO32_PDU::BCCMD_PIO32_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_PIO32_PDU::get_mask(void) const
{
    return get_uint32(BCCMD_PIO32_mask) ;
}

void BCCMD_PIO32_PDU::set_mask(uint32 val)
{
    set_uint32(BCCMD_PIO32_mask,val) ;
}

uint32 BCCMD_PIO32_PDU::get_bits(void) const
{
    return get_uint32(BCCMD_PIO32_bits) ;
}

void BCCMD_PIO32_PDU::set_bits(uint32 val)
{
    set_uint32(BCCMD_PIO32_bits,val) ;
}

uint32 BCCMD_PIO32_PDU::get_result(void) const
{
    return get_uint32(BCCMD_PIO32_result) ;
}

void BCCMD_PIO32_PDU::set_result(uint32 val)
{
    set_uint32(BCCMD_PIO32_result,val) ;
}

/*******************************************************************/


BCCMD_STREAM_CONNECT_PDU::BCCMD_STREAM_CONNECT_PDU()
: BCCMD_PDU( BCCMDVARID_STREAM_CONNECT , BCCMD_STREAM_CONNECT_pduSize )
{
}

BCCMD_STREAM_CONNECT_PDU::BCCMD_STREAM_CONNECT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STREAM_CONNECT_PDU::BCCMD_STREAM_CONNECT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STREAM_CONNECT_PDU::BCCMD_STREAM_CONNECT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STREAM_CONNECT_PDU::get_source_sid(void) const
{
    return get_uint16(BCCMD_STREAM_CONNECT_source_sid) ;
}

void BCCMD_STREAM_CONNECT_PDU::set_source_sid(uint16 val)
{
    set_uint16(BCCMD_STREAM_CONNECT_source_sid,val) ;
}

uint16 BCCMD_STREAM_CONNECT_PDU::get_sink_sid(void) const
{
    return get_uint16(BCCMD_STREAM_CONNECT_sink_sid) ;
}

void BCCMD_STREAM_CONNECT_PDU::set_sink_sid(uint16 val)
{
    set_uint16(BCCMD_STREAM_CONNECT_sink_sid,val) ;
}

/*******************************************************************/


BCCMD_HQ_SCRAPING_ENABLE_PDU::BCCMD_HQ_SCRAPING_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_HQ_SCRAPING_ENABLE , BCCMD_HQ_SCRAPING_ENABLE_pduSize )
{
}

BCCMD_HQ_SCRAPING_ENABLE_PDU::BCCMD_HQ_SCRAPING_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_HQ_SCRAPING_ENABLE_PDU::BCCMD_HQ_SCRAPING_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_HQ_SCRAPING_ENABLE_PDU::BCCMD_HQ_SCRAPING_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_HQ_SCRAPING_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_HQ_SCRAPING_ENABLE_data) ;
}

void BCCMD_HQ_SCRAPING_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_HQ_SCRAPING_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_CLOCK_MODULATION_CONFIG_PDU::BCCMD_CLOCK_MODULATION_CONFIG_PDU()
: BCCMD_PDU( BCCMDVARID_CLOCK_MODULATION_CONFIG , BCCMD_CLOCK_MODULATION_CONFIG_pduSize )
{
}

BCCMD_CLOCK_MODULATION_CONFIG_PDU::BCCMD_CLOCK_MODULATION_CONFIG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CLOCK_MODULATION_CONFIG_PDU::BCCMD_CLOCK_MODULATION_CONFIG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CLOCK_MODULATION_CONFIG_PDU::BCCMD_CLOCK_MODULATION_CONFIG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CLOCK_MODULATION_CONFIG_PDU::get_amount(void) const
{
    return get_uint16(BCCMD_CLOCK_MODULATION_CONFIG_amount) ;
}

void BCCMD_CLOCK_MODULATION_CONFIG_PDU::set_amount(uint16 val)
{
    set_uint16(BCCMD_CLOCK_MODULATION_CONFIG_amount,val) ;
}

uint16 BCCMD_CLOCK_MODULATION_CONFIG_PDU::get_rate(void) const
{
    return get_uint16(BCCMD_CLOCK_MODULATION_CONFIG_rate) ;
}

void BCCMD_CLOCK_MODULATION_CONFIG_PDU::set_rate(uint16 val)
{
    set_uint16(BCCMD_CLOCK_MODULATION_CONFIG_rate,val) ;
}

uint16 BCCMD_CLOCK_MODULATION_CONFIG_PDU::get_wibbling(void) const
{
    return get_uint16(BCCMD_CLOCK_MODULATION_CONFIG_wibbling) ;
}

void BCCMD_CLOCK_MODULATION_CONFIG_PDU::set_wibbling(uint16 val)
{
    set_uint16(BCCMD_CLOCK_MODULATION_CONFIG_wibbling,val) ;
}

/*******************************************************************/


BCCMD_GPS_STOP_PDU::BCCMD_GPS_STOP_PDU()
: BCCMD_PDU( BCCMDVARID_GPS_STOP , BCCMD_GPS_STOP_pduSize )
{
}

BCCMD_GPS_STOP_PDU::BCCMD_GPS_STOP_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_GPS_STOP_PDU::BCCMD_GPS_STOP_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_GPS_STOP_PDU::BCCMD_GPS_STOP_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_GPS_STOP_PDU::get_flags(void) const
{
    return get_uint16(BCCMD_GPS_STOP_flags) ;
}

void BCCMD_GPS_STOP_PDU::set_flags(uint16 val)
{
    set_uint16(BCCMD_GPS_STOP_flags,val) ;
}

/*******************************************************************/


BCCMD_CRYPTKEYLEN_PDU::BCCMD_CRYPTKEYLEN_PDU()
: BCCMD_PDU( BCCMDVARID_CRYPTKEYLEN , BCCMD_CRYPTKEYLEN_pduSize )
{
}

BCCMD_CRYPTKEYLEN_PDU::BCCMD_CRYPTKEYLEN_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CRYPTKEYLEN_PDU::BCCMD_CRYPTKEYLEN_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CRYPTKEYLEN_PDU::BCCMD_CRYPTKEYLEN_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CRYPTKEYLEN_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_CRYPTKEYLEN_hci_handle) ;
}

void BCCMD_CRYPTKEYLEN_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_CRYPTKEYLEN_hci_handle,val) ;
}

uint16 BCCMD_CRYPTKEYLEN_PDU::get_keylen(void) const
{
    return get_uint16(BCCMD_CRYPTKEYLEN_keylen) ;
}

void BCCMD_CRYPTKEYLEN_PDU::set_keylen(uint16 val)
{
    set_uint16(BCCMD_CRYPTKEYLEN_keylen,val) ;
}

/*******************************************************************/


BCCMD_PSCLRALLS_PDU::BCCMD_PSCLRALLS_PDU()
: BCCMD_PDU( BCCMDVARID_PSCLRALLS , BCCMD_PSCLRALLS_pduSize )
{
}

BCCMD_PSCLRALLS_PDU::BCCMD_PSCLRALLS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSCLRALLS_PDU::BCCMD_PSCLRALLS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSCLRALLS_PDU::BCCMD_PSCLRALLS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PSCLRALLS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PSCLRALLS_data) ;
}

void BCCMD_PSCLRALLS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PSCLRALLS_data,val) ;
}

/*******************************************************************/


BCCMD_PCM_SLOTS_PER_FRAME_PDU::BCCMD_PCM_SLOTS_PER_FRAME_PDU()
: BCCMD_PDU( BCCMDVARID_PCM_SLOTS_PER_FRAME , BCCMD_PCM_SLOTS_PER_FRAME_pduSize )
{
}

BCCMD_PCM_SLOTS_PER_FRAME_PDU::BCCMD_PCM_SLOTS_PER_FRAME_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PCM_SLOTS_PER_FRAME_PDU::BCCMD_PCM_SLOTS_PER_FRAME_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PCM_SLOTS_PER_FRAME_PDU::BCCMD_PCM_SLOTS_PER_FRAME_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PCM_SLOTS_PER_FRAME_PDU::get_pcm_interface(void) const
{
    return get_uint16(BCCMD_PCM_SLOTS_PER_FRAME_pcm_interface) ;
}

void BCCMD_PCM_SLOTS_PER_FRAME_PDU::set_pcm_interface(uint16 val)
{
    set_uint16(BCCMD_PCM_SLOTS_PER_FRAME_pcm_interface,val) ;
}

uint16 BCCMD_PCM_SLOTS_PER_FRAME_PDU::get_slots_per_frame(void) const
{
    return get_uint16(BCCMD_PCM_SLOTS_PER_FRAME_slots_per_frame) ;
}

void BCCMD_PCM_SLOTS_PER_FRAME_PDU::set_slots_per_frame(uint16 val)
{
    set_uint16(BCCMD_PCM_SLOTS_PER_FRAME_slots_per_frame,val) ;
}

/*******************************************************************/


BCCMD_WARM_RESET_PDU::BCCMD_WARM_RESET_PDU()
: BCCMD_PDU( BCCMDVARID_WARM_RESET , BCCMD_WARM_RESET_pduSize )
{
}

BCCMD_WARM_RESET_PDU::BCCMD_WARM_RESET_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_WARM_RESET_PDU::BCCMD_WARM_RESET_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_WARM_RESET_PDU::BCCMD_WARM_RESET_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_FASTPIPE_DESTROY_PDU::BCCMD_FASTPIPE_DESTROY_PDU()
: BCCMD_PDU( BCCMDVARID_FASTPIPE_DESTROY , BCCMD_FASTPIPE_DESTROY_pduSize )
{
}

BCCMD_FASTPIPE_DESTROY_PDU::BCCMD_FASTPIPE_DESTROY_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FASTPIPE_DESTROY_PDU::BCCMD_FASTPIPE_DESTROY_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FASTPIPE_DESTROY_PDU::BCCMD_FASTPIPE_DESTROY_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_FASTPIPE_DESTROY_PDU::get_pipe_id(void) const
{
    return get_uint16(BCCMD_FASTPIPE_DESTROY_pipe_id) ;
}

void BCCMD_FASTPIPE_DESTROY_PDU::set_pipe_id(uint16 val)
{
    set_uint16(BCCMD_FASTPIPE_DESTROY_pipe_id,val) ;
}

uint16 BCCMD_FASTPIPE_DESTROY_PDU::get_result(void) const
{
    return get_uint16(BCCMD_FASTPIPE_DESTROY_result) ;
}

void BCCMD_FASTPIPE_DESTROY_PDU::set_result(uint16 val)
{
    set_uint16(BCCMD_FASTPIPE_DESTROY_result,val) ;
}

/*******************************************************************/


BCCMD_SYNC_CLOCK_PDU::BCCMD_SYNC_CLOCK_PDU()
: BCCMD_PDU( BCCMDVARID_SYNC_CLOCK , BCCMD_SYNC_CLOCK_pduSize )
{
}

BCCMD_SYNC_CLOCK_PDU::BCCMD_SYNC_CLOCK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SYNC_CLOCK_PDU::BCCMD_SYNC_CLOCK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SYNC_CLOCK_PDU::BCCMD_SYNC_CLOCK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_BLE_RADIO_TEST_PDU::BCCMD_BLE_RADIO_TEST_PDU()
: BCCMD_PDU( BCCMDVARID_BLE_RADIO_TEST , BCCMD_BLE_RADIO_TEST_pduSize )
{
}

BCCMD_BLE_RADIO_TEST_PDU::BCCMD_BLE_RADIO_TEST_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BLE_RADIO_TEST_PDU::BCCMD_BLE_RADIO_TEST_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BLE_RADIO_TEST_PDU::BCCMD_BLE_RADIO_TEST_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BLE_RADIO_TEST_PDU::get_command(void) const
{
    return get_uint16(BCCMD_BLE_RADIO_TEST_command) ;
}

void BCCMD_BLE_RADIO_TEST_PDU::set_command(uint16 val)
{
    set_uint16(BCCMD_BLE_RADIO_TEST_command,val) ;
}

uint8 BCCMD_BLE_RADIO_TEST_PDU::get_channel(void) const
{
    return get_uint8(BCCMD_BLE_RADIO_TEST_channel) ;
}

void BCCMD_BLE_RADIO_TEST_PDU::set_channel(uint8 val)
{
    set_uint8(BCCMD_BLE_RADIO_TEST_channel,val) ;
}

uint8 BCCMD_BLE_RADIO_TEST_PDU::get_length(void) const
{
    return get_uint8(BCCMD_BLE_RADIO_TEST_length) ;
}

void BCCMD_BLE_RADIO_TEST_PDU::set_length(uint8 val)
{
    set_uint8(BCCMD_BLE_RADIO_TEST_length,val) ;
}

uint8 BCCMD_BLE_RADIO_TEST_PDU::get_payload(void) const
{
    return get_uint8(BCCMD_BLE_RADIO_TEST_payload) ;
}

void BCCMD_BLE_RADIO_TEST_PDU::set_payload(uint8 val)
{
    set_uint8(BCCMD_BLE_RADIO_TEST_payload,val) ;
}

/*******************************************************************/


BCCMD_PSNEXT_PDU::BCCMD_PSNEXT_PDU()
: BCCMD_PDU( BCCMDVARID_PSNEXT , BCCMD_PSNEXT_pduSize )
{
}

BCCMD_PSNEXT_PDU::BCCMD_PSNEXT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSNEXT_PDU::BCCMD_PSNEXT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSNEXT_PDU::BCCMD_PSNEXT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PSNEXT_PDU::get_id(void) const
{
    return get_uint16(BCCMD_PSNEXT_id) ;
}

void BCCMD_PSNEXT_PDU::set_id(uint16 val)
{
    set_uint16(BCCMD_PSNEXT_id,val) ;
}

uint16 BCCMD_PSNEXT_PDU::get_stores(void) const
{
    return get_uint16(BCCMD_PSNEXT_stores) ;
}

void BCCMD_PSNEXT_PDU::set_stores(uint16 val)
{
    set_uint16(BCCMD_PSNEXT_stores,val) ;
}

uint16 BCCMD_PSNEXT_PDU::get_nextid(void) const
{
    return get_uint16(BCCMD_PSNEXT_nextid) ;
}

void BCCMD_PSNEXT_PDU::set_nextid(uint16 val)
{
    set_uint16(BCCMD_PSNEXT_nextid,val) ;
}

/*******************************************************************/


BCCMD_ENABLE_TX_PDU::BCCMD_ENABLE_TX_PDU()
: BCCMD_PDU( BCCMDVARID_ENABLE_TX , BCCMD_ENABLE_TX_pduSize )
{
}

BCCMD_ENABLE_TX_PDU::BCCMD_ENABLE_TX_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ENABLE_TX_PDU::BCCMD_ENABLE_TX_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ENABLE_TX_PDU::BCCMD_ENABLE_TX_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_PSU_SMPS_ENABLE_PDU::BCCMD_PSU_SMPS_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_PSU_SMPS_ENABLE , BCCMD_PSU_SMPS_ENABLE_pduSize )
{
}

BCCMD_PSU_SMPS_ENABLE_PDU::BCCMD_PSU_SMPS_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PSU_SMPS_ENABLE_PDU::BCCMD_PSU_SMPS_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PSU_SMPS_ENABLE_PDU::BCCMD_PSU_SMPS_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PSU_SMPS_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PSU_SMPS_ENABLE_data) ;
}

void BCCMD_PSU_SMPS_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PSU_SMPS_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_UNLOCK_OTP_PDU::BCCMD_UNLOCK_OTP_PDU()
: BCCMD_PDU( BCCMDVARID_UNLOCK_OTP , BCCMD_UNLOCK_OTP_pduSize )
{
}

BCCMD_UNLOCK_OTP_PDU::BCCMD_UNLOCK_OTP_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_UNLOCK_OTP_PDU::BCCMD_UNLOCK_OTP_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_UNLOCK_OTP_PDU::BCCMD_UNLOCK_OTP_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_UNLOCK_OTP_PDU::get_data(void) const
{
    return get_uint16(BCCMD_UNLOCK_OTP_data) ;
}

void BCCMD_UNLOCK_OTP_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_UNLOCK_OTP_data,val) ;
}

/*******************************************************************/


BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU::BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU()
: BCCMD_PDU( BCCMDVARID_BABEL_SPI_GET_LINE_STATUS , BCCMD_BABEL_SPI_GET_LINE_STATUS_pduSize )
{
}

BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU::BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU::BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU::BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_data) ;
}

void BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BABEL_SPI_GET_LINE_STATUS_data,val) ;
}

/*******************************************************************/


BCCMD_GPS_CONFIG_PDU::BCCMD_GPS_CONFIG_PDU()
: BCCMD_PDU( BCCMDVARID_GPS_CONFIG , BCCMD_GPS_CONFIG_pduSize )
{
}

BCCMD_GPS_CONFIG_PDU::BCCMD_GPS_CONFIG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_GPS_CONFIG_PDU::BCCMD_GPS_CONFIG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_GPS_CONFIG_PDU::BCCMD_GPS_CONFIG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_BC3PSU_PDU::BCCMD_BC3PSU_PDU()
: BCCMD_PDU( BCCMDVARID_BC3PSU , BCCMD_BC3PSU_pduSize )
{
}

BCCMD_BC3PSU_PDU::BCCMD_BC3PSU_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BC3PSU_PDU::BCCMD_BC3PSU_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BC3PSU_PDU::BCCMD_BC3PSU_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BC3PSU_PDU::get_function(void) const
{
    return get_uint16(BCCMD_BC3PSU_function) ;
}

void BCCMD_BC3PSU_PDU::set_function(uint16 val)
{
    set_uint16(BCCMD_BC3PSU_function,val) ;
}

uint16 BCCMD_BC3PSU_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BC3PSU_data) ;
}

void BCCMD_BC3PSU_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BC3PSU_data,val) ;
}

/*******************************************************************/


BCCMD_DEEP_SLEEP_PERIOD_PDU::BCCMD_DEEP_SLEEP_PERIOD_PDU()
: BCCMD_PDU( BCCMDVARID_DEEP_SLEEP_PERIOD , BCCMD_DEEP_SLEEP_PERIOD_pduSize )
{
}

BCCMD_DEEP_SLEEP_PERIOD_PDU::BCCMD_DEEP_SLEEP_PERIOD_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_DEEP_SLEEP_PERIOD_PDU::BCCMD_DEEP_SLEEP_PERIOD_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_DEEP_SLEEP_PERIOD_PDU::BCCMD_DEEP_SLEEP_PERIOD_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_DEEP_SLEEP_PERIOD_PDU::get_data(void) const
{
    return get_uint32(BCCMD_DEEP_SLEEP_PERIOD_data) ;
}

void BCCMD_DEEP_SLEEP_PERIOD_PDU::set_data(uint32 val)
{
    set_uint32(BCCMD_DEEP_SLEEP_PERIOD_data,val) ;
}

/*******************************************************************/


BCCMD_HOPPING_ON_PDU::BCCMD_HOPPING_ON_PDU()
: BCCMD_PDU( BCCMDVARID_HOPPING_ON , BCCMD_HOPPING_ON_pduSize )
{
}

BCCMD_HOPPING_ON_PDU::BCCMD_HOPPING_ON_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_HOPPING_ON_PDU::BCCMD_HOPPING_ON_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_HOPPING_ON_PDU::BCCMD_HOPPING_ON_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_GSM_RX_MODE_PDU::BCCMD_GSM_RX_MODE_PDU()
: BCCMD_PDU( BCCMDVARID_GSM_RX_MODE , BCCMD_GSM_RX_MODE_pduSize )
{
}

BCCMD_GSM_RX_MODE_PDU::BCCMD_GSM_RX_MODE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_GSM_RX_MODE_PDU::BCCMD_GSM_RX_MODE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_GSM_RX_MODE_PDU::BCCMD_GSM_RX_MODE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_GSM_RX_MODE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_GSM_RX_MODE_data) ;
}

void BCCMD_GSM_RX_MODE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_GSM_RX_MODE_data,val) ;
}

/*******************************************************************/


BCCMD_PIO32_SET_PIN_FUNCTION_PDU::BCCMD_PIO32_SET_PIN_FUNCTION_PDU()
: BCCMD_PDU( BCCMDVARID_PIO32_SET_PIN_FUNCTION , BCCMD_PIO32_SET_PIN_FUNCTION_pduSize )
{
}

BCCMD_PIO32_SET_PIN_FUNCTION_PDU::BCCMD_PIO32_SET_PIN_FUNCTION_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO32_SET_PIN_FUNCTION_PDU::BCCMD_PIO32_SET_PIN_FUNCTION_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO32_SET_PIN_FUNCTION_PDU::BCCMD_PIO32_SET_PIN_FUNCTION_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PIO32_SET_PIN_FUNCTION_PDU::get_pin_number(void) const
{
    return get_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_pin_number) ;
}

void BCCMD_PIO32_SET_PIN_FUNCTION_PDU::set_pin_number(uint16 val)
{
    set_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_pin_number,val) ;
}

uint16 BCCMD_PIO32_SET_PIN_FUNCTION_PDU::get_function(void) const
{
    return get_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_function) ;
}

void BCCMD_PIO32_SET_PIN_FUNCTION_PDU::set_function(uint16 val)
{
    set_uint16(BCCMD_PIO32_SET_PIN_FUNCTION_function,val) ;
}

/*******************************************************************/


BCCMD_RADIOTEST_INTERFACE_VERSION_PDU::BCCMD_RADIOTEST_INTERFACE_VERSION_PDU()
: BCCMD_PDU( BCCMDVARID_RADIOTEST_INTERFACE_VERSION , BCCMD_RADIOTEST_INTERFACE_VERSION_pduSize )
{
}

BCCMD_RADIOTEST_INTERFACE_VERSION_PDU::BCCMD_RADIOTEST_INTERFACE_VERSION_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_RADIOTEST_INTERFACE_VERSION_PDU::BCCMD_RADIOTEST_INTERFACE_VERSION_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_RADIOTEST_INTERFACE_VERSION_PDU::BCCMD_RADIOTEST_INTERFACE_VERSION_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_RADIOTEST_INTERFACE_VERSION_PDU::get_data(void) const
{
    return get_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_data) ;
}

void BCCMD_RADIOTEST_INTERFACE_VERSION_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_RADIOTEST_INTERFACE_VERSION_data,val) ;
}

/*******************************************************************/


BCCMD_BOOTMODE_PDU::BCCMD_BOOTMODE_PDU()
: BCCMD_PDU( BCCMDVARID_BOOTMODE , BCCMD_BOOTMODE_pduSize )
{
}

BCCMD_BOOTMODE_PDU::BCCMD_BOOTMODE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BOOTMODE_PDU::BCCMD_BOOTMODE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BOOTMODE_PDU::BCCMD_BOOTMODE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BOOTMODE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BOOTMODE_data) ;
}

void BCCMD_BOOTMODE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BOOTMODE_data,val) ;
}

/*******************************************************************/


BCCMD_DEFRAG_RESET_PDU::BCCMD_DEFRAG_RESET_PDU()
: BCCMD_PDU( BCCMDVARID_DEFRAG_RESET , BCCMD_DEFRAG_RESET_pduSize )
{
}

BCCMD_DEFRAG_RESET_PDU::BCCMD_DEFRAG_RESET_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_DEFRAG_RESET_PDU::BCCMD_DEFRAG_RESET_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_DEFRAG_RESET_PDU::BCCMD_DEFRAG_RESET_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_CANCEL_PAGE_PDU::BCCMD_CANCEL_PAGE_PDU()
: BCCMD_PDU( BCCMDVARID_CANCEL_PAGE , BCCMD_CANCEL_PAGE_pduSize )
{
}

BCCMD_CANCEL_PAGE_PDU::BCCMD_CANCEL_PAGE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CANCEL_PAGE_PDU::BCCMD_CANCEL_PAGE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CANCEL_PAGE_PDU::BCCMD_CANCEL_PAGE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_MAP_SCO_AUDIO_PDU::BCCMD_MAP_SCO_AUDIO_PDU()
: BCCMD_PDU( BCCMDVARID_MAP_SCO_AUDIO , BCCMD_MAP_SCO_AUDIO_pduSize )
{
}

BCCMD_MAP_SCO_AUDIO_PDU::BCCMD_MAP_SCO_AUDIO_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_MAP_SCO_AUDIO_PDU::BCCMD_MAP_SCO_AUDIO_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_MAP_SCO_AUDIO_PDU::BCCMD_MAP_SCO_AUDIO_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_MAP_SCO_AUDIO_PDU::get_source_sid(void) const
{
    return get_uint16(BCCMD_MAP_SCO_AUDIO_source_sid) ;
}

void BCCMD_MAP_SCO_AUDIO_PDU::set_source_sid(uint16 val)
{
    set_uint16(BCCMD_MAP_SCO_AUDIO_source_sid,val) ;
}

uint16 BCCMD_MAP_SCO_AUDIO_PDU::get_sink_sid(void) const
{
    return get_uint16(BCCMD_MAP_SCO_AUDIO_sink_sid) ;
}

void BCCMD_MAP_SCO_AUDIO_PDU::set_sink_sid(uint16 val)
{
    set_uint16(BCCMD_MAP_SCO_AUDIO_sink_sid,val) ;
}

/*******************************************************************/


BCCMD_NO_VARIABLE_PDU::BCCMD_NO_VARIABLE_PDU()
: BCCMD_PDU( BCCMDVARID_NO_VARIABLE , BCCMD_NO_VARIABLE_pduSize )
{
}

BCCMD_NO_VARIABLE_PDU::BCCMD_NO_VARIABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_NO_VARIABLE_PDU::BCCMD_NO_VARIABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_NO_VARIABLE_PDU::BCCMD_NO_VARIABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_L2CAP_CRC_PDU::BCCMD_L2CAP_CRC_PDU()
: BCCMD_PDU( BCCMDVARID_L2CAP_CRC , BCCMD_L2CAP_CRC_pduSize )
{
}

BCCMD_L2CAP_CRC_PDU::BCCMD_L2CAP_CRC_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_L2CAP_CRC_PDU::BCCMD_L2CAP_CRC_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_L2CAP_CRC_PDU::BCCMD_L2CAP_CRC_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_L2CAP_CRC_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_L2CAP_CRC_hci_handle) ;
}

void BCCMD_L2CAP_CRC_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_L2CAP_CRC_hci_handle,val) ;
}

bool BCCMD_L2CAP_CRC_PDU::get_tx_cid(void) const
{
    return get_bool(BCCMD_L2CAP_CRC_tx_cid) ;
}

void BCCMD_L2CAP_CRC_PDU::set_tx_cid(bool val)
{
    set_bool(BCCMD_L2CAP_CRC_tx_cid,val) ;
}

uint16 BCCMD_L2CAP_CRC_PDU::get_cid(void) const
{
    return get_uint16(BCCMD_L2CAP_CRC_cid) ;
}

void BCCMD_L2CAP_CRC_PDU::set_cid(uint16 val)
{
    set_uint16(BCCMD_L2CAP_CRC_cid,val) ;
}

bool BCCMD_L2CAP_CRC_PDU::get_enable(void) const
{
    return get_bool(BCCMD_L2CAP_CRC_enable) ;
}

void BCCMD_L2CAP_CRC_PDU::set_enable(bool val)
{
    set_bool(BCCMD_L2CAP_CRC_enable,val) ;
}

/*******************************************************************/


BCCMD_ADC_READ_PDU::BCCMD_ADC_READ_PDU()
: BCCMD_PDU( BCCMDVARID_ADC_READ , BCCMD_ADC_READ_pduSize )
{
}

BCCMD_ADC_READ_PDU::BCCMD_ADC_READ_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC_READ_PDU::BCCMD_ADC_READ_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC_READ_PDU::BCCMD_ADC_READ_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC_READ_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC_READ_data) ;
}

void BCCMD_ADC_READ_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC_READ_data,val) ;
}

/*******************************************************************/


BCCMD_AUX_DAC_PDU::BCCMD_AUX_DAC_PDU()
: BCCMD_PDU( BCCMDVARID_AUX_DAC , BCCMD_AUX_DAC_pduSize )
{
}

BCCMD_AUX_DAC_PDU::BCCMD_AUX_DAC_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_AUX_DAC_PDU::BCCMD_AUX_DAC_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_AUX_DAC_PDU::BCCMD_AUX_DAC_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_AUX_DAC_PDU::get_data(void) const
{
    return get_uint16(BCCMD_AUX_DAC_data) ;
}

void BCCMD_AUX_DAC_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_AUX_DAC_data,val) ;
}

/*******************************************************************/


BCCMD_PROVOKE_DELAYED_PANIC_PDU::BCCMD_PROVOKE_DELAYED_PANIC_PDU()
: BCCMD_PDU( BCCMDVARID_PROVOKE_DELAYED_PANIC , BCCMD_PROVOKE_DELAYED_PANIC_pduSize )
{
}

BCCMD_PROVOKE_DELAYED_PANIC_PDU::BCCMD_PROVOKE_DELAYED_PANIC_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PROVOKE_DELAYED_PANIC_PDU::BCCMD_PROVOKE_DELAYED_PANIC_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PROVOKE_DELAYED_PANIC_PDU::BCCMD_PROVOKE_DELAYED_PANIC_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PROVOKE_DELAYED_PANIC_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PROVOKE_DELAYED_PANIC_data) ;
}

void BCCMD_PROVOKE_DELAYED_PANIC_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PROVOKE_DELAYED_PANIC_data,val) ;
}

/*******************************************************************/


BCCMD_BABEL_SPI_STOP_PDU::BCCMD_BABEL_SPI_STOP_PDU()
: BCCMD_PDU( BCCMDVARID_BABEL_SPI_STOP , BCCMD_BABEL_SPI_STOP_pduSize )
{
}

BCCMD_BABEL_SPI_STOP_PDU::BCCMD_BABEL_SPI_STOP_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BABEL_SPI_STOP_PDU::BCCMD_BABEL_SPI_STOP_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BABEL_SPI_STOP_PDU::BCCMD_BABEL_SPI_STOP_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU::BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU()
: BCCMD_PDU( BCCMDVARID_SPI_LOCK_STAY_LOCKED_KEY , BCCMD_SPI_LOCK_STAY_LOCKED_KEY_pduSize )
{
}

BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU::BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU::BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU::BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU::get_data(void) const
{
    return get_uint32(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_data) ;
}

void BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU::set_data(uint32 val)
{
    set_uint32(BCCMD_SPI_LOCK_STAY_LOCKED_KEY_data,val) ;
}

/*******************************************************************/


BCCMD_INFORM_LINK_PROFILES_PDU::BCCMD_INFORM_LINK_PROFILES_PDU()
: BCCMD_PDU( BCCMDVARID_INFORM_LINK_PROFILES , BCCMD_INFORM_LINK_PROFILES_pduSize )
{
}

BCCMD_INFORM_LINK_PROFILES_PDU::BCCMD_INFORM_LINK_PROFILES_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_INFORM_LINK_PROFILES_PDU::BCCMD_INFORM_LINK_PROFILES_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_INFORM_LINK_PROFILES_PDU::BCCMD_INFORM_LINK_PROFILES_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_INFORM_LINK_PROFILES_PDU::get_handle(void) const
{
    return get_uint16(BCCMD_INFORM_LINK_PROFILES_handle) ;
}

void BCCMD_INFORM_LINK_PROFILES_PDU::set_handle(uint16 val)
{
    set_uint16(BCCMD_INFORM_LINK_PROFILES_handle,val) ;
}

uint16 BCCMD_INFORM_LINK_PROFILES_PDU::get_profiles(void) const
{
    return get_uint16(BCCMD_INFORM_LINK_PROFILES_profiles) ;
}

void BCCMD_INFORM_LINK_PROFILES_PDU::set_profiles(uint16 val)
{
    set_uint16(BCCMD_INFORM_LINK_PROFILES_profiles,val) ;
}

/*******************************************************************/


BCCMD_ADC10_PDU::BCCMD_ADC10_PDU()
: BCCMD_PDU( BCCMDVARID_ADC10 , BCCMD_ADC10_pduSize )
{
}

BCCMD_ADC10_PDU::BCCMD_ADC10_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC10_PDU::BCCMD_ADC10_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC10_PDU::BCCMD_ADC10_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC10_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC10_data) ;
}

void BCCMD_ADC10_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC10_data,val) ;
}

/*******************************************************************/


BCCMD_ADC11_PDU::BCCMD_ADC11_PDU()
: BCCMD_PDU( BCCMDVARID_ADC11 , BCCMD_ADC11_pduSize )
{
}

BCCMD_ADC11_PDU::BCCMD_ADC11_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC11_PDU::BCCMD_ADC11_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC11_PDU::BCCMD_ADC11_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC11_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC11_data) ;
}

void BCCMD_ADC11_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC11_data,val) ;
}

/*******************************************************************/


BCCMD_BABEL_SPI_DELAY_PDU::BCCMD_BABEL_SPI_DELAY_PDU()
: BCCMD_PDU( BCCMDVARID_BABEL_SPI_DELAY , BCCMD_BABEL_SPI_DELAY_pduSize )
{
}

BCCMD_BABEL_SPI_DELAY_PDU::BCCMD_BABEL_SPI_DELAY_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BABEL_SPI_DELAY_PDU::BCCMD_BABEL_SPI_DELAY_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BABEL_SPI_DELAY_PDU::BCCMD_BABEL_SPI_DELAY_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BABEL_SPI_DELAY_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BABEL_SPI_DELAY_data) ;
}

void BCCMD_BABEL_SPI_DELAY_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BABEL_SPI_DELAY_data,val) ;
}

/*******************************************************************/


BCCMD_ADC12_PDU::BCCMD_ADC12_PDU()
: BCCMD_PDU( BCCMDVARID_ADC12 , BCCMD_ADC12_pduSize )
{
}

BCCMD_ADC12_PDU::BCCMD_ADC12_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC12_PDU::BCCMD_ADC12_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC12_PDU::BCCMD_ADC12_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC12_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC12_data) ;
}

void BCCMD_ADC12_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC12_data,val) ;
}

/*******************************************************************/


BCCMD_EGPS_PULSE_STOP_PDU::BCCMD_EGPS_PULSE_STOP_PDU()
: BCCMD_PDU( BCCMDVARID_EGPS_PULSE_STOP , BCCMD_EGPS_PULSE_STOP_pduSize )
{
}

BCCMD_EGPS_PULSE_STOP_PDU::BCCMD_EGPS_PULSE_STOP_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_EGPS_PULSE_STOP_PDU::BCCMD_EGPS_PULSE_STOP_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_EGPS_PULSE_STOP_PDU::BCCMD_EGPS_PULSE_STOP_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint8 BCCMD_EGPS_PULSE_STOP_PDU::get_pio_stop(void) const
{
    return get_uint8(BCCMD_EGPS_PULSE_STOP_pio_stop) ;
}

void BCCMD_EGPS_PULSE_STOP_PDU::set_pio_stop(uint8 val)
{
    set_uint8(BCCMD_EGPS_PULSE_STOP_pio_stop,val) ;
}

uint16 BCCMD_EGPS_PULSE_STOP_PDU::get_flags(void) const
{
    return get_uint16(BCCMD_EGPS_PULSE_STOP_flags) ;
}

void BCCMD_EGPS_PULSE_STOP_PDU::set_flags(uint16 val)
{
    set_uint16(BCCMD_EGPS_PULSE_STOP_flags,val) ;
}

/*******************************************************************/


BCCMD_ADC13_PDU::BCCMD_ADC13_PDU()
: BCCMD_PDU( BCCMDVARID_ADC13 , BCCMD_ADC13_pduSize )
{
}

BCCMD_ADC13_PDU::BCCMD_ADC13_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC13_PDU::BCCMD_ADC13_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC13_PDU::BCCMD_ADC13_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC13_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC13_data) ;
}

void BCCMD_ADC13_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC13_data,val) ;
}

/*******************************************************************/


BCCMD_ADC14_PDU::BCCMD_ADC14_PDU()
: BCCMD_PDU( BCCMDVARID_ADC14 , BCCMD_ADC14_pduSize )
{
}

BCCMD_ADC14_PDU::BCCMD_ADC14_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC14_PDU::BCCMD_ADC14_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC14_PDU::BCCMD_ADC14_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC14_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC14_data) ;
}

void BCCMD_ADC14_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC14_data,val) ;
}

/*******************************************************************/


BCCMD_ADC15_PDU::BCCMD_ADC15_PDU()
: BCCMD_PDU( BCCMDVARID_ADC15 , BCCMD_ADC15_pduSize )
{
}

BCCMD_ADC15_PDU::BCCMD_ADC15_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ADC15_PDU::BCCMD_ADC15_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ADC15_PDU::BCCMD_ADC15_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ADC15_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ADC15_data) ;
}

void BCCMD_ADC15_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ADC15_data,val) ;
}

/*******************************************************************/


BCCMD_ENABLE_SCO_STREAMS_PDU::BCCMD_ENABLE_SCO_STREAMS_PDU()
: BCCMD_PDU( BCCMDVARID_ENABLE_SCO_STREAMS , BCCMD_ENABLE_SCO_STREAMS_pduSize )
{
}

BCCMD_ENABLE_SCO_STREAMS_PDU::BCCMD_ENABLE_SCO_STREAMS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ENABLE_SCO_STREAMS_PDU::BCCMD_ENABLE_SCO_STREAMS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ENABLE_SCO_STREAMS_PDU::BCCMD_ENABLE_SCO_STREAMS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ENABLE_SCO_STREAMS_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ENABLE_SCO_STREAMS_data) ;
}

void BCCMD_ENABLE_SCO_STREAMS_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ENABLE_SCO_STREAMS_data,val) ;
}

/*******************************************************************/


BCCMD_COASTER_START_PDU::BCCMD_COASTER_START_PDU()
: BCCMD_PDU( BCCMDVARID_COASTER_START , BCCMD_COASTER_START_pduSize )
{
}

BCCMD_COASTER_START_PDU::BCCMD_COASTER_START_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_COASTER_START_PDU::BCCMD_COASTER_START_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_COASTER_START_PDU::BCCMD_COASTER_START_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_COASTER_START_PDU::get_flags(void) const
{
    return get_uint16(BCCMD_COASTER_START_flags) ;
}

void BCCMD_COASTER_START_PDU::set_flags(uint16 val)
{
    set_uint16(BCCMD_COASTER_START_flags,val) ;
}

uint16 BCCMD_COASTER_START_PDU::get_delay(void) const
{
    return get_uint16(BCCMD_COASTER_START_delay) ;
}

void BCCMD_COASTER_START_PDU::set_delay(uint16 val)
{
    set_uint16(BCCMD_COASTER_START_delay,val) ;
}

/*******************************************************************/


BCCMD_LED0_ENABLE_PDU::BCCMD_LED0_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_LED0_ENABLE , BCCMD_LED0_ENABLE_pduSize )
{
}

BCCMD_LED0_ENABLE_PDU::BCCMD_LED0_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_LED0_ENABLE_PDU::BCCMD_LED0_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_LED0_ENABLE_PDU::BCCMD_LED0_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_LED0_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_LED0_ENABLE_data) ;
}

void BCCMD_LED0_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_LED0_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_ENABLE_AFH_PDU::BCCMD_ENABLE_AFH_PDU()
: BCCMD_PDU( BCCMDVARID_ENABLE_AFH , BCCMD_ENABLE_AFH_pduSize )
{
}

BCCMD_ENABLE_AFH_PDU::BCCMD_ENABLE_AFH_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ENABLE_AFH_PDU::BCCMD_ENABLE_AFH_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ENABLE_AFH_PDU::BCCMD_ENABLE_AFH_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ENABLE_AFH_PDU::get_hci_handle(void) const
{
    return get_uint16(BCCMD_ENABLE_AFH_hci_handle) ;
}

void BCCMD_ENABLE_AFH_PDU::set_hci_handle(uint16 val)
{
    set_uint16(BCCMD_ENABLE_AFH_hci_handle,val) ;
}

bool BCCMD_ENABLE_AFH_PDU::get_enable(void) const
{
    return get_bool(BCCMD_ENABLE_AFH_enable) ;
}

void BCCMD_ENABLE_AFH_PDU::set_enable(bool val)
{
    set_bool(BCCMD_ENABLE_AFH_enable,val) ;
}

/*******************************************************************/


BCCMD_CHIPREV_PDU::BCCMD_CHIPREV_PDU()
: BCCMD_PDU( BCCMDVARID_CHIPREV , BCCMD_CHIPREV_pduSize )
{
}

BCCMD_CHIPREV_PDU::BCCMD_CHIPREV_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHIPREV_PDU::BCCMD_CHIPREV_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHIPREV_PDU::BCCMD_CHIPREV_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHIPREV_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHIPREV_data) ;
}

void BCCMD_CHIPREV_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHIPREV_data,val) ;
}

/*******************************************************************/


BCCMD_PIO_PDU::BCCMD_PIO_PDU()
: BCCMD_PDU( BCCMDVARID_PIO , BCCMD_PIO_pduSize )
{
}

BCCMD_PIO_PDU::BCCMD_PIO_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO_PDU::BCCMD_PIO_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO_PDU::BCCMD_PIO_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PIO_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PIO_data) ;
}

void BCCMD_PIO_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PIO_data,val) ;
}

/*******************************************************************/


BCCMD_CHARGER_PSU_TRIM_PDU::BCCMD_CHARGER_PSU_TRIM_PDU()
: BCCMD_PDU( BCCMDVARID_CHARGER_PSU_TRIM , BCCMD_CHARGER_PSU_TRIM_pduSize )
{
}

BCCMD_CHARGER_PSU_TRIM_PDU::BCCMD_CHARGER_PSU_TRIM_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_CHARGER_PSU_TRIM_PDU::BCCMD_CHARGER_PSU_TRIM_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_CHARGER_PSU_TRIM_PDU::BCCMD_CHARGER_PSU_TRIM_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_CHARGER_PSU_TRIM_PDU::get_data(void) const
{
    return get_uint16(BCCMD_CHARGER_PSU_TRIM_data) ;
}

void BCCMD_CHARGER_PSU_TRIM_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_CHARGER_PSU_TRIM_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U03_PDU::BCCMD_STIBBONS_U03_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U03 , BCCMD_STIBBONS_U03_pduSize )
{
}

BCCMD_STIBBONS_U03_PDU::BCCMD_STIBBONS_U03_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U03_PDU::BCCMD_STIBBONS_U03_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U03_PDU::BCCMD_STIBBONS_U03_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U03_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U03_data) ;
}

void BCCMD_STIBBONS_U03_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U03_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U04_PDU::BCCMD_STIBBONS_U04_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U04 , BCCMD_STIBBONS_U04_pduSize )
{
}

BCCMD_STIBBONS_U04_PDU::BCCMD_STIBBONS_U04_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U04_PDU::BCCMD_STIBBONS_U04_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U04_PDU::BCCMD_STIBBONS_U04_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U04_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U04_data) ;
}

void BCCMD_STIBBONS_U04_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U04_data,val) ;
}

/*******************************************************************/


BCCMD_BUILDID_PDU::BCCMD_BUILDID_PDU()
: BCCMD_PDU( BCCMDVARID_BUILDID , BCCMD_BUILDID_pduSize )
{
}

BCCMD_BUILDID_PDU::BCCMD_BUILDID_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_BUILDID_PDU::BCCMD_BUILDID_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_BUILDID_PDU::BCCMD_BUILDID_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_BUILDID_PDU::get_data(void) const
{
    return get_uint16(BCCMD_BUILDID_data) ;
}

void BCCMD_BUILDID_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_BUILDID_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U05_PDU::BCCMD_STIBBONS_U05_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U05 , BCCMD_STIBBONS_U05_pduSize )
{
}

BCCMD_STIBBONS_U05_PDU::BCCMD_STIBBONS_U05_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U05_PDU::BCCMD_STIBBONS_U05_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U05_PDU::BCCMD_STIBBONS_U05_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U05_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U05_data) ;
}

void BCCMD_STIBBONS_U05_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U05_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U06_PDU::BCCMD_STIBBONS_U06_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U06 , BCCMD_STIBBONS_U06_pduSize )
{
}

BCCMD_STIBBONS_U06_PDU::BCCMD_STIBBONS_U06_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U06_PDU::BCCMD_STIBBONS_U06_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U06_PDU::BCCMD_STIBBONS_U06_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U06_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U06_data) ;
}

void BCCMD_STIBBONS_U06_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U06_data,val) ;
}

/*******************************************************************/


BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU::BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU()
: BCCMD_PDU( BCCMDVARID_REMOVE_DOWNLOADED_CAPABILITY , BCCMD_REMOVE_DOWNLOADED_CAPABILITY_pduSize )
{
}

BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU::BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU::BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU::BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU::get_data(void) const
{
    return get_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_data) ;
}

void BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_REMOVE_DOWNLOADED_CAPABILITY_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U07_PDU::BCCMD_STIBBONS_U07_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U07 , BCCMD_STIBBONS_U07_pduSize )
{
}

BCCMD_STIBBONS_U07_PDU::BCCMD_STIBBONS_U07_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U07_PDU::BCCMD_STIBBONS_U07_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U07_PDU::BCCMD_STIBBONS_U07_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U07_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U07_data) ;
}

void BCCMD_STIBBONS_U07_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U07_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U08_PDU::BCCMD_STIBBONS_U08_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U08 , BCCMD_STIBBONS_U08_pduSize )
{
}

BCCMD_STIBBONS_U08_PDU::BCCMD_STIBBONS_U08_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U08_PDU::BCCMD_STIBBONS_U08_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U08_PDU::BCCMD_STIBBONS_U08_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U08_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U08_data) ;
}

void BCCMD_STIBBONS_U08_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U08_data,val) ;
}

/*******************************************************************/


BCCMD_STIBBONS_U09_PDU::BCCMD_STIBBONS_U09_PDU()
: BCCMD_PDU( BCCMDVARID_STIBBONS_U09 , BCCMD_STIBBONS_U09_pduSize )
{
}

BCCMD_STIBBONS_U09_PDU::BCCMD_STIBBONS_U09_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_STIBBONS_U09_PDU::BCCMD_STIBBONS_U09_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_STIBBONS_U09_PDU::BCCMD_STIBBONS_U09_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_STIBBONS_U09_PDU::get_data(void) const
{
    return get_uint16(BCCMD_STIBBONS_U09_data) ;
}

void BCCMD_STIBBONS_U09_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_STIBBONS_U09_data,val) ;
}

/*******************************************************************/


BCCMD_PIO32_MAP_PINS_PDU::BCCMD_PIO32_MAP_PINS_PDU()
: BCCMD_PDU( BCCMDVARID_PIO32_MAP_PINS , BCCMD_PIO32_MAP_PINS_pduSize )
{
}

BCCMD_PIO32_MAP_PINS_PDU::BCCMD_PIO32_MAP_PINS_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PIO32_MAP_PINS_PDU::BCCMD_PIO32_MAP_PINS_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PIO32_MAP_PINS_PDU::BCCMD_PIO32_MAP_PINS_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint32 BCCMD_PIO32_MAP_PINS_PDU::get_mask(void) const
{
    return get_uint32(BCCMD_PIO32_MAP_PINS_mask) ;
}

void BCCMD_PIO32_MAP_PINS_PDU::set_mask(uint32 val)
{
    set_uint32(BCCMD_PIO32_MAP_PINS_mask,val) ;
}

uint32 BCCMD_PIO32_MAP_PINS_PDU::get_bits(void) const
{
    return get_uint32(BCCMD_PIO32_MAP_PINS_bits) ;
}

void BCCMD_PIO32_MAP_PINS_PDU::set_bits(uint32 val)
{
    set_uint32(BCCMD_PIO32_MAP_PINS_bits,val) ;
}

uint32 BCCMD_PIO32_MAP_PINS_PDU::get_result(void) const
{
    return get_uint32(BCCMD_PIO32_MAP_PINS_result) ;
}

void BCCMD_PIO32_MAP_PINS_PDU::set_result(uint32 val)
{
    set_uint32(BCCMD_PIO32_MAP_PINS_result,val) ;
}

/*******************************************************************/


BCCMD_PROVOKE_FAULT_PDU::BCCMD_PROVOKE_FAULT_PDU()
: BCCMD_PDU( BCCMDVARID_PROVOKE_FAULT , BCCMD_PROVOKE_FAULT_pduSize )
{
}

BCCMD_PROVOKE_FAULT_PDU::BCCMD_PROVOKE_FAULT_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PROVOKE_FAULT_PDU::BCCMD_PROVOKE_FAULT_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PROVOKE_FAULT_PDU::BCCMD_PROVOKE_FAULT_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PROVOKE_FAULT_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PROVOKE_FAULT_data) ;
}

void BCCMD_PROVOKE_FAULT_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PROVOKE_FAULT_data,val) ;
}

/*******************************************************************/


BCCMD_ANA_FTRIM_PDU::BCCMD_ANA_FTRIM_PDU()
: BCCMD_PDU( BCCMDVARID_ANA_FTRIM , BCCMD_ANA_FTRIM_pduSize )
{
}

BCCMD_ANA_FTRIM_PDU::BCCMD_ANA_FTRIM_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_ANA_FTRIM_PDU::BCCMD_ANA_FTRIM_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_ANA_FTRIM_PDU::BCCMD_ANA_FTRIM_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_ANA_FTRIM_PDU::get_data(void) const
{
    return get_uint16(BCCMD_ANA_FTRIM_data) ;
}

void BCCMD_ANA_FTRIM_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_ANA_FTRIM_data,val) ;
}

/*******************************************************************/


BCCMD_FIRMWARE_CHECK_PDU::BCCMD_FIRMWARE_CHECK_PDU()
: BCCMD_PDU( BCCMDVARID_FIRMWARE_CHECK , BCCMD_FIRMWARE_CHECK_pduSize )
{
}

BCCMD_FIRMWARE_CHECK_PDU::BCCMD_FIRMWARE_CHECK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FIRMWARE_CHECK_PDU::BCCMD_FIRMWARE_CHECK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FIRMWARE_CHECK_PDU::BCCMD_FIRMWARE_CHECK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_FIRMWARE_CHECK_PDU::get_data(void) const
{
    return get_uint16(BCCMD_FIRMWARE_CHECK_data) ;
}

void BCCMD_FIRMWARE_CHECK_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_FIRMWARE_CHECK_data,val) ;
}

/*******************************************************************/


BCCMD_INIT_BT_STACK_PDU::BCCMD_INIT_BT_STACK_PDU()
: BCCMD_PDU( BCCMDVARID_INIT_BT_STACK , BCCMD_INIT_BT_STACK_pduSize )
{
}

BCCMD_INIT_BT_STACK_PDU::BCCMD_INIT_BT_STACK_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_INIT_BT_STACK_PDU::BCCMD_INIT_BT_STACK_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_INIT_BT_STACK_PDU::BCCMD_INIT_BT_STACK_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_MAXCRYPTKEYLEN_PDU::BCCMD_MAXCRYPTKEYLEN_PDU()
: BCCMD_PDU( BCCMDVARID_MAXCRYPTKEYLEN , BCCMD_MAXCRYPTKEYLEN_pduSize )
{
}

BCCMD_MAXCRYPTKEYLEN_PDU::BCCMD_MAXCRYPTKEYLEN_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_MAXCRYPTKEYLEN_PDU::BCCMD_MAXCRYPTKEYLEN_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_MAXCRYPTKEYLEN_PDU::BCCMD_MAXCRYPTKEYLEN_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_MAXCRYPTKEYLEN_PDU::get_data(void) const
{
    return get_uint16(BCCMD_MAXCRYPTKEYLEN_data) ;
}

void BCCMD_MAXCRYPTKEYLEN_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_MAXCRYPTKEYLEN_data,val) ;
}

/*******************************************************************/


BCCMD_GPS_DSP_ENABLE_PDU::BCCMD_GPS_DSP_ENABLE_PDU()
: BCCMD_PDU( BCCMDVARID_GPS_DSP_ENABLE , BCCMD_GPS_DSP_ENABLE_pduSize )
{
}

BCCMD_GPS_DSP_ENABLE_PDU::BCCMD_GPS_DSP_ENABLE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_GPS_DSP_ENABLE_PDU::BCCMD_GPS_DSP_ENABLE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_GPS_DSP_ENABLE_PDU::BCCMD_GPS_DSP_ENABLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_GPS_DSP_ENABLE_PDU::get_data(void) const
{
    return get_uint16(BCCMD_GPS_DSP_ENABLE_data) ;
}

void BCCMD_GPS_DSP_ENABLE_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_GPS_DSP_ENABLE_data,val) ;
}

/*******************************************************************/


BCCMD_KALEXTADDRDEBUG_PDU::BCCMD_KALEXTADDRDEBUG_PDU()
: BCCMD_PDU( BCCMDVARID_KALEXTADDRDEBUG , BCCMD_KALEXTADDRDEBUG_pduSize )
{
}

BCCMD_KALEXTADDRDEBUG_PDU::BCCMD_KALEXTADDRDEBUG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_KALEXTADDRDEBUG_PDU::BCCMD_KALEXTADDRDEBUG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_KALEXTADDRDEBUG_PDU::BCCMD_KALEXTADDRDEBUG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_KALEXTADDRDEBUG_PDU::get_function(void) const
{
    return get_uint16(BCCMD_KALEXTADDRDEBUG_function) ;
}

void BCCMD_KALEXTADDRDEBUG_PDU::set_function(uint16 val)
{
    set_uint16(BCCMD_KALEXTADDRDEBUG_function,val) ;
}

/*******************************************************************/


BCCMD_PANIC_ARG_PDU::BCCMD_PANIC_ARG_PDU()
: BCCMD_PDU( BCCMDVARID_PANIC_ARG , BCCMD_PANIC_ARG_pduSize )
{
}

BCCMD_PANIC_ARG_PDU::BCCMD_PANIC_ARG_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_PANIC_ARG_PDU::BCCMD_PANIC_ARG_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_PANIC_ARG_PDU::BCCMD_PANIC_ARG_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

uint16 BCCMD_PANIC_ARG_PDU::get_data(void) const
{
    return get_uint16(BCCMD_PANIC_ARG_data) ;
}

void BCCMD_PANIC_ARG_PDU::set_data(uint16 val)
{
    set_uint16(BCCMD_PANIC_ARG_data,val) ;
}

/*******************************************************************/


BCCMD_DISABLE_TX_PDU::BCCMD_DISABLE_TX_PDU()
: BCCMD_PDU( BCCMDVARID_DISABLE_TX , BCCMD_DISABLE_TX_pduSize )
{
}

BCCMD_DISABLE_TX_PDU::BCCMD_DISABLE_TX_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_DISABLE_TX_PDU::BCCMD_DISABLE_TX_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_DISABLE_TX_PDU::BCCMD_DISABLE_TX_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

/*******************************************************************/


BCCMD_FASTPIPE_RESIZE_PDU::BCCMD_FASTPIPE_RESIZE_PDU()
: BCCMD_PDU( BCCMDVARID_FASTPIPE_RESIZE , BCCMD_FASTPIPE_RESIZE_pduSize )
{
}

BCCMD_FASTPIPE_RESIZE_PDU::BCCMD_FASTPIPE_RESIZE_PDU( uint16 varid )
: BCCMD_PDU( varid )
{
}

BCCMD_FASTPIPE_RESIZE_PDU::BCCMD_FASTPIPE_RESIZE_PDU( const PDU& pdu )
: BCCMD_PDU(pdu)
{
}

BCCMD_FASTPIPE_RESIZE_PDU::BCCMD_FASTPIPE_RESIZE_PDU( const uint8* buffer , uint32 len )
: BCCMD_PDU( buffer , len )
{
}

int32 BCCMD_FASTPIPE_RESIZE_PDU::get_delta_controller(void) const
{
    return get_int32(BCCMD_FASTPIPE_RESIZE_delta_controller) ;
}

void BCCMD_FASTPIPE_RESIZE_PDU::set_delta_controller(int32 val)
{
    set_int32(BCCMD_FASTPIPE_RESIZE_delta_controller,val) ;
}

uint32 BCCMD_FASTPIPE_RESIZE_PDU::get_limit_controller(void) const
{
    return get_uint32(BCCMD_FASTPIPE_RESIZE_limit_controller) ;
}

void BCCMD_FASTPIPE_RESIZE_PDU::set_limit_controller(uint32 val)
{
    set_uint32(BCCMD_FASTPIPE_RESIZE_limit_controller,val) ;
}

uint16 BCCMD_FASTPIPE_RESIZE_PDU::get_result(void) const
{
    return get_uint16(BCCMD_FASTPIPE_RESIZE_result) ;
}

void BCCMD_FASTPIPE_RESIZE_PDU::set_result(uint16 val)
{
    set_uint16(BCCMD_FASTPIPE_RESIZE_result,val) ;
}

/*******************************************************************/


///////////////////////////////////////////////////////////////////////////////
//               Auto generated from bccmd_encode_pa.tpl                  //
///////////////////////////////////////////////////////////////////////////////

#include <assert.h>
#define ASSERT assert
#include "hcipacker/legacy.h"

// declare the radiotest version.
void updateRADIOTEST_PDU ( BCCMD_RADIOTEST_PDU& pdu , const uint32 * parameters );

BCCMD_PDU HCIPDUFactory::createBCCMD_PDU ( const uint32 * parameters )
{
    BCCMD_PDU pdu( null_pdu );
    if ( parameters && parameters[0] > 3 )
    {
        uint32 index = 3;
        switch ( parameters[3] )
        {
        case BCCMDVARID_MAP_SCO_WBS:
            {
            BCCMD_MAP_SCO_WBS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_source_sid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sink_sid ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BLE_ADV_FILT_CLEAR:
            {
            BCCMD_BLE_ADV_FILT_CLEAR_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U10:
            {
            BCCMD_STIBBONS_U10_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U11:
            {
            BCCMD_STIBBONS_U11_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U12:
            {
            BCCMD_STIBBONS_U12_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U13:
            {
            BCCMD_STIBBONS_U13_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U14:
            {
            BCCMD_STIBBONS_U14_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U15:
            {
            BCCMD_STIBBONS_U15_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U16:
            {
            BCCMD_STIBBONS_U16_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PCM_RATE_AND_ROUTE:
            {
            BCCMD_PCM_RATE_AND_ROUTE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_port_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sync_port ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_io_type ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_read_rate ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_write_rate ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_VM_STATUS:
            {
            BCCMD_VM_STATUS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_vmstatus ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_exit_code ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COEX_ENABLE:
            {
            BCCMD_COEX_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_MIC_BIAS_CTRL:
            {
            BCCMD_MIC_BIAS_CTRL_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mic_bias_enable ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_mic_bias_current ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_mic_bias_voltage ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_enable_mic_bias_low_power_mode ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BABEL_SPI_RESET_AND_GO:
            {
            BCCMD_BABEL_SPI_RESET_AND_GO_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSCLR:
            {
            BCCMD_PSCLR_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RDF_BLE_ADVERTISING:
            {
            BCCMD_RDF_BLE_ADVERTISING_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mode ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_adv_interval ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_adv_type ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_addr_type ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_channels ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_data_len ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_anti_whiten_begin ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_anti_whiten_end ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint16 lLen = prim.get_data_len();
                uint8 *lData = new uint8[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for (; index < endex && index < parameters[0] ; ++index )
                    lData[index-startdex] = (uint8)parameters[index];
                prim.set_data ( lData, lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_AFH_CHANNEL_RELEASE_TIME:
            {
            BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CONFIG_UART:
            {
            BCCMD_CONFIG_UART_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHARGER_SET_TRIM_NOW:
            {
            BCCMD_CHARGER_SET_TRIM_NOW_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHARGER_DISABLE:
            {
            BCCMD_CHARGER_DISABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BUILDID_LOADER:
            {
            BCCMD_BUILDID_LOADER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_EXT_CLOCK_PERIOD:
            {
            BCCMD_EXT_CLOCK_PERIOD_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FMTX_REG:
            {
            BCCMD_FMTX_REG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_fmtx_register ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RDF_BLE_PACKET_MATCH:
            {
            BCCMD_RDF_BLE_PACKET_MATCH_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_type ( (uint16) parameters[index] );
            if ( parameters )
            {
                uint16 lTplate[3];
                uint32 startdex = ++index;
                uint32 endex = index + 3;
                for (; index < endex && index < parameters[0] ; ++index )
                    lTplate[index-startdex] = (uint16)parameters[index];
                prim.set_tplate ( lTplate, 3 );
            }
            if ( parameters )
            {
                uint16 lMatch[3];
                uint32 startdex = ++index;
                uint32 endex = index + 3;
                for (; index < endex && index < parameters[0] ; ++index )
                    lMatch[index-startdex] = (uint16)parameters[index];
                prim.set_match ( lMatch, 3 );
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADCRES:
            {
            BCCMD_ADCRES_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_channel ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_valid ( (bool) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_VM_DEBUG:
            {
            BCCMD_VM_DEBUG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_function ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RESET_OPERATOR:
            {
            BCCMD_RESET_OPERATOR_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_count ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_count();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                lMem[index-startdex] = (uint16) parameters[index];
                prim.set_list ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO_PROTECT_MASK:
            {
            BCCMD_PIO_PROTECT_MASK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SCATTERNET_OVERRIDE_SCO:
            {
            BCCMD_SCATTERNET_OVERRIDE_SCO_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_TRANSACTION_COMPLETE:
            {
            BCCMD_STREAM_TRANSACTION_COMPLETE_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_GSM_RX_ARFCN:
            {
            BCCMD_GSM_RX_ARFCN_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PS_FACTORY_SET:
            {
            BCCMD_PS_FACTORY_SET_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_SPI_LOCK_INITIATE_LOCK:
            {
            BCCMD_SPI_LOCK_INITIATE_LOCK_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO_DIRECTION_MASK:
            {
            BCCMD_PIO_DIRECTION_MASK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_AUX_DAC_ENABLE:
            {
            BCCMD_AUX_DAC_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHIPANAVER:
            {
            BCCMD_CHIPANAVER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ACTIVATE_BT_STACK:
            {
            BCCMD_ACTIVATE_BT_STACK_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSCLRALL:
            {
            BCCMD_PSCLRALL_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_BLE_T_IFS:
            {
            BCCMD_BLE_T_IFS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FM_AUDIO_ROUTING:
            {
            BCCMD_FM_AUDIO_ROUTING_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FASTPIPE_ENABLE:
            {
            BCCMD_FASTPIPE_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_limit_host ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COEX_SYNC_PERIOD:
            {
            BCCMD_COEX_SYNC_PERIOD_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PICONET_INSTANT:
            {
            BCCMD_PICONET_INSTANT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_h_instant ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CAPSENSE_RT_PADS:
            {
            BCCMD_CAPSENSE_RT_PADS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pad_sel ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_num_pads_board ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_shield ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pad_cap0 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pad_cap1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pad_cap2 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pad_cap3 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pad_cap4 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pad_cap5 ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SNIFF_MULTISLOT_ENABLE:
            {
            BCCMD_SNIFF_MULTISLOT_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RECAL:
            {
            BCCMD_RECAL_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSU_HV_LINEAR_ENABLE:
            {
            BCCMD_PSU_HV_LINEAR_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_TRANSFORM_DISCONNECT:
            {
            BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FM_RDS:
            {
            BCCMD_FM_RDS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_rds_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                //  rds_len field gives lenght in "blocks" of 2 words.
                uint32 lLen = BCCMD_FM_RDS_PDU::words_per_block * prim.get_rds_len();
                uint16 * lData = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint16) parameters[index];
                prim.set_rds_data ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_FAULT_ARG:
            {
            BCCMD_FAULT_ARG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RECLAIM_RAM_RESERVE:
            {
            BCCMD_RECLAIM_RAM_RESERVE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_type ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_LC_FRAC_COUNT:
            {
            BCCMD_LC_FRAC_COUNT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_MAX_TX_POWER:
            {
            BCCMD_MAX_TX_POWER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COASTER_ADD_SV:
            {
            BCCMD_COASTER_ADD_SV_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_num_entries ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uSecs ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uSec80ths ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_code_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_code_shift ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_carrier_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_data_transition ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_satid_prn ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_dummy ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_uSecs ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_uSec80ths ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_code_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_code_shift ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_carrier_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_data_transition ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_satid_prn ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_dummy ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_uSecs ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_uSec80ths ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_code_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_code_shift ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_carrier_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_data_transition ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_satid_prn ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_dummy ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_uSecs ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_uSec80ths ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_code_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_code_shift ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_carrier_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_data_transition ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_satid_prn ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_DEEP_SLEEP_TIME:
            {
            BCCMD_DEEP_SLEEP_TIME_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BLE_WHITELIST_FREE_SPACE:
            {
            BCCMD_BLE_WHITELIST_FREE_SPACE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_MEMORY:
            {
            BCCMD_MEMORY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_base_addr ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_len();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lMem[index-startdex] = (uint16) parameters[index];
                prim.set_mem ( lMem , lLen );
                delete[] lMem;
            }
            
            pdu = prim;
            break;
            }
        case BCCMDVARID_BABEL_SPI_RESET_AND_STOP:
            {
            BCCMD_BABEL_SPI_RESET_AND_STOP_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_RDF_DATA_CAPTURE_ENABLE:
            {
            BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_modes ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_timer_delay ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_nsams ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_nap ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uap ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_lap ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CACHED_TEMPERATURE:
            {
            BCCMD_CACHED_TEMPERATURE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COEX_PRIORITY_PIOS_ON:
            {
            BCCMD_COEX_PRIORITY_PIOS_ON_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FM_REG:
            {
            BCCMD_FM_REG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_fm_register ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CODEC_INPUT_GAIN:
            {
            BCCMD_CODEC_INPUT_GAIN_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_gain_a ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_gain_b ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_GET_SINK:
            {
            BCCMD_STREAM_GET_SINK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_resource ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_opt1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_opt2 ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U01X:
            {
            BCCMD_STIBBONS_U01X_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BYPASS_UART:
            {
            BCCMD_BYPASS_UART_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_INQUIRY_PRIORITY:
            {
            BCCMD_INQUIRY_PRIORITY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO32_DIRECTION_MASK:
            {
            BCCMD_PIO32_DIRECTION_MASK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mask ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bits ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SIFLASH:
            {
            BCCMD_SIFLASH_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_command ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_word_address ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_data_length ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_data_length();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                lMem[index-startdex] = (uint16) parameters[index];
                prim.set_data ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_SPI_LOCK_CUSTOMER_KEY:
            {
            BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_cust_key1 ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_cust_key2 ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_cust_key3 ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_cust_key4 ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_HQ_SCRAPING_LEN:
            {
            BCCMD_HQ_SCRAPING_LEN_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_WLAN_COEX_PRIORITY:
            {
            BCCMD_WLAN_COEX_PRIORITY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_enable ( (bool) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_HQ_SCRAPING:
            {
            BCCMD_HQ_SCRAPING_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hq_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_hq_len();
                uint16 * lData = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint16) parameters[index];
                prim.set_hq_data ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_BC01_STATUS:
            {
            BCCMD_BC01_STATUS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHECK_ROM_CRC32:
            {
            BCCMD_CHECK_ROM_CRC32_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PS_FACTORY_RESTORE:
            {
            BCCMD_PS_FACTORY_RESTORE_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_SCO_PARAMETERS:
            {
            BCCMD_SCO_PARAMETERS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_sco_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_tsco ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_wesco ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_reserved_slots ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PCM_ATTENUATION:
            {
            BCCMD_PCM_ATTENUATION_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CODEC_OUTPUT_GAIN:
            {
            BCCMD_CODEC_OUTPUT_GAIN_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_gain_a ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_gain_b ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RDF_DATA_CAPTURE_DISABLE:
            {
            BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RSSI_ACL:
            {
            BCCMD_RSSI_ACL_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rssi ( (int16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PCM_CONFIG32:
            {
            BCCMD_PCM_CONFIG32_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pcm_if_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_config32 ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_INQUIRY_TX_POWER:
            {
            BCCMD_INQUIRY_TX_POWER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BLE_AROPE_CAPABILITIES:
            {
            BCCMD_BLE_AROPE_CAPABILITIES_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BLE_DEFAULT_TX_POWER:
            {
            BCCMD_BLE_DEFAULT_TX_POWER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_DEFAULT_TX_POWER:
            {
            BCCMD_DEFAULT_TX_POWER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_CLOSE_SINK:
            {
            BCCMD_STREAM_CLOSE_SINK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COLD_RESET:
            {
            BCCMD_COLD_RESET_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_MIC_BIAS_CONFIGURE:
            {
            BCCMD_MIC_BIAS_CONFIGURE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_instance ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_key_config ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHECK_ROM:
            {
            BCCMD_CHECK_ROM_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RAND:
            {
            BCCMD_RAND_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COLD_HALT:
            {
            BCCMD_COLD_HALT_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO32_PROTECT_MASK:
            {
            BCCMD_PIO32_PROTECT_MASK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mask ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bits ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_DSPMANAGER_DEBUG:
            {
            BCCMD_DSPMANAGER_DEBUG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_subsystem ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_arguments ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COASTER_STOP:
            {
            BCCMD_COASTER_STOP_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ALLOCATE_RAM_RESERVE:
            {
            BCCMD_ALLOCATE_RAM_RESERVE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_type ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_TRANSACTION_START:
            {
            BCCMD_STREAM_TRANSACTION_START_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_EGPS_PULSE_CONFIG:
            {
            BCCMD_EGPS_PULSE_CONFIG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pio ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PANIC_ON_FAULT:
            {
            BCCMD_PANIC_ON_FAULT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_GET_NEXT_BUILDDEF:
            {
            BCCMD_GET_NEXT_BUILDDEF_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_nextid ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SHA256_INIT:
            {
            BCCMD_SHA256_INIT_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_ENABLE_DUT_MODE:
            {
            BCCMD_ENABLE_DUT_MODE_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_BLE_ADV_FILT_ADD:
            {
            BCCMD_BLE_ADV_FILT_ADD_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_operation ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_ad_type ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_interval ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pattern_length ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_pattern_length();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lMem[index-startdex] = (uint16) parameters[index];
                prim.set_pattern ( lMem , lLen );
                delete[] lMem;
                }
            pdu = prim;
            break;
            }
        case BCCMDVARID_BLE_SCAN_BACKOFF:
            {
            BCCMD_BLE_SCAN_BACKOFF_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BT_CLOCK:
            {
            BCCMD_BT_CLOCK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SPI_BUFSIZE:
            {
            BCCMD_SPI_BUFSIZE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FMTX_TEXT:
            {
            BCCMD_FMTX_TEXT_PDU prim ;

                //Store the type of the message
                prim.set_text_type ( parameters[++index] ); 

                uint16 strLen,repLen,len,i;
                uint32 realStrLen, realRepLen;

                uint16 lMem[138];
                len = 0;

                strLen = (uint16) parameters[++index];
                realStrLen = parameters[++index];
                
				assert(realStrLen % 2 == 0);
                lMem[len++] = strLen & 0x00FF;
                for (i = 0 ; i < (realStrLen/2) ; i++ )
                {
                    lMem[len++] = (uint16) ((parameters[index+1] << 8) | parameters[index+2]);
                    index += 2;
                }

                repLen = (uint16) parameters[++index];
                realRepLen = parameters[++index];

				assert(realRepLen % 2 == 0);
                lMem[len++] = repLen & 0x00FF;
                for (i = 0 ; i < (realRepLen/2) ; i++ )
                {
                    lMem[len++] = (uint16) ((parameters[index+1] << 8) | parameters[index+2]);
                    index += 2;
                }

                //Now store the assembled string into the PDU
                prim.set_string ( lMem , len );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C01:
            {
            BCCMD_STIBBONS_C01_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C02:
            {
            BCCMD_STIBBONS_C02_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_PCM_SYNC_RATE:
            {
            BCCMD_PCM_SYNC_RATE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pcm_interface ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sync_rate ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C03:
            {
            BCCMD_STIBBONS_C03_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C04:
            {
            BCCMD_STIBBONS_C04_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C05:
            {
            BCCMD_STIBBONS_C05_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_LED2_ENABLE:
            {
            BCCMD_LED2_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHECK_RAM_RESULT:
            {
            BCCMD_CHECK_RAM_RESULT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C06:
            {
            BCCMD_STIBBONS_C06_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_EGPS_PULSE_OUTPUT_START:
            {
            BCCMD_EGPS_PULSE_OUTPUT_START_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pio ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_start_time ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_duration_time ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_repeat_time ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_start_time_fine ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_duration_time_fine ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_repeat_time_fine ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C07:
            {
            BCCMD_STIBBONS_C07_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C08:
            {
            BCCMD_STIBBONS_C08_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C09:
            {
            BCCMD_STIBBONS_C09_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHECK_RAM:
            {
            BCCMD_CHECK_RAM_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_GET_SOURCE:
            {
            BCCMD_STREAM_GET_SOURCE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_resource ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_opt1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_opt2 ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ROUTE_CLOCK:
            {
            BCCMD_ROUTE_CLOCK_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_BABEL_SPI_GO:
            {
            BCCMD_BABEL_SPI_GO_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_COASTER_SV_STATE:
            {
            BCCMD_COASTER_SV_STATE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_start_index_num_entries ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uSecs ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uSec80ths ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_code_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_code_shift ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_carrier_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_lock_status_bits ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_SNR ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_data_transition ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_satid_prn ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_dummy ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_uSecs ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_uSec80ths ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_code_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_code_shift ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_carrier_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_lock_status_bits ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_SNR ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_data_transition ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e1_satid_prn ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_dummy ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_uSecs ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_uSec80ths ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_code_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_code_shift ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_carrier_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_lock_status_bits ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_SNR ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_data_transition ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e2_satid_prn ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_dummy ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_uSecs ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_uSec80ths ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_code_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_code_shift ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_carrier_doppler ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_lock_status_bits ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_SNR ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_data_transition ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_e3_satid_prn ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RDF_BLE_SCAN_MODE:
            {
            BCCMD_RDF_BLE_SCAN_MODE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mode ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_samples ( (uint8) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RANDOM:
            {
            BCCMD_RANDOM_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_type ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
              // NOTHING TO WRITE TO PDU
            }

            pdu = prim;
            break;
            }
        case BCCMDVARID_PS_FACTORY_RESTORE_ALL:
            {
            BCCMD_PS_FACTORY_RESTORE_ALL_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_COEX_DUMP:
            {
            BCCMD_COEX_DUMP_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_scheme ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_options ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bt_priority ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_wlan_active ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bt_active ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bt_status ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_wlan_deny ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bt_periodic ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bt_inband ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uart_active ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uart_tx ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uart_rx ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_time_t1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_time_t2 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_btactive_lead ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_btstatus_lead ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table00 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table01 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table02 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table03 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table04 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table05 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table06 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table07 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table08 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table09 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table10 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table11 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table12 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table13 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table14 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table15 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table16 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table17 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table18 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table19 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table20 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table21 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table22 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table23 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table24 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table25 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table26 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table27 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table28 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table29 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table30 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table31 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_priority_table32 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug_enable ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug00 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug01 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug02 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug03 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug04 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug05 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug06 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug07 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug08 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug09 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug10 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug11 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug12 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug13 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug14 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_debug15 ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CLOCK_MODULATION_ENABLE:
            {
            BCCMD_CLOCK_MODULATION_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C10:
            {
            BCCMD_STIBBONS_C10_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_TRANSACTION_CANCEL:
            {
            BCCMD_STREAM_TRANSACTION_CANCEL_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C11:
            {
            BCCMD_STIBBONS_C11_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C12:
            {
            BCCMD_STIBBONS_C12_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_HOST_DECIDES_TIMING:
            {
            BCCMD_HOST_DECIDES_TIMING_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RADIOTEST:
            {
            BCCMD_RADIOTEST_PDU prim ;
            if ( ++index < parameters[0] )
            {
                prim.set_radiotest ( (uint16) parameters[index] );
                updateRADIOTEST_PDU ( prim , parameters );
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C13:
            {
            BCCMD_STIBBONS_C13_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C14:
            {
            BCCMD_STIBBONS_C14_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_VREF_CONSTANT:
            {
            BCCMD_VREF_CONSTANT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C15:
            {
            BCCMD_STIBBONS_C15_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_CLK_SKEW_COUNT:
            {
            BCCMD_CLK_SKEW_COUNT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_AWAY_TIME:
            {
            BCCMD_AWAY_TIME_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_time ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_C16:
            {
            BCCMD_STIBBONS_C16_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_WAIT_FOR_N_MS:
            {
            BCCMD_WAIT_FOR_N_MS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PCM_CLOCK_RATE:
            {
            BCCMD_PCM_CLOCK_RATE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pcm_interface ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_clock_rate ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_TESTB_AMUX:
            {
            BCCMD_TESTB_AMUX_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_GPS_START:
            {
            BCCMD_GPS_START_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_delay ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_ALIAS_SINK:
            {
            BCCMD_STREAM_ALIAS_SINK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_sink1_sid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sink2_sid ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_LIMIT_EDR_POWER:
            {
            BCCMD_LIMIT_EDR_POWER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_enable ( (bool) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_HOSTIO_ENABLE_DEBUG:
            {
            BCCMD_HOSTIO_ENABLE_DEBUG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_WARM_HALT:
            {
            BCCMD_WARM_HALT_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_CLOSE_SOURCE:
            {
            BCCMD_STREAM_CLOSE_SOURCE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BUILD_NAME:
            {
            BCCMD_BUILD_NAME_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_start ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = parameters[0] - index - 1;
                uint8 * lData = new uint8[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint8) 0;
                prim.set_bufmem ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_SINGLE_CHAN:
            {
            BCCMD_SINGLE_CHAN_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSCLRS:
            {
            BCCMD_PSCLRS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_stores ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_LED_CONFIG:
            {
            BCCMD_LED_CONFIG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_led ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_led_key ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_LOCK_ACL_PACKET_TYPE:
            {
            BCCMD_LOCK_ACL_PACKET_TYPE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_LC_RX_FRACS:
            {
            BCCMD_LC_RX_FRACS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_value_count ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_value_count();
                uint16 * lData = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint16) parameters[index];
                prim.set_rx_frac_vals ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_COMBO_DOT11_ESCO_RTX_PRIORITY:
            {
            BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_TESTA_AMUX:
            {
            BCCMD_TESTA_AMUX_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO32_STRONG_BIAS:
            {
            BCCMD_PIO32_STRONG_BIAS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mask ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bits ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PS_MEMORY_TYPE:
            {
            BCCMD_PS_MEMORY_TYPE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_stores ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_memorytype ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BABEL_SPI_RUN_STATE:
            {
            BCCMD_BABEL_SPI_RUN_STATE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSSIZE:
            {
            BCCMD_PSSIZE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_stores ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_KILL_VM_APPLICATION:
            {
            BCCMD_KILL_VM_APPLICATION_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_ANA_FTRIM_READWRITE:
            {
            BCCMD_ANA_FTRIM_READWRITE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ENABLE_DEV_CONNECT:
            {
            BCCMD_ENABLE_DEV_CONNECT_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_BER_THRESHOLD:
            {
            BCCMD_BER_THRESHOLD_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_ber_threshold ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_START_OPERATOR:
            {
            BCCMD_START_OPERATOR_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_count ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_count();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                lMem[index-startdex] = (uint16) parameters[index];
                prim.set_list ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_COEX_INT_TEST:
            {
            BCCMD_COEX_INT_TEST_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mode ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint8) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RDF_PT:
            {
            BCCMD_RDF_PT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_enable ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_antenna ( (uint8) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_EGPS_PULSE_INPUT_START:
            {
            BCCMD_EGPS_PULSE_INPUT_START_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pio ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_edge_mode ( (uint8) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RDF_PT_SELECT_ANTENNA:
            {
            BCCMD_RDF_PT_SELECT_ANTENNA_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PCM_LOW_JITTER:
            {
            BCCMD_PCM_LOW_JITTER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pcm_if_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_low_jitter ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SHA256_RES:
            {
            BCCMD_SHA256_RES_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_time ( (uint32) parameters[index] );
            if ( index+BCCMDPDU_SHA256_RES_HASH_SIZE < parameters[0] )
            {
                uint8 lHash[BCCMDPDU_SHA256_RES_HASH_SIZE];
                uint32 startdex = ++index;
                uint32 endex = index + BCCMDPDU_SHA256_RES_HASH_SIZE;
                for (; index < endex && index < parameters[0] ; ++index )
                    lHash[index-startdex] = (uint8)parameters[index];
                prim.set_hash ( lHash );
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHARGER_TRIMS:
            {
            BCCMD_CHARGER_TRIMS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_chgref_trim ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_hvref_trim ( (int16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rtrim ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_itrim ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_iext_trim ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_iterm_trim ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_vfast_trim ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_hyst_trim ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_KALSPIDEBUG_SETDEBUGMODE:
            {
            BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_PCM2_ATTENUATION:
            {
            BCCMD_PCM2_ATTENUATION_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SAVE_CONNECTION_EVENT_FILTERS:
            {
            BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_ESCOTEST:
            {
            BCCMD_ESCOTEST_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_function ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_E2_APP_SIZE:
            {
            BCCMD_E2_APP_SIZE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BUFFER:
            {
            BCCMD_BUFFER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_start ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_len();
                uint8 * lMem = new uint8[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lMem[index-startdex] = (uint8) parameters[index];
                prim.set_bufmem ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_CONFIGURE:
            {
            BCCMD_STREAM_CONFIGURE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_sid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_key_config ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_value ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC:
            {
            BCCMD_ADC_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSNEXT_ALL:
            {
            BCCMD_PSNEXT_ALL_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_nextid ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_SYNC_SID:
            {
            BCCMD_STREAM_SYNC_SID_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_sid1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sid2 ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_MAP_SCO_PCM:
            {
            BCCMD_MAP_SCO_PCM_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FASTPIPE_CREATE:
            {
            BCCMD_FASTPIPE_CREATE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pipe_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_overhead_host ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_capacity_rx_host ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_required_tx_controller ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_desired_tx_controller ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_required_rx_controller ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_desired_rx_controller ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_overhead_controller ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_capacity_tx_controller ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_capacity_rx_controller ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COASTER_INDICATIONS:
            {
            BCCMD_COASTER_INDICATIONS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_events ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_uu ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_optflags ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_LED1_ENABLE:
            {
            BCCMD_LED1_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ENABLE_COEX_MESSAGE_REPORTING:
            {
            BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SHA256_DATA:
            {
            BCCMD_SHA256_DATA_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_msg_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint16 lLen = prim.get_msg_len();
                uint8 * lMem = new uint8[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lMem[index-startdex] = (uint8) parameters[index];
                prim.set_msg ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_DIGITAL_AUDIO_CONFIG:
            {
            BCCMD_DIGITAL_AUDIO_CONFIG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pcm_if_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_options ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHIPVER:
            {
            BCCMD_CHIPVER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SPI_LOCK_STATUS:
            {
            BCCMD_SPI_LOCK_STATUS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC0:
            {
            BCCMD_ADC0_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ENABLE_MEDIUM_RATE:
            {
            BCCMD_ENABLE_MEDIUM_RATE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_enable ( (bool) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC1:
            {
            BCCMD_ADC1_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FMTX_SET_CDAC:
            {
            BCCMD_FMTX_SET_CDAC_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_DIGITAL_AUDIO_RATE:
            {
            BCCMD_DIGITAL_AUDIO_RATE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pcm_if_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_frequency ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_samp_size ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC2:
            {
            BCCMD_ADC2_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PROVOKE_PANIC:
            {
            BCCMD_PROVOKE_PANIC_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_GET_CLR_EVT:
            {
            BCCMD_GET_CLR_EVT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_evtcntid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_cnt ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_E2_DEVICE:
            {
            BCCMD_E2_DEVICE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_log2_bytes ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_addr_mask ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC3:
            {
            BCCMD_ADC3_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_INTERFACE_VERSION:
            {
            BCCMD_INTERFACE_VERSION_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC4:
            {
            BCCMD_ADC4_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC5:
            {
            BCCMD_ADC5_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC6:
            {
            BCCMD_ADC6_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC7:
            {
            BCCMD_ADC7_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC8:
            {
            BCCMD_ADC8_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC9:
            {
            BCCMD_ADC9_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_KALDEBUG:
            {
            BCCMD_KALDEBUG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_function ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHARGER_SUPPRESS_LED0:
            {
            BCCMD_CHARGER_SUPPRESS_LED0_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RDF_BLE_RAND_ADDR:
            {
            BCCMD_RDF_BLE_RAND_ADDR_PDU prim ;
            if ( ++index < parameters[0] )
            {
                uint8 *lData = new uint8[6];
                uint32 startdex = index;
                uint32 endex = index + 6;
                for (; index < endex && index < parameters[0] ; ++index )
                    lData[index-startdex] = (uint8)parameters[index];
                prim.set_addr ( lData, 6 );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_DESTROY_OPERATOR:
            {
            BCCMD_DESTROY_OPERATOR_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_count ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_count();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                lMem[index-startdex] = (uint16) parameters[index];
                prim.set_list ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO_STRONG_BIAS:
            {
            BCCMD_PIO_STRONG_BIAS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHARGER_STATUS:
            {
            BCCMD_CHARGER_STATUS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PREVIN_TUNNEL:
            {
            BCCMD_PREVIN_TUNNEL_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_message_num ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_length ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_message ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PS:
            {
            BCCMD_PS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_stores ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_len();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lMem[index-startdex] = (uint16) parameters[index];
                prim.set_psmem ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_CREATE_OPERATOR_C:
            {
            BCCMD_CREATE_OPERATOR_C_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_num_patches ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_skip_count ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_skip_flag ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COASTER_DEL_SV:
            {
            BCCMD_COASTER_DEL_SV_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_sv_pairs1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sv_pairs2 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sv_pairs3 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sv_pairs4 ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FIRMWARE_CHECK_MASK:
            {
            BCCMD_FIRMWARE_CHECK_MASK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PRESERVE_VALID:
            {
            BCCMD_PRESERVE_VALID_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CREATE_OPERATOR_P:
            {
            BCCMD_CREATE_OPERATOR_P_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_len ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_len();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                lMem[index-startdex] = (uint16) parameters[index];
                prim.set_patch ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_CLKSW_CURRENT_CLOCKS:
            {
            BCCMD_CLKSW_CURRENT_CLOCKS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO32:
            {
            BCCMD_PIO32_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mask ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bits ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STREAM_CONNECT:
            {
            BCCMD_STREAM_CONNECT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_source_sid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sink_sid ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_HQ_SCRAPING_ENABLE:
            {
            BCCMD_HQ_SCRAPING_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CLOCK_MODULATION_CONFIG:
            {
            BCCMD_CLOCK_MODULATION_CONFIG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_amount ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rate ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_wibbling ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_GPS_STOP:
            {
            BCCMD_GPS_STOP_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CRYPTKEYLEN:
            {
            BCCMD_CRYPTKEYLEN_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_keylen ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSCLRALLS:
            {
            BCCMD_PSCLRALLS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PCM_SLOTS_PER_FRAME:
            {
            BCCMD_PCM_SLOTS_PER_FRAME_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pcm_interface ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_slots_per_frame ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_WARM_RESET:
            {
            BCCMD_WARM_RESET_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_FASTPIPE_DESTROY:
            {
            BCCMD_FASTPIPE_DESTROY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pipe_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_SYNC_CLOCK:
            {
            BCCMD_SYNC_CLOCK_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_BLE_RADIO_TEST:
            {
            BCCMD_BLE_RADIO_TEST_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_command ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_channel ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_length ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_payload ( (uint8) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_I2C_TRANSFER:
            {
            BCCMD_I2C_TRANSFER_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_address ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_tx_octets ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_rx_octets ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_restart ( (bool) parameters[index] );
            ++index;
            //  ignore - "octets" is a return field.
            //  prim.set_octets ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_tx_octets();
                uint8 * lData = new uint8[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint8) parameters[index];
                prim.set_data ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_OPERATOR_MESSAGE:
            {
            BCCMD_OPERATOR_MESSAGE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_opid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = parameters [0] - index;
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                for ( ; index < parameters[0] ; index++ )
                    lMem[index-startdex] = (uint16) parameters[index];
                prim.set_arguments ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSNEXT:
            {
            BCCMD_PSNEXT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_id ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_stores ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_nextid ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ENABLE_TX:
            {
            BCCMD_ENABLE_TX_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_PSU_SMPS_ENABLE:
            {
            BCCMD_PSU_SMPS_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_UNLOCK_OTP:
            {
            BCCMD_UNLOCK_OTP_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STOP_OPERATOR:
            {
            BCCMD_STOP_OPERATOR_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_count ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_count();
                uint16 * lMem = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                lMem[index-startdex] = (uint16) parameters[index];
                prim.set_list ( lMem , lLen );
                delete[] lMem;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_BABEL_SPI_GET_LINE_STATUS:
            {
            BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_GPS_CONFIG:
            {
            BCCMD_GPS_CONFIG_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_BC3PSU:
            {
            BCCMD_BC3PSU_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_function ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_DEEP_SLEEP_PERIOD:
            {
            BCCMD_DEEP_SLEEP_PERIOD_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_HOPPING_ON:
            {
            BCCMD_HOPPING_ON_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_GSM_RX_MODE:
            {
            BCCMD_GSM_RX_MODE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO32_SET_PIN_FUNCTION:
            {
            BCCMD_PIO32_SET_PIN_FUNCTION_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pin_number ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_function ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_RADIOTEST_INTERFACE_VERSION:
            {
            BCCMD_RADIOTEST_INTERFACE_VERSION_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BOOTMODE:
            {
            BCCMD_BOOTMODE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_DEFRAG_RESET:
            {
            BCCMD_DEFRAG_RESET_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_CANCEL_PAGE:
            {
            BCCMD_CANCEL_PAGE_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_MAP_SCO_AUDIO:
            {
            BCCMD_MAP_SCO_AUDIO_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_source_sid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_sink_sid ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_NO_VARIABLE:
            {
            BCCMD_NO_VARIABLE_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_L2CAP_CRC:
            {
            BCCMD_L2CAP_CRC_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_tx_cid ( (bool) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_cid ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_enable ( (bool) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC_READ:
            {
            BCCMD_ADC_READ_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_AUX_DAC:
            {
            BCCMD_AUX_DAC_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PROVOKE_DELAYED_PANIC:
            {
            BCCMD_PROVOKE_DELAYED_PANIC_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BABEL_SPI_STOP:
            {
            BCCMD_BABEL_SPI_STOP_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_SPI_LOCK_STAY_LOCKED_KEY:
            {
            BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_INFORM_LINK_PROFILES:
            {
            BCCMD_INFORM_LINK_PROFILES_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_profiles ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC10:
            {
            BCCMD_ADC10_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC11:
            {
            BCCMD_ADC11_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BABEL_SPI_DELAY:
            {
            BCCMD_BABEL_SPI_DELAY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC12:
            {
            BCCMD_ADC12_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_EGPS_PULSE_STOP:
            {
            BCCMD_EGPS_PULSE_STOP_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_pio_stop ( (uint8) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC13:
            {
            BCCMD_ADC13_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC14:
            {
            BCCMD_ADC14_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ADC15:
            {
            BCCMD_ADC15_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ENABLE_SCO_STREAMS:
            {
            BCCMD_ENABLE_SCO_STREAMS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_COASTER_START:
            {
            BCCMD_COASTER_START_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_flags ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_delay ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_LED0_ENABLE:
            {
            BCCMD_LED0_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ENABLE_AFH:
            {
            BCCMD_ENABLE_AFH_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_hci_handle ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_enable ( (bool) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHIPREV:
            {
            BCCMD_CHIPREV_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO:
            {
            BCCMD_PIO_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_CHARGER_PSU_TRIM:
            {
            BCCMD_CHARGER_PSU_TRIM_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U03:
            {
            BCCMD_STIBBONS_U03_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U04:
            {
            BCCMD_STIBBONS_U04_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_BUILDID:
            {
            BCCMD_BUILDID_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U05:
            {
            BCCMD_STIBBONS_U05_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U06:
            {
            BCCMD_STIBBONS_U06_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_REMOVE_DOWNLOADED_CAPABILITY:
            {
            BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U07:
            {
            BCCMD_STIBBONS_U07_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U08:
            {
            BCCMD_STIBBONS_U08_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_STIBBONS_U09:
            {
            BCCMD_STIBBONS_U09_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PIO32_MAP_PINS:
            {
            BCCMD_PIO32_MAP_PINS_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_mask ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_bits ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint32) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PROVOKE_FAULT:
            {
            BCCMD_PROVOKE_FAULT_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_ANA_FTRIM:
            {
            BCCMD_ANA_FTRIM_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_FIRMWARE_CHECK:
            {
            BCCMD_FIRMWARE_CHECK_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_INIT_BT_STACK:
            {
            BCCMD_INIT_BT_STACK_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_MAXCRYPTKEYLEN:
            {
            BCCMD_MAXCRYPTKEYLEN_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_E2_APP_DATA:
            {
            BCCMD_E2_APP_DATA_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_offset ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_words ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
            {
                uint32 lLen = prim.get_words();
                uint16 * lData = new uint16[lLen];
                uint32 startdex = index;
                uint32 endex = index + lLen;
                for ( ; index < endex && index < parameters[0] ; index++ )
                    lData[index-startdex] = (uint16) parameters[index];
                prim.set_data ( lData , lLen );
                delete[] lData;
            }
            pdu = prim;
            break;
            }
        case BCCMDVARID_GPS_DSP_ENABLE:
            {
            BCCMD_GPS_DSP_ENABLE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_KALEXTADDRDEBUG:
            {
            BCCMD_KALEXTADDRDEBUG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_function ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_PANIC_ARG:
            {
            BCCMD_PANIC_ARG_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_data ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        case BCCMDVARID_DISABLE_TX:
            {
            BCCMD_DISABLE_TX_PDU prim ;
            pdu = prim;
            break;
            }
        case BCCMDVARID_FASTPIPE_RESIZE:
            {
            BCCMD_FASTPIPE_RESIZE_PDU prim ;
            if ( ++index < parameters[0] )
                prim.set_delta_controller ( (int32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_limit_controller ( (uint32) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_result ( (uint16) parameters[index] );
            pdu = prim;
            break;
            }
        default: // this'll cause an error
            return BCCMD_PDU(PDU(PDU::zero));
            break;
        }
        pdu.set_req_type ( (uint16) parameters[1] );
        pdu.set_seq_no ( (uint16) parameters[2] );
    }
    if ( pdu.size() )
        return pdu;
    else
        return BCCMD_PDU(PDU(PDU::zero));
}
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//               Auto generated from bccmdpdu_decode_pa.tpl                  //
///////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include "hcipacker/legacy.h"

//  declaration of radiotest equivalent procedure.
uint32 decomposeRADIOTEST_PDU( const BCCMD_RADIOTEST_PDU& input , uint32 * parameters );

#ifdef _WIN32
#include <malloc.h>
#endif

uint32 HCIPDUFactory::decomposeBCCMD_PDU( const PDU& input , uint32 * parameters , BadPDUReason& failed )
{
#ifdef _WIN32
    /*
     * WARNING: _msize is only documentented to work using malloc, calloc, and realloc. It is not documented to work on new or new[] 
     *          but still works on Visual Studio 6. Linux should use valgrind if there are problems.
     *
     * Check that parameters[0] <= size of the allocated block.
	 */
	assert(parameters == 0 || _msize(parameters) >= parameters[0]);       
#endif

    uint32 length = 4;
    BCCMD_PDU prim ( input );

    //  Sanity Checks
    if ( prim.get_req_type() != BCCMDPDU_GETRESP )
    {
        failed = BP_WRONG_TYPE;
	return 0;
    }
    if ( prim.size() < prim.minimum_bytes )
    {
        failed = BP_PC_TOO_SMALL;
	return 0;
    }
    if ( ( prim.get_length() * sizeof (uint16) / sizeof(uint8) ) > prim.size() )
    {
        failed = BP_OUT_OF_DATA;
	return 0;
    }
    if ( parameters )
    {
        //  length and type:
        assert ( prim.get_req_type() == BCCMDPDU_GETRESP );
        assert ( ( prim.get_length() * sizeof (uint16) / sizeof(uint8) ) == prim.size() );
        //  application useful data:
        parameters[1] = prim.get_varid();
        parameters[2] = prim.get_seq_no();
        parameters[3] = prim.get_status();
    }
    switch ( prim.get_varid() )
    {
    case BCCMDVARID_MAP_SCO_WBS:
        {
        BCCMD_MAP_SCO_WBS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_source_sid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sink_sid();
        length ++;
        }
        break;
    case BCCMDVARID_BLE_ADV_FILT_CLEAR:
        {
        BCCMD_BLE_ADV_FILT_CLEAR_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_U10:
        {
        BCCMD_STIBBONS_U10_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U11:
        {
        BCCMD_STIBBONS_U11_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U12:
        {
        BCCMD_STIBBONS_U12_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U13:
        {
        BCCMD_STIBBONS_U13_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U14:
        {
        BCCMD_STIBBONS_U14_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U15:
        {
        BCCMD_STIBBONS_U15_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U16:
        {
        BCCMD_STIBBONS_U16_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PCM_RATE_AND_ROUTE:
        {
        BCCMD_PCM_RATE_AND_ROUTE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_port_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sync_port();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_io_type();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_read_rate();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_write_rate();
        length ++;
        }
        break;
    case BCCMDVARID_VM_STATUS:
        {
        BCCMD_VM_STATUS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_vmstatus();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_exit_code();
        length ++;
        }
        break;
    case BCCMDVARID_COEX_ENABLE:
        {
        BCCMD_COEX_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_MIC_BIAS_CTRL:
        {
        BCCMD_MIC_BIAS_CTRL_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mic_bias_enable();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_mic_bias_current();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_mic_bias_voltage();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_enable_mic_bias_low_power_mode();
        length ++;
        }
        break;
    case BCCMDVARID_BABEL_SPI_RESET_AND_GO:
        {
        BCCMD_BABEL_SPI_RESET_AND_GO_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_PSCLR:
        {
        BCCMD_PSCLR_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_RDF_BLE_ADVERTISING:
        {
        BCCMD_RDF_BLE_ADVERTISING_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mode();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_adv_interval();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_adv_type();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_addr_type();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_channels();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_data_len();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_anti_whiten_begin();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_anti_whiten_end();
        length ++;

        if ( parameters )
        {
            uint32 lLen = pdu.get_data_len();
            uint8 *lData = new uint8[lLen];
            pdu.get_data ( lData, lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[i+length] = lData[i];
            delete[] lData;
        }

        length += pdu.get_data_len();
        }
        break;
    case BCCMDVARID_AFH_CHANNEL_RELEASE_TIME:
        {
        BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CONFIG_UART:
        {
        BCCMD_CONFIG_UART_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CHARGER_SET_TRIM_NOW:
        {
        BCCMD_CHARGER_SET_TRIM_NOW_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CHARGER_DISABLE:
        {
        BCCMD_CHARGER_DISABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BUILDID_LOADER:
        {
        BCCMD_BUILDID_LOADER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_EXT_CLOCK_PERIOD:
        {
        BCCMD_EXT_CLOCK_PERIOD_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FMTX_REG:
        {
        BCCMD_FMTX_REG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_fmtx_register();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case BCCMDVARID_RDF_BLE_PACKET_MATCH:
        {
        BCCMD_RDF_BLE_PACKET_MATCH_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_type();
        length ++;
 
        if ( parameters )
        {
            uint16 lTplate[3];
            pdu.get_tplate ( lTplate, 3 );
            for ( int i = 0; i < 3 ; ++i )
                parameters[i+length] = lTplate[i];
        }

        length += 3;

        if ( parameters )
        {
            uint16 lMatch[3];
            pdu.get_match ( lMatch, 3 );
            for ( int i = 0; i < 3 ; ++i )
                parameters[i+length] = lMatch[i];
        }

        length += 3;
        }
        break;
    case BCCMDVARID_ADCRES:
        {
        BCCMD_ADCRES_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_channel();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_valid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_VM_DEBUG:
        {
        BCCMD_VM_DEBUG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_function();
        length ++;
        }
        break;
    case BCCMDVARID_RESET_OPERATOR:
        {
        BCCMD_RESET_OPERATOR_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_count();
        length ++;
        /* The result is *not* an array, but a single value */
        if ( parameters && parameters[0] > length)
        {
            uint16 * lMem = new uint16[1];
            pdu.get_list ( lMem , 1 );
            parameters[length] = lMem[0];
            delete[] lMem;
        }
        length ++;
        }
        break;
    case BCCMDVARID_PIO_PROTECT_MASK:
        {
        BCCMD_PIO_PROTECT_MASK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_SCATTERNET_OVERRIDE_SCO:
        {
        BCCMD_SCATTERNET_OVERRIDE_SCO_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STREAM_TRANSACTION_COMPLETE:
        {
        BCCMD_STREAM_TRANSACTION_COMPLETE_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_GSM_RX_ARFCN:
        {
        BCCMD_GSM_RX_ARFCN_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PS_FACTORY_SET:
        {
        BCCMD_PS_FACTORY_SET_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_SPI_LOCK_INITIATE_LOCK:
        {
        BCCMD_SPI_LOCK_INITIATE_LOCK_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_PIO_DIRECTION_MASK:
        {
        BCCMD_PIO_DIRECTION_MASK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_AUX_DAC_ENABLE:
        {
        BCCMD_AUX_DAC_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CHIPANAVER:
        {
        BCCMD_CHIPANAVER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ACTIVATE_BT_STACK:
        {
        BCCMD_ACTIVATE_BT_STACK_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_PSCLRALL:
        {
        BCCMD_PSCLRALL_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_BLE_T_IFS:
        {
        BCCMD_BLE_T_IFS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FM_AUDIO_ROUTING:
        {
        BCCMD_FM_AUDIO_ROUTING_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FASTPIPE_ENABLE:
        {
        BCCMD_FASTPIPE_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_limit_host();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_COEX_SYNC_PERIOD:
        {
        BCCMD_COEX_SYNC_PERIOD_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PICONET_INSTANT:
        {
        BCCMD_PICONET_INSTANT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_h_instant();
        length ++;
        }
        break;
    case BCCMDVARID_CAPSENSE_RT_PADS:
        {
        BCCMD_CAPSENSE_RT_PADS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pad_sel();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_num_pads_board();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_shield();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pad_cap0();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pad_cap1();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pad_cap2();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pad_cap3();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pad_cap4();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pad_cap5();
        length ++;
        }
        break;
    case BCCMDVARID_SNIFF_MULTISLOT_ENABLE:
        {
        BCCMD_SNIFF_MULTISLOT_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_RECAL:
        {
        BCCMD_RECAL_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_PSU_HV_LINEAR_ENABLE:
        {
        BCCMD_PSU_HV_LINEAR_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STREAM_TRANSFORM_DISCONNECT:
        {
        BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FM_RDS:
        {
        BCCMD_FM_RDS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_rds_len();
        length ++;
        if ( parameters )
        {
            //  the rds_len gives the number of "blocks" of 2 words.
            uint32 lLen = BCCMD_FM_RDS_PDU::words_per_block * pdu.get_rds_len();
            uint16 * lData = new uint16[lLen];
            pdu.get_rds_data ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += pdu.get_rds_len() * BCCMD_FM_RDS_PDU::words_per_block;
        }
        break;
    case BCCMDVARID_FAULT_ARG:
        {
        BCCMD_FAULT_ARG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_RECLAIM_RAM_RESERVE:
        {
        BCCMD_RECLAIM_RAM_RESERVE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_type();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case BCCMDVARID_LC_FRAC_COUNT:
        {
        BCCMD_LC_FRAC_COUNT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_MAX_TX_POWER:
        {
        BCCMD_MAX_TX_POWER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_COASTER_ADD_SV:
        {
        BCCMD_COASTER_ADD_SV_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_num_entries();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uSecs();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uSec80ths();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_code_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_code_shift();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_carrier_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_data_transition();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_satid_prn();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_dummy();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_uSecs();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_uSec80ths();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_code_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_code_shift();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_carrier_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_data_transition();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_satid_prn();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_dummy();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_uSecs();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_uSec80ths();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_code_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_code_shift();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_carrier_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_data_transition();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_satid_prn();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_dummy();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_uSecs();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_uSec80ths();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_code_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_code_shift();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_carrier_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_data_transition();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_satid_prn();
        length ++;
        }
        break;
    case BCCMDVARID_DEEP_SLEEP_TIME:
        {
        BCCMD_DEEP_SLEEP_TIME_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BLE_WHITELIST_FREE_SPACE:
        {
        BCCMD_BLE_WHITELIST_FREE_SPACE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_MEMORY:
        {
        BCCMD_MEMORY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_base_addr();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_len();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_len();
            uint16 * lMem = new uint16[lLen];
            pdu.get_mem ( lMem , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lMem[i];
            delete[] lMem;
        }
        length += pdu.get_len();
        }
        break;
    case BCCMDVARID_BABEL_SPI_RESET_AND_STOP:
        {
        BCCMD_BABEL_SPI_RESET_AND_STOP_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_RDF_DATA_CAPTURE_ENABLE:
        {
        BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_modes();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_timer_delay();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_nsams();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_nap();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uap();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_lap();
        length ++;
        }
        break;
    case BCCMDVARID_CACHED_TEMPERATURE:
        {
        BCCMD_CACHED_TEMPERATURE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_COEX_PRIORITY_PIOS_ON:
        {
        BCCMD_COEX_PRIORITY_PIOS_ON_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FM_REG:
        {
        BCCMD_FM_REG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_fm_register();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case BCCMDVARID_CODEC_INPUT_GAIN:
        {
        BCCMD_CODEC_INPUT_GAIN_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_gain_a();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_gain_b();
        length ++;
        }
        break;
    case BCCMDVARID_STREAM_GET_SINK:
        {
        BCCMD_STREAM_GET_SINK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_resource();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_opt1();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_opt2();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U01X:
        {
        BCCMD_STIBBONS_U01X_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BYPASS_UART:
        {
        BCCMD_BYPASS_UART_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_INQUIRY_PRIORITY:
        {
        BCCMD_INQUIRY_PRIORITY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PIO32_DIRECTION_MASK:
        {
        BCCMD_PIO32_DIRECTION_MASK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mask();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_SIFLASH:
        {
        BCCMD_SIFLASH_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_command();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_word_address();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_data_length();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_data_length();
            uint16 * lMem = new uint16[lLen];
            pdu.get_data ( lMem , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lMem[i];
            delete[] lMem;
        }
        length += pdu.get_data_length();
        }
        break;
    case BCCMDVARID_SPI_LOCK_CUSTOMER_KEY:
        {
        BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_cust_key1();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_cust_key2();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_cust_key3();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_cust_key4();
        length ++;
        }
        break;
    case BCCMDVARID_HQ_SCRAPING_LEN:
        {
        BCCMD_HQ_SCRAPING_LEN_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_WLAN_COEX_PRIORITY:
        {
        BCCMD_WLAN_COEX_PRIORITY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_enable();
        length ++;
        }
        break;
    case BCCMDVARID_HQ_SCRAPING:
        {
        BCCMD_HQ_SCRAPING_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hq_len();
        length ++;
if ( parameters )
        {
            uint32 lLen = pdu.get_hq_len();
            uint16 * lMem = new uint16[lLen];
            pdu.get_hq_data ( lMem , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lMem[i];
            delete[] lMem;
        }
        length += pdu.get_hq_len();
        }
        break;
    case BCCMDVARID_BC01_STATUS:
        {
        BCCMD_BC01_STATUS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CHECK_ROM_CRC32:
        {
        BCCMD_CHECK_ROM_CRC32_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PS_FACTORY_RESTORE:
        {
        BCCMD_PS_FACTORY_RESTORE_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_SCO_PARAMETERS:
        {
        BCCMD_SCO_PARAMETERS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_sco_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_tsco();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_wesco();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_reserved_slots();
        length ++;
        }
        break;
    case BCCMDVARID_PCM_ATTENUATION:
        {
        BCCMD_PCM_ATTENUATION_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CODEC_OUTPUT_GAIN:
        {
        BCCMD_CODEC_OUTPUT_GAIN_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_gain_a();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_gain_b();
        length ++;
        }
        break;
    case BCCMDVARID_RDF_DATA_CAPTURE_DISABLE:
        {
        BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_RSSI_ACL:
        {
        BCCMD_RSSI_ACL_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rssi();
        length ++;
        }
        break;
    case BCCMDVARID_PCM_CONFIG32:
        {
        BCCMD_PCM_CONFIG32_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pcm_if_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_config32();
        length ++;
        }
        break;
    case BCCMDVARID_INQUIRY_TX_POWER:
        {
        BCCMD_INQUIRY_TX_POWER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BLE_AROPE_CAPABILITIES:
        {
        BCCMD_BLE_AROPE_CAPABILITIES_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BLE_DEFAULT_TX_POWER:
        {
        BCCMD_BLE_DEFAULT_TX_POWER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_DEFAULT_TX_POWER:
        {
        BCCMD_DEFAULT_TX_POWER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STREAM_CLOSE_SINK:
        {
        BCCMD_STREAM_CLOSE_SINK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_COLD_RESET:
        {
        BCCMD_COLD_RESET_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_MIC_BIAS_CONFIGURE:
        {
        BCCMD_MIC_BIAS_CONFIGURE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_instance();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_key_config();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case BCCMDVARID_CHECK_ROM:
        {
        BCCMD_CHECK_ROM_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_RAND:
        {
        BCCMD_RAND_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_COLD_HALT:
        {
        BCCMD_COLD_HALT_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_PIO32_PROTECT_MASK:
        {
        BCCMD_PIO32_PROTECT_MASK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mask();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_DSPMANAGER_DEBUG:
        {
        BCCMD_DSPMANAGER_DEBUG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_subsystem();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_arguments();
        length ++;
        }
        break;
    case BCCMDVARID_COASTER_STOP:
        {
        BCCMD_COASTER_STOP_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        }
        break;
    case BCCMDVARID_ALLOCATE_RAM_RESERVE:
        {
        BCCMD_ALLOCATE_RAM_RESERVE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_type();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case BCCMDVARID_STREAM_TRANSACTION_START:
        {
        BCCMD_STREAM_TRANSACTION_START_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_EGPS_PULSE_CONFIG:
        {
        BCCMD_EGPS_PULSE_CONFIG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pio();
        length ++;
        }
        break;
    case BCCMDVARID_PANIC_ON_FAULT:
        {
        BCCMD_PANIC_ON_FAULT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_GET_NEXT_BUILDDEF:
        {
        BCCMD_GET_NEXT_BUILDDEF_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_nextid();
        length ++;
        }
        break;
    case BCCMDVARID_SHA256_INIT:
        {
        BCCMD_SHA256_INIT_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_ENABLE_DUT_MODE:
        {
        BCCMD_ENABLE_DUT_MODE_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_BLE_ADV_FILT_ADD:
        {
        BCCMD_BLE_ADV_FILT_ADD_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_operation();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_ad_type();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_interval();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_pattern_length();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_pattern_length();
            uint16 * lMem = new uint16[lLen];
            pdu.get_pattern ( lMem , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lMem[i];
            delete[] lMem;
        }
        length += pdu.get_pattern_length();
        }
        break;
    case BCCMDVARID_BLE_SCAN_BACKOFF:
        {
        BCCMD_BLE_SCAN_BACKOFF_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BT_CLOCK:
        {
        BCCMD_BT_CLOCK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_SPI_BUFSIZE:
        {
        BCCMD_SPI_BUFSIZE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FMTX_TEXT:
        {
        BCCMD_FMTX_TEXT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_text_type();
        length ++;
            //  This messsage is write only, so don't need to decode.
        }
        break;
    case BCCMDVARID_STIBBONS_C01:
        {
        BCCMD_STIBBONS_C01_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_C02:
        {
        BCCMD_STIBBONS_C02_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_PCM_SYNC_RATE:
        {
        BCCMD_PCM_SYNC_RATE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pcm_interface();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sync_rate();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_C03:
        {
        BCCMD_STIBBONS_C03_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_C04:
        {
        BCCMD_STIBBONS_C04_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_C05:
        {
        BCCMD_STIBBONS_C05_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_LED2_ENABLE:
        {
        BCCMD_LED2_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CHECK_RAM_RESULT:
        {
        BCCMD_CHECK_RAM_RESULT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_C06:
        {
        BCCMD_STIBBONS_C06_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_EGPS_PULSE_OUTPUT_START:
        {
        BCCMD_EGPS_PULSE_OUTPUT_START_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pio();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_start_time();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_duration_time();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_repeat_time();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_start_time_fine();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_duration_time_fine();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_repeat_time_fine();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_C07:
        {
        BCCMD_STIBBONS_C07_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_C08:
        {
        BCCMD_STIBBONS_C08_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_C09:
        {
        BCCMD_STIBBONS_C09_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_CHECK_RAM:
        {
        BCCMD_CHECK_RAM_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STREAM_GET_SOURCE:
        {
        BCCMD_STREAM_GET_SOURCE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_resource();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_opt1();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_opt2();
        length ++;
        }
        break;
    case BCCMDVARID_ROUTE_CLOCK:
        {
        BCCMD_ROUTE_CLOCK_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_BABEL_SPI_GO:
        {
        BCCMD_BABEL_SPI_GO_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_COASTER_SV_STATE:
        {
        BCCMD_COASTER_SV_STATE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_start_index_num_entries();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uSecs();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uSec80ths();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_code_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_code_shift();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_carrier_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_lock_status_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_SNR();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_data_transition();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_satid_prn();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_dummy();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_uSecs();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_uSec80ths();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_code_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_code_shift();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_carrier_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_lock_status_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_SNR();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_data_transition();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e1_satid_prn();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_dummy();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_uSecs();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_uSec80ths();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_code_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_code_shift();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_carrier_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_lock_status_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_SNR();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_data_transition();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e2_satid_prn();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_dummy();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_uSecs();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_uSec80ths();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_code_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_code_shift();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_carrier_doppler();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_lock_status_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_SNR();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_data_transition();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_e3_satid_prn();
        length ++;
        }
        break;
    case BCCMDVARID_RDF_BLE_SCAN_MODE:
        {
        BCCMD_RDF_BLE_SCAN_MODE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mode();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_samples();
        length ++;
        }
        break;
    case BCCMDVARID_RANDOM:
        {
        BCCMD_RANDOM_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_len();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_type();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_len();
            uint16 * lData = new uint16[lLen];
            pdu.get_data ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += pdu.get_len();
        }
        break;
    case BCCMDVARID_PS_FACTORY_RESTORE_ALL:
        {
        BCCMD_PS_FACTORY_RESTORE_ALL_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_COEX_DUMP:
        {
        BCCMD_COEX_DUMP_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_scheme();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_options();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bt_priority();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_wlan_active();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bt_active();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bt_status();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_wlan_deny();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bt_periodic();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bt_inband();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uart_active();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uart_tx();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uart_rx();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_time_t1();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_time_t2();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_btactive_lead();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_btstatus_lead();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table00();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table01();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table02();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table03();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table04();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table05();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table06();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table07();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table08();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table09();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table10();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table11();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table12();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table13();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table14();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table15();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table16();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table17();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table18();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table19();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table20();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table21();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table22();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table23();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table24();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table25();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table26();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table27();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table28();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table29();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table30();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table31();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_priority_table32();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug_enable();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug00();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug01();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug02();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug03();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug04();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug05();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug06();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug07();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug08();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug09();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug10();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug11();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug12();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug13();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug14();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_debug15();
        length ++;
        }
        break;
    case BCCMDVARID_CLOCK_MODULATION_ENABLE:
        {
        BCCMD_CLOCK_MODULATION_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_C10:
        {
        BCCMD_STIBBONS_C10_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STREAM_TRANSACTION_CANCEL:
        {
        BCCMD_STREAM_TRANSACTION_CANCEL_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_C11:
        {
        BCCMD_STIBBONS_C11_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_C12:
        {
        BCCMD_STIBBONS_C12_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_HOST_DECIDES_TIMING:
        {
        BCCMD_HOST_DECIDES_TIMING_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_RADIOTEST:
        {
        BCCMD_RADIOTEST_PDU pdu ( prim );
        length += decomposeRADIOTEST_PDU ( input , parameters );
        }
        break;
    case BCCMDVARID_STIBBONS_C13:
        {
        BCCMD_STIBBONS_C13_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STIBBONS_C14:
        {
        BCCMD_STIBBONS_C14_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_VREF_CONSTANT:
        {
        BCCMD_VREF_CONSTANT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_C15:
        {
        BCCMD_STIBBONS_C15_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_CLK_SKEW_COUNT:
        {
        BCCMD_CLK_SKEW_COUNT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_AWAY_TIME:
        {
        BCCMD_AWAY_TIME_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_time();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_C16:
        {
        BCCMD_STIBBONS_C16_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_WAIT_FOR_N_MS:
        {
        BCCMD_WAIT_FOR_N_MS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PCM_CLOCK_RATE:
        {
        BCCMD_PCM_CLOCK_RATE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pcm_interface();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_clock_rate();
        length ++;
        }
        break;
    case BCCMDVARID_TESTB_AMUX:
        {
        BCCMD_TESTB_AMUX_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_GPS_START:
        {
        BCCMD_GPS_START_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_delay();
        length ++;
        }
        break;
    case BCCMDVARID_STREAM_ALIAS_SINK:
        {
        BCCMD_STREAM_ALIAS_SINK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_sink1_sid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sink2_sid();
        length ++;
        }
        break;
    case BCCMDVARID_LIMIT_EDR_POWER:
        {
        BCCMD_LIMIT_EDR_POWER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_enable();
        length ++;
        }
        break;
    case BCCMDVARID_HOSTIO_ENABLE_DEBUG:
        {
        BCCMD_HOSTIO_ENABLE_DEBUG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_WARM_HALT:
        {
        BCCMD_WARM_HALT_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_STREAM_CLOSE_SOURCE:
        {
        BCCMD_STREAM_CLOSE_SOURCE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BUILD_NAME:
        {
        BCCMD_BUILD_NAME_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_start();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_len();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_length() - 7;
            uint8 * lMem = new uint8[lLen];
            pdu.get_bufmem ( lMem , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lMem[i];
            delete[] lMem;
        }
        length += pdu.get_length() - 7;
        }
        break;
    case BCCMDVARID_SINGLE_CHAN:
        {
        BCCMD_SINGLE_CHAN_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PSCLRS:
        {
        BCCMD_PSCLRS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_stores();
        length ++;
        }
        break;
    case BCCMDVARID_LED_CONFIG:
        {
        BCCMD_LED_CONFIG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_led();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_led_key();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case BCCMDVARID_LOCK_ACL_PACKET_TYPE:
        {
        BCCMD_LOCK_ACL_PACKET_TYPE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_LC_RX_FRACS:
        {
        BCCMD_LC_RX_FRACS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_value_count();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_value_count();
            uint16 * lData = new uint16[lLen];
            pdu.get_rx_frac_vals ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += pdu.get_value_count();
        }
        break;
    case BCCMDVARID_COMBO_DOT11_ESCO_RTX_PRIORITY:
        {
        BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_TESTA_AMUX:
        {
        BCCMD_TESTA_AMUX_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PIO32_STRONG_BIAS:
        {
        BCCMD_PIO32_STRONG_BIAS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mask();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_PS_MEMORY_TYPE:
        {
        BCCMD_PS_MEMORY_TYPE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_stores();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_memorytype();
        length ++;
        }
        break;
    case BCCMDVARID_BABEL_SPI_RUN_STATE:
        {
        BCCMD_BABEL_SPI_RUN_STATE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PSSIZE:
        {
        BCCMD_PSSIZE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_len();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_stores();
        length ++;
        }
        break;
    case BCCMDVARID_KILL_VM_APPLICATION:
        {
        BCCMD_KILL_VM_APPLICATION_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_ANA_FTRIM_READWRITE:
        {
        BCCMD_ANA_FTRIM_READWRITE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ENABLE_DEV_CONNECT:
        {
        BCCMD_ENABLE_DEV_CONNECT_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_BER_THRESHOLD:
        {
        BCCMD_BER_THRESHOLD_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_ber_threshold();
        length ++;
        }
        break;
    case BCCMDVARID_START_OPERATOR:
        {
        BCCMD_START_OPERATOR_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_count();
        length ++;
        /* The result is *not* an array, but a single value */
        if ( parameters && parameters[0] > length)
        {
            uint16 * lMem = new uint16[1];
            pdu.get_list ( lMem , 1 );
            parameters[length] = lMem[0];
            delete[] lMem;
        }
        length ++;
        }
        break;
    case BCCMDVARID_COEX_INT_TEST:
        {
        BCCMD_COEX_INT_TEST_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mode();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case BCCMDVARID_RDF_PT:
        {
        BCCMD_RDF_PT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_enable();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_antenna();
        length ++;
        }
        break;
    case BCCMDVARID_EGPS_PULSE_INPUT_START:
        {
        BCCMD_EGPS_PULSE_INPUT_START_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pio();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_edge_mode();
        length ++;
        }
        break;
    case BCCMDVARID_RDF_PT_SELECT_ANTENNA:
        {
        BCCMD_RDF_PT_SELECT_ANTENNA_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PCM_LOW_JITTER:
        {
        BCCMD_PCM_LOW_JITTER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pcm_if_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_low_jitter();
        length ++;
        }
        break;
    case BCCMDVARID_SHA256_RES:
        {
        BCCMD_SHA256_RES_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_time();
        length ++;

        if ( parameters && parameters[0] >= length+BCCMDPDU_SHA256_RES_HASH_SIZE)
        {
            uint8 lHash[BCCMDPDU_SHA256_RES_HASH_SIZE];
            pdu.get_hash ( lHash );
            for ( int i = 0; i < BCCMDPDU_SHA256_RES_HASH_SIZE ; ++i )
                parameters[i+length] = lHash[i];
        }

        length += BCCMDPDU_SHA256_RES_HASH_SIZE;
        }
        break;
    case BCCMDVARID_CHARGER_TRIMS:
        {
        BCCMD_CHARGER_TRIMS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_chgref_trim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_hvref_trim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rtrim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_itrim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_iext_trim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_iterm_trim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_vfast_trim();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_hyst_trim();
        length ++;
        }
        break;
    case BCCMDVARID_KALSPIDEBUG_SETDEBUGMODE:
        {
        BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_PCM2_ATTENUATION:
        {
        BCCMD_PCM2_ATTENUATION_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_SAVE_CONNECTION_EVENT_FILTERS:
        {
        BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_ESCOTEST:
        {
        BCCMD_ESCOTEST_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_function();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_E2_APP_SIZE:
        {
        BCCMD_E2_APP_SIZE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BUFFER:
        {
        BCCMD_BUFFER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_start();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_len();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_len();
            uint8 * lMem = new uint8[lLen];
            pdu.get_bufmem ( lMem , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lMem[i];
            delete[] lMem;
        }
        length += pdu.get_len();
        }
        break;
    case BCCMDVARID_STREAM_CONFIGURE:
        {
        BCCMD_STREAM_CONFIGURE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_sid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_key_config();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_value();
        length ++;
        }
        break;
    case BCCMDVARID_ADC:
        {
        BCCMD_ADC_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PSNEXT_ALL:
        {
        BCCMD_PSNEXT_ALL_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_nextid();
        length ++;
        }
        break;
    case BCCMDVARID_STREAM_SYNC_SID:
        {
        BCCMD_STREAM_SYNC_SID_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_sid1();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sid2();
        length ++;
        }
        break;
    case BCCMDVARID_MAP_SCO_PCM:
        {
        BCCMD_MAP_SCO_PCM_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FASTPIPE_CREATE:
        {
        BCCMD_FASTPIPE_CREATE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pipe_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_overhead_host();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_capacity_rx_host();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_required_tx_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_desired_tx_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_required_rx_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_desired_rx_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_overhead_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_capacity_tx_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_capacity_rx_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_COASTER_INDICATIONS:
        {
        BCCMD_COASTER_INDICATIONS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_events();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_uu();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_optflags();
        length ++;
        }
        break;
    case BCCMDVARID_LED1_ENABLE:
        {
        BCCMD_LED1_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ENABLE_COEX_MESSAGE_REPORTING:
        {
        BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_SHA256_DATA:
        {
        BCCMD_SHA256_DATA_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_msg_len();
        length ++;

        if ( parameters )

        {

            uint32 lLen = pdu.get_msg_len();

            uint8 * lMem = new uint8[lLen];

            pdu.get_msg ( lMem , lLen );

            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )

                parameters[length + i] = lMem[i];

            delete[] lMem;

        }

        length += pdu.get_msg_len();

        }
        break;
    case BCCMDVARID_DIGITAL_AUDIO_CONFIG:
        {
        BCCMD_DIGITAL_AUDIO_CONFIG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pcm_if_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_options();
        length ++;
        }
        break;
    case BCCMDVARID_CHIPVER:
        {
        BCCMD_CHIPVER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_SPI_LOCK_STATUS:
        {
        BCCMD_SPI_LOCK_STATUS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC0:
        {
        BCCMD_ADC0_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ENABLE_MEDIUM_RATE:
        {
        BCCMD_ENABLE_MEDIUM_RATE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_enable();
        length ++;
        }
        break;
    case BCCMDVARID_ADC1:
        {
        BCCMD_ADC1_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FMTX_SET_CDAC:
        {
        BCCMD_FMTX_SET_CDAC_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_DIGITAL_AUDIO_RATE:
        {
        BCCMD_DIGITAL_AUDIO_RATE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pcm_if_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_frequency();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_samp_size();
        length ++;
        }
        break;
    case BCCMDVARID_ADC2:
        {
        BCCMD_ADC2_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PROVOKE_PANIC:
        {
        BCCMD_PROVOKE_PANIC_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_GET_CLR_EVT:
        {
        BCCMD_GET_CLR_EVT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_evtcntid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_cnt();
        length ++;
        }
        break;
    case BCCMDVARID_E2_DEVICE:
        {
        BCCMD_E2_DEVICE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_log2_bytes();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_addr_mask();
        length ++;
        }
        break;
    case BCCMDVARID_ADC3:
        {
        BCCMD_ADC3_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_INTERFACE_VERSION:
        {
        BCCMD_INTERFACE_VERSION_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC4:
        {
        BCCMD_ADC4_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC5:
        {
        BCCMD_ADC5_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC6:
        {
        BCCMD_ADC6_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC7:
        {
        BCCMD_ADC7_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC8:
        {
        BCCMD_ADC8_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC9:
        {
        BCCMD_ADC9_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_KALDEBUG:
        {
        BCCMD_KALDEBUG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_function();
        length ++;
        }
        break;
    case BCCMDVARID_CHARGER_SUPPRESS_LED0:
        {
        BCCMD_CHARGER_SUPPRESS_LED0_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_RDF_BLE_RAND_ADDR:
        {
        BCCMD_RDF_BLE_RAND_ADDR_PDU pdu ( prim );

        if ( parameters )
        {
            uint8 *lData = new uint8[6];
            pdu.get_addr ( lData, 6 );
            for ( uint32 i = 0; i < 6 && (length + i) < parameters[0] ; ++i )
                parameters[i+length] = lData[i];
            delete[] lData;
        }

        length += 6;
        }
        break;
    case BCCMDVARID_DESTROY_OPERATOR:
        {
        BCCMD_DESTROY_OPERATOR_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_count();
        length ++;
        /* The result is *not* an array, but a single value */
        if ( parameters && parameters[0] > length)
        {
            uint16 * lMem = new uint16[1];
            pdu.get_list ( lMem , 1 );
            parameters[length] = lMem[0];
            delete[] lMem;
        }
        length ++;
        }
        break;
    case BCCMDVARID_PIO_STRONG_BIAS:
        {
        BCCMD_PIO_STRONG_BIAS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CHARGER_STATUS:
        {
        BCCMD_CHARGER_STATUS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PREVIN_TUNNEL:
        {
        BCCMD_PREVIN_TUNNEL_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_message_num();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_length();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_message();
        length ++;
        }
        break;
    case BCCMDVARID_PS:
        {
        BCCMD_PS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_len();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_stores();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_len();
            uint16 * lMem = new uint16[lLen];
            pdu.get_psmem ( lMem , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lMem[i];
            delete[] lMem;
        }
        length += pdu.get_len();
        }
        break;
    case BCCMDVARID_CREATE_OPERATOR_C:
        {
        BCCMD_CREATE_OPERATOR_C_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_num_patches();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_skip_count();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_skip_flag();
        length ++;
        }
        break;
    case BCCMDVARID_COASTER_DEL_SV:
        {
        BCCMD_COASTER_DEL_SV_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_sv_pairs1();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sv_pairs2();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sv_pairs3();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sv_pairs4();
        length ++;
        }
        break;
    case BCCMDVARID_FIRMWARE_CHECK_MASK:
        {
        BCCMD_FIRMWARE_CHECK_MASK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PRESERVE_VALID:
        {
        BCCMD_PRESERVE_VALID_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CREATE_OPERATOR_P:
        {
        BCCMD_CREATE_OPERATOR_P_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_len();
        length ++;
        /* The result is *not* an array, but a single value */
        if ( parameters && parameters[0] > length)
        {
            uint16 * lMem = new uint16[1];
            pdu.get_patch ( lMem , 1 );
            parameters[length] = lMem[0];
            delete[] lMem;
        }
        length ++;
        }
        break;
    case BCCMDVARID_CLKSW_CURRENT_CLOCKS:
        {
        BCCMD_CLKSW_CURRENT_CLOCKS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PIO32:
        {
        BCCMD_PIO32_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mask();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_STREAM_CONNECT:
        {
        BCCMD_STREAM_CONNECT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_source_sid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sink_sid();
        length ++;
        }
        break;
    case BCCMDVARID_HQ_SCRAPING_ENABLE:
        {
        BCCMD_HQ_SCRAPING_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CLOCK_MODULATION_CONFIG:
        {
        BCCMD_CLOCK_MODULATION_CONFIG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_amount();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rate();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_wibbling();
        length ++;
        }
        break;
    case BCCMDVARID_GPS_STOP:
        {
        BCCMD_GPS_STOP_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        }
        break;
    case BCCMDVARID_CRYPTKEYLEN:
        {
        BCCMD_CRYPTKEYLEN_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_keylen();
        length ++;
        }
        break;
    case BCCMDVARID_PSCLRALLS:
        {
        BCCMD_PSCLRALLS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PCM_SLOTS_PER_FRAME:
        {
        BCCMD_PCM_SLOTS_PER_FRAME_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pcm_interface();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_slots_per_frame();
        length ++;
        }
        break;
    case BCCMDVARID_WARM_RESET:
        {
        BCCMD_WARM_RESET_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_FASTPIPE_DESTROY:
        {
        BCCMD_FASTPIPE_DESTROY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pipe_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_SYNC_CLOCK:
        {
        BCCMD_SYNC_CLOCK_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_BLE_RADIO_TEST:
        {
        BCCMD_BLE_RADIO_TEST_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_command();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_channel();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_length();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_payload();
        length ++;
        }
        break;
    case BCCMDVARID_I2C_TRANSFER:
        {
        BCCMD_I2C_TRANSFER_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_address();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_tx_octets();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_rx_octets();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_restart();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_octets();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_tx_octets() + pdu.get_rx_octets();
            uint8 * lData = new uint8[lLen];
            pdu.get_data ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += pdu.get_tx_octets() + pdu.get_rx_octets();
        }
        break;
    case BCCMDVARID_OPERATOR_MESSAGE:
        {
        BCCMD_OPERATOR_MESSAGE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_opid();
        length ++;
        if ( parameters && parameters[0] > length)
        {
            uint32 lLen = pdu.get_arg_count ();
            uint16 * lData = new uint16[lLen];
            pdu.get_arguments ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += pdu.get_arg_count ();
        }
        break;
    case BCCMDVARID_PSNEXT:
        {
        BCCMD_PSNEXT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_id();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_stores();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_nextid();
        length ++;
        }
        break;
    case BCCMDVARID_ENABLE_TX:
        {
        BCCMD_ENABLE_TX_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_PSU_SMPS_ENABLE:
        {
        BCCMD_PSU_SMPS_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_UNLOCK_OTP:
        {
        BCCMD_UNLOCK_OTP_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STOP_OPERATOR:
        {
        BCCMD_STOP_OPERATOR_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_count();
        length ++;
        /* The result is *not* an array, but a single value */
        if ( parameters && parameters[0] > length)
        {
            uint16 * lMem = new uint16[1];
            pdu.get_list ( lMem , 1 );
            parameters[length] = lMem[0];
            delete[] lMem;
        }
        length ++;
        }
        break;
    case BCCMDVARID_BABEL_SPI_GET_LINE_STATUS:
        {
        BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_GPS_CONFIG:
        {
        BCCMD_GPS_CONFIG_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_BC3PSU:
        {
        BCCMD_BC3PSU_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_function();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_DEEP_SLEEP_PERIOD:
        {
        BCCMD_DEEP_SLEEP_PERIOD_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_HOPPING_ON:
        {
        BCCMD_HOPPING_ON_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_GSM_RX_MODE:
        {
        BCCMD_GSM_RX_MODE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PIO32_SET_PIN_FUNCTION:
        {
        BCCMD_PIO32_SET_PIN_FUNCTION_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pin_number();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_function();
        length ++;
        }
        break;
    case BCCMDVARID_RADIOTEST_INTERFACE_VERSION:
        {
        BCCMD_RADIOTEST_INTERFACE_VERSION_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BOOTMODE:
        {
        BCCMD_BOOTMODE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_DEFRAG_RESET:
        {
        BCCMD_DEFRAG_RESET_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_CANCEL_PAGE:
        {
        BCCMD_CANCEL_PAGE_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_MAP_SCO_AUDIO:
        {
        BCCMD_MAP_SCO_AUDIO_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_source_sid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_sink_sid();
        length ++;
        }
        break;
    case BCCMDVARID_NO_VARIABLE:
        {
        BCCMD_NO_VARIABLE_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_L2CAP_CRC:
        {
        BCCMD_L2CAP_CRC_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_tx_cid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_cid();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_enable();
        length ++;
        }
        break;
    case BCCMDVARID_ADC_READ:
        {
        BCCMD_ADC_READ_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_AUX_DAC:
        {
        BCCMD_AUX_DAC_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PROVOKE_DELAYED_PANIC:
        {
        BCCMD_PROVOKE_DELAYED_PANIC_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BABEL_SPI_STOP:
        {
        BCCMD_BABEL_SPI_STOP_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_SPI_LOCK_STAY_LOCKED_KEY:
        {
        BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_INFORM_LINK_PROFILES:
        {
        BCCMD_INFORM_LINK_PROFILES_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_profiles();
        length ++;
        }
        break;
    case BCCMDVARID_ADC10:
        {
        BCCMD_ADC10_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC11:
        {
        BCCMD_ADC11_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BABEL_SPI_DELAY:
        {
        BCCMD_BABEL_SPI_DELAY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC12:
        {
        BCCMD_ADC12_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_EGPS_PULSE_STOP:
        {
        BCCMD_EGPS_PULSE_STOP_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_pio_stop();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        }
        break;
    case BCCMDVARID_ADC13:
        {
        BCCMD_ADC13_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC14:
        {
        BCCMD_ADC14_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ADC15:
        {
        BCCMD_ADC15_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ENABLE_SCO_STREAMS:
        {
        BCCMD_ENABLE_SCO_STREAMS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_COASTER_START:
        {
        BCCMD_COASTER_START_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_flags();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_delay();
        length ++;
        }
        break;
    case BCCMDVARID_LED0_ENABLE:
        {
        BCCMD_LED0_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ENABLE_AFH:
        {
        BCCMD_ENABLE_AFH_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_hci_handle();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_enable();
        length ++;
        }
        break;
    case BCCMDVARID_CHIPREV:
        {
        BCCMD_CHIPREV_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PIO:
        {
        BCCMD_PIO_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_CHARGER_PSU_TRIM:
        {
        BCCMD_CHARGER_PSU_TRIM_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U03:
        {
        BCCMD_STIBBONS_U03_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U04:
        {
        BCCMD_STIBBONS_U04_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_BUILDID:
        {
        BCCMD_BUILDID_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U05:
        {
        BCCMD_STIBBONS_U05_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U06:
        {
        BCCMD_STIBBONS_U06_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_REMOVE_DOWNLOADED_CAPABILITY:
        {
        BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U07:
        {
        BCCMD_STIBBONS_U07_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U08:
        {
        BCCMD_STIBBONS_U08_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_STIBBONS_U09:
        {
        BCCMD_STIBBONS_U09_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_PIO32_MAP_PINS:
        {
        BCCMD_PIO32_MAP_PINS_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_mask();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_bits();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    case BCCMDVARID_PROVOKE_FAULT:
        {
        BCCMD_PROVOKE_FAULT_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_ANA_FTRIM:
        {
        BCCMD_ANA_FTRIM_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_FIRMWARE_CHECK:
        {
        BCCMD_FIRMWARE_CHECK_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_INIT_BT_STACK:
        {
        BCCMD_INIT_BT_STACK_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_MAXCRYPTKEYLEN:
        {
        BCCMD_MAXCRYPTKEYLEN_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_E2_APP_DATA:
        {
        BCCMD_E2_APP_DATA_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_offset();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_words();
        length ++;
        if ( parameters )
        {
            uint32 lLen = pdu.get_words();
            uint16 * lData = new uint16[lLen];
            pdu.get_data ( lData , lLen );
            for ( uint32 i = 0; i < lLen && (length + i) < parameters[0] ; ++i )
                parameters[length + i] = lData[i];
            delete[] lData;
        }
        length += pdu.get_words();
        }
        break;
    case BCCMDVARID_GPS_DSP_ENABLE:
        {
        BCCMD_GPS_DSP_ENABLE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_KALEXTADDRDEBUG:
        {
        BCCMD_KALEXTADDRDEBUG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_function();
        length ++;
        }
        break;
    case BCCMDVARID_PANIC_ARG:
        {
        BCCMD_PANIC_ARG_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_data();
        length ++;
        }
        break;
    case BCCMDVARID_DISABLE_TX:
        {
        BCCMD_DISABLE_TX_PDU pdu ( prim );
        }
        break;
    case BCCMDVARID_FASTPIPE_RESIZE:
        {
        BCCMD_FASTPIPE_RESIZE_PDU pdu ( prim );
        if ( parameters )
            parameters[length] = pdu.get_delta_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_limit_controller();
        length ++;
        if ( parameters )
            parameters[length] = pdu.get_result();
        length ++;
        }
        break;
    default:
        //  failed = BP_NO_SUCH_VARID;
        //  pass up all the data as an array of uint16s.
        length += prim.get_payload_length();
        if ( parameters )
        {
            uint16 pl = prim.get_payload_length();
            uint16 * data = new uint16[pl];
            prim.get_payload(data,pl);
            for ( int i = 0 ; i < pl ; i++ )
                parameters[4+i] = data[i];
            delete[] data;
        }
        break;
    }
    assert ( ( parameters == 0 ) || ( parameters[0] >= length ) );
    if ( parameters )
        parameters[0] = length;
    return length;
}

///////////////////////////////////////////////////////////////////////////////
