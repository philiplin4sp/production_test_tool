////////////////////////////////////////////////////////////////////////////////
//
//  FILE     : gen_display_pdu.h
//
//  AUTHOR   : Adam Hughes
//
//  Copyright CSR 2003.  All rights reserved.
//
//  PURPOSE  : Declare private, autogenerated, functions in display_pdu
//             library.  This file is not propagated.
//
//  Autogenerated
//  from devHost/HCIPacker/Autogen/templates/display_hdr.tpl
//  by devTools/bin/pdu/gencode.pl
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __GEN_DISPLAY_PDU_H__
#define __GEN_DISPLAY_PDU_H__

#ifdef USE_DISPLAY_PDU

#include "display_pdu.h"

a_string display_cmd_cmplt_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_CHANNEL_MAP_pdu ( int indent , const HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_pdu ( int indent , const HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_SCO_FLOW_CON_ENABLE_pdu ( int indent , const HCI_READ_SCO_FLOW_CON_ENABLE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_INQUIRY_MODE_pdu ( int indent , const HCI_READ_INQUIRY_MODE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_GET_LINK_QUALITY_pdu ( int indent , const HCI_GET_LINK_QUALITY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_HOLD_MODE_ACTIVITY_pdu ( int indent , const HCI_READ_HOLD_MODE_ACTIVITY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_pdu ( int indent , const HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ALIAS_AUTH_ENABLE_pdu ( int indent , const HCI_READ_ALIAS_AUTH_ENABLE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_INQUIRYSCAN_ACTIVITY_pdu ( int indent , const HCI_READ_INQUIRYSCAN_ACTIVITY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_RESET_FAILED_CONTACT_COUNT_pdu ( int indent , const HCI_RESET_FAILED_CONTACT_COUNT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_USER_PASSKEY_REQUEST_REPLY_pdu ( int indent , const HCI_USER_PASSKEY_REQUEST_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_LINK_KEY_REQ_REPLY_pdu ( int indent , const HCI_LINK_KEY_REQ_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CLOCK_pdu ( int indent , const HCI_READ_CLOCK_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LMP_HANDLE_pdu ( int indent , const HCI_READ_LMP_HANDLE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGE_SCAN_TYPE_pdu ( int indent , const HCI_READ_PAGE_SCAN_TYPE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_pdu ( int indent , const HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_LINK_KEY_REQ_NEG_REPLY_pdu ( int indent , const HCI_LINK_KEY_REQ_NEG_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PIN_CODE_REQ_NEG_REPLY_pdu ( int indent , const HCI_PIN_CODE_REQ_NEG_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGESCAN_PERIOD_MODE_pdu ( int indent , const HCI_READ_PAGESCAN_PERIOD_MODE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ROLE_DISCOVERY_pdu ( int indent , const HCI_ROLE_DISCOVERY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CONN_ACCEPT_TIMEOUT_pdu ( int indent , const HCI_READ_CONN_ACCEPT_TIMEOUT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REMOTE_NAME_REQ_CANCEL_pdu ( int indent , const HCI_REMOTE_NAME_REQ_CANCEL_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ENCRYPTION_KEY_SIZE_pdu ( int indent , const HCI_READ_ENCRYPTION_KEY_SIZE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_DELETE_STORED_LINK_KEY_pdu ( int indent , const HCI_DELETE_STORED_LINK_KEY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_TEST_END_pdu ( int indent , const HCI_ULP_TEST_END_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_WHITE_LIST_SIZE_pdu ( int indent , const HCI_ULP_READ_WHITE_LIST_SIZE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_SUPPORTED_STATES_pdu ( int indent , const HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ENH_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_ENH_TX_POWER_LEVEL_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOOPBACK_MODE_pdu ( int indent , const HCI_READ_LOOPBACK_MODE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_BUFFER_SIZE_pdu ( int indent , const HCI_READ_BUFFER_SIZE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LE_HOST_SUPPORT_pdu ( int indent , const HCI_READ_LE_HOST_SUPPORT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_AUTO_FLUSH_TIMEOUT_pdu ( int indent , const HCI_WRITE_AUTO_FLUSH_TIMEOUT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_IO_CAPABILITY_RESPONSE_pdu ( int indent , const HCI_IO_CAPABILITY_RESPONSE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_pdu ( int indent , const HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ALIAS_ADDRESS_REQ_REPLY_pdu ( int indent , const HCI_ALIAS_ADDRESS_REQ_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_AUTO_FLUSH_TIMEOUT_pdu ( int indent , const HCI_READ_AUTO_FLUSH_TIMEOUT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_NAME_pdu ( int indent , const HCI_READ_LOCAL_NAME_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_RAND_pdu ( int indent , const HCI_ULP_RAND_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( int indent , const HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_ENCRYPT_pdu ( int indent , const HCI_ULP_ENCRYPT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_SIMPLE_PAIRING_MODE_pdu ( int indent , const HCI_READ_SIMPLE_PAIRING_MODE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_BD_ADDR_pdu ( int indent , const HCI_READ_BD_ADDR_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_VER_INFO_pdu ( int indent , const HCI_READ_LOCAL_VER_INFO_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CURRENT_IAC_LAP_pdu ( int indent , const HCI_READ_CURRENT_IAC_LAP_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_EXT_FEATURES_pdu ( int indent , const HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_NUM_BCAST_RETXS_pdu ( int indent , const HCI_READ_NUM_BCAST_RETXS_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_NUM_SUPPORTED_IAC_pdu ( int indent , const HCI_READ_NUM_SUPPORTED_IAC_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_COUNTRY_CODE_pdu ( int indent , const HCI_READ_COUNTRY_CODE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_FAILED_CONTACT_COUNT_pdu ( int indent , const HCI_READ_FAILED_CONTACT_COUNT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PIN_TYPE_pdu ( int indent , const HCI_READ_PIN_TYPE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_OOB_DATA_pdu ( int indent , const HCI_READ_LOCAL_OOB_DATA_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SNIFF_SUB_RATE_pdu ( int indent , const HCI_SNIFF_SUB_RATE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_AUTH_ENABLE_pdu ( int indent , const HCI_READ_AUTH_ENABLE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_READ_LINK_POLICY_SETTINGS_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_INQUIRY_SCAN_TYPE_pdu ( int indent , const HCI_READ_INQUIRY_SCAN_TYPE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SEND_KEYPRESS_NOTIFICATION_pdu ( int indent , const HCI_SEND_KEYPRESS_NOTIFICATION_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGE_TIMEOUT_pdu ( int indent , const HCI_READ_PAGE_TIMEOUT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_BUFFER_SIZE_pdu ( int indent , const HCI_ULP_READ_BUFFER_SIZE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_VOICE_SETTING_pdu ( int indent , const HCI_READ_VOICE_SETTING_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_pdu ( int indent , const HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_SCAN_ENABLE_pdu ( int indent , const HCI_READ_SCAN_ENABLE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_TX_POWER_LEVEL_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_pdu ( int indent , const HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LINK_SUPERV_TIMEOUT_pdu ( int indent , const HCI_READ_LINK_SUPERV_TIMEOUT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PRIVATE_PAIRING_REQ_REPLY_pdu ( int indent , const HCI_PRIVATE_PAIRING_REQ_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PIN_CODE_REQ_REPLY_pdu ( int indent , const HCI_PIN_CODE_REQ_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_USER_CONFIRMATION_REQUEST_REPLY_pdu ( int indent , const HCI_USER_CONFIRMATION_REQUEST_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_AFH_CHANNEL_MAP_pdu ( int indent , const HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_AFH_CHANNEL_CLASS_M_pdu ( int indent , const HCI_READ_AFH_CHANNEL_CLASS_M_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_GENERATED_ALIAS_pdu ( int indent , const HCI_GENERATED_ALIAS_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGESCAN_ACTIVITY_pdu ( int indent , const HCI_READ_PAGESCAN_ACTIVITY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_SUPP_COMMANDS_pdu ( int indent , const HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGESCAN_MODE_pdu ( int indent , const HCI_READ_PAGESCAN_MODE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_USER_PASSKEY_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_USER_PASSKEY_REQUEST_NEG_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_CREATE_CONNECTION_CANCEL_pdu ( int indent , const HCI_CREATE_CONNECTION_CANCEL_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ENC_MODE_pdu ( int indent , const HCI_READ_ENC_MODE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REMOTE_OOB_DATA_REQUEST_REPLY_pdu ( int indent , const HCI_REMOTE_OOB_DATA_REQUEST_REPLY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_LINK_SUPERV_TIMEOUT_pdu ( int indent , const HCI_WRITE_LINK_SUPERV_TIMEOUT_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ANON_ADDR_CHANGE_PARAMS_pdu ( int indent , const HCI_READ_ANON_ADDR_CHANGE_PARAMS_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_FLUSH_pdu ( int indent , const HCI_FLUSH_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_SUPP_FEATURES_pdu ( int indent , const HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_STORED_LINK_KEY_pdu ( int indent , const HCI_WRITE_STORED_LINK_KEY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_RSSI_pdu ( int indent , const HCI_READ_RSSI_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_STORED_LINK_KEY_pdu ( int indent , const HCI_READ_STORED_LINK_KEY_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_WRITE_LINK_POLICY_SETTINGS_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ANON_MODE_pdu ( int indent , const HCI_READ_ANON_MODE_RET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CLASS_OF_DEVICE_pdu ( int indent , const HCI_READ_CLASS_OF_DEVICE_RET_T_PDU& , PDU_displayer * policy );
a_string display_cmd_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LMP_HANDLE_pdu ( int indent , const HCI_READ_LMP_HANDLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REJECT_SYNCHRONOUS_CONN_REQ_pdu ( int indent , const HCI_REJECT_SYNCHRONOUS_CONN_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ADD_SCO_CONNECTION_pdu ( int indent , const HCI_ADD_SCO_CONNECTION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_ANON_MODE_pdu ( int indent , const HCI_WRITE_ANON_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SEND_KEYPRESS_NOTIFICATION_pdu ( int indent , const HCI_SEND_KEYPRESS_NOTIFICATION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_CHANGE_CONN_LINK_KEY_pdu ( int indent , const HCI_CHANGE_CONN_LINK_KEY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_pdu ( int indent , const HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_AUTO_FLUSH_TIMEOUT_pdu ( int indent , const HCI_WRITE_AUTO_FLUSH_TIMEOUT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_SCO_FLOW_CON_ENABLE_pdu ( int indent , const HCI_WRITE_SCO_FLOW_CON_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_CREATE_CONNECTION_CANCEL_pdu ( int indent , const HCI_ULP_CREATE_CONNECTION_CANCEL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_NUM_SUPPORTED_IAC_pdu ( int indent , const HCI_READ_NUM_SUPPORTED_IAC_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_AUTH_ENABLE_pdu ( int indent , const HCI_WRITE_AUTH_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_READ_LINK_POLICY_SETTINGS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_SCO_FLOW_CON_ENABLE_pdu ( int indent , const HCI_READ_SCO_FLOW_CON_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_CLEAR_WHITE_LIST_pdu ( int indent , const HCI_ULP_CLEAR_WHITE_LIST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_STORED_LINK_KEY_pdu ( int indent , const HCI_READ_STORED_LINK_KEY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SWITCH_ROLE_pdu ( int indent , const HCI_SWITCH_ROLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_INQUIRY_pdu ( int indent , const HCI_INQUIRY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_REMOTE_EXT_FEATURES_pdu ( int indent , const HCI_READ_REMOTE_EXT_FEATURES_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_TRANSMITTER_TEST_pdu ( int indent , const HCI_ULP_TRANSMITTER_TEST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_INQUIRY_SCAN_TYPE_pdu ( int indent , const HCI_WRITE_INQUIRY_SCAN_TYPE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_RESET_pdu ( int indent , const HCI_RESET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_RAND_pdu ( int indent , const HCI_ULP_RAND_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REFRESH_ENCRYPTION_KEY_pdu ( int indent , const HCI_REFRESH_ENCRYPTION_KEY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EXCHANGE_FIXED_INFO_pdu ( int indent , const HCI_EXCHANGE_FIXED_INFO_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_pdu ( int indent , const HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SETUP_SYNCHRONOUS_CONN_pdu ( int indent , const HCI_SETUP_SYNCHRONOUS_CONN_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_INQUIRY_SCAN_TYPE_pdu ( int indent , const HCI_READ_INQUIRY_SCAN_TYPE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_FLUSH_pdu ( int indent , const HCI_FLUSH_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_START_ENCRYPTION_pdu ( int indent , const HCI_ULP_START_ENCRYPTION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_WHITE_LIST_SIZE_pdu ( int indent , const HCI_ULP_READ_WHITE_LIST_SIZE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_SCAN_ENABLE_pdu ( int indent , const HCI_ULP_SET_SCAN_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SET_AFH_CHANNEL_CLASS_pdu ( int indent , const HCI_SET_AFH_CHANNEL_CLASS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_IO_CAPABILITY_RESPONSE_pdu ( int indent , const HCI_IO_CAPABILITY_RESPONSE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SET_CONN_ENCRYPTION_pdu ( int indent , const HCI_SET_CONN_ENCRYPTION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PIN_TYPE_pdu ( int indent , const HCI_READ_PIN_TYPE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_pdu ( int indent , const HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_TEST_END_pdu ( int indent , const HCI_ULP_TEST_END_T_PDU& , PDU_displayer * policy );
a_string display_HCI_HOST_NUM_COMPLETED_PACKETS_pdu ( int indent , const HCI_HOST_NUM_COMPLETED_PACKETS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_REMOTE_SUPP_FEATURES_pdu ( int indent , const HCI_READ_REMOTE_SUPP_FEATURES_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_REMOTE_VER_INFO_pdu ( int indent , const HCI_READ_REMOTE_VER_INFO_T_PDU& , PDU_displayer * policy );
a_string display_HCI_HOST_BUFFER_SIZE_pdu ( int indent , const HCI_HOST_BUFFER_SIZE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ALIAS_ADDRESS_REQ_REPLY_pdu ( int indent , const HCI_ALIAS_ADDRESS_REQ_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGESCAN_MODE_pdu ( int indent , const HCI_READ_PAGESCAN_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_SIMPLE_PAIRING_MODE_pdu ( int indent , const HCI_WRITE_SIMPLE_PAIRING_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_CONNECTION_UPDATE_pdu ( int indent , const HCI_ULP_CONNECTION_UPDATE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CLOCK_pdu ( int indent , const HCI_READ_CLOCK_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ENHANCED_FLUSH_pdu ( int indent , const HCI_ENHANCED_FLUSH_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PERIODIC_INQUIRY_MODE_pdu ( int indent , const HCI_PERIODIC_INQUIRY_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_MNFR_EXTENSION_pdu ( int indent , const HCI_MNFR_EXTENSION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ROLE_DISCOVERY_pdu ( int indent , const HCI_ROLE_DISCOVERY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SET_EVENT_FILTER_pdu ( int indent , const HCI_SET_EVENT_FILTER_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PRIVATE_PAIRING_REQ_REPLY_pdu ( int indent , const HCI_PRIVATE_PAIRING_REQ_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_INQUIRYSCAN_ACTIVITY_pdu ( int indent , const HCI_READ_INQUIRYSCAN_ACTIVITY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_SIMPLE_PAIRING_MODE_pdu ( int indent , const HCI_READ_SIMPLE_PAIRING_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_INQUIRY_MODE_pdu ( int indent , const HCI_WRITE_INQUIRY_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_USER_CONFIRMATION_REQUEST_REPLY_pdu ( int indent , const HCI_USER_CONFIRMATION_REQUEST_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_PAGE_TIMEOUT_pdu ( int indent , const HCI_WRITE_PAGE_TIMEOUT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_pdu ( int indent , const HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGESCAN_PERIOD_MODE_pdu ( int indent , const HCI_READ_PAGESCAN_PERIOD_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_PAGE_SCAN_TYPE_pdu ( int indent , const HCI_WRITE_PAGE_SCAN_TYPE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REMOTE_NAME_REQ_pdu ( int indent , const HCI_REMOTE_NAME_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_CREATE_CONNECTION_CANCEL_pdu ( int indent , const HCI_CREATE_CONNECTION_CANCEL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGE_SCAN_TYPE_pdu ( int indent , const HCI_READ_PAGE_SCAN_TYPE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REMOTE_OOB_DATA_REQUEST_REPLY_pdu ( int indent , const HCI_REMOTE_OOB_DATA_REQUEST_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_NAME_pdu ( int indent , const HCI_READ_LOCAL_NAME_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_VER_INFO_pdu ( int indent , const HCI_READ_LOCAL_VER_INFO_T_PDU& , PDU_displayer * policy );
a_string display_HCI_DISCONNECT_pdu ( int indent , const HCI_DISCONNECT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_AFH_CHANNEL_CLASS_M_pdu ( int indent , const HCI_WRITE_AFH_CHANNEL_CLASS_M_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_pdu ( int indent , const HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ENC_MODE_pdu ( int indent , const HCI_READ_ENC_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_BD_ADDR_pdu ( int indent , const HCI_READ_BD_ADDR_T_PDU& , PDU_displayer * policy );
a_string display_HCI_GENERATED_ALIAS_pdu ( int indent , const HCI_GENERATED_ALIAS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_pdu ( int indent , const HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_LINK_KEY_REQ_REPLY_pdu ( int indent , const HCI_LINK_KEY_REQ_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_NUM_BCAST_RETXS_pdu ( int indent , const HCI_WRITE_NUM_BCAST_RETXS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PIN_CODE_REQ_NEG_REPLY_pdu ( int indent , const HCI_PIN_CODE_REQ_NEG_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_ALIAS_AUTH_ENABLE_pdu ( int indent , const HCI_WRITE_ALIAS_AUTH_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_LE_HOST_SUPPORT_pdu ( int indent , const HCI_WRITE_LE_HOST_SUPPORT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_MASTER_LINK_KEY_pdu ( int indent , const HCI_MASTER_LINK_KEY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_ENCRYPT_pdu ( int indent , const HCI_ULP_ENCRYPT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_AFH_CHANNEL_CLASS_M_pdu ( int indent , const HCI_READ_AFH_CHANNEL_CLASS_M_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_HOLD_MODE_ACTIVITY_pdu ( int indent , const HCI_WRITE_HOLD_MODE_ACTIVITY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_pdu ( int indent , const HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_SCAN_ENABLE_pdu ( int indent , const HCI_READ_SCAN_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ENCRYPTION_KEY_SIZE_pdu ( int indent , const HCI_READ_ENCRYPTION_KEY_SIZE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_WRITE_LINK_POLICY_SETTINGS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ALIAS_AUTH_ENABLE_pdu ( int indent , const HCI_READ_ALIAS_AUTH_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PIN_CODE_REQ_REPLY_pdu ( int indent , const HCI_PIN_CODE_REQ_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_CREATE_NEW_UNIT_KEY_pdu ( int indent , const HCI_CREATE_NEW_UNIT_KEY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_PAGESCAN_MODE_pdu ( int indent , const HCI_WRITE_PAGESCAN_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( int indent , const HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EXIT_SNIFF_MODE_pdu ( int indent , const HCI_EXIT_SNIFF_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOOPBACK_MODE_pdu ( int indent , const HCI_READ_LOOPBACK_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( int indent , const HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_FAILED_CONTACT_COUNT_pdu ( int indent , const HCI_READ_FAILED_CONTACT_COUNT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SNIFF_SUB_RATE_pdu ( int indent , const HCI_SNIFF_SUB_RATE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ANON_MODE_pdu ( int indent , const HCI_READ_ANON_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_SCAN_PARAMETERS_pdu ( int indent , const HCI_ULP_SET_SCAN_PARAMETERS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_pdu ( int indent , const HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_AUTO_FLUSH_TIMEOUT_pdu ( int indent , const HCI_READ_AUTO_FLUSH_TIMEOUT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_DELETE_STORED_LINK_KEY_pdu ( int indent , const HCI_DELETE_STORED_LINK_KEY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_CLASS_OF_DEVICE_pdu ( int indent , const HCI_WRITE_CLASS_OF_DEVICE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_PIN_TYPE_pdu ( int indent , const HCI_WRITE_PIN_TYPE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EXIT_PARK_MODE_pdu ( int indent , const HCI_EXIT_PARK_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_ADVERTISE_ENABLE_pdu ( int indent , const HCI_ULP_SET_ADVERTISE_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_QOS_SETUP_pdu ( int indent , const HCI_QOS_SETUP_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_PAGESCAN_ACTIVITY_pdu ( int indent , const HCI_WRITE_PAGESCAN_ACTIVITY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_VOICE_SETTING_pdu ( int indent , const HCI_READ_VOICE_SETTING_T_PDU& , PDU_displayer * policy );
a_string display_HCI_PARK_MODE_pdu ( int indent , const HCI_PARK_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_COUNTRY_CODE_pdu ( int indent , const HCI_READ_COUNTRY_CODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SET_EVENT_MASK_pdu ( int indent , const HCI_SET_EVENT_MASK_T_PDU& , PDU_displayer * policy );
a_string display_HCI_HOLD_MODE_pdu ( int indent , const HCI_HOLD_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_AUTH_ENABLE_pdu ( int indent , const HCI_READ_AUTH_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_OOB_DATA_pdu ( int indent , const HCI_READ_LOCAL_OOB_DATA_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGESCAN_ACTIVITY_pdu ( int indent , const HCI_READ_PAGESCAN_ACTIVITY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_CURRENT_IAC_LAP_pdu ( int indent , const HCI_WRITE_CURRENT_IAC_LAP_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ACCEPT_CONNECTION_REQ_pdu ( int indent , const HCI_ACCEPT_CONNECTION_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_pdu ( int indent , const HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_TX_POWER_LEVEL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_LINK_SUPERV_TIMEOUT_pdu ( int indent , const HCI_WRITE_LINK_SUPERV_TIMEOUT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_AUTH_REQ_pdu ( int indent , const HCI_AUTH_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_INQUIRY_CANCEL_pdu ( int indent , const HCI_INQUIRY_CANCEL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_INQUIRYSCAN_ACTIVITY_pdu ( int indent , const HCI_WRITE_INQUIRYSCAN_ACTIVITY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_NUM_BCAST_RETXS_pdu ( int indent , const HCI_READ_NUM_BCAST_RETXS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_AFH_CHANNEL_MAP_pdu ( int indent , const HCI_READ_AFH_CHANNEL_MAP_T_PDU& , PDU_displayer * policy );
a_string display_HCI_USER_PASSKEY_REQUEST_REPLY_pdu ( int indent , const HCI_USER_PASSKEY_REQUEST_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_PAGESCAN_PERIOD_MODE_pdu ( int indent , const HCI_WRITE_PAGESCAN_PERIOD_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LE_HOST_SUPPORT_pdu ( int indent , const HCI_READ_LE_HOST_SUPPORT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LINK_SUPERV_TIMEOUT_pdu ( int indent , const HCI_READ_LINK_SUPERV_TIMEOUT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EXCHANGE_ALIAS_INFO_pdu ( int indent , const HCI_EXCHANGE_ALIAS_INFO_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_SCAN_RESPONSE_DATA_pdu ( int indent , const HCI_ULP_SET_SCAN_RESPONSE_DATA_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_CONN_ACCEPT_TIMEOUT_pdu ( int indent , const HCI_WRITE_CONN_ACCEPT_TIMEOUT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_RESET_FAILED_CONTACT_COUNT_pdu ( int indent , const HCI_RESET_FAILED_CONTACT_COUNT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_LOOPBACK_MODE_pdu ( int indent , const HCI_WRITE_LOOPBACK_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ANON_ADDR_CHANGE_PARAMS_pdu ( int indent , const HCI_READ_ANON_ADDR_CHANGE_PARAMS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_CREATE_CONNECTION_pdu ( int indent , const HCI_ULP_CREATE_CONNECTION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_SUPP_FEATURES_pdu ( int indent , const HCI_READ_LOCAL_SUPP_FEATURES_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_RSSI_pdu ( int indent , const HCI_READ_RSSI_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EXIT_PERIODIC_INQUIRY_MODE_pdu ( int indent , const HCI_EXIT_PERIODIC_INQUIRY_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_pdu ( int indent , const HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_pdu ( int indent , const HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_ENC_MODE_pdu ( int indent , const HCI_WRITE_ENC_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CONN_ACCEPT_TIMEOUT_pdu ( int indent , const HCI_READ_CONN_ACCEPT_TIMEOUT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ENABLE_DUT_MODE_pdu ( int indent , const HCI_ENABLE_DUT_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_SUPPORTED_STATES_pdu ( int indent , const HCI_ULP_READ_SUPPORTED_STATES_T_PDU& , PDU_displayer * policy );
a_string display_HCI_GET_LINK_QUALITY_pdu ( int indent , const HCI_GET_LINK_QUALITY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_CHANGE_CONN_PKT_TYPE_pdu ( int indent , const HCI_CHANGE_CONN_PKT_TYPE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_VOICE_SETTING_pdu ( int indent , const HCI_WRITE_VOICE_SETTING_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_ENH_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_ENH_TX_POWER_LEVEL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_RANDOM_ADDRESS_pdu ( int indent , const HCI_ULP_SET_RANDOM_ADDRESS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CLOCK_OFFSET_pdu ( int indent , const HCI_READ_CLOCK_OFFSET_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REMOTE_NAME_REQ_CANCEL_pdu ( int indent , const HCI_REMOTE_NAME_REQ_CANCEL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_STORED_LINK_KEY_pdu ( int indent , const HCI_WRITE_STORED_LINK_KEY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_RECEIVER_TEST_pdu ( int indent , const HCI_ULP_RECEIVER_TEST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_BUFFER_SIZE_pdu ( int indent , const HCI_ULP_READ_BUFFER_SIZE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_USER_PASSKEY_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_USER_PASSKEY_REQUEST_NEG_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_LINK_KEY_REQ_NEG_REPLY_pdu ( int indent , const HCI_LINK_KEY_REQ_NEG_REPLY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_EXT_FEATURES_pdu ( int indent , const HCI_READ_LOCAL_EXT_FEATURES_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CLASS_OF_DEVICE_pdu ( int indent , const HCI_READ_CLASS_OF_DEVICE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_pdu ( int indent , const HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_BUFFER_SIZE_pdu ( int indent , const HCI_READ_BUFFER_SIZE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_REMOTE_USED_FEATURES_pdu ( int indent , const HCI_ULP_READ_REMOTE_USED_FEATURES_T_PDU& , PDU_displayer * policy );
a_string display_HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_pdu ( int indent , const HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_T_PDU& , PDU_displayer * policy );
a_string display_HCI_FLOW_SPEC_pdu ( int indent , const HCI_FLOW_SPEC_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_EVENT_MASK_pdu ( int indent , const HCI_ULP_SET_EVENT_MASK_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SET_HCTOHOST_FLOW_CONTROL_pdu ( int indent , const HCI_SET_HCTOHOST_FLOW_CONTROL_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_SCAN_ENABLE_pdu ( int indent , const HCI_WRITE_SCAN_ENABLE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_READ_CHANNEL_MAP_pdu ( int indent , const HCI_ULP_READ_CHANNEL_MAP_T_PDU& , PDU_displayer * policy );
a_string display_HCI_SNIFF_MODE_pdu ( int indent , const HCI_SNIFF_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_LOCAL_SUPP_COMMANDS_pdu ( int indent , const HCI_READ_LOCAL_SUPP_COMMANDS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_REJECT_CONNECTION_REQ_pdu ( int indent , const HCI_REJECT_CONNECTION_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_ADVERTISING_PARAMETERS_pdu ( int indent , const HCI_ULP_SET_ADVERTISING_PARAMETERS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_pdu ( int indent , const HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_CREATE_CONNECTION_pdu ( int indent , const HCI_CREATE_CONNECTION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_CURRENT_IAC_LAP_pdu ( int indent , const HCI_READ_CURRENT_IAC_LAP_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_HOLD_MODE_ACTIVITY_pdu ( int indent , const HCI_READ_HOLD_MODE_ACTIVITY_T_PDU& , PDU_displayer * policy );
a_string display_HCI_CHANGE_LOCAL_NAME_pdu ( int indent , const HCI_CHANGE_LOCAL_NAME_T_PDU& , PDU_displayer * policy );
a_string display_HCI_ULP_SET_ADVERTISING_DATA_pdu ( int indent , const HCI_ULP_SET_ADVERTISING_DATA_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_INQUIRY_MODE_pdu ( int indent , const HCI_READ_INQUIRY_MODE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_READ_PAGE_TIMEOUT_pdu ( int indent , const HCI_READ_PAGE_TIMEOUT_T_PDU& , PDU_displayer * policy );
a_string display_evt_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_HCI_EV_USER_PASSKEY_REQUEST_pdu ( int indent , const HCI_EV_USER_PASSKEY_REQUEST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_KEYPRESS_NOTIFICATION_pdu ( int indent , const HCI_EV_KEYPRESS_NOTIFICATION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_DATA_BUFFER_OVERFLOW_pdu ( int indent , const HCI_EV_DATA_BUFFER_OVERFLOW_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ACTIVE_ADDRESS_pdu ( int indent , const HCI_EV_ACTIVE_ADDRESS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_SYNC_CONN_COMPLETE_pdu ( int indent , const HCI_EV_SYNC_CONN_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ALIAS_ADDRESS_REQ_pdu ( int indent , const HCI_EV_ALIAS_ADDRESS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_LINK_KEY_NOTIFICATION_pdu ( int indent , const HCI_EV_LINK_KEY_NOTIFICATION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ALLOW_PRIVATE_PAIRING_pdu ( int indent , const HCI_EV_ALLOW_PRIVATE_PAIRING_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_DISCONNECT_COMPLETE_pdu ( int indent , const HCI_EV_DISCONNECT_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_INQUIRY_RESULT_pdu ( int indent , const HCI_EV_INQUIRY_RESULT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_LST_CHANGE_pdu ( int indent , const HCI_EV_LST_CHANGE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_COMMAND_STATUS_pdu ( int indent , const HCI_EV_COMMAND_STATUS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE_pdu ( int indent , const HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_READ_CLOCK_OFFSET_COMPLETE_pdu ( int indent , const HCI_EV_READ_CLOCK_OFFSET_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_CONN_REQUEST_pdu ( int indent , const HCI_EV_CONN_REQUEST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_MODE_CHANGE_pdu ( int indent , const HCI_EV_MODE_CHANGE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_USER_PASSKEY_NOTIFICATION_pdu ( int indent , const HCI_EV_USER_PASSKEY_NOTIFICATION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_FIXED_ADDRESS_ATTEMPT_pdu ( int indent , const HCI_EV_FIXED_ADDRESS_ATTEMPT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE_pdu ( int indent , const HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_REMOTE_NAME_REQ_COMPLETE_pdu ( int indent , const HCI_EV_REMOTE_NAME_REQ_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_CONN_COMPLETE_pdu ( int indent , const HCI_EV_CONN_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_REM_HOST_SUPPORTED_FEATURES_pdu ( int indent , const HCI_EV_REM_HOST_SUPPORTED_FEATURES_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_GENERATE_ALIAS_REQ_pdu ( int indent , const HCI_EV_GENERATE_ALIAS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_READ_REMOTE_VER_INFO_COMPLETE_pdu ( int indent , const HCI_EV_READ_REMOTE_VER_INFO_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_EXTENDED_INQUIRY_RESULT_pdu ( int indent , const HCI_EV_EXTENDED_INQUIRY_RESULT_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_IO_CAPABILITY_REQUEST_pdu ( int indent , const HCI_EV_IO_CAPABILITY_REQUEST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_IO_CAPABILITY_RESPONSE_pdu ( int indent , const HCI_EV_IO_CAPABILITY_RESPONSE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ROLE_CHANGE_pdu ( int indent , const HCI_EV_ROLE_CHANGE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_LINK_KEY_REQ_pdu ( int indent , const HCI_EV_LINK_KEY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_USER_CONFIRMATION_REQUEST_pdu ( int indent , const HCI_EV_USER_CONFIRMATION_REQUEST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_FLOW_SPEC_COMPLETE_pdu ( int indent , const HCI_EV_FLOW_SPEC_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_REMOTE_OOB_DATA_REQUEST_pdu ( int indent , const HCI_EV_REMOTE_OOB_DATA_REQUEST_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_MASTER_LINK_KEY_COMPLETE_pdu ( int indent , const HCI_EV_MASTER_LINK_KEY_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_SIMPLE_PAIRING_COMPLETE_pdu ( int indent , const HCI_EV_SIMPLE_PAIRING_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_FLUSH_OCCURRED_pdu ( int indent , const HCI_EV_FLUSH_OCCURRED_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_PAGE_SCAN_REP_MODE_CHANGE_pdu ( int indent , const HCI_EV_PAGE_SCAN_REP_MODE_CHANGE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_MNFR_EXTENSION_pdu ( int indent , const HCI_EV_MNFR_EXTENSION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_CONN_PACKET_TYPE_CHANGED_pdu ( int indent , const HCI_EV_CONN_PACKET_TYPE_CHANGED_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_INQUIRY_RESULT_WITH_RSSI_pdu ( int indent , const HCI_EV_INQUIRY_RESULT_WITH_RSSI_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_HARDWARE_ERROR_pdu ( int indent , const HCI_EV_HARDWARE_ERROR_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_SYNC_CONN_CHANGED_pdu ( int indent , const HCI_EV_SYNC_CONN_CHANGED_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_QOS_VIOLATION_pdu ( int indent , const HCI_EV_QOS_VIOLATION_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_READ_REM_EXT_FEATURES_COMPLETE_pdu ( int indent , const HCI_EV_READ_REM_EXT_FEATURES_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_MAX_SLOTS_CHANGE_pdu ( int indent , const HCI_EV_MAX_SLOTS_CHANGE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ALIAS_ADDRESS_pdu ( int indent , const HCI_EV_ALIAS_ADDRESS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_RETURN_LINK_KEYS_pdu ( int indent , const HCI_EV_RETURN_LINK_KEYS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_FIXED_ADDRESS_pdu ( int indent , const HCI_EV_FIXED_ADDRESS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE_pdu ( int indent , const HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_SNIFF_SUB_RATE_pdu ( int indent , const HCI_EV_SNIFF_SUB_RATE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_INQUIRY_COMPLETE_pdu ( int indent , const HCI_EV_INQUIRY_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ALIAS_NOT_RECOGNISED_pdu ( int indent , const HCI_EV_ALIAS_NOT_RECOGNISED_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_QOS_SETUP_COMPLETE_pdu ( int indent , const HCI_EV_QOS_SETUP_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_NUMBER_COMPLETED_PKTS_pdu ( int indent , const HCI_EV_NUMBER_COMPLETED_PKTS_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_AUTH_COMPLETE_pdu ( int indent , const HCI_EV_AUTH_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ENHANCED_FLUSH_COMPLETE_pdu ( int indent , const HCI_EV_ENHANCED_FLUSH_COMPLETE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_PAGE_SCAN_MODE_CHANGE_pdu ( int indent , const HCI_EV_PAGE_SCAN_MODE_CHANGE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_ENCRYPTION_CHANGE_pdu ( int indent , const HCI_EV_ENCRYPTION_CHANGE_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_LOOPBACK_COMMAND_pdu ( int indent , const HCI_EV_LOOPBACK_COMMAND_T_PDU& , PDU_displayer * policy );
a_string display_HCI_EV_PIN_CODE_REQ_pdu ( int indent , const HCI_EV_PIN_CODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_rfcomm_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_RFC_CLIENT_CONNECT_CFM_pdu ( int indent , const RFC_CLIENT_CONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_LINESTATUS_IND_pdu ( int indent , const RFC_LINESTATUS_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_L2CA_AMP_LINK_LOSS_IND_pdu ( int indent , const RFC_L2CA_AMP_LINK_LOSS_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_INIT_CFM_pdu ( int indent , const RFC_INIT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_DISCONNECT_IND_pdu ( int indent , const RFC_DISCONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_SERVER_CONNECT_CFM_pdu ( int indent , const RFC_SERVER_CONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_LINESTATUS_REQ_pdu ( int indent , const RFC_LINESTATUS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_L2CA_MOVE_CHANNEL_RSP_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_RSP_T_PDU& , PDU_displayer * policy );
a_string display_RFC_DATAREAD_IND_pdu ( int indent , const RFC_DATAREAD_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_UNREGISTER_CFM_pdu ( int indent , const RFC_UNREGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_PORTNEG_CFM_pdu ( int indent , const RFC_PORTNEG_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_DATAWRITE_REQ_pdu ( int indent , const RFC_DATAWRITE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_DISCONNECT_REQ_pdu ( int indent , const RFC_DISCONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_MODEM_STATUS_CFM_pdu ( int indent , const RFC_MODEM_STATUS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_FC_CFM_pdu ( int indent , const RFC_FC_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_TEST_REQ_pdu ( int indent , const RFC_TEST_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_L2CA_MOVE_CHANNEL_IND_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_NSC_IND_pdu ( int indent , const RFC_NSC_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_SERVER_CONNECT_RSP_pdu ( int indent , const RFC_SERVER_CONNECT_RSP_T_PDU& , PDU_displayer * policy );
a_string display_RFC_LINESTATUS_CFM_pdu ( int indent , const RFC_LINESTATUS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_L2CA_MOVE_CHANNEL_REQ_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_ERROR_IND_pdu ( int indent , const RFC_ERROR_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_PORTNEG_RSP_pdu ( int indent , const RFC_PORTNEG_RSP_T_PDU& , PDU_displayer * policy );
a_string display_RFC_DISCONNECT_CFM_pdu ( int indent , const RFC_DISCONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_DATAWRITE_CFM_pdu ( int indent , const RFC_DATAWRITE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_REGISTER_REQ_pdu ( int indent , const RFC_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_CLIENT_CONNECT_REQ_pdu ( int indent , const RFC_CLIENT_CONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_SERVER_CONNECT_IND_pdu ( int indent , const RFC_SERVER_CONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_TEST_CFM_pdu ( int indent , const RFC_TEST_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_INIT_REQ_pdu ( int indent , const RFC_INIT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_PORTNEG_IND_pdu ( int indent , const RFC_PORTNEG_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_UNREGISTER_REQ_pdu ( int indent , const RFC_UNREGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_L2CA_MOVE_CHANNEL_CMP_IND_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_CMP_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_L2CA_MOVE_CHANNEL_CFM_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_FC_IND_pdu ( int indent , const RFC_FC_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_MODEM_STATUS_IND_pdu ( int indent , const RFC_MODEM_STATUS_IND_T_PDU& , PDU_displayer * policy );
a_string display_RFC_PORTNEG_REQ_pdu ( int indent , const RFC_PORTNEG_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_DISCONNECT_RSP_pdu ( int indent , const RFC_DISCONNECT_RSP_T_PDU& , PDU_displayer * policy );
a_string display_RFC_DATAREAD_RSP_pdu ( int indent , const RFC_DATAREAD_RSP_T_PDU& , PDU_displayer * policy );
a_string display_RFC_REGISTER_CFM_pdu ( int indent , const RFC_REGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_RFC_FC_REQ_pdu ( int indent , const RFC_FC_REQ_T_PDU& , PDU_displayer * policy );
a_string display_RFC_MODEM_STATUS_REQ_pdu ( int indent , const RFC_MODEM_STATUS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_l2cap_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_L2CA_MOVE_CHANNEL_REQ_pdu ( int indent , const L2CA_MOVE_CHANNEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CREATE_CHANNEL_IND_pdu ( int indent , const L2CA_CREATE_CHANNEL_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DISCONNECT_IND_pdu ( int indent , const L2CA_DISCONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DATAREAD_RSP_pdu ( int indent , const L2CA_DATAREAD_RSP_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_REGISTER_CFM_pdu ( int indent , const L2CA_REGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_AUTO_CONNECT_IND_pdu ( int indent , const L2CA_AUTO_CONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_ROUTE_DATA_REQ_pdu ( int indent , const L2CA_ROUTE_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_REGISTER_FIXED_CID_REQ_pdu ( int indent , const L2CA_REGISTER_FIXED_CID_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONNECT_IND_pdu ( int indent , const L2CA_CONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_UNREGISTER_CFM_pdu ( int indent , const L2CA_UNREGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CREATE_CHANNEL_REQ_pdu ( int indent , const L2CA_CREATE_CHANNEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MULTICAST_REQ_pdu ( int indent , const L2CA_MULTICAST_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONFIG_CFM_pdu ( int indent , const L2CA_CONFIG_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_AUTO_CONNECT_REQ_pdu ( int indent , const L2CA_AUTO_CONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DISCONNECT_REQ_pdu ( int indent , const L2CA_DISCONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_UNKNOWN_SIGNAL_IND_pdu ( int indent , const L2CA_UNKNOWN_SIGNAL_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONNECT_REQ_pdu ( int indent , const L2CA_CONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DATAWRITE_CFM_pdu ( int indent , const L2CA_DATAWRITE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MTU_VIOLATION_IND_pdu ( int indent , const L2CA_MTU_VIOLATION_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONNECTION_PAR_UPDATE_CFM_pdu ( int indent , const L2CA_CONNECTION_PAR_UPDATE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MAP_FIXED_CID_CFM_pdu ( int indent , const L2CA_MAP_FIXED_CID_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DATAREAD_IND_pdu ( int indent , const L2CA_DATAREAD_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MOVE_CHANNEL_CFM_pdu ( int indent , const L2CA_MOVE_CHANNEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_UNROUTE_DATA_IND_pdu ( int indent , const L2CA_UNROUTE_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_BUSY_IND_pdu ( int indent , const L2CA_BUSY_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_GETINFO_REQ_pdu ( int indent , const L2CA_GETINFO_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_PING_REQ_pdu ( int indent , const L2CA_PING_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_ROUTE_DATA_CFM_pdu ( int indent , const L2CA_ROUTE_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_REGISTER_FIXED_CID_CFM_pdu ( int indent , const L2CA_REGISTER_FIXED_CID_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_BUSY_REQ_pdu ( int indent , const L2CA_BUSY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_UNROUTE_DATA_REQ_pdu ( int indent , const L2CA_UNROUTE_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DATAWRITE_ABORT_REQ_pdu ( int indent , const L2CA_DATAWRITE_ABORT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MOVE_CHANNEL_CMP_IND_pdu ( int indent , const L2CA_MOVE_CHANNEL_CMP_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CREATE_CHANNEL_CFM_pdu ( int indent , const L2CA_CREATE_CHANNEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONFIG_RSP_pdu ( int indent , const L2CA_CONFIG_RSP_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DISCONNECT_CFM_pdu ( int indent , const L2CA_DISCONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_AUTO_CONNECT_CFM_pdu ( int indent , const L2CA_AUTO_CONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_RAW_DATA_IND_pdu ( int indent , const L2CA_RAW_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DEBUG_DROP_REQ_pdu ( int indent , const L2CA_DEBUG_DROP_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONNECT_CFM_pdu ( int indent , const L2CA_CONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MAP_FIXED_CID_RSP_pdu ( int indent , const L2CA_MAP_FIXED_CID_RSP_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MOVE_CHANNEL_RSP_pdu ( int indent , const L2CA_MOVE_CHANNEL_RSP_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_RAW_DATA_REQ_pdu ( int indent , const L2CA_RAW_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONFIG_IND_pdu ( int indent , const L2CA_CONFIG_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_GETINFO_CFM_pdu ( int indent , const L2CA_GETINFO_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_REGISTER_REQ_pdu ( int indent , const L2CA_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_UNMAP_FIXED_CID_IND_pdu ( int indent , const L2CA_UNMAP_FIXED_CID_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_PING_CFM_pdu ( int indent , const L2CA_PING_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_UNREGISTER_REQ_pdu ( int indent , const L2CA_UNREGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MAP_FIXED_CID_IND_pdu ( int indent , const L2CA_MAP_FIXED_CID_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_UNROUTE_DATA_CFM_pdu ( int indent , const L2CA_UNROUTE_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DATAWRITE_ABORT_CFM_pdu ( int indent , const L2CA_DATAWRITE_ABORT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_TIMEOUT_IND_pdu ( int indent , const L2CA_TIMEOUT_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CREATE_CHANNEL_RSP_pdu ( int indent , const L2CA_CREATE_CHANNEL_RSP_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MOVE_CHANNEL_IND_pdu ( int indent , const L2CA_MOVE_CHANNEL_IND_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONFIG_REQ_pdu ( int indent , const L2CA_CONFIG_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DISCONNECT_RSP_pdu ( int indent , const L2CA_DISCONNECT_RSP_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_RAW_MODE_REQ_pdu ( int indent , const L2CA_RAW_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_UNMAP_FIXED_CID_REQ_pdu ( int indent , const L2CA_UNMAP_FIXED_CID_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_AUTO_CONNECT_RSP_pdu ( int indent , const L2CA_AUTO_CONNECT_RSP_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_DATAWRITE_REQ_pdu ( int indent , const L2CA_DATAWRITE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONNECT_RSP_pdu ( int indent , const L2CA_CONNECT_RSP_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_CONNECTION_PAR_UPDATE_REQ_pdu ( int indent , const L2CA_CONNECTION_PAR_UPDATE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_L2CA_MAP_FIXED_CID_REQ_pdu ( int indent , const L2CA_MAP_FIXED_CID_REQ_T_PDU& , PDU_displayer * policy );
a_string display_sdp_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_SDC_CONFIG_REQ_pdu ( int indent , const SDC_CONFIG_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDC_OPEN_SEARCH_CFM_pdu ( int indent , const SDC_OPEN_SEARCH_CFM_T_PDU& , PDU_displayer * policy );
a_string display_SDS_REGISTER_CFM_pdu ( int indent , const SDS_REGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_SDS_CONFIG_CFM_pdu ( int indent , const SDS_CONFIG_CFM_T_PDU& , PDU_displayer * policy );
a_string display_SDC_SERVICE_ATTRIBUTE_REQ_pdu ( int indent , const SDC_SERVICE_ATTRIBUTE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDS_UNREGISTER_CFM_pdu ( int indent , const SDS_UNREGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_SDC_TERMINATE_PRIMITIVE_REQ_pdu ( int indent , const SDC_TERMINATE_PRIMITIVE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDC_CONFIG_CFM_pdu ( int indent , const SDC_CONFIG_CFM_T_PDU& , PDU_displayer * policy );
a_string display_SDC_SERVICE_SEARCH_ATTRIBUTE_REQ_pdu ( int indent , const SDC_SERVICE_SEARCH_ATTRIBUTE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDC_SERVICE_SEARCH_REQ_pdu ( int indent , const SDC_SERVICE_SEARCH_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDC_SERVICE_ATTRIBUTE_CFM_pdu ( int indent , const SDC_SERVICE_ATTRIBUTE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_SDC_CLOSE_SEARCH_IND_pdu ( int indent , const SDC_CLOSE_SEARCH_IND_T_PDU& , PDU_displayer * policy );
a_string display_SDC_OPEN_SEARCH_REQ_pdu ( int indent , const SDC_OPEN_SEARCH_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDC_SERVICE_SEARCH_ATTRIBUTE_CFM_pdu ( int indent , const SDC_SERVICE_SEARCH_ATTRIBUTE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_SDC_CLOSE_SEARCH_REQ_pdu ( int indent , const SDC_CLOSE_SEARCH_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDS_CONFIG_REQ_pdu ( int indent , const SDS_CONFIG_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDS_REGISTER_REQ_pdu ( int indent , const SDS_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_SDC_SERVICE_SEARCH_CFM_pdu ( int indent , const SDC_SERVICE_SEARCH_CFM_T_PDU& , PDU_displayer * policy );
a_string display_SDS_UNREGISTER_REQ_pdu ( int indent , const SDS_UNREGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_bnep_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_BNEP_DATA_REQ_pdu ( int indent , const BNEP_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_DISCONNECT_IND_pdu ( int indent , const BNEP_DISCONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_DOWN_IND_pdu ( int indent , const BNEP_DOWN_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_UP_IND_pdu ( int indent , const BNEP_UP_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_LISTEN_REQ_pdu ( int indent , const BNEP_LISTEN_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_DEBUG_IND_pdu ( int indent , const BNEP_DEBUG_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_DISCONNECT_REQ_pdu ( int indent , const BNEP_DISCONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_IGNORE_REQ_pdu ( int indent , const BNEP_IGNORE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_DEBUG_REQ_pdu ( int indent , const BNEP_DEBUG_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_FLOW_IND_pdu ( int indent , const BNEP_FLOW_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_CONNECT_CFM_pdu ( int indent , const BNEP_CONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_CONNECT_IND_pdu ( int indent , const BNEP_CONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_EXTENDED_MULTICAST_DATA_REQ_pdu ( int indent , const BNEP_EXTENDED_MULTICAST_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_LOOPBACK_DATA_IND_pdu ( int indent , const BNEP_LOOPBACK_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_FLOW_REQ_pdu ( int indent , const BNEP_FLOW_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_EXTENDED_DATA_IND_pdu ( int indent , const BNEP_EXTENDED_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_CONNECT_REQ_pdu ( int indent , const BNEP_CONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_REGISTER_REQ_pdu ( int indent , const BNEP_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_HCI_SWITCH_ROLE_RSP_pdu ( int indent , const BNEP_HCI_SWITCH_ROLE_RSP_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_DATA_IND_pdu ( int indent , const BNEP_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_MULTICAST_DATA_IND_pdu ( int indent , const BNEP_MULTICAST_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_BNEP_EXTENDED_DATA_REQ_pdu ( int indent , const BNEP_EXTENDED_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_tcp_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_TCP_CLOSE_REQ_pdu ( int indent , const TCP_CLOSE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_TCP_DATA_CFM_pdu ( int indent , const TCP_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_TCP_OPEN_RSP_pdu ( int indent , const TCP_OPEN_RSP_T_PDU& , PDU_displayer * policy );
a_string display_TCP_DATA_IND_pdu ( int indent , const TCP_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_TCP_ABORT_REQ_pdu ( int indent , const TCP_ABORT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_TCP_CLOSED_RSP_pdu ( int indent , const TCP_CLOSED_RSP_T_PDU& , PDU_displayer * policy );
a_string display_TCP_DATA_REQ_pdu ( int indent , const TCP_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_TCP_OPEN_CFM_pdu ( int indent , const TCP_OPEN_CFM_T_PDU& , PDU_displayer * policy );
a_string display_TCP_OPEN_IND_pdu ( int indent , const TCP_OPEN_IND_T_PDU& , PDU_displayer * policy );
a_string display_TCP_ABORT_RSP_pdu ( int indent , const TCP_ABORT_RSP_T_PDU& , PDU_displayer * policy );
a_string display_TCP_CLOSED_IND_pdu ( int indent , const TCP_CLOSED_IND_T_PDU& , PDU_displayer * policy );
a_string display_TCP_DATA_RSP_pdu ( int indent , const TCP_DATA_RSP_T_PDU& , PDU_displayer * policy );
a_string display_TCP_OPEN_REQ_pdu ( int indent , const TCP_OPEN_REQ_T_PDU& , PDU_displayer * policy );
a_string display_TCP_CLOSE_IND_pdu ( int indent , const TCP_CLOSE_IND_T_PDU& , PDU_displayer * policy );
a_string display_TCP_ABORT_IND_pdu ( int indent , const TCP_ABORT_IND_T_PDU& , PDU_displayer * policy );
a_string display_udp_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_UDP_DATA_CFM_pdu ( int indent , const UDP_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_UDP_EXTENDED_DATA_IND_pdu ( int indent , const UDP_EXTENDED_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_UDP_DATA_IND_pdu ( int indent , const UDP_DATA_IND_T_PDU& , PDU_displayer * policy );
a_string display_UDP_CLOSE_CFM_pdu ( int indent , const UDP_CLOSE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_UDP_DATA_REQ_pdu ( int indent , const UDP_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_UDP_EXTENDED_DATA_REQ_pdu ( int indent , const UDP_EXTENDED_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_UDP_OPEN_CFM_pdu ( int indent , const UDP_OPEN_CFM_T_PDU& , PDU_displayer * policy );
a_string display_UDP_LISTEN_REQ_pdu ( int indent , const UDP_LISTEN_REQ_T_PDU& , PDU_displayer * policy );
a_string display_UDP_CLOSE_REQ_pdu ( int indent , const UDP_CLOSE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_UDP_OPEN_REQ_pdu ( int indent , const UDP_OPEN_REQ_T_PDU& , PDU_displayer * policy );
a_string display_UDP_IGNORE_REQ_pdu ( int indent , const UDP_IGNORE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_att_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_ATT_FIND_BY_TYPE_VALUE_REQ_pdu ( int indent , const ATT_FIND_BY_TYPE_VALUE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_CONNECT_CFM_pdu ( int indent , const ATT_CONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_BLOB_REQ_pdu ( int indent , const ATT_READ_BLOB_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_FIND_INFO_CFM_pdu ( int indent , const ATT_FIND_INFO_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_HANDLE_VALUE_IND_pdu ( int indent , const ATT_HANDLE_VALUE_IND_T_PDU& , PDU_displayer * policy );
a_string display_ATT_EXCHANGE_MTU_RSP_pdu ( int indent , const ATT_EXCHANGE_MTU_RSP_T_PDU& , PDU_displayer * policy );
a_string display_ATT_DISCONNECT_IND_pdu ( int indent , const ATT_DISCONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_MULTI_CFM_pdu ( int indent , const ATT_READ_MULTI_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_UNREGISTER_CFM_pdu ( int indent , const ATT_UNREGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_ACCESS_RSP_pdu ( int indent , const ATT_ACCESS_RSP_T_PDU& , PDU_displayer * policy );
a_string display_ATT_EXECUTE_WRITE_REQ_pdu ( int indent , const ATT_EXECUTE_WRITE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_HANDLE_VALUE_REQ_pdu ( int indent , const ATT_HANDLE_VALUE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_DISCONNECT_REQ_pdu ( int indent , const ATT_DISCONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_DEBUG_IND_pdu ( int indent , const ATT_DEBUG_IND_T_PDU& , PDU_displayer * policy );
a_string display_ATT_REGISTER_CFM_pdu ( int indent , const ATT_REGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_FIND_BY_TYPE_VALUE_CFM_pdu ( int indent , const ATT_FIND_BY_TYPE_VALUE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_EXCHANGE_MTU_IND_pdu ( int indent , const ATT_EXCHANGE_MTU_IND_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_BLOB_CFM_pdu ( int indent , const ATT_READ_BLOB_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_PREPARE_WRITE_REQ_pdu ( int indent , const ATT_PREPARE_WRITE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_WRITE_REQ_pdu ( int indent , const ATT_WRITE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_BY_TYPE_REQ_pdu ( int indent , const ATT_READ_BY_TYPE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_ADD_DB_REQ_pdu ( int indent , const ATT_ADD_DB_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_ACCESS_IND_pdu ( int indent , const ATT_ACCESS_IND_T_PDU& , PDU_displayer * policy );
a_string display_ATT_EXCHANGE_MTU_REQ_pdu ( int indent , const ATT_EXCHANGE_MTU_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_CONNECT_IND_pdu ( int indent , const ATT_CONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_REQ_pdu ( int indent , const ATT_READ_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_BY_GROUP_TYPE_REQ_pdu ( int indent , const ATT_READ_BY_GROUP_TYPE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_EXECUTE_WRITE_CFM_pdu ( int indent , const ATT_EXECUTE_WRITE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_HANDLE_VALUE_CFM_pdu ( int indent , const ATT_HANDLE_VALUE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_CONNECT_REQ_pdu ( int indent , const ATT_CONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_FIND_INFO_REQ_pdu ( int indent , const ATT_FIND_INFO_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_PREPARE_WRITE_CFM_pdu ( int indent , const ATT_PREPARE_WRITE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_WRITE_CFM_pdu ( int indent , const ATT_WRITE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_BY_TYPE_CFM_pdu ( int indent , const ATT_READ_BY_TYPE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_ADD_DB_CFM_pdu ( int indent , const ATT_ADD_DB_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_EXCHANGE_MTU_CFM_pdu ( int indent , const ATT_EXCHANGE_MTU_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_MULTI_REQ_pdu ( int indent , const ATT_READ_MULTI_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_UNREGISTER_REQ_pdu ( int indent , const ATT_UNREGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_CFM_pdu ( int indent , const ATT_READ_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_READ_BY_GROUP_TYPE_CFM_pdu ( int indent , const ATT_READ_BY_GROUP_TYPE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_ATT_HANDLE_VALUE_RSP_pdu ( int indent , const ATT_HANDLE_VALUE_RSP_T_PDU& , PDU_displayer * policy );
a_string display_ATT_REGISTER_REQ_pdu ( int indent , const ATT_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_bccmd_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_BCCMD_MAP_SCO_WBS_pdu ( int indent , const BCCMD_MAP_SCO_WBS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BLE_ADV_FILT_CLEAR_pdu ( int indent , const BCCMD_BLE_ADV_FILT_CLEAR_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U10_pdu ( int indent , const BCCMD_STIBBONS_U10_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U11_pdu ( int indent , const BCCMD_STIBBONS_U11_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U12_pdu ( int indent , const BCCMD_STIBBONS_U12_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U13_pdu ( int indent , const BCCMD_STIBBONS_U13_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U14_pdu ( int indent , const BCCMD_STIBBONS_U14_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U15_pdu ( int indent , const BCCMD_STIBBONS_U15_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U16_pdu ( int indent , const BCCMD_STIBBONS_U16_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PCM_RATE_AND_ROUTE_pdu ( int indent , const BCCMD_PCM_RATE_AND_ROUTE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_VM_STATUS_pdu ( int indent , const BCCMD_VM_STATUS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COEX_ENABLE_pdu ( int indent , const BCCMD_COEX_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_MIC_BIAS_CTRL_pdu ( int indent , const BCCMD_MIC_BIAS_CTRL_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BABEL_SPI_RESET_AND_GO_pdu ( int indent , const BCCMD_BABEL_SPI_RESET_AND_GO_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSCLR_pdu ( int indent , const BCCMD_PSCLR_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RDF_BLE_ADVERTISING_pdu ( int indent , const BCCMD_RDF_BLE_ADVERTISING_PDU& , PDU_displayer * policy );
a_string display_BCCMD_AFH_CHANNEL_RELEASE_TIME_pdu ( int indent , const BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CONFIG_UART_pdu ( int indent , const BCCMD_CONFIG_UART_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHARGER_SET_TRIM_NOW_pdu ( int indent , const BCCMD_CHARGER_SET_TRIM_NOW_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHARGER_DISABLE_pdu ( int indent , const BCCMD_CHARGER_DISABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BUILDID_LOADER_pdu ( int indent , const BCCMD_BUILDID_LOADER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_EXT_CLOCK_PERIOD_pdu ( int indent , const BCCMD_EXT_CLOCK_PERIOD_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FMTX_REG_pdu ( int indent , const BCCMD_FMTX_REG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RDF_BLE_PACKET_MATCH_pdu ( int indent , const BCCMD_RDF_BLE_PACKET_MATCH_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADCRES_pdu ( int indent , const BCCMD_ADCRES_PDU& , PDU_displayer * policy );
a_string display_BCCMD_VM_DEBUG_pdu ( int indent , const BCCMD_VM_DEBUG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RESET_OPERATOR_pdu ( int indent , const BCCMD_RESET_OPERATOR_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO_PROTECT_MASK_pdu ( int indent , const BCCMD_PIO_PROTECT_MASK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SCATTERNET_OVERRIDE_SCO_pdu ( int indent , const BCCMD_SCATTERNET_OVERRIDE_SCO_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_TRANSACTION_COMPLETE_pdu ( int indent , const BCCMD_STREAM_TRANSACTION_COMPLETE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_GSM_RX_ARFCN_pdu ( int indent , const BCCMD_GSM_RX_ARFCN_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PS_FACTORY_SET_pdu ( int indent , const BCCMD_PS_FACTORY_SET_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SPI_LOCK_INITIATE_LOCK_pdu ( int indent , const BCCMD_SPI_LOCK_INITIATE_LOCK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO_DIRECTION_MASK_pdu ( int indent , const BCCMD_PIO_DIRECTION_MASK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_AUX_DAC_ENABLE_pdu ( int indent , const BCCMD_AUX_DAC_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHIPANAVER_pdu ( int indent , const BCCMD_CHIPANAVER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ACTIVATE_BT_STACK_pdu ( int indent , const BCCMD_ACTIVATE_BT_STACK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSCLRALL_pdu ( int indent , const BCCMD_PSCLRALL_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BLE_T_IFS_pdu ( int indent , const BCCMD_BLE_T_IFS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FM_AUDIO_ROUTING_pdu ( int indent , const BCCMD_FM_AUDIO_ROUTING_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FASTPIPE_ENABLE_pdu ( int indent , const BCCMD_FASTPIPE_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COEX_SYNC_PERIOD_pdu ( int indent , const BCCMD_COEX_SYNC_PERIOD_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PICONET_INSTANT_pdu ( int indent , const BCCMD_PICONET_INSTANT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CAPSENSE_RT_PADS_pdu ( int indent , const BCCMD_CAPSENSE_RT_PADS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SNIFF_MULTISLOT_ENABLE_pdu ( int indent , const BCCMD_SNIFF_MULTISLOT_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RECAL_pdu ( int indent , const BCCMD_RECAL_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSU_HV_LINEAR_ENABLE_pdu ( int indent , const BCCMD_PSU_HV_LINEAR_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_TRANSFORM_DISCONNECT_pdu ( int indent , const BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FM_RDS_pdu ( int indent , const BCCMD_FM_RDS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FAULT_ARG_pdu ( int indent , const BCCMD_FAULT_ARG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RECLAIM_RAM_RESERVE_pdu ( int indent , const BCCMD_RECLAIM_RAM_RESERVE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_LC_FRAC_COUNT_pdu ( int indent , const BCCMD_LC_FRAC_COUNT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_MAX_TX_POWER_pdu ( int indent , const BCCMD_MAX_TX_POWER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COASTER_ADD_SV_pdu ( int indent , const BCCMD_COASTER_ADD_SV_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DEEP_SLEEP_TIME_pdu ( int indent , const BCCMD_DEEP_SLEEP_TIME_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BLE_WHITELIST_FREE_SPACE_pdu ( int indent , const BCCMD_BLE_WHITELIST_FREE_SPACE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_MEMORY_pdu ( int indent , const BCCMD_MEMORY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BABEL_SPI_RESET_AND_STOP_pdu ( int indent , const BCCMD_BABEL_SPI_RESET_AND_STOP_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RDF_DATA_CAPTURE_ENABLE_pdu ( int indent , const BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CACHED_TEMPERATURE_pdu ( int indent , const BCCMD_CACHED_TEMPERATURE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COEX_PRIORITY_PIOS_ON_pdu ( int indent , const BCCMD_COEX_PRIORITY_PIOS_ON_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FM_REG_pdu ( int indent , const BCCMD_FM_REG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CODEC_INPUT_GAIN_pdu ( int indent , const BCCMD_CODEC_INPUT_GAIN_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_GET_SINK_pdu ( int indent , const BCCMD_STREAM_GET_SINK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U01X_pdu ( int indent , const BCCMD_STIBBONS_U01X_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BYPASS_UART_pdu ( int indent , const BCCMD_BYPASS_UART_PDU& , PDU_displayer * policy );
a_string display_BCCMD_INQUIRY_PRIORITY_pdu ( int indent , const BCCMD_INQUIRY_PRIORITY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO32_DIRECTION_MASK_pdu ( int indent , const BCCMD_PIO32_DIRECTION_MASK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SIFLASH_pdu ( int indent , const BCCMD_SIFLASH_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SPI_LOCK_CUSTOMER_KEY_pdu ( int indent , const BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_HQ_SCRAPING_LEN_pdu ( int indent , const BCCMD_HQ_SCRAPING_LEN_PDU& , PDU_displayer * policy );
a_string display_BCCMD_WLAN_COEX_PRIORITY_pdu ( int indent , const BCCMD_WLAN_COEX_PRIORITY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_HQ_SCRAPING_pdu ( int indent , const BCCMD_HQ_SCRAPING_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BC01_STATUS_pdu ( int indent , const BCCMD_BC01_STATUS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHECK_ROM_CRC32_pdu ( int indent , const BCCMD_CHECK_ROM_CRC32_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PS_FACTORY_RESTORE_pdu ( int indent , const BCCMD_PS_FACTORY_RESTORE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SCO_PARAMETERS_pdu ( int indent , const BCCMD_SCO_PARAMETERS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PCM_ATTENUATION_pdu ( int indent , const BCCMD_PCM_ATTENUATION_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CODEC_OUTPUT_GAIN_pdu ( int indent , const BCCMD_CODEC_OUTPUT_GAIN_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RDF_DATA_CAPTURE_DISABLE_pdu ( int indent , const BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RSSI_ACL_pdu ( int indent , const BCCMD_RSSI_ACL_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PCM_CONFIG32_pdu ( int indent , const BCCMD_PCM_CONFIG32_PDU& , PDU_displayer * policy );
a_string display_BCCMD_INQUIRY_TX_POWER_pdu ( int indent , const BCCMD_INQUIRY_TX_POWER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BLE_AROPE_CAPABILITIES_pdu ( int indent , const BCCMD_BLE_AROPE_CAPABILITIES_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BLE_DEFAULT_TX_POWER_pdu ( int indent , const BCCMD_BLE_DEFAULT_TX_POWER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DEFAULT_TX_POWER_pdu ( int indent , const BCCMD_DEFAULT_TX_POWER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_CLOSE_SINK_pdu ( int indent , const BCCMD_STREAM_CLOSE_SINK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COLD_RESET_pdu ( int indent , const BCCMD_COLD_RESET_PDU& , PDU_displayer * policy );
a_string display_BCCMD_MIC_BIAS_CONFIGURE_pdu ( int indent , const BCCMD_MIC_BIAS_CONFIGURE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHECK_ROM_pdu ( int indent , const BCCMD_CHECK_ROM_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RAND_pdu ( int indent , const BCCMD_RAND_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COLD_HALT_pdu ( int indent , const BCCMD_COLD_HALT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO32_PROTECT_MASK_pdu ( int indent , const BCCMD_PIO32_PROTECT_MASK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DSPMANAGER_DEBUG_pdu ( int indent , const BCCMD_DSPMANAGER_DEBUG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COASTER_STOP_pdu ( int indent , const BCCMD_COASTER_STOP_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ALLOCATE_RAM_RESERVE_pdu ( int indent , const BCCMD_ALLOCATE_RAM_RESERVE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_TRANSACTION_START_pdu ( int indent , const BCCMD_STREAM_TRANSACTION_START_PDU& , PDU_displayer * policy );
a_string display_BCCMD_EGPS_PULSE_CONFIG_pdu ( int indent , const BCCMD_EGPS_PULSE_CONFIG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PANIC_ON_FAULT_pdu ( int indent , const BCCMD_PANIC_ON_FAULT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_GET_NEXT_BUILDDEF_pdu ( int indent , const BCCMD_GET_NEXT_BUILDDEF_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SHA256_INIT_pdu ( int indent , const BCCMD_SHA256_INIT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ENABLE_DUT_MODE_pdu ( int indent , const BCCMD_ENABLE_DUT_MODE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BLE_ADV_FILT_ADD_pdu ( int indent , const BCCMD_BLE_ADV_FILT_ADD_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BLE_SCAN_BACKOFF_pdu ( int indent , const BCCMD_BLE_SCAN_BACKOFF_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BT_CLOCK_pdu ( int indent , const BCCMD_BT_CLOCK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SPI_BUFSIZE_pdu ( int indent , const BCCMD_SPI_BUFSIZE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FMTX_TEXT_pdu ( int indent , const BCCMD_FMTX_TEXT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C01_pdu ( int indent , const BCCMD_STIBBONS_C01_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C02_pdu ( int indent , const BCCMD_STIBBONS_C02_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PCM_SYNC_RATE_pdu ( int indent , const BCCMD_PCM_SYNC_RATE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C03_pdu ( int indent , const BCCMD_STIBBONS_C03_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C04_pdu ( int indent , const BCCMD_STIBBONS_C04_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C05_pdu ( int indent , const BCCMD_STIBBONS_C05_PDU& , PDU_displayer * policy );
a_string display_BCCMD_LED2_ENABLE_pdu ( int indent , const BCCMD_LED2_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHECK_RAM_RESULT_pdu ( int indent , const BCCMD_CHECK_RAM_RESULT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C06_pdu ( int indent , const BCCMD_STIBBONS_C06_PDU& , PDU_displayer * policy );
a_string display_BCCMD_EGPS_PULSE_OUTPUT_START_pdu ( int indent , const BCCMD_EGPS_PULSE_OUTPUT_START_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C07_pdu ( int indent , const BCCMD_STIBBONS_C07_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C08_pdu ( int indent , const BCCMD_STIBBONS_C08_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C09_pdu ( int indent , const BCCMD_STIBBONS_C09_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHECK_RAM_pdu ( int indent , const BCCMD_CHECK_RAM_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_GET_SOURCE_pdu ( int indent , const BCCMD_STREAM_GET_SOURCE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ROUTE_CLOCK_pdu ( int indent , const BCCMD_ROUTE_CLOCK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BABEL_SPI_GO_pdu ( int indent , const BCCMD_BABEL_SPI_GO_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COASTER_SV_STATE_pdu ( int indent , const BCCMD_COASTER_SV_STATE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RDF_BLE_SCAN_MODE_pdu ( int indent , const BCCMD_RDF_BLE_SCAN_MODE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RANDOM_pdu ( int indent , const BCCMD_RANDOM_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PS_FACTORY_RESTORE_ALL_pdu ( int indent , const BCCMD_PS_FACTORY_RESTORE_ALL_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COEX_DUMP_pdu ( int indent , const BCCMD_COEX_DUMP_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CLOCK_MODULATION_ENABLE_pdu ( int indent , const BCCMD_CLOCK_MODULATION_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C10_pdu ( int indent , const BCCMD_STIBBONS_C10_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_TRANSACTION_CANCEL_pdu ( int indent , const BCCMD_STREAM_TRANSACTION_CANCEL_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C11_pdu ( int indent , const BCCMD_STIBBONS_C11_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C12_pdu ( int indent , const BCCMD_STIBBONS_C12_PDU& , PDU_displayer * policy );
a_string display_BCCMD_HOST_DECIDES_TIMING_pdu ( int indent , const BCCMD_HOST_DECIDES_TIMING_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RADIOTEST_pdu ( int indent , const BCCMD_RADIOTEST_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C13_pdu ( int indent , const BCCMD_STIBBONS_C13_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C14_pdu ( int indent , const BCCMD_STIBBONS_C14_PDU& , PDU_displayer * policy );
a_string display_BCCMD_VREF_CONSTANT_pdu ( int indent , const BCCMD_VREF_CONSTANT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C15_pdu ( int indent , const BCCMD_STIBBONS_C15_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CLK_SKEW_COUNT_pdu ( int indent , const BCCMD_CLK_SKEW_COUNT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_AWAY_TIME_pdu ( int indent , const BCCMD_AWAY_TIME_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_C16_pdu ( int indent , const BCCMD_STIBBONS_C16_PDU& , PDU_displayer * policy );
a_string display_BCCMD_WAIT_FOR_N_MS_pdu ( int indent , const BCCMD_WAIT_FOR_N_MS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PCM_CLOCK_RATE_pdu ( int indent , const BCCMD_PCM_CLOCK_RATE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_TESTB_AMUX_pdu ( int indent , const BCCMD_TESTB_AMUX_PDU& , PDU_displayer * policy );
a_string display_BCCMD_GPS_START_pdu ( int indent , const BCCMD_GPS_START_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_ALIAS_SINK_pdu ( int indent , const BCCMD_STREAM_ALIAS_SINK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_LIMIT_EDR_POWER_pdu ( int indent , const BCCMD_LIMIT_EDR_POWER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_HOSTIO_ENABLE_DEBUG_pdu ( int indent , const BCCMD_HOSTIO_ENABLE_DEBUG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_WARM_HALT_pdu ( int indent , const BCCMD_WARM_HALT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_CLOSE_SOURCE_pdu ( int indent , const BCCMD_STREAM_CLOSE_SOURCE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BUILD_NAME_pdu ( int indent , const BCCMD_BUILD_NAME_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SINGLE_CHAN_pdu ( int indent , const BCCMD_SINGLE_CHAN_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSCLRS_pdu ( int indent , const BCCMD_PSCLRS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_LED_CONFIG_pdu ( int indent , const BCCMD_LED_CONFIG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_LOCK_ACL_PACKET_TYPE_pdu ( int indent , const BCCMD_LOCK_ACL_PACKET_TYPE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_LC_RX_FRACS_pdu ( int indent , const BCCMD_LC_RX_FRACS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_pdu ( int indent , const BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_TESTA_AMUX_pdu ( int indent , const BCCMD_TESTA_AMUX_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO32_STRONG_BIAS_pdu ( int indent , const BCCMD_PIO32_STRONG_BIAS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PS_MEMORY_TYPE_pdu ( int indent , const BCCMD_PS_MEMORY_TYPE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BABEL_SPI_RUN_STATE_pdu ( int indent , const BCCMD_BABEL_SPI_RUN_STATE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSSIZE_pdu ( int indent , const BCCMD_PSSIZE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_KILL_VM_APPLICATION_pdu ( int indent , const BCCMD_KILL_VM_APPLICATION_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ANA_FTRIM_READWRITE_pdu ( int indent , const BCCMD_ANA_FTRIM_READWRITE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ENABLE_DEV_CONNECT_pdu ( int indent , const BCCMD_ENABLE_DEV_CONNECT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BER_THRESHOLD_pdu ( int indent , const BCCMD_BER_THRESHOLD_PDU& , PDU_displayer * policy );
a_string display_BCCMD_START_OPERATOR_pdu ( int indent , const BCCMD_START_OPERATOR_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COEX_INT_TEST_pdu ( int indent , const BCCMD_COEX_INT_TEST_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RDF_PT_pdu ( int indent , const BCCMD_RDF_PT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_EGPS_PULSE_INPUT_START_pdu ( int indent , const BCCMD_EGPS_PULSE_INPUT_START_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RDF_PT_SELECT_ANTENNA_pdu ( int indent , const BCCMD_RDF_PT_SELECT_ANTENNA_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PCM_LOW_JITTER_pdu ( int indent , const BCCMD_PCM_LOW_JITTER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SHA256_RES_pdu ( int indent , const BCCMD_SHA256_RES_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHARGER_TRIMS_pdu ( int indent , const BCCMD_CHARGER_TRIMS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_KALSPIDEBUG_SETDEBUGMODE_pdu ( int indent , const BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PCM2_ATTENUATION_pdu ( int indent , const BCCMD_PCM2_ATTENUATION_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SAVE_CONNECTION_EVENT_FILTERS_pdu ( int indent , const BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ESCOTEST_pdu ( int indent , const BCCMD_ESCOTEST_PDU& , PDU_displayer * policy );
a_string display_BCCMD_E2_APP_SIZE_pdu ( int indent , const BCCMD_E2_APP_SIZE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BUFFER_pdu ( int indent , const BCCMD_BUFFER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_CONFIGURE_pdu ( int indent , const BCCMD_STREAM_CONFIGURE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC_pdu ( int indent , const BCCMD_ADC_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSNEXT_ALL_pdu ( int indent , const BCCMD_PSNEXT_ALL_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_SYNC_SID_pdu ( int indent , const BCCMD_STREAM_SYNC_SID_PDU& , PDU_displayer * policy );
a_string display_BCCMD_MAP_SCO_PCM_pdu ( int indent , const BCCMD_MAP_SCO_PCM_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FASTPIPE_CREATE_pdu ( int indent , const BCCMD_FASTPIPE_CREATE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COASTER_INDICATIONS_pdu ( int indent , const BCCMD_COASTER_INDICATIONS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_LED1_ENABLE_pdu ( int indent , const BCCMD_LED1_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ENABLE_COEX_MESSAGE_REPORTING_pdu ( int indent , const BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SHA256_DATA_pdu ( int indent , const BCCMD_SHA256_DATA_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DIGITAL_AUDIO_CONFIG_pdu ( int indent , const BCCMD_DIGITAL_AUDIO_CONFIG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHIPVER_pdu ( int indent , const BCCMD_CHIPVER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SPI_LOCK_STATUS_pdu ( int indent , const BCCMD_SPI_LOCK_STATUS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC0_pdu ( int indent , const BCCMD_ADC0_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ENABLE_MEDIUM_RATE_pdu ( int indent , const BCCMD_ENABLE_MEDIUM_RATE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC1_pdu ( int indent , const BCCMD_ADC1_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FMTX_SET_CDAC_pdu ( int indent , const BCCMD_FMTX_SET_CDAC_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DIGITAL_AUDIO_RATE_pdu ( int indent , const BCCMD_DIGITAL_AUDIO_RATE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC2_pdu ( int indent , const BCCMD_ADC2_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PROVOKE_PANIC_pdu ( int indent , const BCCMD_PROVOKE_PANIC_PDU& , PDU_displayer * policy );
a_string display_BCCMD_GET_CLR_EVT_pdu ( int indent , const BCCMD_GET_CLR_EVT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_E2_DEVICE_pdu ( int indent , const BCCMD_E2_DEVICE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC3_pdu ( int indent , const BCCMD_ADC3_PDU& , PDU_displayer * policy );
a_string display_BCCMD_INTERFACE_VERSION_pdu ( int indent , const BCCMD_INTERFACE_VERSION_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC4_pdu ( int indent , const BCCMD_ADC4_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC5_pdu ( int indent , const BCCMD_ADC5_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC6_pdu ( int indent , const BCCMD_ADC6_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC7_pdu ( int indent , const BCCMD_ADC7_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC8_pdu ( int indent , const BCCMD_ADC8_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC9_pdu ( int indent , const BCCMD_ADC9_PDU& , PDU_displayer * policy );
a_string display_BCCMD_KALDEBUG_pdu ( int indent , const BCCMD_KALDEBUG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHARGER_SUPPRESS_LED0_pdu ( int indent , const BCCMD_CHARGER_SUPPRESS_LED0_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RDF_BLE_RAND_ADDR_pdu ( int indent , const BCCMD_RDF_BLE_RAND_ADDR_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DESTROY_OPERATOR_pdu ( int indent , const BCCMD_DESTROY_OPERATOR_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO_STRONG_BIAS_pdu ( int indent , const BCCMD_PIO_STRONG_BIAS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHARGER_STATUS_pdu ( int indent , const BCCMD_CHARGER_STATUS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PREVIN_TUNNEL_pdu ( int indent , const BCCMD_PREVIN_TUNNEL_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PS_pdu ( int indent , const BCCMD_PS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CREATE_OPERATOR_C_pdu ( int indent , const BCCMD_CREATE_OPERATOR_C_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COASTER_DEL_SV_pdu ( int indent , const BCCMD_COASTER_DEL_SV_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FIRMWARE_CHECK_MASK_pdu ( int indent , const BCCMD_FIRMWARE_CHECK_MASK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PRESERVE_VALID_pdu ( int indent , const BCCMD_PRESERVE_VALID_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CREATE_OPERATOR_P_pdu ( int indent , const BCCMD_CREATE_OPERATOR_P_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CLKSW_CURRENT_CLOCKS_pdu ( int indent , const BCCMD_CLKSW_CURRENT_CLOCKS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO32_pdu ( int indent , const BCCMD_PIO32_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STREAM_CONNECT_pdu ( int indent , const BCCMD_STREAM_CONNECT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_HQ_SCRAPING_ENABLE_pdu ( int indent , const BCCMD_HQ_SCRAPING_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CLOCK_MODULATION_CONFIG_pdu ( int indent , const BCCMD_CLOCK_MODULATION_CONFIG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_GPS_STOP_pdu ( int indent , const BCCMD_GPS_STOP_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CRYPTKEYLEN_pdu ( int indent , const BCCMD_CRYPTKEYLEN_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSCLRALLS_pdu ( int indent , const BCCMD_PSCLRALLS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PCM_SLOTS_PER_FRAME_pdu ( int indent , const BCCMD_PCM_SLOTS_PER_FRAME_PDU& , PDU_displayer * policy );
a_string display_BCCMD_WARM_RESET_pdu ( int indent , const BCCMD_WARM_RESET_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FASTPIPE_DESTROY_pdu ( int indent , const BCCMD_FASTPIPE_DESTROY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SYNC_CLOCK_pdu ( int indent , const BCCMD_SYNC_CLOCK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BLE_RADIO_TEST_pdu ( int indent , const BCCMD_BLE_RADIO_TEST_PDU& , PDU_displayer * policy );
a_string display_BCCMD_I2C_TRANSFER_pdu ( int indent , const BCCMD_I2C_TRANSFER_PDU& , PDU_displayer * policy );
a_string display_BCCMD_OPERATOR_MESSAGE_pdu ( int indent , const BCCMD_OPERATOR_MESSAGE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSNEXT_pdu ( int indent , const BCCMD_PSNEXT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ENABLE_TX_pdu ( int indent , const BCCMD_ENABLE_TX_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PSU_SMPS_ENABLE_pdu ( int indent , const BCCMD_PSU_SMPS_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_UNLOCK_OTP_pdu ( int indent , const BCCMD_UNLOCK_OTP_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STOP_OPERATOR_pdu ( int indent , const BCCMD_STOP_OPERATOR_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BABEL_SPI_GET_LINE_STATUS_pdu ( int indent , const BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_GPS_CONFIG_pdu ( int indent , const BCCMD_GPS_CONFIG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BC3PSU_pdu ( int indent , const BCCMD_BC3PSU_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DEEP_SLEEP_PERIOD_pdu ( int indent , const BCCMD_DEEP_SLEEP_PERIOD_PDU& , PDU_displayer * policy );
a_string display_BCCMD_HOPPING_ON_pdu ( int indent , const BCCMD_HOPPING_ON_PDU& , PDU_displayer * policy );
a_string display_BCCMD_GSM_RX_MODE_pdu ( int indent , const BCCMD_GSM_RX_MODE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO32_SET_PIN_FUNCTION_pdu ( int indent , const BCCMD_PIO32_SET_PIN_FUNCTION_PDU& , PDU_displayer * policy );
a_string display_BCCMD_RADIOTEST_INTERFACE_VERSION_pdu ( int indent , const BCCMD_RADIOTEST_INTERFACE_VERSION_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BOOTMODE_pdu ( int indent , const BCCMD_BOOTMODE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DEFRAG_RESET_pdu ( int indent , const BCCMD_DEFRAG_RESET_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CANCEL_PAGE_pdu ( int indent , const BCCMD_CANCEL_PAGE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_MAP_SCO_AUDIO_pdu ( int indent , const BCCMD_MAP_SCO_AUDIO_PDU& , PDU_displayer * policy );
a_string display_BCCMD_NO_VARIABLE_pdu ( int indent , const BCCMD_NO_VARIABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_L2CAP_CRC_pdu ( int indent , const BCCMD_L2CAP_CRC_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC_READ_pdu ( int indent , const BCCMD_ADC_READ_PDU& , PDU_displayer * policy );
a_string display_BCCMD_AUX_DAC_pdu ( int indent , const BCCMD_AUX_DAC_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PROVOKE_DELAYED_PANIC_pdu ( int indent , const BCCMD_PROVOKE_DELAYED_PANIC_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BABEL_SPI_STOP_pdu ( int indent , const BCCMD_BABEL_SPI_STOP_PDU& , PDU_displayer * policy );
a_string display_BCCMD_SPI_LOCK_STAY_LOCKED_KEY_pdu ( int indent , const BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_INFORM_LINK_PROFILES_pdu ( int indent , const BCCMD_INFORM_LINK_PROFILES_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC10_pdu ( int indent , const BCCMD_ADC10_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC11_pdu ( int indent , const BCCMD_ADC11_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BABEL_SPI_DELAY_pdu ( int indent , const BCCMD_BABEL_SPI_DELAY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC12_pdu ( int indent , const BCCMD_ADC12_PDU& , PDU_displayer * policy );
a_string display_BCCMD_EGPS_PULSE_STOP_pdu ( int indent , const BCCMD_EGPS_PULSE_STOP_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC13_pdu ( int indent , const BCCMD_ADC13_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC14_pdu ( int indent , const BCCMD_ADC14_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ADC15_pdu ( int indent , const BCCMD_ADC15_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ENABLE_SCO_STREAMS_pdu ( int indent , const BCCMD_ENABLE_SCO_STREAMS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_COASTER_START_pdu ( int indent , const BCCMD_COASTER_START_PDU& , PDU_displayer * policy );
a_string display_BCCMD_LED0_ENABLE_pdu ( int indent , const BCCMD_LED0_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ENABLE_AFH_pdu ( int indent , const BCCMD_ENABLE_AFH_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHIPREV_pdu ( int indent , const BCCMD_CHIPREV_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO_pdu ( int indent , const BCCMD_PIO_PDU& , PDU_displayer * policy );
a_string display_BCCMD_CHARGER_PSU_TRIM_pdu ( int indent , const BCCMD_CHARGER_PSU_TRIM_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U03_pdu ( int indent , const BCCMD_STIBBONS_U03_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U04_pdu ( int indent , const BCCMD_STIBBONS_U04_PDU& , PDU_displayer * policy );
a_string display_BCCMD_BUILDID_pdu ( int indent , const BCCMD_BUILDID_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U05_pdu ( int indent , const BCCMD_STIBBONS_U05_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U06_pdu ( int indent , const BCCMD_STIBBONS_U06_PDU& , PDU_displayer * policy );
a_string display_BCCMD_REMOVE_DOWNLOADED_CAPABILITY_pdu ( int indent , const BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U07_pdu ( int indent , const BCCMD_STIBBONS_U07_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U08_pdu ( int indent , const BCCMD_STIBBONS_U08_PDU& , PDU_displayer * policy );
a_string display_BCCMD_STIBBONS_U09_pdu ( int indent , const BCCMD_STIBBONS_U09_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PIO32_MAP_PINS_pdu ( int indent , const BCCMD_PIO32_MAP_PINS_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PROVOKE_FAULT_pdu ( int indent , const BCCMD_PROVOKE_FAULT_PDU& , PDU_displayer * policy );
a_string display_BCCMD_ANA_FTRIM_pdu ( int indent , const BCCMD_ANA_FTRIM_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FIRMWARE_CHECK_pdu ( int indent , const BCCMD_FIRMWARE_CHECK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_INIT_BT_STACK_pdu ( int indent , const BCCMD_INIT_BT_STACK_PDU& , PDU_displayer * policy );
a_string display_BCCMD_MAXCRYPTKEYLEN_pdu ( int indent , const BCCMD_MAXCRYPTKEYLEN_PDU& , PDU_displayer * policy );
a_string display_BCCMD_E2_APP_DATA_pdu ( int indent , const BCCMD_E2_APP_DATA_PDU& , PDU_displayer * policy );
a_string display_BCCMD_GPS_DSP_ENABLE_pdu ( int indent , const BCCMD_GPS_DSP_ENABLE_PDU& , PDU_displayer * policy );
a_string display_BCCMD_KALEXTADDRDEBUG_pdu ( int indent , const BCCMD_KALEXTADDRDEBUG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_PANIC_ARG_pdu ( int indent , const BCCMD_PANIC_ARG_PDU& , PDU_displayer * policy );
a_string display_BCCMD_DISABLE_TX_pdu ( int indent , const BCCMD_DISABLE_TX_PDU& , PDU_displayer * policy );
a_string display_BCCMD_FASTPIPE_RESIZE_pdu ( int indent , const BCCMD_FASTPIPE_RESIZE_PDU& , PDU_displayer * policy );
a_string display_radiotest_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_TXSTART_pdu ( int indent , const RADIOTEST_TXSTART_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CTS_RTS_LB_pdu ( int indent , const RADIOTEST_CTS_RTS_LB_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CONFIG_TX_IF_pdu ( int indent , const RADIOTEST_CONFIG_TX_IF_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_LB_pdu ( int indent , const RADIOTEST_PCM_LB_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_SETTLE_pdu ( int indent , const RADIOTEST_CFG_SETTLE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_IF_RESP_pdu ( int indent , const RADIOTEST_IF_RESP_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_EXT_LB_pdu ( int indent , const RADIOTEST_PCM_EXT_LB_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_TX_RF_TRIM_pdu ( int indent , const RADIOTEST_CFG_TX_RF_TRIM_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CODEC_STEREO_LB_pdu ( int indent , const RADIOTEST_CODEC_STEREO_LB_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_UAP_LAP_pdu ( int indent , const RADIOTEST_CFG_UAP_LAP_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_SETTLE_RPT_pdu ( int indent , const RADIOTEST_SETTLE_RPT_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_DEEP_SLEEP_pdu ( int indent , const RADIOTEST_DEEP_SLEEP_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_EXT_LB_INTERFACE_pdu ( int indent , const RADIOTEST_PCM_EXT_LB_INTERFACE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_PKT_pdu ( int indent , const RADIOTEST_CFG_PKT_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_TX_TRIM_pdu ( int indent , const RADIOTEST_CFG_TX_TRIM_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_FREQ_MS_pdu ( int indent , const RADIOTEST_CFG_FREQ_MS_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_RXDATA1_pdu ( int indent , const RADIOTEST_RXDATA1_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_RXDATA2_pdu ( int indent , const RADIOTEST_RXDATA2_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_RADIO_STATUS_ARRAY_pdu ( int indent , const RADIOTEST_RADIO_STATUS_ARRAY_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_DEEP_SLEEP_SELECT_pdu ( int indent , const RADIOTEST_DEEP_SLEEP_SELECT_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_IQ_TRIM_pdu ( int indent , const RADIOTEST_CFG_IQ_TRIM_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_PIO_CHANNEL_MASK_pdu ( int indent , const RADIOTEST_CFG_PIO_CHANNEL_MASK_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_ACC_ERRS_pdu ( int indent , const RADIOTEST_CFG_ACC_ERRS_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_TXPOWER_pdu ( int indent , const RADIOTEST_CFG_TXPOWER_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_IF_IQ_MATCH_pdu ( int indent , const RADIOTEST_IF_IQ_MATCH_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_FREQ_pdu ( int indent , const RADIOTEST_CFG_FREQ_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_TXDATA1_pdu ( int indent , const RADIOTEST_TXDATA1_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_LO_LVL_pdu ( int indent , const RADIOTEST_CFG_LO_LVL_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_TXDATA2_pdu ( int indent , const RADIOTEST_TXDATA2_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_TONE_INTERFACE_pdu ( int indent , const RADIOTEST_PCM_TONE_INTERFACE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_RF_IQ_MATCH_pdu ( int indent , const RADIOTEST_RF_IQ_MATCH_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_SETTLE_pdu ( int indent , const RADIOTEST_SETTLE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_TXDATA3_pdu ( int indent , const RADIOTEST_TXDATA3_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_TXDATA4_pdu ( int indent , const RADIOTEST_TXDATA4_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_TONE_STEREO_pdu ( int indent , const RADIOTEST_PCM_TONE_STEREO_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_PIO_ENABLE_MASK_pdu ( int indent , const RADIOTEST_CFG_PIO_ENABLE_MASK_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_TIMING_IN_pdu ( int indent , const RADIOTEST_PCM_TIMING_IN_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_TONE_pdu ( int indent , const RADIOTEST_PCM_TONE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_RX_LOOP_BACK_pdu ( int indent , const RADIOTEST_RX_LOOP_BACK_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_TIMING_IN_INTERFACE_pdu ( int indent , const RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PCM_LB_INTERFACE_pdu ( int indent , const RADIOTEST_PCM_LB_INTERFACE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_TX_COMP_pdu ( int indent , const RADIOTEST_CFG_TX_COMP_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_XTAL_FTRIM_pdu ( int indent , const RADIOTEST_CFG_XTAL_FTRIM_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_RXSTART1_pdu ( int indent , const RADIOTEST_RXSTART1_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_RXSTART2_pdu ( int indent , const RADIOTEST_RXSTART2_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_RADIO_STATUS_pdu ( int indent , const RADIOTEST_RADIO_STATUS_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_BUILD_LUT_pdu ( int indent , const RADIOTEST_BUILD_LUT_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_HOPPING_SEQUENCE_pdu ( int indent , const RADIOTEST_CFG_HOPPING_SEQUENCE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_BER_LOOP_BACK_pdu ( int indent , const RADIOTEST_BER_LOOP_BACK_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_BER1_pdu ( int indent , const RADIOTEST_BER1_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_BER2_pdu ( int indent , const RADIOTEST_BER2_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_READ_LUT_pdu ( int indent , const RADIOTEST_READ_LUT_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_VCOTRIM_pdu ( int indent , const RADIOTEST_VCOTRIM_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_PAUSE_pdu ( int indent , const RADIOTEST_PAUSE_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_BIT_ERR_pdu ( int indent , const RADIOTEST_CFG_BIT_ERR_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_CFG_TX_PA_ATTEN_pdu ( int indent , const RADIOTEST_CFG_TX_PA_ATTEN_PDU& , PDU_displayer * policy );
a_string display_RADIOTEST_LOOP_BACK_pdu ( int indent , const RADIOTEST_LOOP_BACK_PDU& , PDU_displayer * policy );
a_string display_hq_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U02_pdu ( int indent , const HQ_STIBBONS_U02_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U03_pdu ( int indent , const HQ_STIBBONS_U03_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U04_pdu ( int indent , const HQ_STIBBONS_U04_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U05_pdu ( int indent , const HQ_STIBBONS_U05_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U06_pdu ( int indent , const HQ_STIBBONS_U06_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U07_pdu ( int indent , const HQ_STIBBONS_U07_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U08_pdu ( int indent , const HQ_STIBBONS_U08_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U09_pdu ( int indent , const HQ_STIBBONS_U09_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C01_pdu ( int indent , const HQ_STIBBONS_C01_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C02_pdu ( int indent , const HQ_STIBBONS_C02_PDU& , PDU_displayer * policy );
a_string display_HQ_ESCO_REQ_pdu ( int indent , const HQ_ESCO_REQ_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C03_pdu ( int indent , const HQ_STIBBONS_C03_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C04_pdu ( int indent , const HQ_STIBBONS_C04_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C05_pdu ( int indent , const HQ_STIBBONS_C05_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C06_pdu ( int indent , const HQ_STIBBONS_C06_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C07_pdu ( int indent , const HQ_STIBBONS_C07_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C08_pdu ( int indent , const HQ_STIBBONS_C08_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C09_pdu ( int indent , const HQ_STIBBONS_C09_PDU& , PDU_displayer * policy );
a_string display_HQ_FM_RDS_DATA_pdu ( int indent , const HQ_FM_RDS_DATA_PDU& , PDU_displayer * policy );
a_string display_HQ_SNIFF_REQ_pdu ( int indent , const HQ_SNIFF_REQ_PDU& , PDU_displayer * policy );
a_string display_HQ_RSSI_pdu ( int indent , const HQ_RSSI_PDU& , PDU_displayer * policy );
a_string display_HQ_BOOTED_pdu ( int indent , const HQ_BOOTED_PDU& , PDU_displayer * policy );
a_string display_HQ_EGPS_TIME_STAMP_pdu ( int indent , const HQ_EGPS_TIME_STAMP_PDU& , PDU_displayer * policy );
a_string display_HQ_NO_VARIABLE_pdu ( int indent , const HQ_NO_VARIABLE_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U10_pdu ( int indent , const HQ_STIBBONS_U10_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U11_pdu ( int indent , const HQ_STIBBONS_U11_PDU& , PDU_displayer * policy );
a_string display_HQ_BIT_ERR_pdu ( int indent , const HQ_BIT_ERR_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U12_pdu ( int indent , const HQ_STIBBONS_U12_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U13_pdu ( int indent , const HQ_STIBBONS_U13_PDU& , PDU_displayer * policy );
a_string display_HQ_GPS_STATUS_pdu ( int indent , const HQ_GPS_STATUS_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U14_pdu ( int indent , const HQ_STIBBONS_U14_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U15_pdu ( int indent , const HQ_STIBBONS_U15_PDU& , PDU_displayer * policy );
a_string display_HQ_DELAYED_PANIC_pdu ( int indent , const HQ_DELAYED_PANIC_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_U16_pdu ( int indent , const HQ_STIBBONS_U16_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C10_pdu ( int indent , const HQ_STIBBONS_C10_PDU& , PDU_displayer * policy );
a_string display_HQ_PROTOCOL_ERROR_pdu ( int indent , const HQ_PROTOCOL_ERROR_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C11_pdu ( int indent , const HQ_STIBBONS_C11_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C12_pdu ( int indent , const HQ_STIBBONS_C12_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C13_pdu ( int indent , const HQ_STIBBONS_C13_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C14_pdu ( int indent , const HQ_STIBBONS_C14_PDU& , PDU_displayer * policy );
a_string display_HQ_SCO_STREAM_HANDLES_pdu ( int indent , const HQ_SCO_STREAM_HANDLES_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C15_pdu ( int indent , const HQ_STIBBONS_C15_PDU& , PDU_displayer * policy );
a_string display_HQ_STIBBONS_C16_pdu ( int indent , const HQ_STIBBONS_C16_PDU& , PDU_displayer * policy );
a_string display_HQ_ACCEPT_TDI_pdu ( int indent , const HQ_ACCEPT_TDI_PDU& , PDU_displayer * policy );
a_string display_HQ_FILTER_RESP_pdu ( int indent , const HQ_FILTER_RESP_PDU& , PDU_displayer * policy );
a_string display_HQ_ADC_RESULT_pdu ( int indent , const HQ_ADC_RESULT_PDU& , PDU_displayer * policy );
a_string display_HQ_BLE_RADIO_TEST_pdu ( int indent , const HQ_BLE_RADIO_TEST_PDU& , PDU_displayer * policy );
a_string display_HQ_RXPKTSTATS_pdu ( int indent , const HQ_RXPKTSTATS_PDU& , PDU_displayer * policy );
a_string display_HQ_MESSAGE_FROM_OPERATOR_pdu ( int indent , const HQ_MESSAGE_FROM_OPERATOR_PDU& , PDU_displayer * policy );
a_string display_HQ_BER_TRIGGER_pdu ( int indent , const HQ_BER_TRIGGER_PDU& , PDU_displayer * policy );
a_string display_HQ_DRAIN_CALIBRATE_pdu ( int indent , const HQ_DRAIN_CALIBRATE_PDU& , PDU_displayer * policy );
a_string display_HQ_RADIO_STATUS_ARRAY_pdu ( int indent , const HQ_RADIO_STATUS_ARRAY_PDU& , PDU_displayer * policy );
a_string display_HQ_SYNTH_SETTLE_pdu ( int indent , const HQ_SYNTH_SETTLE_PDU& , PDU_displayer * policy );
a_string display_HQ_DSPMANAGER_DEBUG_INFO_B_pdu ( int indent , const HQ_DSPMANAGER_DEBUG_INFO_B_PDU& , PDU_displayer * policy );
a_string display_HQ_FM_EVENT_pdu ( int indent , const HQ_FM_EVENT_PDU& , PDU_displayer * policy );
a_string display_HQ_FMTX_EVENT_pdu ( int indent , const HQ_FMTX_EVENT_PDU& , PDU_displayer * policy );
a_string display_HQ_FAULT_pdu ( int indent , const HQ_FAULT_PDU& , PDU_displayer * policy );
a_string display_HQ_LUT_ENTRY_pdu ( int indent , const HQ_LUT_ENTRY_PDU& , PDU_displayer * policy );
a_string display_HQ_COEX_UART_MESSAGE_pdu ( int indent , const HQ_COEX_UART_MESSAGE_PDU& , PDU_displayer * policy );
a_string display_HQ_IQ_MATCH_pdu ( int indent , const HQ_IQ_MATCH_PDU& , PDU_displayer * policy );
a_string display_HQ_RADIO_STATUS_pdu ( int indent , const HQ_RADIO_STATUS_PDU& , PDU_displayer * policy );
a_string display_HQ_CAPABILITY_DOWNLOAD_COMPLETE_pdu ( int indent , const HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU& , PDU_displayer * policy );
a_string display_dm_pdu ( int indent , const PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_EVENT_MASK_CFM_pdu ( int indent , const DM_HCI_ULP_SET_EVENT_MASK_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_STORED_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SWITCH_ROLE_REQ_pdu ( int indent , const DM_HCI_SWITCH_ROLE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_CLASS_OF_DEVICE_REQ_pdu ( int indent , const DM_HCI_WRITE_CLASS_OF_DEVICE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_RENEGOTIATE_IND_pdu ( int indent , const DM_SYNC_RENEGOTIATE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LOCAL_VER_INFO_CFM_pdu ( int indent , const DM_HCI_READ_LOCAL_VER_INFO_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_REGISTER_CFM_pdu ( int indent , const DM_AMPM_REGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_AFH_CHANNEL_MAP_REQ_pdu ( int indent , const DM_HCI_READ_AFH_CHANNEL_MAP_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_READ_LOCAL_OOB_DATA_REQ_pdu ( int indent , const DM_SM_READ_LOCAL_OOB_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_pdu ( int indent , const DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_STORED_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_WRITE_STORED_LINK_KEY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_ACL_CLOSE_REQ_pdu ( int indent , const DM_ACL_CLOSE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SWITCH_ROLE_CFM_pdu ( int indent , const DM_HCI_SWITCH_ROLE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_WRITE_CACHED_CLOCK_OFFSET_REQ_pdu ( int indent , const DM_WRITE_CACHED_CLOCK_OFFSET_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SET_EVENT_FILTER_REQ_pdu ( int indent , const DM_HCI_SET_EVENT_FILTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_USER_PASSKEY_REQUEST_RSP_pdu ( int indent , const DM_SM_USER_PASSKEY_REQUEST_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_CLASS_OF_DEVICE_CFM_pdu ( int indent , const DM_HCI_WRITE_CLASS_OF_DEVICE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_INIT_REQ_pdu ( int indent , const DM_SM_INIT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ_pdu ( int indent , const DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_BONDING_CANCEL_REQ_pdu ( int indent , const DM_SM_BONDING_CANCEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_VOICE_SETTING_REQ_pdu ( int indent , const DM_HCI_WRITE_VOICE_SETTING_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_USER_PASSKEY_REQUEST_IND_pdu ( int indent , const DM_SM_USER_PASSKEY_REQUEST_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_READ_LOCAL_OOB_DATA_CFM_pdu ( int indent , const DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_AFH_CHANNEL_MAP_CFM_pdu ( int indent , const DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_ACCESS_IND_pdu ( int indent , const DM_SM_ACCESS_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_pdu ( int indent , const DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_QOS_SETUP_REQ_pdu ( int indent , const DM_HCI_QOS_SETUP_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM_pdu ( int indent , const DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_WRITE_CACHED_CLOCK_OFFSET_CFM_pdu ( int indent , const DM_WRITE_CACHED_CLOCK_OFFSET_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SET_EVENT_FILTER_CFM_pdu ( int indent , const DM_HCI_SET_EVENT_FILTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ_pdu ( int indent , const DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_INIT_CFM_pdu ( int indent , const DM_SM_INIT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ENABLE_DUT_MODE_REQ_pdu ( int indent , const DM_HCI_ENABLE_DUT_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM_pdu ( int indent , const DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ_pdu ( int indent , const DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_TX_POWER_LEVEL_REQ_pdu ( int indent , const DM_HCI_READ_TX_POWER_LEVEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_LINK_KEY_IND_pdu ( int indent , const DM_SM_LINK_KEY_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_GET_LINK_QUALITY_REQ_pdu ( int indent , const DM_HCI_GET_LINK_QUALITY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ_pdu ( int indent , const DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_VOICE_SETTING_CFM_pdu ( int indent , const DM_HCI_WRITE_VOICE_SETTING_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_INQUIRY_REQ_pdu ( int indent , const DM_HCI_INQUIRY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_TRANSMITTER_TEST_REQ_pdu ( int indent , const DM_HCI_ULP_TRANSMITTER_TEST_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_QOS_SETUP_CFM_pdu ( int indent , const DM_HCI_QOS_SETUP_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM_pdu ( int indent , const DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ENABLE_DUT_MODE_CFM_pdu ( int indent , const DM_HCI_ENABLE_DUT_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_LP_WRITE_ROLESWITCH_POLICY_REQ_pdu ( int indent , const DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_AUTHORISE_RSP_pdu ( int indent , const DM_SM_AUTHORISE_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_TEST_END_REQ_pdu ( int indent , const DM_HCI_ULP_TEST_END_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM_pdu ( int indent , const DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_TX_POWER_LEVEL_CFM_pdu ( int indent , const DM_HCI_READ_TX_POWER_LEVEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_CHANNEL_MAP_REQ_pdu ( int indent , const DM_HCI_ULP_READ_CHANNEL_MAP_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ_pdu ( int indent , const DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_GET_LINK_QUALITY_CFM_pdu ( int indent , const DM_HCI_GET_LINK_QUALITY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_FLOW_SPEC_REQ_pdu ( int indent , const DM_HCI_FLOW_SPEC_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_BONDING_REQ_pdu ( int indent , const DM_SM_BONDING_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM_pdu ( int indent , const DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_INQUIRY_CFM_pdu ( int indent , const DM_HCI_INQUIRY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_TRANSMITTER_TEST_CFM_pdu ( int indent , const DM_HCI_ULP_TRANSMITTER_TEST_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_LINK_KEY_REQUEST_RSP_pdu ( int indent , const DM_SM_LINK_KEY_REQUEST_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_ADVERTISING_REPORT_IND_pdu ( int indent , const DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_CONNECT_RSP_pdu ( int indent , const DM_AMPM_CONNECT_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ_pdu ( int indent , const DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGESCAN_MODE_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_AUTHORISE_IND_pdu ( int indent , const DM_SM_AUTHORISE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_NUM_SUPPORTED_IAC_REQ_pdu ( int indent , const DM_HCI_READ_NUM_SUPPORTED_IAC_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_LP_WRITE_ROLESWITCH_POLICY_CFM_pdu ( int indent , const DM_LP_WRITE_ROLESWITCH_POLICY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_LINK_KEY_REQUEST_IND_pdu ( int indent , const DM_SM_LINK_KEY_REQUEST_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_CONNECT_IND_pdu ( int indent , const DM_AMPM_CONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_TEST_END_CFM_pdu ( int indent , const DM_HCI_ULP_TEST_END_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_CHANNEL_MAP_CFM_pdu ( int indent , const DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM_pdu ( int indent , const DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_EXIT_SNIFF_MODE_REQ_pdu ( int indent , const DM_HCI_EXIT_SNIFF_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_BONDING_CFM_pdu ( int indent , const DM_SM_BONDING_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_FLOW_SPEC_CFM_pdu ( int indent , const DM_HCI_FLOW_SPEC_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ_pdu ( int indent , const DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ_pdu ( int indent , const DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ_pdu ( int indent , const DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ_pdu ( int indent , const DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_pdu ( int indent , const DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGESCAN_MODE_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP_pdu ( int indent , const DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_READ_DATA_BLOCK_SIZE_RSP_pdu ( int indent , const DM_AMPM_READ_DATA_BLOCK_SIZE_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_pdu ( int indent , const DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_CONNECT_COMPLETE_IND_pdu ( int indent , const DM_SYNC_CONNECT_COMPLETE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_NUM_SUPPORTED_IAC_CFM_pdu ( int indent , const DM_HCI_READ_NUM_SUPPORTED_IAC_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AM_REGISTER_WRONG_API_REQ_pdu ( int indent , const DM_AM_REGISTER_WRONG_API_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_COUNTRY_CODE_REQ_pdu ( int indent , const DM_HCI_READ_COUNTRY_CODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_pdu ( int indent , const DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_BD_ADDR_REQ_pdu ( int indent , const DM_HCI_READ_BD_ADDR_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM_pdu ( int indent , const DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_SUPPORTED_STATES_REQ_pdu ( int indent , const DM_HCI_ULP_READ_SUPPORTED_STATES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_READ_DATA_BLOCK_SIZE_IND_pdu ( int indent , const DM_AMPM_READ_DATA_BLOCK_SIZE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM_pdu ( int indent , const DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM_pdu ( int indent , const DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_CONNECT_RSP_pdu ( int indent , const DM_SYNC_CONNECT_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ_pdu ( int indent , const DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_ADD_DEVICE_REQ_pdu ( int indent , const DM_SM_ADD_DEVICE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PIN_TYPE_REQ_pdu ( int indent , const DM_HCI_WRITE_PIN_TYPE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_CONNECT_IND_pdu ( int indent , const DM_SYNC_CONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_AM_REGISTER_WRONG_API_CFM_pdu ( int indent , const DM_AM_REGISTER_WRONG_API_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_COUNTRY_CODE_CFM_pdu ( int indent , const DM_HCI_READ_COUNTRY_CODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_REMOTE_NAME_REQUEST_REQ_pdu ( int indent , const DM_HCI_REMOTE_NAME_REQUEST_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_CURRENT_IAC_LAP_CFM_pdu ( int indent , const DM_HCI_WRITE_CURRENT_IAC_LAP_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_REFRESH_ENCRYPTION_KEY_IND_pdu ( int indent , const DM_HCI_REFRESH_ENCRYPTION_KEY_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_BD_ADDR_CFM_pdu ( int indent , const DM_HCI_READ_BD_ADDR_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_pdu ( int indent , const DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_CONN_CHANNEL_RSP_pdu ( int indent , const DM_AMPM_CONN_CHANNEL_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CHANGE_CONN_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_CHANGE_CONN_LINK_KEY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM_pdu ( int indent , const DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGE_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_READ_PAGE_TIMEOUT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_RSSI_REQ_pdu ( int indent , const DM_HCI_READ_RSSI_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_ADD_DEVICE_CFM_pdu ( int indent , const DM_SM_ADD_DEVICE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PIN_TYPE_CFM_pdu ( int indent , const DM_HCI_WRITE_PIN_TYPE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_INQUIRY_RESULT_IND_pdu ( int indent , const DM_HCI_INQUIRY_RESULT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_LP_WRITE_POWERSTATES_REQ_pdu ( int indent , const DM_LP_WRITE_POWERSTATES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_CONN_CHANNEL_IND_pdu ( int indent , const DM_AMPM_CONN_CHANNEL_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CHANGE_CONN_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_CHANGE_CONN_LINK_KEY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_ENCRYPT_REQ_pdu ( int indent , const DM_HCI_ULP_ENCRYPT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGE_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_READ_PAGE_TIMEOUT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_SECURITY_IND_pdu ( int indent , const DM_SM_SECURITY_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ_pdu ( int indent , const DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_REMOTE_FEATURES_IND_pdu ( int indent , const DM_AMPM_REMOTE_FEATURES_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CLOCK_OFFSET_REQ_pdu ( int indent , const DM_HCI_READ_CLOCK_OFFSET_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_RSSI_CFM_pdu ( int indent , const DM_HCI_READ_RSSI_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_LP_WRITE_POWERSTATES_CFM_pdu ( int indent , const DM_LP_WRITE_POWERSTATES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CREATE_NEW_UNIT_KEY_REQ_pdu ( int indent , const DM_HCI_CREATE_NEW_UNIT_KEY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_HOLD_MODE_REQ_pdu ( int indent , const DM_HCI_HOLD_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGE_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGE_TIMEOUT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_CLEAR_WHITE_LIST_REQ_pdu ( int indent , const DM_HCI_ULP_CLEAR_WHITE_LIST_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LOCAL_NAME_REQ_pdu ( int indent , const DM_HCI_READ_LOCAL_NAME_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CONN_PACKET_TYPE_CHANGED_IND_pdu ( int indent , const DM_HCI_CONN_PACKET_TYPE_CHANGED_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_ENCRYPT_CFM_pdu ( int indent , const DM_HCI_ULP_ENCRYPT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_NUM_BCAST_RETXS_REQ_pdu ( int indent , const DM_HCI_READ_NUM_BCAST_RETXS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_ACL_OPENED_IND_pdu ( int indent , const DM_ACL_OPENED_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM_pdu ( int indent , const DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CLOCK_OFFSET_CFM_pdu ( int indent , const DM_HCI_READ_CLOCK_OFFSET_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_SIMPLE_PAIRING_ENABLED_IND_pdu ( int indent , const DM_AMPM_SIMPLE_PAIRING_ENABLED_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_RENEGOTIATE_REQ_pdu ( int indent , const DM_SYNC_RENEGOTIATE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CHANGE_CONN_PKT_TYPE_REQ_pdu ( int indent , const DM_HCI_CHANGE_CONN_PKT_TYPE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CREATE_NEW_UNIT_KEY_CFM_pdu ( int indent , const DM_HCI_CREATE_NEW_UNIT_KEY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_ACL_CLOSED_IND_pdu ( int indent , const DM_ACL_CLOSED_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_WRITE_CACHED_PAGE_MODE_REQ_pdu ( int indent , const DM_WRITE_CACHED_PAGE_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_KEYPRESS_NOTIFICATION_IND_pdu ( int indent , const DM_SM_KEYPRESS_NOTIFICATION_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGE_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGE_TIMEOUT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_CLEAR_WHITE_LIST_CFM_pdu ( int indent , const DM_HCI_ULP_CLEAR_WHITE_LIST_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SET_BLE_CONNECTION_PARAMETERS_REQ_pdu ( int indent , const DM_SET_BLE_CONNECTION_PARAMETERS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LOCAL_NAME_CFM_pdu ( int indent , const DM_HCI_READ_LOCAL_NAME_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_DISCONNECT_IND_pdu ( int indent , const DM_SYNC_DISCONNECT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_REGISTER_REQ_pdu ( int indent , const DM_SM_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_SCAN_ENABLE_REQ_pdu ( int indent , const DM_HCI_READ_SCAN_ENABLE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SNIFF_SUB_RATING_IND_pdu ( int indent , const DM_HCI_SNIFF_SUB_RATING_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_NUM_BCAST_RETXS_CFM_pdu ( int indent , const DM_HCI_READ_NUM_BCAST_RETXS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_RENEGOTIATE_CFM_pdu ( int indent , const DM_SYNC_RENEGOTIATE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ENHANCED_FLUSH_REQ_pdu ( int indent , const DM_HCI_ENHANCED_FLUSH_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND_pdu ( int indent , const DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_WRITE_CACHED_PAGE_MODE_CFM_pdu ( int indent , const DM_WRITE_CACHED_PAGE_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_ACCESS_REQ_pdu ( int indent , const DM_SM_ACCESS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SET_BLE_CONNECTION_PARAMETERS_CFM_pdu ( int indent , const DM_SET_BLE_CONNECTION_PARAMETERS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ_pdu ( int indent , const DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_REGISTER_CFM_pdu ( int indent , const DM_SM_REGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_SCAN_ENABLE_CFM_pdu ( int indent , const DM_HCI_READ_SCAN_ENABLE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_LINK_SUPERV_TIMEOUT_IND_pdu ( int indent , const DM_HCI_LINK_SUPERV_TIMEOUT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_REMOTE_VER_INFO_REQ_pdu ( int indent , const DM_HCI_READ_REMOTE_VER_INFO_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ENHANCED_FLUSH_CFM_pdu ( int indent , const DM_HCI_ENHANCED_FLUSH_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_INQUIRY_MODE_REQ_pdu ( int indent , const DM_HCI_READ_INQUIRY_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ_pdu ( int indent , const DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_DISCONNECT_CHANNEL_RSP_pdu ( int indent , const DM_AMPM_DISCONNECT_CHANNEL_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_ACCESS_CFM_pdu ( int indent , const DM_SM_ACCESS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_READ_DEVICE_REQ_pdu ( int indent , const DM_SM_READ_DEVICE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ_pdu ( int indent , const DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_RECEIVER_TEST_REQ_pdu ( int indent , const DM_HCI_ULP_RECEIVER_TEST_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM_pdu ( int indent , const DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_DISCONNECT_CHANNEL_IND_pdu ( int indent , const DM_AMPM_DISCONNECT_CHANNEL_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_REMOTE_VER_INFO_CFM_pdu ( int indent , const DM_HCI_READ_REMOTE_VER_INFO_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ_pdu ( int indent , const DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_DELETE_STORED_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_DELETE_STORED_LINK_KEY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_IO_CAPABILITY_RESPONSE_IND_pdu ( int indent , const DM_SM_IO_CAPABILITY_RESPONSE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_IO_CAPABILITY_REQUEST_RSP_pdu ( int indent , const DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_INQUIRY_MODE_CFM_pdu ( int indent , const DM_HCI_READ_INQUIRY_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_REMOVE_DEVICE_REQ_pdu ( int indent , const DM_SM_REMOVE_DEVICE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM_pdu ( int indent , const DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_DISCONNECT_REQ_pdu ( int indent , const DM_AMPM_DISCONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_READ_DEVICE_CFM_pdu ( int indent , const DM_SM_READ_DEVICE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM_pdu ( int indent , const DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_RECEIVER_TEST_CFM_pdu ( int indent , const DM_HCI_ULP_RECEIVER_TEST_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SET_EVENT_MASK_REQ_pdu ( int indent , const DM_HCI_SET_EVENT_MASK_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LOCAL_EXT_FEATURES_REQ_pdu ( int indent , const DM_HCI_READ_LOCAL_EXT_FEATURES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ_pdu ( int indent , const DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_IO_CAPABILITY_REQUEST_IND_pdu ( int indent , const DM_SM_IO_CAPABILITY_REQUEST_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_INQUIRY_MODE_REQ_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_KEY_REQUEST_RSP_pdu ( int indent , const DM_SM_KEY_REQUEST_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM_pdu ( int indent , const DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_DELETE_STORED_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_DELETE_STORED_LINK_KEY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_USER_PASSKEY_NOTIFICATION_IND_pdu ( int indent , const DM_SM_USER_PASSKEY_NOTIFICATION_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SET_BT_VERSION_REQ_pdu ( int indent , const DM_SET_BT_VERSION_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_RETURN_LINK_KEYS_IND_pdu ( int indent , const DM_HCI_RETURN_LINK_KEYS_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_ENCRYPTION_CHANGE_IND_pdu ( int indent , const DM_SM_ENCRYPTION_CHANGE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_VERIFY_PHYSICAL_LINK_RSP_pdu ( int indent , const DM_AMPM_VERIFY_PHYSICAL_LINK_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_UNREGISTER_REQ_pdu ( int indent , const DM_SM_UNREGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_EXTENDED_INQUIRY_RESULT_IND_pdu ( int indent , const DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_REMOVE_DEVICE_CFM_pdu ( int indent , const DM_SM_REMOVE_DEVICE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_CSRK_COUNTER_CHANGE_IND_pdu ( int indent , const DM_SM_CSRK_COUNTER_CHANGE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SNIFF_SUB_RATE_REQ_pdu ( int indent , const DM_HCI_SNIFF_SUB_RATE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_KEY_REQUEST_IND_pdu ( int indent , const DM_SM_KEY_REQUEST_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_pdu ( int indent , const DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SET_EVENT_MASK_CFM_pdu ( int indent , const DM_HCI_SET_EVENT_MASK_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM_pdu ( int indent , const DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_READ_BD_ADDR_REQ_pdu ( int indent , const DM_AMPM_READ_BD_ADDR_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_INQUIRY_MODE_CFM_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_VERIFY_PHYSICAL_LINK_IND_pdu ( int indent , const DM_AMPM_VERIFY_PHYSICAL_LINK_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_PERIODIC_INQUIRY_MODE_REQ_pdu ( int indent , const DM_HCI_PERIODIC_INQUIRY_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CHANGE_LOCAL_NAME_REQ_pdu ( int indent , const DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_SIMPLE_PAIRING_COMPLETE_IND_pdu ( int indent , const DM_SM_SIMPLE_PAIRING_COMPLETE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ_pdu ( int indent , const DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_STORED_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_READ_STORED_LINK_KEY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AM_REGISTER_REQ_pdu ( int indent , const DM_AM_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SET_BT_VERSION_CFM_pdu ( int indent , const DM_SET_BT_VERSION_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_UNREGISTER_CFM_pdu ( int indent , const DM_SM_UNREGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CLASS_OF_DEVICE_REQ_pdu ( int indent , const DM_HCI_READ_CLASS_OF_DEVICE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_UNREGISTER_REQ_pdu ( int indent , const DM_SYNC_UNREGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SNIFF_SUB_RATE_CFM_pdu ( int indent , const DM_HCI_SNIFF_SUB_RATE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ_pdu ( int indent , const DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_READ_BD_ADDR_CFM_pdu ( int indent , const DM_AMPM_READ_BD_ADDR_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_ACL_OPEN_REQ_pdu ( int indent , const DM_ACL_OPEN_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CREATE_CONNECTION_CANCEL_REQ_pdu ( int indent , const DM_HCI_CREATE_CONNECTION_CANCEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_RAND_REQ_pdu ( int indent , const DM_HCI_ULP_RAND_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_CLEAR_PARAM_CACHE_REQ_pdu ( int indent , const DM_CLEAR_PARAM_CACHE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_PERIODIC_INQUIRY_MODE_CFM_pdu ( int indent , const DM_HCI_PERIODIC_INQUIRY_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_REMOTE_NAME_CFM_pdu ( int indent , const DM_HCI_REMOTE_NAME_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CHANGE_LOCAL_NAME_CFM_pdu ( int indent , const DM_HCI_CHANGE_LOCAL_NAME_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ_pdu ( int indent , const DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_CONNECT_REQ_pdu ( int indent , const DM_SYNC_CONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_pdu ( int indent , const DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_STORED_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_READ_STORED_LINK_KEY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_REFRESH_ENCRYPTION_KEY_REQ_pdu ( int indent , const DM_HCI_REFRESH_ENCRYPTION_KEY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AM_REGISTER_CFM_pdu ( int indent , const DM_AM_REGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_SCAN_ENABLE_REQ_pdu ( int indent , const DM_HCI_WRITE_SCAN_ENABLE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CLASS_OF_DEVICE_CFM_pdu ( int indent , const DM_HCI_READ_CLASS_OF_DEVICE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_UNREGISTER_CFM_pdu ( int indent , const DM_SYNC_UNREGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM_pdu ( int indent , const DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_ACL_OPEN_CFM_pdu ( int indent , const DM_ACL_OPEN_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_CREATE_CONNECTION_CANCEL_CFM_pdu ( int indent , const DM_HCI_CREATE_CONNECTION_CANCEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PIN_TYPE_REQ_pdu ( int indent , const DM_HCI_READ_PIN_TYPE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_RAND_CFM_pdu ( int indent , const DM_HCI_ULP_RAND_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_VOICE_SETTING_REQ_pdu ( int indent , const DM_HCI_READ_VOICE_SETTING_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ_pdu ( int indent , const DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_CLEAR_PARAM_CACHE_CFM_pdu ( int indent , const DM_CLEAR_PARAM_CACHE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_pdu ( int indent , const DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_INQUIRY_CANCEL_REQ_pdu ( int indent , const DM_HCI_INQUIRY_CANCEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_pdu ( int indent , const DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_pdu ( int indent , const DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_CONNECT_CFM_pdu ( int indent , const DM_SYNC_CONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_PIN_REQUEST_RSP_pdu ( int indent , const DM_SM_PIN_REQUEST_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_SCAN_ENABLE_CFM_pdu ( int indent , const DM_HCI_WRITE_SCAN_ENABLE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ_pdu ( int indent , const DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_FLUSH_REQ_pdu ( int indent , const DM_HCI_FLUSH_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PIN_TYPE_CFM_pdu ( int indent , const DM_HCI_READ_PIN_TYPE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_SECURITY_REQ_pdu ( int indent , const DM_SM_SECURITY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_VOICE_SETTING_CFM_pdu ( int indent , const DM_HCI_READ_VOICE_SETTING_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_PIN_REQUEST_IND_pdu ( int indent , const DM_SM_PIN_REQUEST_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM_pdu ( int indent , const DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_KEYS_IND_pdu ( int indent , const DM_SM_KEYS_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SET_AFH_CHANNEL_CLASS_CFM_pdu ( int indent , const DM_HCI_SET_AFH_CHANNEL_CLASS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_pdu ( int indent , const DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_INQUIRY_CANCEL_CFM_pdu ( int indent , const DM_HCI_INQUIRY_CANCEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ_pdu ( int indent , const DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_ENCRYPT_REQ_pdu ( int indent , const DM_SM_ENCRYPT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_NUM_BCAST_RETXS_REQ_pdu ( int indent , const DM_HCI_WRITE_NUM_BCAST_RETXS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ_pdu ( int indent , const DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_USER_CONFIRMATION_REQUEST_RSP_pdu ( int indent , const DM_SM_USER_CONFIRMATION_REQUEST_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_BLUESTACK_STATE_TRANSITION_EXIT_IND_pdu ( int indent , const DM_BLUESTACK_STATE_TRANSITION_EXIT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM_pdu ( int indent , const DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_REMOTE_EXT_FEATURES_REQ_pdu ( int indent , const DM_HCI_READ_REMOTE_EXT_FEATURES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_USER_PASSKEY_REQUEST_NEG_RSP_pdu ( int indent , const DM_SM_USER_PASSKEY_REQUEST_NEG_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_SET_DEFAULT_LINK_POLICY_REQ_pdu ( int indent , const DM_SET_DEFAULT_LINK_POLICY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_UNREGISTER_OUTGOING_REQ_pdu ( int indent , const DM_SM_UNREGISTER_OUTGOING_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LMP_HANDLE_REQ_pdu ( int indent , const DM_HCI_READ_LMP_HANDLE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_FLUSH_CFM_pdu ( int indent , const DM_HCI_FLUSH_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_LINK_KEY_NOTIFICATION_IND_pdu ( int indent , const DM_AMPM_LINK_KEY_NOTIFICATION_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_SECURITY_CFM_pdu ( int indent , const DM_SM_SECURITY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_USER_CONFIRMATION_REQUEST_IND_pdu ( int indent , const DM_SM_USER_CONFIRMATION_REQUEST_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_ADVERTISING_DATA_CFM_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISING_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM_pdu ( int indent , const DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGESCAN_MODE_REQ_pdu ( int indent , const DM_HCI_READ_PAGESCAN_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_ENCRYPT_CFM_pdu ( int indent , const DM_SM_ENCRYPT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_NUM_BCAST_RETXS_CFM_pdu ( int indent , const DM_HCI_WRITE_NUM_BCAST_RETXS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM_pdu ( int indent , const DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_AUTHENTICATE_REQ_pdu ( int indent , const DM_SM_AUTHENTICATE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_REGISTER_OUTGOING_REQ_pdu ( int indent , const DM_SM_REGISTER_OUTGOING_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_EXIT_PARK_MODE_REQ_pdu ( int indent , const DM_HCI_EXIT_PARK_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND_pdu ( int indent , const DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ_pdu ( int indent , const DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_pdu ( int indent , const DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_DISCONNECT_REQ_pdu ( int indent , const DM_SYNC_DISCONNECT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_UNREGISTER_OUTGOING_CFM_pdu ( int indent , const DM_SM_UNREGISTER_OUTGOING_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ_pdu ( int indent , const DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LMP_HANDLE_CFM_pdu ( int indent , const DM_HCI_READ_LMP_HANDLE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_pdu ( int indent , const DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_MASTER_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_MASTER_LINK_KEY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_BAD_MESSAGE_IND_pdu ( int indent , const DM_BAD_MESSAGE_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CLOCK_REQ_pdu ( int indent , const DM_HCI_READ_CLOCK_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGESCAN_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_READ_PAGESCAN_ACTIVITY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ_pdu ( int indent , const DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGESCAN_MODE_CFM_pdu ( int indent , const DM_HCI_READ_PAGESCAN_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGE_SCAN_TYPE_REQ_pdu ( int indent , const DM_HCI_READ_PAGE_SCAN_TYPE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_AUTHENTICATE_CFM_pdu ( int indent , const DM_SM_AUTHENTICATE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_REGISTER_OUTGOING_CFM_pdu ( int indent , const DM_SM_REGISTER_OUTGOING_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_ENC_MODE_REQ_pdu ( int indent , const DM_HCI_READ_ENC_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_SCAN_ENABLE_REQ_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_ENABLE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_pdu ( int indent , const DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_DISCONNECT_CFM_pdu ( int indent , const DM_SYNC_DISCONNECT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM_pdu ( int indent , const DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_FAILED_CONTACT_COUNT_REQ_pdu ( int indent , const DM_HCI_READ_FAILED_CONTACT_COUNT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_pdu ( int indent , const DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ_pdu ( int indent , const DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CLOCK_CFM_pdu ( int indent , const DM_HCI_READ_CLOCK_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CURRENT_IAC_LAP_REQ_pdu ( int indent , const DM_HCI_READ_CURRENT_IAC_LAP_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_MASTER_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_MASTER_LINK_KEY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGESCAN_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_READ_PAGESCAN_ACTIVITY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM_pdu ( int indent , const DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_PAGE_SCAN_TYPE_CFM_pdu ( int indent , const DM_HCI_READ_PAGE_SCAN_TYPE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_AUTH_ENABLE_REQ_pdu ( int indent , const DM_HCI_READ_AUTH_ENABLE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_REGISTER_REQ_pdu ( int indent , const DM_SYNC_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_ENC_MODE_CFM_pdu ( int indent , const DM_HCI_READ_ENC_MODE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_SCAN_ENABLE_CFM_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_ENABLE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_SNIFF_MODE_REQ_pdu ( int indent , const DM_HCI_SNIFF_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_FAILED_CONTACT_COUNT_CFM_pdu ( int indent , const DM_HCI_READ_FAILED_CONTACT_COUNT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ROLE_DISCOVERY_REQ_pdu ( int indent , const DM_HCI_ROLE_DISCOVERY_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LINK_POLICY_SETTINGS_REQ_pdu ( int indent , const DM_HCI_READ_LINK_POLICY_SETTINGS_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM_pdu ( int indent , const DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_RESET_REQ_pdu ( int indent , const DM_HCI_RESET_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_CURRENT_IAC_LAP_CFM_pdu ( int indent , const DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_AUTH_ENABLE_CFM_pdu ( int indent , const DM_HCI_READ_AUTH_ENABLE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SYNC_REGISTER_CFM_pdu ( int indent , const DM_SYNC_REGISTER_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP_pdu ( int indent , const DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_MODE_CHANGE_EVENT_IND_pdu ( int indent , const DM_HCI_MODE_CHANGE_EVENT_IND_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ULP_SET_EVENT_MASK_REQ_pdu ( int indent , const DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LINK_POLICY_SETTINGS_CFM_pdu ( int indent , const DM_HCI_READ_LINK_POLICY_SETTINGS_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_ROLE_DISCOVERY_CFM_pdu ( int indent , const DM_HCI_ROLE_DISCOVERY_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_PARK_MODE_REQ_pdu ( int indent , const DM_HCI_PARK_MODE_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_RESET_CFM_pdu ( int indent , const DM_HCI_RESET_CFM_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_READ_LOCAL_VER_INFO_REQ_pdu ( int indent , const DM_HCI_READ_LOCAL_VER_INFO_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_AMPM_REGISTER_REQ_pdu ( int indent , const DM_AMPM_REGISTER_REQ_T_PDU& , PDU_displayer * policy );
a_string display_DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ_T_PDU& , PDU_displayer * policy );
#endif//USE_DISPLAY_PDU

#endif//__GEN_DISPLAY_PDU_H__
