////////////////////////////////////////////////////////////////////////////////
//
//  WARNING THIS IS AN AUTOGENERATED FILE DEFINING A BLUECORE-FRIENDY PROTOCOL
//
////////////////////////////////////////////////////////////////////////////////

#include "bcflayout.h"


enum {
	OFFSET_START(RADIOTEST_TXSTART)
	OFFSET_uint16(RADIOTEST_TXSTART_req_type),
	OFFSET_uint16(RADIOTEST_TXSTART_wordlength),
	OFFSET_uint16(RADIOTEST_TXSTART_seq_no),
	OFFSET_uint16(RADIOTEST_TXSTART_varid),
	OFFSET_uint16(RADIOTEST_TXSTART_status),
	OFFSET_uint16(RADIOTEST_TXSTART_radiotest_field),
	OFFSET_uint16(RADIOTEST_TXSTART_lo_freq),
	OFFSET_uint16(RADIOTEST_TXSTART_level),
	OFFSET_int16(RADIOTEST_TXSTART_mod_freq),
	OFFSET_uint16(RADIOTEST_TXSTART_dummy3),
	RADIOTEST_TXSTART_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CTS_RTS_LB)
	OFFSET_uint16(RADIOTEST_CTS_RTS_LB_req_type),
	OFFSET_uint16(RADIOTEST_CTS_RTS_LB_wordlength),
	OFFSET_uint16(RADIOTEST_CTS_RTS_LB_seq_no),
	OFFSET_uint16(RADIOTEST_CTS_RTS_LB_varid),
	OFFSET_uint16(RADIOTEST_CTS_RTS_LB_status),
	OFFSET_uint16(RADIOTEST_CTS_RTS_LB_radiotest_field),
	RADIOTEST_CTS_RTS_LB_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CONFIG_TX_IF)
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_req_type),
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_wordlength),
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_seq_no),
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_varid),
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_status),
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_radiotest_field),
	OFFSET_int16(RADIOTEST_CONFIG_TX_IF_offset_half_mhz),
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_dummy1),
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_dummy2),
	OFFSET_uint16(RADIOTEST_CONFIG_TX_IF_dummy3),
	RADIOTEST_CONFIG_TX_IF_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_PCM_LB)
	OFFSET_uint16(RADIOTEST_PCM_LB_req_type),
	OFFSET_uint16(RADIOTEST_PCM_LB_wordlength),
	OFFSET_uint16(RADIOTEST_PCM_LB_seq_no),
	OFFSET_uint16(RADIOTEST_PCM_LB_varid),
	OFFSET_uint16(RADIOTEST_PCM_LB_status),
	OFFSET_uint16(RADIOTEST_PCM_LB_radiotest_field),
	OFFSET_uint16(RADIOTEST_PCM_LB_pcm_mode),
	OFFSET_uint16(RADIOTEST_PCM_LB_dummy1),
	OFFSET_uint16(RADIOTEST_PCM_LB_dummy2),
	OFFSET_uint16(RADIOTEST_PCM_LB_dummy3),
	RADIOTEST_PCM_LB_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_SETTLE)
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_req_type),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_varid),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_status),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_radio_on_offset),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_SETTLE_dummy3),
	RADIOTEST_CFG_SETTLE_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_IF_RESP)
	OFFSET_uint16(RADIOTEST_IF_RESP_req_type),
	OFFSET_uint16(RADIOTEST_IF_RESP_wordlength),
	OFFSET_uint16(RADIOTEST_IF_RESP_seq_no),
	OFFSET_uint16(RADIOTEST_IF_RESP_varid),
	OFFSET_uint16(RADIOTEST_IF_RESP_status),
	OFFSET_uint16(RADIOTEST_IF_RESP_radiotest_field),
	OFFSET_uint16(RADIOTEST_IF_RESP_n_samples),
	OFFSET_int16(RADIOTEST_IF_RESP_lo_offset),
	OFFSET_int16(RADIOTEST_IF_RESP_hi_offset),
	OFFSET_uint16(RADIOTEST_IF_RESP_dummy3),
	RADIOTEST_IF_RESP_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_PCM_EXT_LB)
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_req_type),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_wordlength),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_seq_no),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_varid),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_status),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_radiotest_field),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_pcm_mode),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_dummy1),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_dummy2),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_dummy3),
	RADIOTEST_PCM_EXT_LB_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_TX_RF_TRIM)
	OFFSET_uint16(RADIOTEST_CFG_TX_RF_TRIM_req_type),
	OFFSET_uint16(RADIOTEST_CFG_TX_RF_TRIM_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_TX_RF_TRIM_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_TX_RF_TRIM_varid),
	OFFSET_uint16(RADIOTEST_CFG_TX_RF_TRIM_status),
	OFFSET_uint16(RADIOTEST_CFG_TX_RF_TRIM_radiotest_field),
	OFFSET_int16(RADIOTEST_CFG_TX_RF_TRIM_trim1),
	OFFSET_int16(RADIOTEST_CFG_TX_RF_TRIM_trim2),
	OFFSET_uint16(RADIOTEST_CFG_TX_RF_TRIM_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_TX_RF_TRIM_dummy3),
	RADIOTEST_CFG_TX_RF_TRIM_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CODEC_STEREO_LB)
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_req_type),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_wordlength),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_seq_no),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_varid),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_status),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_radiotest_field),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_samp_rate),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_reroute_optn),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_dummy2),
	OFFSET_uint16(RADIOTEST_CODEC_STEREO_LB_dummy3),
	RADIOTEST_CODEC_STEREO_LB_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_UAP_LAP)
	OFFSET_uint16(RADIOTEST_CFG_UAP_LAP_req_type),
	OFFSET_uint16(RADIOTEST_CFG_UAP_LAP_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_UAP_LAP_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_UAP_LAP_varid),
	OFFSET_uint16(RADIOTEST_CFG_UAP_LAP_status),
	OFFSET_uint16(RADIOTEST_CFG_UAP_LAP_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_UAP_LAP_uap),
	OFFSET_uint32(RADIOTEST_CFG_UAP_LAP_lap),
	OFFSET_uint16(RADIOTEST_CFG_UAP_LAP_dummy3),
	RADIOTEST_CFG_UAP_LAP_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_SETTLE_RPT)
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_req_type),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_wordlength),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_seq_no),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_varid),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_status),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_radiotest_field),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_chan1),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_chan2),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_dummy2),
	OFFSET_uint16(RADIOTEST_SETTLE_RPT_dummy3),
	RADIOTEST_SETTLE_RPT_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_DEEP_SLEEP)
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_req_type),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_wordlength),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_seq_no),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_varid),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_status),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_radiotest_field),
	RADIOTEST_DEEP_SLEEP_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_PCM_EXT_LB_INTERFACE)
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_req_type),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_wordlength),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_seq_no),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_varid),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_status),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_radiotest_field),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_pcm_mode),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_pcm_interface),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_dummy2),
	OFFSET_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_dummy3),
	RADIOTEST_PCM_EXT_LB_INTERFACE_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_PKT)
	OFFSET_uint16(RADIOTEST_CFG_PKT_req_type),
	OFFSET_uint16(RADIOTEST_CFG_PKT_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_PKT_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_PKT_varid),
	OFFSET_uint16(RADIOTEST_CFG_PKT_status),
	OFFSET_uint16(RADIOTEST_CFG_PKT_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_PKT_pkt_type),
	OFFSET_uint16(RADIOTEST_CFG_PKT_pkt_size),
	OFFSET_uint16(RADIOTEST_CFG_PKT_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_PKT_dummy3),
	RADIOTEST_CFG_PKT_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_TX_TRIM)
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_req_type),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_varid),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_status),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_am_addr),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_TX_TRIM_dummy3),
	RADIOTEST_CFG_TX_TRIM_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_FREQ_MS)
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_req_type),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_varid),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_status),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_txrx_freq),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_lb_offs),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_report_freq),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_MS_dummy3),
	RADIOTEST_CFG_FREQ_MS_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_RXDATA1)
	OFFSET_uint16(RADIOTEST_RXDATA1_req_type),
	OFFSET_uint16(RADIOTEST_RXDATA1_wordlength),
	OFFSET_uint16(RADIOTEST_RXDATA1_seq_no),
	OFFSET_uint16(RADIOTEST_RXDATA1_varid),
	OFFSET_uint16(RADIOTEST_RXDATA1_status),
	OFFSET_uint16(RADIOTEST_RXDATA1_radiotest_field),
	OFFSET_uint16(RADIOTEST_RXDATA1_lo_freq),
	OFFSET_bool(RADIOTEST_RXDATA1_highside),
	OFFSET_uint16(RADIOTEST_RXDATA1_attn),
	OFFSET_uint16(RADIOTEST_RXDATA1_dummy3),
	RADIOTEST_RXDATA1_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_RXDATA2)
	OFFSET_uint16(RADIOTEST_RXDATA2_req_type),
	OFFSET_uint16(RADIOTEST_RXDATA2_wordlength),
	OFFSET_uint16(RADIOTEST_RXDATA2_seq_no),
	OFFSET_uint16(RADIOTEST_RXDATA2_varid),
	OFFSET_uint16(RADIOTEST_RXDATA2_status),
	OFFSET_uint16(RADIOTEST_RXDATA2_radiotest_field),
	OFFSET_uint16(RADIOTEST_RXDATA2_cc),
	OFFSET_bool(RADIOTEST_RXDATA2_highside),
	OFFSET_uint16(RADIOTEST_RXDATA2_attn),
	OFFSET_uint16(RADIOTEST_RXDATA2_dummy3),
	RADIOTEST_RXDATA2_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_RADIO_STATUS_ARRAY)
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_ARRAY_req_type),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_ARRAY_wordlength),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_ARRAY_seq_no),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_ARRAY_varid),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_ARRAY_status),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_ARRAY_radiotest_field),
	RADIOTEST_RADIO_STATUS_ARRAY_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_DEEP_SLEEP_SELECT)
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_req_type),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_wordlength),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_seq_no),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_varid),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_status),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_radiotest_field),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_pio_mask),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_serial_mask),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_dummy2),
	OFFSET_uint16(RADIOTEST_DEEP_SLEEP_SELECT_dummy3),
	RADIOTEST_DEEP_SLEEP_SELECT_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_IQ_TRIM)
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_req_type),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_varid),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_status),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_trim),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_IQ_TRIM_dummy3),
	RADIOTEST_CFG_IQ_TRIM_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_ACC_ERRS)
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_req_type),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_varid),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_status),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_n_errs),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_ACC_ERRS_dummy3),
	RADIOTEST_CFG_ACC_ERRS_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_TXPOWER)
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_req_type),
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_varid),
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_status),
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_radiotest_field),
	OFFSET_int16(RADIOTEST_CFG_TXPOWER_db),
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_TXPOWER_dummy3),
	RADIOTEST_CFG_TXPOWER_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_IF_IQ_MATCH)
	OFFSET_uint16(RADIOTEST_IF_IQ_MATCH_req_type),
	OFFSET_uint16(RADIOTEST_IF_IQ_MATCH_wordlength),
	OFFSET_uint16(RADIOTEST_IF_IQ_MATCH_seq_no),
	OFFSET_uint16(RADIOTEST_IF_IQ_MATCH_varid),
	OFFSET_uint16(RADIOTEST_IF_IQ_MATCH_status),
	OFFSET_uint16(RADIOTEST_IF_IQ_MATCH_radiotest_field),
	RADIOTEST_IF_IQ_MATCH_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_FREQ)
	OFFSET_uint16(RADIOTEST_CFG_FREQ_req_type),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_varid),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_status),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_txrx_freq),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_lb_offs),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_report_freq),
	OFFSET_uint16(RADIOTEST_CFG_FREQ_dummy3),
	RADIOTEST_CFG_FREQ_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_TXDATA1)
	OFFSET_uint16(RADIOTEST_TXDATA1_req_type),
	OFFSET_uint16(RADIOTEST_TXDATA1_wordlength),
	OFFSET_uint16(RADIOTEST_TXDATA1_seq_no),
	OFFSET_uint16(RADIOTEST_TXDATA1_varid),
	OFFSET_uint16(RADIOTEST_TXDATA1_status),
	OFFSET_uint16(RADIOTEST_TXDATA1_radiotest_field),
	OFFSET_uint16(RADIOTEST_TXDATA1_lo_freq),
	OFFSET_uint16(RADIOTEST_TXDATA1_level),
	OFFSET_uint16(RADIOTEST_TXDATA1_dummy2),
	OFFSET_uint16(RADIOTEST_TXDATA1_dummy3),
	RADIOTEST_TXDATA1_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_LO_LVL)
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_req_type),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_varid),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_status),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_lvl),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_LO_LVL_dummy3),
	RADIOTEST_CFG_LO_LVL_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_TXDATA2)
	OFFSET_uint16(RADIOTEST_TXDATA2_req_type),
	OFFSET_uint16(RADIOTEST_TXDATA2_wordlength),
	OFFSET_uint16(RADIOTEST_TXDATA2_seq_no),
	OFFSET_uint16(RADIOTEST_TXDATA2_varid),
	OFFSET_uint16(RADIOTEST_TXDATA2_status),
	OFFSET_uint16(RADIOTEST_TXDATA2_radiotest_field),
	OFFSET_uint16(RADIOTEST_TXDATA2_cc),
	OFFSET_uint16(RADIOTEST_TXDATA2_level),
	OFFSET_uint16(RADIOTEST_TXDATA2_dummy2),
	OFFSET_uint16(RADIOTEST_TXDATA2_dummy3),
	RADIOTEST_TXDATA2_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_RF_IQ_MATCH)
	OFFSET_uint16(RADIOTEST_RF_IQ_MATCH_req_type),
	OFFSET_uint16(RADIOTEST_RF_IQ_MATCH_wordlength),
	OFFSET_uint16(RADIOTEST_RF_IQ_MATCH_seq_no),
	OFFSET_uint16(RADIOTEST_RF_IQ_MATCH_varid),
	OFFSET_uint16(RADIOTEST_RF_IQ_MATCH_status),
	OFFSET_uint16(RADIOTEST_RF_IQ_MATCH_radiotest_field),
	RADIOTEST_RF_IQ_MATCH_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_SETTLE)
	OFFSET_uint16(RADIOTEST_SETTLE_req_type),
	OFFSET_uint16(RADIOTEST_SETTLE_wordlength),
	OFFSET_uint16(RADIOTEST_SETTLE_seq_no),
	OFFSET_uint16(RADIOTEST_SETTLE_varid),
	OFFSET_uint16(RADIOTEST_SETTLE_status),
	OFFSET_uint16(RADIOTEST_SETTLE_radiotest_field),
	OFFSET_uint16(RADIOTEST_SETTLE_chan1),
	OFFSET_uint16(RADIOTEST_SETTLE_chan2),
	OFFSET_uint16(RADIOTEST_SETTLE_dummy2),
	OFFSET_uint16(RADIOTEST_SETTLE_dummy3),
	RADIOTEST_SETTLE_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_TXDATA3)
	OFFSET_uint16(RADIOTEST_TXDATA3_req_type),
	OFFSET_uint16(RADIOTEST_TXDATA3_wordlength),
	OFFSET_uint16(RADIOTEST_TXDATA3_seq_no),
	OFFSET_uint16(RADIOTEST_TXDATA3_varid),
	OFFSET_uint16(RADIOTEST_TXDATA3_status),
	OFFSET_uint16(RADIOTEST_TXDATA3_radiotest_field),
	OFFSET_uint16(RADIOTEST_TXDATA3_lo_freq),
	OFFSET_uint16(RADIOTEST_TXDATA3_level),
	OFFSET_uint16(RADIOTEST_TXDATA3_dummy2),
	OFFSET_uint16(RADIOTEST_TXDATA3_dummy3),
	RADIOTEST_TXDATA3_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_TXDATA4)
	OFFSET_uint16(RADIOTEST_TXDATA4_req_type),
	OFFSET_uint16(RADIOTEST_TXDATA4_wordlength),
	OFFSET_uint16(RADIOTEST_TXDATA4_seq_no),
	OFFSET_uint16(RADIOTEST_TXDATA4_varid),
	OFFSET_uint16(RADIOTEST_TXDATA4_status),
	OFFSET_uint16(RADIOTEST_TXDATA4_radiotest_field),
	OFFSET_uint16(RADIOTEST_TXDATA4_lo_freq),
	OFFSET_uint16(RADIOTEST_TXDATA4_level),
	OFFSET_uint16(RADIOTEST_TXDATA4_dummy2),
	OFFSET_uint16(RADIOTEST_TXDATA4_dummy3),
	RADIOTEST_TXDATA4_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_PIO_ENABLE_MASK)
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_req_type),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_varid),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_status),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_mask),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_dummy3),
	RADIOTEST_CFG_PIO_ENABLE_MASK_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_PCM_TIMING_IN)
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_req_type),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_wordlength),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_seq_no),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_varid),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_status),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_radiotest_field),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_pio_out),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_pcm_in),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_dummy2),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_dummy3),
	RADIOTEST_PCM_TIMING_IN_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_PCM_TONE)
	OFFSET_uint16(RADIOTEST_PCM_TONE_req_type),
	OFFSET_uint16(RADIOTEST_PCM_TONE_wordlength),
	OFFSET_uint16(RADIOTEST_PCM_TONE_seq_no),
	OFFSET_uint16(RADIOTEST_PCM_TONE_varid),
	OFFSET_uint16(RADIOTEST_PCM_TONE_status),
	OFFSET_uint16(RADIOTEST_PCM_TONE_radiotest_field),
	OFFSET_uint16(RADIOTEST_PCM_TONE_freq),
	OFFSET_uint16(RADIOTEST_PCM_TONE_ampl),
	OFFSET_uint16(RADIOTEST_PCM_TONE_dc),
	OFFSET_uint16(RADIOTEST_PCM_TONE_dummy3),
	RADIOTEST_PCM_TONE_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_RX_LOOP_BACK)
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_req_type),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_wordlength),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_seq_no),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_varid),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_status),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_radiotest_field),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_lo_freq),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_level),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_dummy2),
	OFFSET_uint16(RADIOTEST_RX_LOOP_BACK_dummy3),
	RADIOTEST_RX_LOOP_BACK_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_PCM_TIMING_IN_INTERFACE)
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_req_type),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_wordlength),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_seq_no),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_varid),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_status),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_radiotest_field),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pio_out),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pcm_in),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pcm_interface),
	OFFSET_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_dummy3),
	RADIOTEST_PCM_TIMING_IN_INTERFACE_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_PCM_LB_INTERFACE)
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_req_type),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_wordlength),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_seq_no),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_varid),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_status),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_radiotest_field),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_pcm_mode),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_pcm_interface),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_dummy2),
	OFFSET_uint16(RADIOTEST_PCM_LB_INTERFACE_dummy3),
	RADIOTEST_PCM_LB_INTERFACE_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_TX_COMP)
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_req_type),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_varid),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_status),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_tx_offset),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_lo_offset),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_TX_COMP_dummy3),
	RADIOTEST_CFG_TX_COMP_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_XTAL_FTRIM)
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_req_type),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_varid),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_status),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_xtal_ftrim),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_XTAL_FTRIM_dummy3),
	RADIOTEST_CFG_XTAL_FTRIM_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_RXSTART1)
	OFFSET_uint16(RADIOTEST_RXSTART1_req_type),
	OFFSET_uint16(RADIOTEST_RXSTART1_wordlength),
	OFFSET_uint16(RADIOTEST_RXSTART1_seq_no),
	OFFSET_uint16(RADIOTEST_RXSTART1_varid),
	OFFSET_uint16(RADIOTEST_RXSTART1_status),
	OFFSET_uint16(RADIOTEST_RXSTART1_radiotest_field),
	OFFSET_uint16(RADIOTEST_RXSTART1_lo_freq),
	OFFSET_bool(RADIOTEST_RXSTART1_highside),
	OFFSET_uint16(RADIOTEST_RXSTART1_attn),
	OFFSET_uint16(RADIOTEST_RXSTART1_dummy3),
	RADIOTEST_RXSTART1_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_RXSTART2)
	OFFSET_uint16(RADIOTEST_RXSTART2_req_type),
	OFFSET_uint16(RADIOTEST_RXSTART2_wordlength),
	OFFSET_uint16(RADIOTEST_RXSTART2_seq_no),
	OFFSET_uint16(RADIOTEST_RXSTART2_varid),
	OFFSET_uint16(RADIOTEST_RXSTART2_status),
	OFFSET_uint16(RADIOTEST_RXSTART2_radiotest_field),
	OFFSET_uint16(RADIOTEST_RXSTART2_lo_freq),
	OFFSET_bool(RADIOTEST_RXSTART2_highside),
	OFFSET_uint16(RADIOTEST_RXSTART2_attn),
	OFFSET_uint16(RADIOTEST_RXSTART2_dummy3),
	RADIOTEST_RXSTART2_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_RADIO_STATUS)
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_req_type),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_wordlength),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_seq_no),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_varid),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_status),
	OFFSET_uint16(RADIOTEST_RADIO_STATUS_radiotest_field),
	RADIOTEST_RADIO_STATUS_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_BUILD_LUT)
	OFFSET_uint16(RADIOTEST_BUILD_LUT_req_type),
	OFFSET_uint16(RADIOTEST_BUILD_LUT_wordlength),
	OFFSET_uint16(RADIOTEST_BUILD_LUT_seq_no),
	OFFSET_uint16(RADIOTEST_BUILD_LUT_varid),
	OFFSET_uint16(RADIOTEST_BUILD_LUT_status),
	OFFSET_uint16(RADIOTEST_BUILD_LUT_radiotest_field),
	RADIOTEST_BUILD_LUT_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_BER_LOOP_BACK)
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_req_type),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_wordlength),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_seq_no),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_varid),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_status),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_radiotest_field),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_lo_freq),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_level),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_dummy2),
	OFFSET_uint16(RADIOTEST_BER_LOOP_BACK_dummy3),
	RADIOTEST_BER_LOOP_BACK_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_BER1)
	OFFSET_uint16(RADIOTEST_BER1_req_type),
	OFFSET_uint16(RADIOTEST_BER1_wordlength),
	OFFSET_uint16(RADIOTEST_BER1_seq_no),
	OFFSET_uint16(RADIOTEST_BER1_varid),
	OFFSET_uint16(RADIOTEST_BER1_status),
	OFFSET_uint16(RADIOTEST_BER1_radiotest_field),
	OFFSET_uint16(RADIOTEST_BER1_lo_freq),
	OFFSET_bool(RADIOTEST_BER1_highside),
	OFFSET_uint16(RADIOTEST_BER1_attn),
	OFFSET_uint16(RADIOTEST_BER1_dummy3),
	RADIOTEST_BER1_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_BER2)
	OFFSET_uint16(RADIOTEST_BER2_req_type),
	OFFSET_uint16(RADIOTEST_BER2_wordlength),
	OFFSET_uint16(RADIOTEST_BER2_seq_no),
	OFFSET_uint16(RADIOTEST_BER2_varid),
	OFFSET_uint16(RADIOTEST_BER2_status),
	OFFSET_uint16(RADIOTEST_BER2_radiotest_field),
	OFFSET_uint16(RADIOTEST_BER2_cc),
	OFFSET_bool(RADIOTEST_BER2_highside),
	OFFSET_uint16(RADIOTEST_BER2_attn),
	OFFSET_uint16(RADIOTEST_BER2_dummy3),
	RADIOTEST_BER2_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_READ_LUT)
	OFFSET_uint16(RADIOTEST_READ_LUT_req_type),
	OFFSET_uint16(RADIOTEST_READ_LUT_wordlength),
	OFFSET_uint16(RADIOTEST_READ_LUT_seq_no),
	OFFSET_uint16(RADIOTEST_READ_LUT_varid),
	OFFSET_uint16(RADIOTEST_READ_LUT_status),
	OFFSET_uint16(RADIOTEST_READ_LUT_radiotest_field),
	RADIOTEST_READ_LUT_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_VCOTRIM)
	OFFSET_uint16(RADIOTEST_VCOTRIM_req_type),
	OFFSET_uint16(RADIOTEST_VCOTRIM_wordlength),
	OFFSET_uint16(RADIOTEST_VCOTRIM_seq_no),
	OFFSET_uint16(RADIOTEST_VCOTRIM_varid),
	OFFSET_uint16(RADIOTEST_VCOTRIM_status),
	OFFSET_uint16(RADIOTEST_VCOTRIM_radiotest_field),
	OFFSET_uint16(RADIOTEST_VCOTRIM_cc),
	OFFSET_uint16(RADIOTEST_VCOTRIM_dummy1),
	OFFSET_uint16(RADIOTEST_VCOTRIM_dummy2),
	OFFSET_uint16(RADIOTEST_VCOTRIM_dummy3),
	RADIOTEST_VCOTRIM_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_PAUSE)
	OFFSET_uint16(RADIOTEST_PAUSE_req_type),
	OFFSET_uint16(RADIOTEST_PAUSE_wordlength),
	OFFSET_uint16(RADIOTEST_PAUSE_seq_no),
	OFFSET_uint16(RADIOTEST_PAUSE_varid),
	OFFSET_uint16(RADIOTEST_PAUSE_status),
	OFFSET_uint16(RADIOTEST_PAUSE_radiotest_field),
	RADIOTEST_PAUSE_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_BIT_ERR)
	OFFSET_uint16(RADIOTEST_CFG_BIT_ERR_req_type),
	OFFSET_uint16(RADIOTEST_CFG_BIT_ERR_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_BIT_ERR_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_BIT_ERR_varid),
	OFFSET_uint16(RADIOTEST_CFG_BIT_ERR_status),
	OFFSET_uint16(RADIOTEST_CFG_BIT_ERR_radiotest_field),
	OFFSET_uint32(RADIOTEST_CFG_BIT_ERR_bits_count),
	OFFSET_bool(RADIOTEST_CFG_BIT_ERR_reset),
	OFFSET_uint16(RADIOTEST_CFG_BIT_ERR_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_BIT_ERR_dummy3),
	RADIOTEST_CFG_BIT_ERR_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_CFG_TX_PA_ATTEN)
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_req_type),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_wordlength),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_seq_no),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_varid),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_status),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_radiotest_field),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_atten_value),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_dummy1),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_dummy2),
	OFFSET_uint16(RADIOTEST_CFG_TX_PA_ATTEN_dummy3),
	RADIOTEST_CFG_TX_PA_ATTEN_pduSize
} ;

enum {
	OFFSET_START(RADIOTEST_LOOP_BACK)
	OFFSET_uint16(RADIOTEST_LOOP_BACK_req_type),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_wordlength),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_seq_no),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_varid),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_status),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_radiotest_field),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_lo_freq),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_level),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_dummy2),
	OFFSET_uint16(RADIOTEST_LOOP_BACK_dummy3),
	RADIOTEST_LOOP_BACK_pduSize
} ;

#include "hcipacker/gen_radiotest.h"


RADIOTEST_TXSTART_PDU::RADIOTEST_TXSTART_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_TXSTART );
}


RADIOTEST_TXSTART_PDU::RADIOTEST_TXSTART_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_TXSTART_PDU::RADIOTEST_TXSTART_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_TXSTART_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_TXSTART_lo_freq) ;
}

void RADIOTEST_TXSTART_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_TXSTART_lo_freq,val) ;
}

uint16 RADIOTEST_TXSTART_PDU::get_level(void) const
{
    return get_uint16(RADIOTEST_TXSTART_level) ;
}

void RADIOTEST_TXSTART_PDU::set_level(uint16 val)
{
    set_uint16(RADIOTEST_TXSTART_level,val) ;
}

int16 RADIOTEST_TXSTART_PDU::get_mod_freq(void) const
{
    return get_int16(RADIOTEST_TXSTART_mod_freq) ;
}

void RADIOTEST_TXSTART_PDU::set_mod_freq(int16 val)
{
    set_int16(RADIOTEST_TXSTART_mod_freq,val) ;
}

/*******************************************************************/


RADIOTEST_CTS_RTS_LB_PDU::RADIOTEST_CTS_RTS_LB_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CTS_RTS_LB );
}


RADIOTEST_CTS_RTS_LB_PDU::RADIOTEST_CTS_RTS_LB_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CTS_RTS_LB_PDU::RADIOTEST_CTS_RTS_LB_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_CONFIG_TX_IF_PDU::RADIOTEST_CONFIG_TX_IF_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CONFIG_TX_IF );
}


RADIOTEST_CONFIG_TX_IF_PDU::RADIOTEST_CONFIG_TX_IF_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CONFIG_TX_IF_PDU::RADIOTEST_CONFIG_TX_IF_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

int16 RADIOTEST_CONFIG_TX_IF_PDU::get_offset_half_mhz(void) const
{
    return get_int16(RADIOTEST_CONFIG_TX_IF_offset_half_mhz) ;
}

void RADIOTEST_CONFIG_TX_IF_PDU::set_offset_half_mhz(int16 val)
{
    set_int16(RADIOTEST_CONFIG_TX_IF_offset_half_mhz,val) ;
}

/*******************************************************************/


RADIOTEST_PCM_LB_PDU::RADIOTEST_PCM_LB_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_PCM_LB );
}


RADIOTEST_PCM_LB_PDU::RADIOTEST_PCM_LB_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_PCM_LB_PDU::RADIOTEST_PCM_LB_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_PCM_LB_PDU::get_pcm_mode(void) const
{
    return get_uint16(RADIOTEST_PCM_LB_pcm_mode) ;
}

void RADIOTEST_PCM_LB_PDU::set_pcm_mode(uint16 val)
{
    set_uint16(RADIOTEST_PCM_LB_pcm_mode,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_SETTLE_PDU::RADIOTEST_CFG_SETTLE_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_SETTLE );
}


RADIOTEST_CFG_SETTLE_PDU::RADIOTEST_CFG_SETTLE_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_SETTLE_PDU::RADIOTEST_CFG_SETTLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_SETTLE_PDU::get_radio_on_offset(void) const
{
    return get_uint16(RADIOTEST_CFG_SETTLE_radio_on_offset) ;
}

void RADIOTEST_CFG_SETTLE_PDU::set_radio_on_offset(uint16 val)
{
    set_uint16(RADIOTEST_CFG_SETTLE_radio_on_offset,val) ;
}

/*******************************************************************/


RADIOTEST_IF_RESP_PDU::RADIOTEST_IF_RESP_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_IF_RESP );
}


RADIOTEST_IF_RESP_PDU::RADIOTEST_IF_RESP_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_IF_RESP_PDU::RADIOTEST_IF_RESP_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_IF_RESP_PDU::get_n_samples(void) const
{
    return get_uint16(RADIOTEST_IF_RESP_n_samples) ;
}

void RADIOTEST_IF_RESP_PDU::set_n_samples(uint16 val)
{
    set_uint16(RADIOTEST_IF_RESP_n_samples,val) ;
}

int16 RADIOTEST_IF_RESP_PDU::get_lo_offset(void) const
{
    return get_int16(RADIOTEST_IF_RESP_lo_offset) ;
}

void RADIOTEST_IF_RESP_PDU::set_lo_offset(int16 val)
{
    set_int16(RADIOTEST_IF_RESP_lo_offset,val) ;
}

int16 RADIOTEST_IF_RESP_PDU::get_hi_offset(void) const
{
    return get_int16(RADIOTEST_IF_RESP_hi_offset) ;
}

void RADIOTEST_IF_RESP_PDU::set_hi_offset(int16 val)
{
    set_int16(RADIOTEST_IF_RESP_hi_offset,val) ;
}

/*******************************************************************/


RADIOTEST_PCM_EXT_LB_PDU::RADIOTEST_PCM_EXT_LB_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_PCM_EXT_LB );
}


RADIOTEST_PCM_EXT_LB_PDU::RADIOTEST_PCM_EXT_LB_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_PCM_EXT_LB_PDU::RADIOTEST_PCM_EXT_LB_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_PCM_EXT_LB_PDU::get_pcm_mode(void) const
{
    return get_uint16(RADIOTEST_PCM_EXT_LB_pcm_mode) ;
}

void RADIOTEST_PCM_EXT_LB_PDU::set_pcm_mode(uint16 val)
{
    set_uint16(RADIOTEST_PCM_EXT_LB_pcm_mode,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_TX_RF_TRIM_PDU::RADIOTEST_CFG_TX_RF_TRIM_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_TX_RF_TRIM );
}


RADIOTEST_CFG_TX_RF_TRIM_PDU::RADIOTEST_CFG_TX_RF_TRIM_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_TX_RF_TRIM_PDU::RADIOTEST_CFG_TX_RF_TRIM_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

int16 RADIOTEST_CFG_TX_RF_TRIM_PDU::get_trim1(void) const
{
    return get_int16(RADIOTEST_CFG_TX_RF_TRIM_trim1) ;
}

void RADIOTEST_CFG_TX_RF_TRIM_PDU::set_trim1(int16 val)
{
    set_int16(RADIOTEST_CFG_TX_RF_TRIM_trim1,val) ;
}

int16 RADIOTEST_CFG_TX_RF_TRIM_PDU::get_trim2(void) const
{
    return get_int16(RADIOTEST_CFG_TX_RF_TRIM_trim2) ;
}

void RADIOTEST_CFG_TX_RF_TRIM_PDU::set_trim2(int16 val)
{
    set_int16(RADIOTEST_CFG_TX_RF_TRIM_trim2,val) ;
}

/*******************************************************************/


RADIOTEST_CODEC_STEREO_LB_PDU::RADIOTEST_CODEC_STEREO_LB_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CODEC_STEREO_LB );
}


RADIOTEST_CODEC_STEREO_LB_PDU::RADIOTEST_CODEC_STEREO_LB_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CODEC_STEREO_LB_PDU::RADIOTEST_CODEC_STEREO_LB_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CODEC_STEREO_LB_PDU::get_samp_rate(void) const
{
    return get_uint16(RADIOTEST_CODEC_STEREO_LB_samp_rate) ;
}

void RADIOTEST_CODEC_STEREO_LB_PDU::set_samp_rate(uint16 val)
{
    set_uint16(RADIOTEST_CODEC_STEREO_LB_samp_rate,val) ;
}

uint16 RADIOTEST_CODEC_STEREO_LB_PDU::get_reroute_optn(void) const
{
    return get_uint16(RADIOTEST_CODEC_STEREO_LB_reroute_optn) ;
}

void RADIOTEST_CODEC_STEREO_LB_PDU::set_reroute_optn(uint16 val)
{
    set_uint16(RADIOTEST_CODEC_STEREO_LB_reroute_optn,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_UAP_LAP_PDU::RADIOTEST_CFG_UAP_LAP_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_UAP_LAP );
}


RADIOTEST_CFG_UAP_LAP_PDU::RADIOTEST_CFG_UAP_LAP_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_UAP_LAP_PDU::RADIOTEST_CFG_UAP_LAP_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_UAP_LAP_PDU::get_uap(void) const
{
    return get_uint16(RADIOTEST_CFG_UAP_LAP_uap) ;
}

void RADIOTEST_CFG_UAP_LAP_PDU::set_uap(uint16 val)
{
    set_uint16(RADIOTEST_CFG_UAP_LAP_uap,val) ;
}

uint32 RADIOTEST_CFG_UAP_LAP_PDU::get_lap(void) const
{
    return get_uint32(RADIOTEST_CFG_UAP_LAP_lap) ;
}

void RADIOTEST_CFG_UAP_LAP_PDU::set_lap(uint32 val)
{
    set_uint32(RADIOTEST_CFG_UAP_LAP_lap,val) ;
}

/*******************************************************************/


RADIOTEST_SETTLE_RPT_PDU::RADIOTEST_SETTLE_RPT_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_SETTLE_RPT );
}


RADIOTEST_SETTLE_RPT_PDU::RADIOTEST_SETTLE_RPT_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_SETTLE_RPT_PDU::RADIOTEST_SETTLE_RPT_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_SETTLE_RPT_PDU::get_chan1(void) const
{
    return get_uint16(RADIOTEST_SETTLE_RPT_chan1) ;
}

void RADIOTEST_SETTLE_RPT_PDU::set_chan1(uint16 val)
{
    set_uint16(RADIOTEST_SETTLE_RPT_chan1,val) ;
}

uint16 RADIOTEST_SETTLE_RPT_PDU::get_chan2(void) const
{
    return get_uint16(RADIOTEST_SETTLE_RPT_chan2) ;
}

void RADIOTEST_SETTLE_RPT_PDU::set_chan2(uint16 val)
{
    set_uint16(RADIOTEST_SETTLE_RPT_chan2,val) ;
}

/*******************************************************************/


RADIOTEST_DEEP_SLEEP_PDU::RADIOTEST_DEEP_SLEEP_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_DEEP_SLEEP );
}


RADIOTEST_DEEP_SLEEP_PDU::RADIOTEST_DEEP_SLEEP_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_DEEP_SLEEP_PDU::RADIOTEST_DEEP_SLEEP_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_PCM_EXT_LB_INTERFACE_PDU::RADIOTEST_PCM_EXT_LB_INTERFACE_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_PCM_EXT_LB_INTERFACE );
}


RADIOTEST_PCM_EXT_LB_INTERFACE_PDU::RADIOTEST_PCM_EXT_LB_INTERFACE_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_PCM_EXT_LB_INTERFACE_PDU::RADIOTEST_PCM_EXT_LB_INTERFACE_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_PCM_EXT_LB_INTERFACE_PDU::get_pcm_mode(void) const
{
    return get_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_pcm_mode) ;
}

void RADIOTEST_PCM_EXT_LB_INTERFACE_PDU::set_pcm_mode(uint16 val)
{
    set_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_pcm_mode,val) ;
}

uint16 RADIOTEST_PCM_EXT_LB_INTERFACE_PDU::get_pcm_interface(void) const
{
    return get_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_pcm_interface) ;
}

void RADIOTEST_PCM_EXT_LB_INTERFACE_PDU::set_pcm_interface(uint16 val)
{
    set_uint16(RADIOTEST_PCM_EXT_LB_INTERFACE_pcm_interface,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_PKT_PDU::RADIOTEST_CFG_PKT_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_PKT );
}


RADIOTEST_CFG_PKT_PDU::RADIOTEST_CFG_PKT_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_PKT_PDU::RADIOTEST_CFG_PKT_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_PKT_PDU::get_pkt_type(void) const
{
    return get_uint16(RADIOTEST_CFG_PKT_pkt_type) ;
}

void RADIOTEST_CFG_PKT_PDU::set_pkt_type(uint16 val)
{
    set_uint16(RADIOTEST_CFG_PKT_pkt_type,val) ;
}

uint16 RADIOTEST_CFG_PKT_PDU::get_pkt_size(void) const
{
    return get_uint16(RADIOTEST_CFG_PKT_pkt_size) ;
}

void RADIOTEST_CFG_PKT_PDU::set_pkt_size(uint16 val)
{
    set_uint16(RADIOTEST_CFG_PKT_pkt_size,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_TX_TRIM_PDU::RADIOTEST_CFG_TX_TRIM_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_TX_TRIM );
}


RADIOTEST_CFG_TX_TRIM_PDU::RADIOTEST_CFG_TX_TRIM_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_TX_TRIM_PDU::RADIOTEST_CFG_TX_TRIM_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_TX_TRIM_PDU::get_am_addr(void) const
{
    return get_uint16(RADIOTEST_CFG_TX_TRIM_am_addr) ;
}

void RADIOTEST_CFG_TX_TRIM_PDU::set_am_addr(uint16 val)
{
    set_uint16(RADIOTEST_CFG_TX_TRIM_am_addr,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_FREQ_MS_PDU::RADIOTEST_CFG_FREQ_MS_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_FREQ_MS );
}


RADIOTEST_CFG_FREQ_MS_PDU::RADIOTEST_CFG_FREQ_MS_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_FREQ_MS_PDU::RADIOTEST_CFG_FREQ_MS_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_FREQ_MS_PDU::get_txrx_freq(void) const
{
    return get_uint16(RADIOTEST_CFG_FREQ_MS_txrx_freq) ;
}

void RADIOTEST_CFG_FREQ_MS_PDU::set_txrx_freq(uint16 val)
{
    set_uint16(RADIOTEST_CFG_FREQ_MS_txrx_freq,val) ;
}

uint16 RADIOTEST_CFG_FREQ_MS_PDU::get_lb_offs(void) const
{
    return get_uint16(RADIOTEST_CFG_FREQ_MS_lb_offs) ;
}

void RADIOTEST_CFG_FREQ_MS_PDU::set_lb_offs(uint16 val)
{
    set_uint16(RADIOTEST_CFG_FREQ_MS_lb_offs,val) ;
}

uint16 RADIOTEST_CFG_FREQ_MS_PDU::get_report_freq(void) const
{
    return get_uint16(RADIOTEST_CFG_FREQ_MS_report_freq) ;
}

void RADIOTEST_CFG_FREQ_MS_PDU::set_report_freq(uint16 val)
{
    set_uint16(RADIOTEST_CFG_FREQ_MS_report_freq,val) ;
}

/*******************************************************************/


RADIOTEST_RXDATA1_PDU::RADIOTEST_RXDATA1_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_RXDATA1 );
}


RADIOTEST_RXDATA1_PDU::RADIOTEST_RXDATA1_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_RXDATA1_PDU::RADIOTEST_RXDATA1_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_RXDATA1_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_RXDATA1_lo_freq) ;
}

void RADIOTEST_RXDATA1_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_RXDATA1_lo_freq,val) ;
}

bool RADIOTEST_RXDATA1_PDU::get_highside(void) const
{
    return get_bool(RADIOTEST_RXDATA1_highside) ;
}

void RADIOTEST_RXDATA1_PDU::set_highside(bool val)
{
    set_bool(RADIOTEST_RXDATA1_highside,val) ;
}

uint16 RADIOTEST_RXDATA1_PDU::get_attn(void) const
{
    return get_uint16(RADIOTEST_RXDATA1_attn) ;
}

void RADIOTEST_RXDATA1_PDU::set_attn(uint16 val)
{
    set_uint16(RADIOTEST_RXDATA1_attn,val) ;
}

/*******************************************************************/


RADIOTEST_RXDATA2_PDU::RADIOTEST_RXDATA2_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_RXDATA2 );
}


RADIOTEST_RXDATA2_PDU::RADIOTEST_RXDATA2_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_RXDATA2_PDU::RADIOTEST_RXDATA2_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_RXDATA2_PDU::get_cc(void) const
{
    return get_uint16(RADIOTEST_RXDATA2_cc) ;
}

void RADIOTEST_RXDATA2_PDU::set_cc(uint16 val)
{
    set_uint16(RADIOTEST_RXDATA2_cc,val) ;
}

bool RADIOTEST_RXDATA2_PDU::get_highside(void) const
{
    return get_bool(RADIOTEST_RXDATA2_highside) ;
}

void RADIOTEST_RXDATA2_PDU::set_highside(bool val)
{
    set_bool(RADIOTEST_RXDATA2_highside,val) ;
}

uint16 RADIOTEST_RXDATA2_PDU::get_attn(void) const
{
    return get_uint16(RADIOTEST_RXDATA2_attn) ;
}

void RADIOTEST_RXDATA2_PDU::set_attn(uint16 val)
{
    set_uint16(RADIOTEST_RXDATA2_attn,val) ;
}

/*******************************************************************/


RADIOTEST_RADIO_STATUS_ARRAY_PDU::RADIOTEST_RADIO_STATUS_ARRAY_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_RADIO_STATUS_ARRAY );
}


RADIOTEST_RADIO_STATUS_ARRAY_PDU::RADIOTEST_RADIO_STATUS_ARRAY_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_RADIO_STATUS_ARRAY_PDU::RADIOTEST_RADIO_STATUS_ARRAY_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_DEEP_SLEEP_SELECT_PDU::RADIOTEST_DEEP_SLEEP_SELECT_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_DEEP_SLEEP_SELECT );
}


RADIOTEST_DEEP_SLEEP_SELECT_PDU::RADIOTEST_DEEP_SLEEP_SELECT_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_DEEP_SLEEP_SELECT_PDU::RADIOTEST_DEEP_SLEEP_SELECT_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_DEEP_SLEEP_SELECT_PDU::get_pio_mask(void) const
{
    return get_uint16(RADIOTEST_DEEP_SLEEP_SELECT_pio_mask) ;
}

void RADIOTEST_DEEP_SLEEP_SELECT_PDU::set_pio_mask(uint16 val)
{
    set_uint16(RADIOTEST_DEEP_SLEEP_SELECT_pio_mask,val) ;
}

uint16 RADIOTEST_DEEP_SLEEP_SELECT_PDU::get_serial_mask(void) const
{
    return get_uint16(RADIOTEST_DEEP_SLEEP_SELECT_serial_mask) ;
}

void RADIOTEST_DEEP_SLEEP_SELECT_PDU::set_serial_mask(uint16 val)
{
    set_uint16(RADIOTEST_DEEP_SLEEP_SELECT_serial_mask,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_IQ_TRIM_PDU::RADIOTEST_CFG_IQ_TRIM_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_IQ_TRIM );
}


RADIOTEST_CFG_IQ_TRIM_PDU::RADIOTEST_CFG_IQ_TRIM_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_IQ_TRIM_PDU::RADIOTEST_CFG_IQ_TRIM_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_IQ_TRIM_PDU::get_trim(void) const
{
    return get_uint16(RADIOTEST_CFG_IQ_TRIM_trim) ;
}

void RADIOTEST_CFG_IQ_TRIM_PDU::set_trim(uint16 val)
{
    set_uint16(RADIOTEST_CFG_IQ_TRIM_trim,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_ACC_ERRS_PDU::RADIOTEST_CFG_ACC_ERRS_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_ACC_ERRS );
}


RADIOTEST_CFG_ACC_ERRS_PDU::RADIOTEST_CFG_ACC_ERRS_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_ACC_ERRS_PDU::RADIOTEST_CFG_ACC_ERRS_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_ACC_ERRS_PDU::get_n_errs(void) const
{
    return get_uint16(RADIOTEST_CFG_ACC_ERRS_n_errs) ;
}

void RADIOTEST_CFG_ACC_ERRS_PDU::set_n_errs(uint16 val)
{
    set_uint16(RADIOTEST_CFG_ACC_ERRS_n_errs,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_TXPOWER_PDU::RADIOTEST_CFG_TXPOWER_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_TXPOWER );
}


RADIOTEST_CFG_TXPOWER_PDU::RADIOTEST_CFG_TXPOWER_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_TXPOWER_PDU::RADIOTEST_CFG_TXPOWER_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

int16 RADIOTEST_CFG_TXPOWER_PDU::get_db(void) const
{
    return get_int16(RADIOTEST_CFG_TXPOWER_db) ;
}

void RADIOTEST_CFG_TXPOWER_PDU::set_db(int16 val)
{
    set_int16(RADIOTEST_CFG_TXPOWER_db,val) ;
}

/*******************************************************************/


RADIOTEST_IF_IQ_MATCH_PDU::RADIOTEST_IF_IQ_MATCH_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_IF_IQ_MATCH );
}


RADIOTEST_IF_IQ_MATCH_PDU::RADIOTEST_IF_IQ_MATCH_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_IF_IQ_MATCH_PDU::RADIOTEST_IF_IQ_MATCH_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_CFG_FREQ_PDU::RADIOTEST_CFG_FREQ_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_FREQ );
}


RADIOTEST_CFG_FREQ_PDU::RADIOTEST_CFG_FREQ_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_FREQ_PDU::RADIOTEST_CFG_FREQ_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_FREQ_PDU::get_txrx_freq(void) const
{
    return get_uint16(RADIOTEST_CFG_FREQ_txrx_freq) ;
}

void RADIOTEST_CFG_FREQ_PDU::set_txrx_freq(uint16 val)
{
    set_uint16(RADIOTEST_CFG_FREQ_txrx_freq,val) ;
}

uint16 RADIOTEST_CFG_FREQ_PDU::get_lb_offs(void) const
{
    return get_uint16(RADIOTEST_CFG_FREQ_lb_offs) ;
}

void RADIOTEST_CFG_FREQ_PDU::set_lb_offs(uint16 val)
{
    set_uint16(RADIOTEST_CFG_FREQ_lb_offs,val) ;
}

uint16 RADIOTEST_CFG_FREQ_PDU::get_report_freq(void) const
{
    return get_uint16(RADIOTEST_CFG_FREQ_report_freq) ;
}

void RADIOTEST_CFG_FREQ_PDU::set_report_freq(uint16 val)
{
    set_uint16(RADIOTEST_CFG_FREQ_report_freq,val) ;
}

/*******************************************************************/


RADIOTEST_TXDATA1_PDU::RADIOTEST_TXDATA1_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_TXDATA1 );
}


RADIOTEST_TXDATA1_PDU::RADIOTEST_TXDATA1_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_TXDATA1_PDU::RADIOTEST_TXDATA1_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_TXDATA1_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_TXDATA1_lo_freq) ;
}

void RADIOTEST_TXDATA1_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_TXDATA1_lo_freq,val) ;
}

uint16 RADIOTEST_TXDATA1_PDU::get_level(void) const
{
    return get_uint16(RADIOTEST_TXDATA1_level) ;
}

void RADIOTEST_TXDATA1_PDU::set_level(uint16 val)
{
    set_uint16(RADIOTEST_TXDATA1_level,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_LO_LVL_PDU::RADIOTEST_CFG_LO_LVL_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_LO_LVL );
}


RADIOTEST_CFG_LO_LVL_PDU::RADIOTEST_CFG_LO_LVL_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_LO_LVL_PDU::RADIOTEST_CFG_LO_LVL_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_LO_LVL_PDU::get_lvl(void) const
{
    return get_uint16(RADIOTEST_CFG_LO_LVL_lvl) ;
}

void RADIOTEST_CFG_LO_LVL_PDU::set_lvl(uint16 val)
{
    set_uint16(RADIOTEST_CFG_LO_LVL_lvl,val) ;
}

/*******************************************************************/


RADIOTEST_TXDATA2_PDU::RADIOTEST_TXDATA2_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_TXDATA2 );
}


RADIOTEST_TXDATA2_PDU::RADIOTEST_TXDATA2_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_TXDATA2_PDU::RADIOTEST_TXDATA2_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_TXDATA2_PDU::get_cc(void) const
{
    return get_uint16(RADIOTEST_TXDATA2_cc) ;
}

void RADIOTEST_TXDATA2_PDU::set_cc(uint16 val)
{
    set_uint16(RADIOTEST_TXDATA2_cc,val) ;
}

uint16 RADIOTEST_TXDATA2_PDU::get_level(void) const
{
    return get_uint16(RADIOTEST_TXDATA2_level) ;
}

void RADIOTEST_TXDATA2_PDU::set_level(uint16 val)
{
    set_uint16(RADIOTEST_TXDATA2_level,val) ;
}

/*******************************************************************/


RADIOTEST_RF_IQ_MATCH_PDU::RADIOTEST_RF_IQ_MATCH_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_RF_IQ_MATCH );
}


RADIOTEST_RF_IQ_MATCH_PDU::RADIOTEST_RF_IQ_MATCH_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_RF_IQ_MATCH_PDU::RADIOTEST_RF_IQ_MATCH_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_SETTLE_PDU::RADIOTEST_SETTLE_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_SETTLE );
}


RADIOTEST_SETTLE_PDU::RADIOTEST_SETTLE_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_SETTLE_PDU::RADIOTEST_SETTLE_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_SETTLE_PDU::get_chan1(void) const
{
    return get_uint16(RADIOTEST_SETTLE_chan1) ;
}

void RADIOTEST_SETTLE_PDU::set_chan1(uint16 val)
{
    set_uint16(RADIOTEST_SETTLE_chan1,val) ;
}

uint16 RADIOTEST_SETTLE_PDU::get_chan2(void) const
{
    return get_uint16(RADIOTEST_SETTLE_chan2) ;
}

void RADIOTEST_SETTLE_PDU::set_chan2(uint16 val)
{
    set_uint16(RADIOTEST_SETTLE_chan2,val) ;
}

/*******************************************************************/


RADIOTEST_TXDATA3_PDU::RADIOTEST_TXDATA3_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_TXDATA3 );
}


RADIOTEST_TXDATA3_PDU::RADIOTEST_TXDATA3_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_TXDATA3_PDU::RADIOTEST_TXDATA3_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_TXDATA3_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_TXDATA3_lo_freq) ;
}

void RADIOTEST_TXDATA3_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_TXDATA3_lo_freq,val) ;
}

uint16 RADIOTEST_TXDATA3_PDU::get_level(void) const
{
    return get_uint16(RADIOTEST_TXDATA3_level) ;
}

void RADIOTEST_TXDATA3_PDU::set_level(uint16 val)
{
    set_uint16(RADIOTEST_TXDATA3_level,val) ;
}

/*******************************************************************/


RADIOTEST_TXDATA4_PDU::RADIOTEST_TXDATA4_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_TXDATA4 );
}


RADIOTEST_TXDATA4_PDU::RADIOTEST_TXDATA4_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_TXDATA4_PDU::RADIOTEST_TXDATA4_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_TXDATA4_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_TXDATA4_lo_freq) ;
}

void RADIOTEST_TXDATA4_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_TXDATA4_lo_freq,val) ;
}

uint16 RADIOTEST_TXDATA4_PDU::get_level(void) const
{
    return get_uint16(RADIOTEST_TXDATA4_level) ;
}

void RADIOTEST_TXDATA4_PDU::set_level(uint16 val)
{
    set_uint16(RADIOTEST_TXDATA4_level,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_PIO_ENABLE_MASK_PDU::RADIOTEST_CFG_PIO_ENABLE_MASK_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_PIO_ENABLE_MASK );
}


RADIOTEST_CFG_PIO_ENABLE_MASK_PDU::RADIOTEST_CFG_PIO_ENABLE_MASK_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_PIO_ENABLE_MASK_PDU::RADIOTEST_CFG_PIO_ENABLE_MASK_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_PIO_ENABLE_MASK_PDU::get_mask(void) const
{
    return get_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_mask) ;
}

void RADIOTEST_CFG_PIO_ENABLE_MASK_PDU::set_mask(uint16 val)
{
    set_uint16(RADIOTEST_CFG_PIO_ENABLE_MASK_mask,val) ;
}

/*******************************************************************/


RADIOTEST_PCM_TIMING_IN_PDU::RADIOTEST_PCM_TIMING_IN_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_PCM_TIMING_IN );
}


RADIOTEST_PCM_TIMING_IN_PDU::RADIOTEST_PCM_TIMING_IN_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_PCM_TIMING_IN_PDU::RADIOTEST_PCM_TIMING_IN_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_PCM_TIMING_IN_PDU::get_pio_out(void) const
{
    return get_uint16(RADIOTEST_PCM_TIMING_IN_pio_out) ;
}

void RADIOTEST_PCM_TIMING_IN_PDU::set_pio_out(uint16 val)
{
    set_uint16(RADIOTEST_PCM_TIMING_IN_pio_out,val) ;
}

uint16 RADIOTEST_PCM_TIMING_IN_PDU::get_pcm_in(void) const
{
    return get_uint16(RADIOTEST_PCM_TIMING_IN_pcm_in) ;
}

void RADIOTEST_PCM_TIMING_IN_PDU::set_pcm_in(uint16 val)
{
    set_uint16(RADIOTEST_PCM_TIMING_IN_pcm_in,val) ;
}

/*******************************************************************/


RADIOTEST_PCM_TONE_PDU::RADIOTEST_PCM_TONE_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_PCM_TONE );
}


RADIOTEST_PCM_TONE_PDU::RADIOTEST_PCM_TONE_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_PCM_TONE_PDU::RADIOTEST_PCM_TONE_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_PCM_TONE_PDU::get_freq(void) const
{
    return get_uint16(RADIOTEST_PCM_TONE_freq) ;
}

void RADIOTEST_PCM_TONE_PDU::set_freq(uint16 val)
{
    set_uint16(RADIOTEST_PCM_TONE_freq,val) ;
}

uint16 RADIOTEST_PCM_TONE_PDU::get_ampl(void) const
{
    return get_uint16(RADIOTEST_PCM_TONE_ampl) ;
}

void RADIOTEST_PCM_TONE_PDU::set_ampl(uint16 val)
{
    set_uint16(RADIOTEST_PCM_TONE_ampl,val) ;
}

uint16 RADIOTEST_PCM_TONE_PDU::get_dc(void) const
{
    return get_uint16(RADIOTEST_PCM_TONE_dc) ;
}

void RADIOTEST_PCM_TONE_PDU::set_dc(uint16 val)
{
    set_uint16(RADIOTEST_PCM_TONE_dc,val) ;
}

/*******************************************************************/


RADIOTEST_RX_LOOP_BACK_PDU::RADIOTEST_RX_LOOP_BACK_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_RX_LOOP_BACK );
}


RADIOTEST_RX_LOOP_BACK_PDU::RADIOTEST_RX_LOOP_BACK_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_RX_LOOP_BACK_PDU::RADIOTEST_RX_LOOP_BACK_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_RX_LOOP_BACK_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_RX_LOOP_BACK_lo_freq) ;
}

void RADIOTEST_RX_LOOP_BACK_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_RX_LOOP_BACK_lo_freq,val) ;
}

uint16 RADIOTEST_RX_LOOP_BACK_PDU::get_level(void) const
{
    return get_uint16(RADIOTEST_RX_LOOP_BACK_level) ;
}

void RADIOTEST_RX_LOOP_BACK_PDU::set_level(uint16 val)
{
    set_uint16(RADIOTEST_RX_LOOP_BACK_level,val) ;
}

/*******************************************************************/


RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_PCM_TIMING_IN_INTERFACE );
}


RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::get_pio_out(void) const
{
    return get_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pio_out) ;
}

void RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::set_pio_out(uint16 val)
{
    set_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pio_out,val) ;
}

uint16 RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::get_pcm_in(void) const
{
    return get_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pcm_in) ;
}

void RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::set_pcm_in(uint16 val)
{
    set_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pcm_in,val) ;
}

uint16 RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::get_pcm_interface(void) const
{
    return get_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pcm_interface) ;
}

void RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU::set_pcm_interface(uint16 val)
{
    set_uint16(RADIOTEST_PCM_TIMING_IN_INTERFACE_pcm_interface,val) ;
}

/*******************************************************************/


RADIOTEST_PCM_LB_INTERFACE_PDU::RADIOTEST_PCM_LB_INTERFACE_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_PCM_LB_INTERFACE );
}


RADIOTEST_PCM_LB_INTERFACE_PDU::RADIOTEST_PCM_LB_INTERFACE_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_PCM_LB_INTERFACE_PDU::RADIOTEST_PCM_LB_INTERFACE_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_PCM_LB_INTERFACE_PDU::get_pcm_mode(void) const
{
    return get_uint16(RADIOTEST_PCM_LB_INTERFACE_pcm_mode) ;
}

void RADIOTEST_PCM_LB_INTERFACE_PDU::set_pcm_mode(uint16 val)
{
    set_uint16(RADIOTEST_PCM_LB_INTERFACE_pcm_mode,val) ;
}

uint16 RADIOTEST_PCM_LB_INTERFACE_PDU::get_pcm_interface(void) const
{
    return get_uint16(RADIOTEST_PCM_LB_INTERFACE_pcm_interface) ;
}

void RADIOTEST_PCM_LB_INTERFACE_PDU::set_pcm_interface(uint16 val)
{
    set_uint16(RADIOTEST_PCM_LB_INTERFACE_pcm_interface,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_TX_COMP_PDU::RADIOTEST_CFG_TX_COMP_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_TX_COMP );
}


RADIOTEST_CFG_TX_COMP_PDU::RADIOTEST_CFG_TX_COMP_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_TX_COMP_PDU::RADIOTEST_CFG_TX_COMP_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_TX_COMP_PDU::get_tx_offset(void) const
{
    return get_uint16(RADIOTEST_CFG_TX_COMP_tx_offset) ;
}

void RADIOTEST_CFG_TX_COMP_PDU::set_tx_offset(uint16 val)
{
    set_uint16(RADIOTEST_CFG_TX_COMP_tx_offset,val) ;
}

uint16 RADIOTEST_CFG_TX_COMP_PDU::get_lo_offset(void) const
{
    return get_uint16(RADIOTEST_CFG_TX_COMP_lo_offset) ;
}

void RADIOTEST_CFG_TX_COMP_PDU::set_lo_offset(uint16 val)
{
    set_uint16(RADIOTEST_CFG_TX_COMP_lo_offset,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_XTAL_FTRIM_PDU::RADIOTEST_CFG_XTAL_FTRIM_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_XTAL_FTRIM );
}


RADIOTEST_CFG_XTAL_FTRIM_PDU::RADIOTEST_CFG_XTAL_FTRIM_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_XTAL_FTRIM_PDU::RADIOTEST_CFG_XTAL_FTRIM_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_XTAL_FTRIM_PDU::get_xtal_ftrim(void) const
{
    return get_uint16(RADIOTEST_CFG_XTAL_FTRIM_xtal_ftrim) ;
}

void RADIOTEST_CFG_XTAL_FTRIM_PDU::set_xtal_ftrim(uint16 val)
{
    set_uint16(RADIOTEST_CFG_XTAL_FTRIM_xtal_ftrim,val) ;
}

/*******************************************************************/


RADIOTEST_RXSTART1_PDU::RADIOTEST_RXSTART1_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_RXSTART1 );
}


RADIOTEST_RXSTART1_PDU::RADIOTEST_RXSTART1_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_RXSTART1_PDU::RADIOTEST_RXSTART1_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_RXSTART1_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_RXSTART1_lo_freq) ;
}

void RADIOTEST_RXSTART1_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_RXSTART1_lo_freq,val) ;
}

bool RADIOTEST_RXSTART1_PDU::get_highside(void) const
{
    return get_bool(RADIOTEST_RXSTART1_highside) ;
}

void RADIOTEST_RXSTART1_PDU::set_highside(bool val)
{
    set_bool(RADIOTEST_RXSTART1_highside,val) ;
}

uint16 RADIOTEST_RXSTART1_PDU::get_attn(void) const
{
    return get_uint16(RADIOTEST_RXSTART1_attn) ;
}

void RADIOTEST_RXSTART1_PDU::set_attn(uint16 val)
{
    set_uint16(RADIOTEST_RXSTART1_attn,val) ;
}

/*******************************************************************/


RADIOTEST_RXSTART2_PDU::RADIOTEST_RXSTART2_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_RXSTART2 );
}


RADIOTEST_RXSTART2_PDU::RADIOTEST_RXSTART2_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_RXSTART2_PDU::RADIOTEST_RXSTART2_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_RXSTART2_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_RXSTART2_lo_freq) ;
}

void RADIOTEST_RXSTART2_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_RXSTART2_lo_freq,val) ;
}

bool RADIOTEST_RXSTART2_PDU::get_highside(void) const
{
    return get_bool(RADIOTEST_RXSTART2_highside) ;
}

void RADIOTEST_RXSTART2_PDU::set_highside(bool val)
{
    set_bool(RADIOTEST_RXSTART2_highside,val) ;
}

uint16 RADIOTEST_RXSTART2_PDU::get_attn(void) const
{
    return get_uint16(RADIOTEST_RXSTART2_attn) ;
}

void RADIOTEST_RXSTART2_PDU::set_attn(uint16 val)
{
    set_uint16(RADIOTEST_RXSTART2_attn,val) ;
}

/*******************************************************************/


RADIOTEST_RADIO_STATUS_PDU::RADIOTEST_RADIO_STATUS_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_RADIO_STATUS );
}


RADIOTEST_RADIO_STATUS_PDU::RADIOTEST_RADIO_STATUS_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_RADIO_STATUS_PDU::RADIOTEST_RADIO_STATUS_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_BUILD_LUT_PDU::RADIOTEST_BUILD_LUT_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_BUILD_LUT );
}


RADIOTEST_BUILD_LUT_PDU::RADIOTEST_BUILD_LUT_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_BUILD_LUT_PDU::RADIOTEST_BUILD_LUT_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_BER_LOOP_BACK_PDU::RADIOTEST_BER_LOOP_BACK_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_BER_LOOP_BACK );
}


RADIOTEST_BER_LOOP_BACK_PDU::RADIOTEST_BER_LOOP_BACK_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_BER_LOOP_BACK_PDU::RADIOTEST_BER_LOOP_BACK_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_BER_LOOP_BACK_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_BER_LOOP_BACK_lo_freq) ;
}

void RADIOTEST_BER_LOOP_BACK_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_BER_LOOP_BACK_lo_freq,val) ;
}

uint16 RADIOTEST_BER_LOOP_BACK_PDU::get_level(void) const
{
    return get_uint16(RADIOTEST_BER_LOOP_BACK_level) ;
}

void RADIOTEST_BER_LOOP_BACK_PDU::set_level(uint16 val)
{
    set_uint16(RADIOTEST_BER_LOOP_BACK_level,val) ;
}

/*******************************************************************/


RADIOTEST_BER1_PDU::RADIOTEST_BER1_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_BER1 );
}


RADIOTEST_BER1_PDU::RADIOTEST_BER1_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_BER1_PDU::RADIOTEST_BER1_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_BER1_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_BER1_lo_freq) ;
}

void RADIOTEST_BER1_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_BER1_lo_freq,val) ;
}

bool RADIOTEST_BER1_PDU::get_highside(void) const
{
    return get_bool(RADIOTEST_BER1_highside) ;
}

void RADIOTEST_BER1_PDU::set_highside(bool val)
{
    set_bool(RADIOTEST_BER1_highside,val) ;
}

uint16 RADIOTEST_BER1_PDU::get_attn(void) const
{
    return get_uint16(RADIOTEST_BER1_attn) ;
}

void RADIOTEST_BER1_PDU::set_attn(uint16 val)
{
    set_uint16(RADIOTEST_BER1_attn,val) ;
}

/*******************************************************************/


RADIOTEST_BER2_PDU::RADIOTEST_BER2_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_BER2 );
}


RADIOTEST_BER2_PDU::RADIOTEST_BER2_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_BER2_PDU::RADIOTEST_BER2_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_BER2_PDU::get_cc(void) const
{
    return get_uint16(RADIOTEST_BER2_cc) ;
}

void RADIOTEST_BER2_PDU::set_cc(uint16 val)
{
    set_uint16(RADIOTEST_BER2_cc,val) ;
}

bool RADIOTEST_BER2_PDU::get_highside(void) const
{
    return get_bool(RADIOTEST_BER2_highside) ;
}

void RADIOTEST_BER2_PDU::set_highside(bool val)
{
    set_bool(RADIOTEST_BER2_highside,val) ;
}

uint16 RADIOTEST_BER2_PDU::get_attn(void) const
{
    return get_uint16(RADIOTEST_BER2_attn) ;
}

void RADIOTEST_BER2_PDU::set_attn(uint16 val)
{
    set_uint16(RADIOTEST_BER2_attn,val) ;
}

/*******************************************************************/


RADIOTEST_READ_LUT_PDU::RADIOTEST_READ_LUT_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_READ_LUT );
}


RADIOTEST_READ_LUT_PDU::RADIOTEST_READ_LUT_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_READ_LUT_PDU::RADIOTEST_READ_LUT_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_VCOTRIM_PDU::RADIOTEST_VCOTRIM_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_VCOTRIM );
}


RADIOTEST_VCOTRIM_PDU::RADIOTEST_VCOTRIM_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_VCOTRIM_PDU::RADIOTEST_VCOTRIM_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_VCOTRIM_PDU::get_cc(void) const
{
    return get_uint16(RADIOTEST_VCOTRIM_cc) ;
}

void RADIOTEST_VCOTRIM_PDU::set_cc(uint16 val)
{
    set_uint16(RADIOTEST_VCOTRIM_cc,val) ;
}

/*******************************************************************/


RADIOTEST_PAUSE_PDU::RADIOTEST_PAUSE_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_PAUSE );
}


RADIOTEST_PAUSE_PDU::RADIOTEST_PAUSE_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_PAUSE_PDU::RADIOTEST_PAUSE_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

/*******************************************************************/


RADIOTEST_CFG_BIT_ERR_PDU::RADIOTEST_CFG_BIT_ERR_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_BIT_ERR );
}


RADIOTEST_CFG_BIT_ERR_PDU::RADIOTEST_CFG_BIT_ERR_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_BIT_ERR_PDU::RADIOTEST_CFG_BIT_ERR_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint32 RADIOTEST_CFG_BIT_ERR_PDU::get_bits_count(void) const
{
    return get_uint32(RADIOTEST_CFG_BIT_ERR_bits_count) ;
}

void RADIOTEST_CFG_BIT_ERR_PDU::set_bits_count(uint32 val)
{
    set_uint32(RADIOTEST_CFG_BIT_ERR_bits_count,val) ;
}

bool RADIOTEST_CFG_BIT_ERR_PDU::get_reset(void) const
{
    return get_bool(RADIOTEST_CFG_BIT_ERR_reset) ;
}

void RADIOTEST_CFG_BIT_ERR_PDU::set_reset(bool val)
{
    set_bool(RADIOTEST_CFG_BIT_ERR_reset,val) ;
}

/*******************************************************************/


RADIOTEST_CFG_TX_PA_ATTEN_PDU::RADIOTEST_CFG_TX_PA_ATTEN_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_CFG_TX_PA_ATTEN );
}


RADIOTEST_CFG_TX_PA_ATTEN_PDU::RADIOTEST_CFG_TX_PA_ATTEN_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_CFG_TX_PA_ATTEN_PDU::RADIOTEST_CFG_TX_PA_ATTEN_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_CFG_TX_PA_ATTEN_PDU::get_atten_value(void) const
{
    return get_uint16(RADIOTEST_CFG_TX_PA_ATTEN_atten_value) ;
}

void RADIOTEST_CFG_TX_PA_ATTEN_PDU::set_atten_value(uint16 val)
{
    set_uint16(RADIOTEST_CFG_TX_PA_ATTEN_atten_value,val) ;
}

/*******************************************************************/


RADIOTEST_LOOP_BACK_PDU::RADIOTEST_LOOP_BACK_PDU()
: BCCMD_RADIOTEST_PDU()
{
    set_radiotest ( RADIOTEST_LOOP_BACK );
}


RADIOTEST_LOOP_BACK_PDU::RADIOTEST_LOOP_BACK_PDU( const PDU& pdu )
: BCCMD_RADIOTEST_PDU(pdu)
{
}

RADIOTEST_LOOP_BACK_PDU::RADIOTEST_LOOP_BACK_PDU( const uint8* buffer , uint32 len )
: BCCMD_RADIOTEST_PDU( buffer , len )
{
}

uint16 RADIOTEST_LOOP_BACK_PDU::get_lo_freq(void) const
{
    return get_uint16(RADIOTEST_LOOP_BACK_lo_freq) ;
}

void RADIOTEST_LOOP_BACK_PDU::set_lo_freq(uint16 val)
{
    set_uint16(RADIOTEST_LOOP_BACK_lo_freq,val) ;
}

uint16 RADIOTEST_LOOP_BACK_PDU::get_level(void) const
{
    return get_uint16(RADIOTEST_LOOP_BACK_level) ;
}

void RADIOTEST_LOOP_BACK_PDU::set_level(uint16 val)
{
    set_uint16(RADIOTEST_LOOP_BACK_level,val) ;
}

/*******************************************************************/


///////////////////////////////////////////////////////////////////////////////
//          Auto generated from radiotest_encode_pa.tpl              //
///////////////////////////////////////////////////////////////////////////////

void updateRADIOTEST_PDU ( BCCMD_RADIOTEST_PDU& pdu , const uint32 * parameters )
{
    if ( parameters && parameters[0] > 4 )
    {
        uint32 index = 4;
        switch ( parameters[4] )
        {
        case RADIOTEST_TXSTART:
            {
            RADIOTEST_TXSTART_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_level ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_mod_freq ( (int16) parameters[index] );
            break;
            }
        case RADIOTEST_CTS_RTS_LB:
            {
            RADIOTEST_CTS_RTS_LB_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_CONFIG_TX_IF:
            {
            RADIOTEST_CONFIG_TX_IF_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_offset_half_mhz ( (int16) parameters[index] );
            break;
            }
        case RADIOTEST_PCM_LB:
            {
            RADIOTEST_PCM_LB_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_pcm_mode ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_SETTLE:
            {
            RADIOTEST_CFG_SETTLE_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_radio_on_offset ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_IF_RESP:
            {
            RADIOTEST_IF_RESP_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_n_samples ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_lo_offset ( (int16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_hi_offset ( (int16) parameters[index] );
            break;
            }
        case RADIOTEST_PCM_EXT_LB:
            {
            RADIOTEST_PCM_EXT_LB_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_pcm_mode ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_TX_RF_TRIM:
            {
            RADIOTEST_CFG_TX_RF_TRIM_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_trim1 ( (int16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_trim2 ( (int16) parameters[index] );
            break;
            }
        case RADIOTEST_CODEC_STEREO_LB:
            {
            RADIOTEST_CODEC_STEREO_LB_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_samp_rate ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_reroute_optn ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_UAP_LAP:
            {
            RADIOTEST_CFG_UAP_LAP_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_uap ( (uint16) parameters[index] );
            index += 2;
            if ( index < parameters[0] )
            {
                //  this is left over from the device controller packer's
                //  inability to handle radiotest packets separately.
                uint32 value = parameters[index] | ( parameters[index-1] << 16 );
                prim.set_lap ( value );
            }
            break;
            }
        case RADIOTEST_SETTLE_RPT:
            {
            RADIOTEST_SETTLE_RPT_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_chan1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_chan2 ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_DEEP_SLEEP:
            {
            RADIOTEST_DEEP_SLEEP_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_PCM_EXT_LB_INTERFACE:
            {
            RADIOTEST_PCM_EXT_LB_INTERFACE_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_pcm_mode ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pcm_interface ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_PKT:
            {
            RADIOTEST_CFG_PKT_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_pkt_type ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pkt_size ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_TX_TRIM:
            {
            RADIOTEST_CFG_TX_TRIM_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_am_addr ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_FREQ_MS:
            {
            RADIOTEST_CFG_FREQ_MS_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_txrx_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_lb_offs ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_report_freq ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_RXDATA1:
            {
            RADIOTEST_RXDATA1_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_highside ( (parameters[index]) != 0 );
            if ( ++index < parameters[0] )
                prim.set_attn ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_RXDATA2:
            {
            RADIOTEST_RXDATA2_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_cc ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_highside ( (parameters[index]) != 0 );
            if ( ++index < parameters[0] )
                prim.set_attn ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_RADIO_STATUS_ARRAY:
            {
            RADIOTEST_RADIO_STATUS_ARRAY_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_DEEP_SLEEP_SELECT:
            {
            RADIOTEST_DEEP_SLEEP_SELECT_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_pio_mask ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_serial_mask ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_IQ_TRIM:
            {
            RADIOTEST_CFG_IQ_TRIM_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_trim ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_PIO_CHANNEL_MASK:
            {
            RADIOTEST_CFG_PIO_CHANNEL_MASK_PDU prim ( pdu );
            index += 5;
            if ( index < parameters[0] )
            {
                uint16 data[5];
                data[0] = uint16 (parameters[index-4]);
                data[1] = uint16 (parameters[index-3]);
                data[2] = uint16 (parameters[index-2]);
                data[3] = uint16 (parameters[index-1]);
                data[4] = uint16 (parameters[index]);
                prim.set_channels ( data );
            }
            break;
            }
        case RADIOTEST_CFG_ACC_ERRS:
            {
            RADIOTEST_CFG_ACC_ERRS_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_n_errs ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_TXPOWER:
            {
            RADIOTEST_CFG_TXPOWER_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_db ( (int16) parameters[index] );
            break;
            }
        case RADIOTEST_IF_IQ_MATCH:
            {
            RADIOTEST_IF_IQ_MATCH_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_CFG_FREQ:
            {
            RADIOTEST_CFG_FREQ_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_txrx_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_lb_offs ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_report_freq ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_TXDATA1:
            {
            RADIOTEST_TXDATA1_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_level ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_LO_LVL:
            {
            RADIOTEST_CFG_LO_LVL_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lvl ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_TXDATA2:
            {
            RADIOTEST_TXDATA2_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_cc ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_level ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_PCM_TONE_INTERFACE:
            {
            RADIOTEST_PCM_TONE_INTERFACE_PDU prim ( pdu );
            index += 4;
            if ( index < parameters[0] )
            {
                uint16 data[4];
                data[0] = uint16 (parameters[index-3]);
                data[1] = uint16 (parameters[index-2]);
                data[2] = uint16 (parameters[index-1]);
                data[3] = uint16 (parameters[index]);
                prim.set_params ( data );
            }
            break;
            }
        case RADIOTEST_RF_IQ_MATCH:
            {
            RADIOTEST_RF_IQ_MATCH_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_SETTLE:
            {
            RADIOTEST_SETTLE_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_chan1 ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_chan2 ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_TXDATA3:
            {
            RADIOTEST_TXDATA3_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_level ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_TXDATA4:
            {
            RADIOTEST_TXDATA4_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_level ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_PCM_TONE_STEREO:
            {
            RADIOTEST_PCM_TONE_STEREO_PDU prim ( pdu );
            index += 4;
            if ( index < parameters[0] )
            {
                uint16 data[4];
                data[0] = uint16 (parameters[index-3]);
                data[1] = uint16 (parameters[index-2]);
                data[2] = uint16 (parameters[index-1]);
                data[3] = uint16 (parameters[index]);
                prim.set_params ( data );
            }
            break;
            }
        case RADIOTEST_CFG_PIO_ENABLE_MASK:
            {
            RADIOTEST_CFG_PIO_ENABLE_MASK_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_mask ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_PCM_TIMING_IN:
            {
            RADIOTEST_PCM_TIMING_IN_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_pio_out ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pcm_in ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_PCM_TONE:
            {
            RADIOTEST_PCM_TONE_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_ampl ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_dc ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_RX_LOOP_BACK:
            {
            RADIOTEST_RX_LOOP_BACK_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_level ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_PCM_TIMING_IN_INTERFACE:
            {
            RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_pio_out ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pcm_in ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pcm_interface ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_PCM_LB_INTERFACE:
            {
            RADIOTEST_PCM_LB_INTERFACE_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_pcm_mode ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_pcm_interface ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_TX_COMP:
            {
            RADIOTEST_CFG_TX_COMP_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_tx_offset ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_lo_offset ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_CFG_XTAL_FTRIM:
            {
            RADIOTEST_CFG_XTAL_FTRIM_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_xtal_ftrim ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_RXSTART1:
            {
            RADIOTEST_RXSTART1_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_highside ( (parameters[index]) != 0 );
            if ( ++index < parameters[0] )
                prim.set_attn ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_RXSTART2:
            {
            RADIOTEST_RXSTART2_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_highside ( (parameters[index]) != 0 );
            if ( ++index < parameters[0] )
                prim.set_attn ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_RADIO_STATUS:
            {
            RADIOTEST_RADIO_STATUS_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_BUILD_LUT:
            {
            RADIOTEST_BUILD_LUT_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_CFG_HOPPING_SEQUENCE:
            {
            RADIOTEST_CFG_HOPPING_SEQUENCE_PDU prim ( pdu );
            index += 5;
            if ( index < parameters[0] )
            {
                uint16 data[5];
                data[0] = uint16 (parameters[index-4]);
                data[1] = uint16 (parameters[index-3]);
                data[2] = uint16 (parameters[index-2]);
                data[3] = uint16 (parameters[index-1]);
                data[4] = uint16 (parameters[index]);
                prim.set_channels ( data );
            }
            break;
            }
        case RADIOTEST_BER_LOOP_BACK:
            {
            RADIOTEST_BER_LOOP_BACK_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_level ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_BER1:
            {
            RADIOTEST_BER1_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_highside ( (parameters[index]) != 0 );
            if ( ++index < parameters[0] )
                prim.set_attn ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_BER2:
            {
            RADIOTEST_BER2_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_cc ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_highside ( (parameters[index]) != 0 );
            if ( ++index < parameters[0] )
                prim.set_attn ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_READ_LUT:
            {
            RADIOTEST_READ_LUT_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_VCOTRIM:
            {
            RADIOTEST_VCOTRIM_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_cc ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_PAUSE:
            {
            RADIOTEST_PAUSE_PDU prim ( pdu );
            break;
            }
        case RADIOTEST_CFG_BIT_ERR:
            {
            RADIOTEST_CFG_BIT_ERR_PDU prim ( pdu );
            index += 2;
            if ( index < parameters[0] )
            {
                //  this is left over from the device controller packer's
                //  inability to handle radiotest packets separately.
                uint32 value = parameters[index] | ( parameters[index-1] << 16 );
                prim.set_bits_count ( value );
            }
            if ( ++index < parameters[0] )
                prim.set_reset ( (parameters[index]) != 0 );
            break;
            }
        case RADIOTEST_CFG_TX_PA_ATTEN:
            {
            RADIOTEST_CFG_TX_PA_ATTEN_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_atten_value ( (uint16) parameters[index] );
            break;
            }
        case RADIOTEST_LOOP_BACK:
            {
            RADIOTEST_LOOP_BACK_PDU prim ( pdu );
            if ( ++index < parameters[0] )
                prim.set_lo_freq ( (uint16) parameters[index] );
            if ( ++index < parameters[0] )
                prim.set_level ( (uint16) parameters[index] );
            break;
            }
        default:
            //  Allow arbitary arrays of uint16s to be sent
            //  with unrecognised radiotests
            if ( index < parameters[0] )
            {
                //  this rewrites the radio_test field, but it makes it easy.
                int size = parameters[0] - index;
                uint16 * data = new uint16[size];
                for ( int i = 0 ; i < size ; ++i )
                {
                    data[i] = parameters[index];
                    index ++;
                }
                pdu.set_payload(data,size);
            }
            break;
        }
    }
}
///////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//          Auto generated from radiotest_decode_pa.tpl              //
///////////////////////////////////////////////////////////////////////////////

//  This function should only be called from decomposeBCCMDPDU_PDU()
uint32 decomposeRADIOTEST_PDU( const BCCMD_RADIOTEST_PDU& input , uint32 * parameters )
{
    if ( parameters )
        parameters[4] = input.get_radiotest();
    uint32 length = 5;
    switch ( input.get_radiotest() )
    {
    case RADIOTEST_TXSTART:
        {
        RADIOTEST_TXSTART_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_level();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_mod_freq();
        length ++;
        }
        break;
    case RADIOTEST_CTS_RTS_LB:
        {
        RADIOTEST_CTS_RTS_LB_PDU prim ( input );

        }
        break;
    case RADIOTEST_CONFIG_TX_IF:
        {
        RADIOTEST_CONFIG_TX_IF_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_offset_half_mhz();
        length ++;
        }
        break;
    case RADIOTEST_PCM_LB:
        {
        RADIOTEST_PCM_LB_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_pcm_mode();
        length ++;
        }
        break;
    case RADIOTEST_CFG_SETTLE:
        {
        RADIOTEST_CFG_SETTLE_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_radio_on_offset();
        length ++;
        }
        break;
    case RADIOTEST_IF_RESP:
        {
        RADIOTEST_IF_RESP_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_n_samples();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_lo_offset();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_hi_offset();
        length ++;
        }
        break;
    case RADIOTEST_PCM_EXT_LB:
        {
        RADIOTEST_PCM_EXT_LB_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_pcm_mode();
        length ++;
        }
        break;
    case RADIOTEST_CFG_TX_RF_TRIM:
        {
        RADIOTEST_CFG_TX_RF_TRIM_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_trim1();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_trim2();
        length ++;
        }
        break;
    case RADIOTEST_CODEC_STEREO_LB:
        {
        RADIOTEST_CODEC_STEREO_LB_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_samp_rate();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_reroute_optn();
        length ++;
        }
        break;
    case RADIOTEST_CFG_UAP_LAP:
        {
        RADIOTEST_CFG_UAP_LAP_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_uap();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_lap();
        length ++;
        }
        break;
    case RADIOTEST_SETTLE_RPT:
        {
        RADIOTEST_SETTLE_RPT_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_chan1();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_chan2();
        length ++;
        }
        break;
    case RADIOTEST_DEEP_SLEEP:
        {
        RADIOTEST_DEEP_SLEEP_PDU prim ( input );

        }
        break;
    case RADIOTEST_PCM_EXT_LB_INTERFACE:
        {
        RADIOTEST_PCM_EXT_LB_INTERFACE_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_pcm_mode();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_pcm_interface();
        length ++;
        }
        break;
    case RADIOTEST_CFG_PKT:
        {
        RADIOTEST_CFG_PKT_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_pkt_type();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_pkt_size();
        length ++;
        }
        break;
    case RADIOTEST_CFG_TX_TRIM:
        {
        RADIOTEST_CFG_TX_TRIM_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_am_addr();
        length ++;
        }
        break;
    case RADIOTEST_CFG_FREQ_MS:
        {
        RADIOTEST_CFG_FREQ_MS_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_txrx_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_lb_offs();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_report_freq();
        length ++;
        }
        break;
    case RADIOTEST_RXDATA1:
        {
        RADIOTEST_RXDATA1_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_highside();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_attn();
        length ++;
        }
        break;
    case RADIOTEST_RXDATA2:
        {
        RADIOTEST_RXDATA2_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_cc();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_highside();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_attn();
        length ++;
        }
        break;
    case RADIOTEST_RADIO_STATUS_ARRAY:
        {
        RADIOTEST_RADIO_STATUS_ARRAY_PDU prim ( input );

        }
        break;
    case RADIOTEST_DEEP_SLEEP_SELECT:
        {
        RADIOTEST_DEEP_SLEEP_SELECT_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_pio_mask();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_serial_mask();
        length ++;
        }
        break;
    case RADIOTEST_CFG_IQ_TRIM:
        {
        RADIOTEST_CFG_IQ_TRIM_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_trim();
        length ++;
        }
        break;
    case RADIOTEST_CFG_PIO_CHANNEL_MASK:
        {
        RADIOTEST_CFG_PIO_CHANNEL_MASK_PDU prim ( input );

            if ( parameters )
            {
                uint16 data[5];
                prim.get_channels ( data );
                parameters[length] = data[0];
                parameters[length+1] = data[1];
                parameters[length+2] = data[2];
                parameters[length+3] = data[3];
                parameters[length+4] = data[4];
            }
            length += 5;
        }
        break;
    case RADIOTEST_CFG_ACC_ERRS:
        {
        RADIOTEST_CFG_ACC_ERRS_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_n_errs();
        length ++;
        }
        break;
    case RADIOTEST_CFG_TXPOWER:
        {
        RADIOTEST_CFG_TXPOWER_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_db();
        length ++;
        }
        break;
    case RADIOTEST_IF_IQ_MATCH:
        {
        RADIOTEST_IF_IQ_MATCH_PDU prim ( input );

        }
        break;
    case RADIOTEST_CFG_FREQ:
        {
        RADIOTEST_CFG_FREQ_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_txrx_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_lb_offs();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_report_freq();
        length ++;
        }
        break;
    case RADIOTEST_TXDATA1:
        {
        RADIOTEST_TXDATA1_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_level();
        length ++;
        }
        break;
    case RADIOTEST_CFG_LO_LVL:
        {
        RADIOTEST_CFG_LO_LVL_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lvl();
        length ++;
        }
        break;
    case RADIOTEST_TXDATA2:
        {
        RADIOTEST_TXDATA2_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_cc();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_level();
        length ++;
        }
        break;
    case RADIOTEST_PCM_TONE_INTERFACE:
        {
        RADIOTEST_PCM_TONE_INTERFACE_PDU prim ( input );

            if ( parameters )
            {
                uint16 data[4];
                prim.get_params ( data );
                parameters[length] = data[0];
                parameters[length+1] = data[1];
                parameters[length+2] = data[2];
                parameters[length+3] = data[3];
            }
            length += 4;
        }
        break;
    case RADIOTEST_RF_IQ_MATCH:
        {
        RADIOTEST_RF_IQ_MATCH_PDU prim ( input );

        }
        break;
    case RADIOTEST_SETTLE:
        {
        RADIOTEST_SETTLE_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_chan1();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_chan2();
        length ++;
        }
        break;
    case RADIOTEST_TXDATA3:
        {
        RADIOTEST_TXDATA3_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_level();
        length ++;
        }
        break;
    case RADIOTEST_TXDATA4:
        {
        RADIOTEST_TXDATA4_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_level();
        length ++;
        }
        break;
    case RADIOTEST_PCM_TONE_STEREO:
        {
        RADIOTEST_PCM_TONE_STEREO_PDU prim ( input );

            if ( parameters )
            {
                uint16 data[4];
                prim.get_params ( data );
                parameters[length] = data[0];
                parameters[length+1] = data[1];
                parameters[length+2] = data[2];
                parameters[length+3] = data[3];
            }
            length += 4;
        }
        break;
    case RADIOTEST_CFG_PIO_ENABLE_MASK:
        {
        RADIOTEST_CFG_PIO_ENABLE_MASK_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_mask();
        length ++;
        }
        break;
    case RADIOTEST_PCM_TIMING_IN:
        {
        RADIOTEST_PCM_TIMING_IN_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_pio_out();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_pcm_in();
        length ++;
        }
        break;
    case RADIOTEST_PCM_TONE:
        {
        RADIOTEST_PCM_TONE_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_ampl();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_dc();
        length ++;
        }
        break;
    case RADIOTEST_RX_LOOP_BACK:
        {
        RADIOTEST_RX_LOOP_BACK_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_level();
        length ++;
        }
        break;
    case RADIOTEST_PCM_TIMING_IN_INTERFACE:
        {
        RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_pio_out();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_pcm_in();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_pcm_interface();
        length ++;
        }
        break;
    case RADIOTEST_PCM_LB_INTERFACE:
        {
        RADIOTEST_PCM_LB_INTERFACE_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_pcm_mode();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_pcm_interface();
        length ++;
        }
        break;
    case RADIOTEST_CFG_TX_COMP:
        {
        RADIOTEST_CFG_TX_COMP_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_tx_offset();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_lo_offset();
        length ++;
        }
        break;
    case RADIOTEST_CFG_XTAL_FTRIM:
        {
        RADIOTEST_CFG_XTAL_FTRIM_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_xtal_ftrim();
        length ++;
        }
        break;
    case RADIOTEST_RXSTART1:
        {
        RADIOTEST_RXSTART1_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_highside();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_attn();
        length ++;
        }
        break;
    case RADIOTEST_RXSTART2:
        {
        RADIOTEST_RXSTART2_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_highside();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_attn();
        length ++;
        }
        break;
    case RADIOTEST_RADIO_STATUS:
        {
        RADIOTEST_RADIO_STATUS_PDU prim ( input );

        }
        break;
    case RADIOTEST_BUILD_LUT:
        {
        RADIOTEST_BUILD_LUT_PDU prim ( input );

        }
        break;
    case RADIOTEST_CFG_HOPPING_SEQUENCE:
        {
        RADIOTEST_CFG_HOPPING_SEQUENCE_PDU prim ( input );

            if ( parameters )
            {
                uint16 data[5];
                prim.get_channels ( data );
                parameters[length] = data[0];
                parameters[length+1] = data[1];
                parameters[length+2] = data[2];
                parameters[length+3] = data[3];
                parameters[length+4] = data[4];
            }
            length += 5;
        }
        break;
    case RADIOTEST_BER_LOOP_BACK:
        {
        RADIOTEST_BER_LOOP_BACK_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_level();
        length ++;
        }
        break;
    case RADIOTEST_BER1:
        {
        RADIOTEST_BER1_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_highside();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_attn();
        length ++;
        }
        break;
    case RADIOTEST_BER2:
        {
        RADIOTEST_BER2_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_cc();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_highside();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_attn();
        length ++;
        }
        break;
    case RADIOTEST_READ_LUT:
        {
        RADIOTEST_READ_LUT_PDU prim ( input );

        }
        break;
    case RADIOTEST_VCOTRIM:
        {
        RADIOTEST_VCOTRIM_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_cc();
        length ++;
        }
        break;
    case RADIOTEST_PAUSE:
        {
        RADIOTEST_PAUSE_PDU prim ( input );

        }
        break;
    case RADIOTEST_CFG_BIT_ERR:
        {
        RADIOTEST_CFG_BIT_ERR_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_bits_count();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_reset();
        length ++;
        }
        break;
    case RADIOTEST_CFG_TX_PA_ATTEN:
        {
        RADIOTEST_CFG_TX_PA_ATTEN_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_atten_value();
        length ++;
        }
        break;
    case RADIOTEST_LOOP_BACK:
        {
        RADIOTEST_LOOP_BACK_PDU prim ( input );

        if ( parameters )
            parameters[length] = prim.get_lo_freq();
        length ++;
        if ( parameters )
            parameters[length] = prim.get_level();
        length ++;
        }
        break;
    }
    return length - 4;
}
///////////////////////////////////////////////////////////////////////////////
