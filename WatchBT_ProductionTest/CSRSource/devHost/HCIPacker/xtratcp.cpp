////////////////////////////////////////////////////////////////////////////////
//
//  WARNING THIS IS AN AUTOGENERATED FILE DEFINING A BLUECORE-FRIENDY PROTOCOL
//
////////////////////////////////////////////////////////////////////////////////

#include "bcflayout.h"


enum {
	OFFSET_START(TCP_DATA_IND_T)
	OFFSET_uint16(TCP_DATA_IND_T_type),
	OFFSET_uint16(TCP_DATA_IND_T_phandle),
	OFFSET_uint16(TCP_DATA_IND_T_b_out),
	OFFSET_uint16(TCP_DATA_IND_T_len),
	OFFSET_uint16(TCP_DATA_IND_T_dataPtr),
	TCP_DATA_IND_T_pduSize
} ;

enum {
	OFFSET_START(TCP_DATA_REQ_T)
	OFFSET_uint16(TCP_DATA_REQ_T_type),
	OFFSET_uint16(TCP_DATA_REQ_T_b_out),
	OFFSET_uint16(TCP_DATA_REQ_T_len),
	OFFSET_uint16(TCP_DATA_REQ_T_dataPtr),
	TCP_DATA_REQ_T_pduSize
} ;

#include "hcipacker/gen_tcp.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_DATA_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_DATA_IND_T_PDU::TCP_DATA_IND_T_PDU()
: TCP_PDU ( TCP_DATA_IND , TCP_DATA_IND_T_pduSize )
{
}

TCP_DATA_IND_T_PDU::TCP_DATA_IND_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_DATA_IND_T_PDU::TCP_DATA_IND_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_DATA_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( TCP_DATA_IND_T_phandle );
}

void TCP_DATA_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( TCP_DATA_IND_T_phandle , value );
}

uint16 TCP_DATA_IND_T_PDU::get_b_out() const
{
    return get_uint16 ( TCP_DATA_IND_T_b_out );
}

void TCP_DATA_IND_T_PDU::set_b_out( uint16 value )
{
    set_uint16 ( TCP_DATA_IND_T_b_out , value );
}

uint16 TCP_DATA_IND_T_PDU::get_len() const
{
    return get_uint16 ( TCP_DATA_IND_T_len );
}

const uint8 * TCP_DATA_IND_T_PDU::get_dataPtr() const
{
    return get_uint8ArrayPtr ( TCP_DATA_IND_T_pduSize );
}

void TCP_DATA_IND_T_PDU::get_data( uint8 * toCopy ) const
{
    get_uint8Array ( toCopy , TCP_DATA_IND_T_pduSize , get_len() );
}

void TCP_DATA_IND_T_PDU::set_data( const uint8* copyFrom , uint16 length )
{
    set_final_uint8Ptr ( TCP_DATA_IND_T_len , TCP_DATA_IND_T_pduSize , copyFrom , length );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_DATA_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_DATA_REQ_T_PDU::TCP_DATA_REQ_T_PDU()
: TCP_PDU ( TCP_DATA_REQ , TCP_DATA_REQ_T_pduSize )
{
}

TCP_DATA_REQ_T_PDU::TCP_DATA_REQ_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_DATA_REQ_T_PDU::TCP_DATA_REQ_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_DATA_REQ_T_PDU::get_b_out() const
{
    return get_uint16 ( TCP_DATA_REQ_T_b_out );
}

void TCP_DATA_REQ_T_PDU::set_b_out( uint16 value )
{
    set_uint16 ( TCP_DATA_REQ_T_b_out , value );
}

uint16 TCP_DATA_REQ_T_PDU::get_len() const
{
    return get_uint16 ( TCP_DATA_REQ_T_len );
}

void TCP_DATA_REQ_T_PDU::set_len(uint16 len)
{
    set_uint16 ( TCP_DATA_REQ_T_len , len);
}

const uint8 * TCP_DATA_REQ_T_PDU::get_dataPtr() const
{
    return get_uint8ArrayPtr ( TCP_DATA_REQ_T_pduSize );
}

void TCP_DATA_REQ_T_PDU::get_data( uint8 * copyTo ) const
{
    get_uint8Array ( copyTo , TCP_DATA_REQ_T_pduSize , get_len() );
}

void TCP_DATA_REQ_T_PDU::set_data( const uint8 * copyFrom , uint16 length )
{
    set_final_uint8Ptr ( TCP_DATA_REQ_T_len , TCP_DATA_REQ_T_pduSize , copyFrom , length );
}


