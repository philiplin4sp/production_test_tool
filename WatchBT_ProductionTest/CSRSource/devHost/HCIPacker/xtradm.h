///////////////////////////////////////////////////////////////////////////////
//
//  FILE:     xtradm.h
//
//  PURPOSE:  declare non-autogenerated DM primitive pdus
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __XTRADM_H__
#define __XTRADM_H__

#include "hcipacker/bluestackpdu.h"
#include "hcipacker/hcicommandpdu.h"

#define DM_HCI_WRITE_AUTO_FLUSH_CFM DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_COMPLETE
#define DM_HCI_READ_AUTO_FLUSH_CFM DM_HCI_READ_AUTO_FLUSH_TIMEOUT_COMPLETE
#define DM_HCI_READ_SCO_FLOW_CONTROL_CFM DM_HCI_READ_SCO_FLOW_CONTROL_ENABLE
#define DM_HCI_WRITE_SCO_FLOW_CONTROL_CFM DM_HCI_WRITE_SCO_FLOW_CONTROL_ENABLE
#define DM_HCI_SET_FC_HC_TO_HOST_COMPLETE DM_HCI_SET_HC_TO_HOST_FLOW_COMPLETE

class DM_HCI_RETURN_LINK_KEYS_IND_T_PDU : public DM_PDU
{
public:
    DM_HCI_RETURN_LINK_KEYS_IND_T_PDU() ;
    DM_HCI_RETURN_LINK_KEYS_IND_T_PDU( const PDU& );
    DM_HCI_RETURN_LINK_KEYS_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle() const ;
    uint8 get_num_keys() const ;
    void get_link_key_bd_addr ( uint8 index , BluetoothDeviceAddress &addr , LinkKey &key ) const;
};

class DM_SM_LINK_KEY_IND_T_PDU : public DM_PDU
{
public:
    DM_SM_LINK_KEY_IND_T_PDU() ;
    DM_SM_LINK_KEY_IND_T_PDU( const PDU& );
    DM_SM_LINK_KEY_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    uint8 get_key_type(void) const ;
    LinkKey get_key(void) const ;
};

class DM_HCI_REMOTE_NAME_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_REMOTE_NAME_CFM_T_PDU() ;
    DM_HCI_REMOTE_NAME_CFM_T_PDU( const PDU& );
    DM_HCI_REMOTE_NAME_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_status(void) const ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    BluetoothName get_name_part(void) const ;
};

class DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU() ;
    DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU( const PDU& );
    DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_status(void) const ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    LMPSupportedFeatures get_features(void) const ;
};

class DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU() ;
    DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU( const PDU& );
    DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_status(void) const ;
    LMPSupportedFeatures get_lmp_supp_features(void) const ;
};

class DM_HCI_READ_LOCAL_NAME_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_READ_LOCAL_NAME_CFM_T_PDU() ;
    DM_HCI_READ_LOCAL_NAME_CFM_T_PDU( const PDU& );
    DM_HCI_READ_LOCAL_NAME_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_status(void) const ;
    BluetoothName get_name_part(void) const ;
};

class DM_SM_PIN_REQUEST_RSP_T_PDU : public DM_PDU
{
public:
    DM_SM_PIN_REQUEST_RSP_T_PDU() ;
    DM_SM_PIN_REQUEST_RSP_T_PDU( const PDU& );
    DM_SM_PIN_REQUEST_RSP_T_PDU( const uint8 * buffer , uint32 len ) ;
    BluetoothDeviceAddressWithType get_addrt(void) const ;
    void set_addrt(BluetoothDeviceAddressWithType value) ;
    uint8 get_pin_length(void) const ;
    void set_pin_length(uint8 value) ;
    PinCode get_pin(void) const ;
    void set_pin(const PinCode& value) ;
};

class DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU() ;
    DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU( const PDU& );
    DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_status(void) const ;
    uint8 get_num_current_iac(void) const ;
    uint24 get_iac_lap ( uint8 index ) const;
};

class DM_HCI_INQUIRY_RESULT_IND_T_PDU : public DM_PDU
{
public:
    DM_HCI_INQUIRY_RESULT_IND_T_PDU() ;
    DM_HCI_INQUIRY_RESULT_IND_T_PDU( const PDU& );
    DM_HCI_INQUIRY_RESULT_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_num_responses(void) const;
    InquiryResult get_result(uint8 index) const;
};

class DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU() ;
    DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU( const PDU& );
    DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_status(void) const ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    uint8 get_mode(void) const ;
    AFHmap get_map(void) const ;
};

class DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU : public DM_PDU
{
public:
    DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU() ;
    DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU( const PDU& );
    DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_op_code(void) const ;
    void set_op_code(uint16 value) ;
    uint8 get_cmd_parameter_length(void) const ;
    void set_cmd_parameter_length(uint8 value) ;
    AFHmap get_map(void) const ;
    void set_map(AFHmap value) ;
};

class DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU() ;
    DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU( const PDU& );
    DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_status(void) const ;
    uint8 get_page_num(void) const ;
    uint8 get_max_page_num(void) const ;
    LMPExtFeatures get_lmp_ext_features(void) const ;
};

class DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU() ;
    DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU( const PDU& );
    DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_status(void) const ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    uint8 get_page_num(void) const ;
    uint8 get_max_page_num(void) const ;
    LMPExtFeatures get_lmp_ext_features(void) const ;
};

class DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU : public DM_PDU
{
public:
    DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU() ;
    DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU( const PDU& );
    DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    uint8 get_num_responses(void) const;
    InquiryResultWithRSSI get_result(uint8 index) const;
};

class DM_LP_WRITE_POWERSTATES_REQ_T_PDU : public DM_PDU
{
public:
    DM_LP_WRITE_POWERSTATES_REQ_T_PDU() ;
    DM_LP_WRITE_POWERSTATES_REQ_T_PDU( const PDU& );
    DM_LP_WRITE_POWERSTATES_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress value) ;
    LP_POWERSTATE_T get_states( int index ) const ;
    void set_states(const LP_POWERSTATE_T * states , int num_states) ;
    uint16 get_num_states(void) const ;
    void set_num_states(uint16 value) ;
};

class DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU : public DM_PDU
{
public:
    DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU() ;
    DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU( const PDU& );
    DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_version(void) const ;
    void set_version(uint16 version) ;
    uint16 get_length(void) const ;
    void set_length(uint16 length) ;
    void set_rs_table(DMRoleSwitchPolicyTable& new_rs_table) ;
    DMRoleSwitchPolicyTable get_rs_table(void) const ;
    uint8 get_slaves(const uint8 index) const ;
    uint8 get_masters(const uint8 index) const ;
    uint8 get_unsniffed_masters(const uint8 index) const ;
    uint8 get_connections(const uint8 index) const ;
    bool get_roleswitch_incoming(const uint8 index) const ;
    bool get_forbid_roleswitch_outgoing(const uint8 index) const ;
};

class DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU : public DM_PDU
{
public:
    DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU() ;
    DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU( const PDU& );
    DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU
                                        ( const uint8 * buffer , uint32 len ) ;
    uint16 get_op_code(void) const ;
    void set_op_code(uint16 op_code) ;
    uint8 get_cmd_parameter_length(void) const ;
    void set_cmd_parameter_length(uint8 cmd_parameter_length) ;
    void set_fec_required(uint8 fec_required) ;
    uint8 get_fec_required(void) const;
    void set_eir_data_part(EIRData eir_data_part);
    const EIRData get_eir_data_part(void) const;
};

class DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU : public DM_PDU
{
public:
    DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU() ;
    DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU( const PDU& );
    DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU
                                        ( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const;
    uint8 get_num_responses(void) const;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    uint8 get_page_scan_rep_mode(void) const;
    uint8 get_page_scan_period_mode(void) const;
    uint24 get_dev_class(void) const;
    uint16 get_clock_offset(void) const;
    int8 get_rssi(void) const;
    const EIRData get_eir_data_part(void) const;
};

class DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU() ;
    DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU( const PDU& );
    DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU
                                    ( const uint8 * buffer , uint32 len ) ;
    uint8 get_status(void) const ;
    uint16 get_phandle(void) const;
    uint8 get_fec_required(void) const;
    EIRData get_eir_data_part(void) const;
};

class DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU : public DM_PDU
{
public:
    DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU() ;
    DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU( const PDU& ) ;
    DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU( const uint8 * buffer , uint32 len );
    BluetoothDeviceAddressWithType get_addrt(void) const ;
    void set_addrt(BluetoothDeviceAddressWithType addrt) ;
    uint8 get_io_capability(void) const ;
    void set_io_capability(uint8 io_capability);
    uint8 get_authentication_requirements(void) const ;
    void set_authentication_requirements(uint8 authentication_requirements);
    uint8 get_oob_data_present(void) const ;
    void set_oob_data_present(uint8 oob_data_present);
    SPhashC get_oob_hash_c() const;
    void set_oob_hash_c( const SPhashC& oob_hash_c) ;
    SPrandomizerR get_oob_rand_r() const;
    void set_oob_rand_r( const SPrandomizerR& oob_rand_r) ;
    uint16 get_key_distribution(void) const ;
    void set_key_distribution(uint16 value) ;
};

class DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU : public DM_PDU
{
public:
    DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU() ;
    DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU( const PDU& ) ;
    DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 phandle) ;
    uint8 get_status(void) const ;
    void set_status(uint8 status) ;
    SPhashC get_oob_hash_c() const;
    void set_oob_hash_c( const SPhashC& oob_hash_c) ;
    SPrandomizerR get_oob_rand_r() const;
    void set_oob_rand_r( const SPrandomizerR& oob_rand_r) ;
};

class DM_SM_LINK_KEY_REQUEST_RSP_T_PDU : public DM_PDU
{
public:
    uint16 key_data;
    DM_SM_LINK_KEY_REQUEST_RSP_T_PDU() ;
    DM_SM_LINK_KEY_REQUEST_RSP_T_PDU( const PDU& ) ;
    DM_SM_LINK_KEY_REQUEST_RSP_T_PDU( const uint8 * buffer , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress bd_addr) ;
    uint16 get_key_type(void) const ;
    void set_key_type(uint16 key_type) ;
    LinkKey get_key(void) const ;
    void set_key(LinkKey key) ;
};

class DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU : public DM_PDU
{
public:
    DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU() ;
    DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU(const PDU&) ;
    DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU(const uint8 *buffer,
                                                                uint32 len);
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 phandle) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress bd_addr) ;
    LMPSupportedFeatures get_host_features(void) const ;
    void set_host_features(LMPSupportedFeatures host_features) ;
};

typedef DM_SM_LINK_KEY_IND_T_PDU DM_AMPM_LINK_KEY_NOTIFICATION_IND_T_PDU;


class DM_SYNC_CONNECT_REQ_T_PDU : public DM_PDU
{
    public:
    DM_SYNC_CONNECT_REQ_T_PDU() ;
    DM_SYNC_CONNECT_REQ_T_PDU( const PDU& );
    DM_SYNC_CONNECT_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_pv_cbarg(void) const ;
    void set_pv_cbarg(uint16 value) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress value) ;
    uint16 get_length(void) const ;
    void set_length(uint16 value) ;
    const DMSyncConfig get_config(void) const ;
    void set_config(const DMSyncConfig value) ;
};

class DM_SYNC_RENEGOTIATE_REQ_T_PDU : public DM_PDU
{
    public:
    DM_SYNC_RENEGOTIATE_REQ_T_PDU() ;
    DM_SYNC_RENEGOTIATE_REQ_T_PDU( const PDU& );
    DM_SYNC_RENEGOTIATE_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 value) ;
    uint16 get_length(void) const ;
    void set_length(uint16 value) ;
    const DMSyncConfig get_config(void) const ;
    void set_config(const DMSyncConfig value) ;
};

class DM_BAD_MESSAGE_IND_T_PDU : public DM_PDU
{
    public:
    DM_BAD_MESSAGE_IND_T_PDU() ;
    DM_BAD_MESSAGE_IND_T_PDU( const PDU& );
    DM_BAD_MESSAGE_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_reason(void) const ;
    void set_reason(uint16 value) ;
    uint8 get_protocol(void) const ;
    void set_protocol(uint8 value) ;
    uint16 get_request_type(void) const ;
    void set_request_type(uint16 value) ;
    uint16 get_message_length(void) const ;
    uint16 *get_message(void) const ;
    void set_message(uint16 *value, uint16 length) ;
};

class DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU() ;
    DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU( const PDU& );
    DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_op_code(void) const ;
    void set_op_code(uint16 value) ;
    uint8 get_cmd_parameter_length(void) const ;
    void set_cmd_parameter_length(uint8 value) ;
    uint8 get_advertising_data_len(void) const ;
    void set_advertising_data_len(uint8 value) ;
    void get_advertising_data(uint8 *value) const ;
    void set_advertising_data(uint8 *value) ;
};

class DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU() ;
    DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU( const PDU& );
    DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint8 get_status(void) const ;
    void set_status(uint8 value) ;
    uint8 get_feature_size(void) const ;
    void set_feature_size(uint8 feature_size) ;
    ULPSupportedFeatures get_feature_set(void) const ;
};

class DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU() ;
    DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU( const PDU& );
    DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint8 get_num_reports(void) const ;
    void set_num_reports(uint8 value) ;
    uint8 get_event_type(void) const ;
    void set_event_type(uint8 value) ;
    BluetoothDeviceAddressWithType get_current_addrt(void) const ;
    void set_current_addrt(BluetoothDeviceAddressWithType value) ;
    BluetoothDeviceAddressWithType get_permanent_addrt(void) const ;
    void set_permanent_addrt(BluetoothDeviceAddressWithType value) ;
    uint8 get_length_data(void) const ;
    void set_length_data(uint8 value) ;
    void get_data(uint8 *value) const ;
    void set_data(uint8 *value) ;
    uint8 get_rssi(void) const ;
    void set_rssi(uint8 value) ;
};

class DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU() ;
    DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU( const PDU& );
    DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint8 get_status(void) const ;
    void set_status(uint8 value) ;
    ULPSupportedStates get_supported_states(void) const ;
    void set_supported_states(ULPSupportedStates &value) ;
};

class DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU() ;
    DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU( const PDU& );
    DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint8 get_status(void) const ;
    void set_status(uint8 value) ;
    BluetoothDeviceAddressWithType get_addrt(void) const ;
    void set_addrt(BluetoothDeviceAddressWithType value) ;
    ULPChannelMap get_ulp_channel_map(void) const ;
    void set_ulp_channel_map(ULPChannelMap &value) ;
};

class DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU() ;
    DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU( const PDU& );
    DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint8 get_status(void) const ;
    void set_status(uint8 value) ;
    BluetoothDeviceAddressWithType get_addrt(void) const ;
    void set_addrt(BluetoothDeviceAddressWithType value) ;
    ULPSupportedFeatures get_feature_set(void) const ;
    void set_feature_set(ULPSupportedFeatures &value) ;
};

class DM_HCI_ULP_ENCRYPT_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_ENCRYPT_CFM_T_PDU() ;
    DM_HCI_ULP_ENCRYPT_CFM_T_PDU( const PDU& );
    DM_HCI_ULP_ENCRYPT_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint8 get_status(void) const ;
    void set_status(uint8 value) ;
    DATA_uint8_len_16_ret get_encrypted_data(void) const ;
};

class DM_HCI_ULP_RAND_CFM_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_RAND_CFM_T_PDU() ;
    DM_HCI_ULP_RAND_CFM_T_PDU( const PDU& );
    DM_HCI_ULP_RAND_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint8 get_status(void) const ;
    void set_status(uint8 value) ;
    ULPRandom get_random_number(void) const ;
};

class DM_HCI_ULP_ENCRYPT_REQ_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_ENCRYPT_REQ_T_PDU() ;
    DM_HCI_ULP_ENCRYPT_REQ_T_PDU( const PDU& );
    DM_HCI_ULP_ENCRYPT_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_op_code(void) const ;
    void set_op_code(uint16 value) ;
    uint8 get_cmd_parameter_length(void) const ;
    void set_cmd_parameter_length(uint8 value) ;
    ULPKey get_aes_key(void) const ;
    void set_aes_key(const ULPKey &value) ;
    ULPKey get_plaintext_data(void) const ;
    void set_plaintext_data(const ULPKey &value) ;
};

class DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU() ;
    DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU( const PDU& );
    DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_op_code(void) const ;
    void set_op_code(uint16 value) ;
    uint8 get_cmd_parameter_length(void) const ;
    void set_cmd_parameter_length(uint8 value) ;
    uint8 get_scan_response_data_len(void) const ;
    void set_scan_response_data_len(uint8 value) ;
    void get_scan_response_data(uint8 *value) const ;
    void set_scan_response_data(uint8 *value) ;
};

class DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU() ;
    DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU( const PDU& );
    DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_op_code(void) const ;
    void set_op_code(uint16 value) ;
    uint8 get_cmd_parameter_length(void) const ;
    void set_cmd_parameter_length(uint8 value) ;
    ULPEventMask get_ulp_event_mask(void) const ;
    void set_ulp_event_mask(const ULPEventMask &value) ;
};

class DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU : public DM_PDU
{
public:
    DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU() ;
    DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU( const PDU& );
    DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_op_code(void) const ;
    void set_op_code(uint16 value) ;
    uint8 get_cmd_parameter_length(void) const ;
    void set_cmd_parameter_length(uint8 value) ;
    ULPChannelMap get_channel_map(void) const ;
    void set_channel_map(ULPChannelMap &value) ;
};

class DM_SM_ADD_DEVICE_REQ_T_PDU : public DM_PDU
{
public:
    DM_SM_ADD_DEVICE_REQ_T_PDU() ;
    DM_SM_ADD_DEVICE_REQ_T_PDU( const PDU& );
    DM_SM_ADD_DEVICE_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    BluetoothDeviceAddressWithType get_addrt(void) const ;
    void set_addrt(BluetoothDeviceAddressWithType value) ;
    uint16 get_privacy(void) const ;
    void set_privacy(uint16 value) ;
    BluetoothDeviceAddress get_reconnection_bd_addr(void) const ;
    void set_reconnection_bd_addr(BluetoothDeviceAddress value) ;
    DM_SM_TRUST_T get_trust(void) const ;
    void set_trust(DM_SM_TRUST_T value) ;
    uint16 get_security_requirements(void) const ;
    void set_security_requirements(uint16 value) ;
    uint16 get_encryption_key_size(void) const ;
    void set_encryption_key_size(uint16 value) ;
    uint16 get_present(void) const ;
    void set_present(uint16 value) ;
    const void get_u(DM_SM_RFCLI_UKEY_T *value) const ;
    void set_u(DM_SM_RFCLI_UKEY_T *value) ;
};

class DM_SM_READ_DEVICE_CFM_T_PDU : public DM_PDU
{
public:
    DM_SM_READ_DEVICE_CFM_T_PDU() ;
    DM_SM_READ_DEVICE_CFM_T_PDU( const PDU& );
    DM_SM_READ_DEVICE_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    BluetoothDeviceAddressWithType get_addrt(void) const ;
    void set_addrt(BluetoothDeviceAddressWithType value) ;
    uint8 get_status(void) const ;
    void set_status(uint8 value) ;
    DM_SM_TRUST_T get_trust(void) const ;
    void set_trust(DM_SM_TRUST_T value) ;
    uint16 get_security_requirements(void) const ;
    void set_security_requirements(uint16 value) ;
    uint16 get_encryption_key_size(void) const ;
    void set_encryption_key_size(uint16 value) ;
    uint16 get_present(void) const ;
    void set_present(uint16 value) ;
    const void get_u(DM_SM_RFCLI_UKEY_T * value) const ;
    void set_u(DM_SM_RFCLI_UKEY_T *value) ;
};

class DM_SM_KEYS_IND_T_PDU : public DM_PDU
{
public:
    DM_SM_KEYS_IND_T_PDU() ;
    DM_SM_KEYS_IND_T_PDU( const PDU& );
    DM_SM_KEYS_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    BluetoothDeviceAddressWithType get_addrt(void) const ;
    void set_addrt(BluetoothDeviceAddressWithType value) ;
    uint16 get_security_requirements(void) const ;
    void set_security_requirements(uint16 value) ;
    uint16 get_encryption_key_size(void) const ;
    void set_encryption_key_size(uint16 value) ;
    uint16 get_present(void) const ;
    void set_present(uint16 value) ;
    const void get_u(DM_SM_RFCLI_UKEY_T *value) const ;
    void set_u(DM_SM_RFCLI_UKEY_T *value) ;
    BluetoothDeviceAddressWithType get_id_addrt(void) const ;
    void set_id_addrt(BluetoothDeviceAddressWithType value) ;
};

class DM_SM_KEY_REQUEST_RSP_T_PDU : public DM_PDU
{
public:
    DM_SM_KEY_REQUEST_RSP_T_PDU() ;
    DM_SM_KEY_REQUEST_RSP_T_PDU( const PDU& );
    DM_SM_KEY_REQUEST_RSP_T_PDU( const uint8 * buffer , uint32 len ) ;
    BluetoothDeviceAddressWithType get_addrt(void) const ;
    void set_addrt(BluetoothDeviceAddressWithType value) ;
    uint16 get_security_requirements(void) const ;
    void set_security_requirements(uint16 value) ;
    DM_SM_KEY_TYPE_T get_key_type(void) const ;
    void set_key_type(DM_SM_KEY_TYPE_T value) ;
    const void get_key(DM_SM_RFCLI_UKEY_T *value) const ;
    void set_key(DM_SM_RFCLI_UKEY_T value) ;
};

#endif//__XTRADM_H__
