////////////////////////////////////////////////////////////////////////////////
//
//  WARNING THIS IS AN AUTOGENERATED FILE DEFINING A BLUECORE-FRIENDY PROTOCOL
//
////////////////////////////////////////////////////////////////////////////////

#include "bcflayout.h"


enum {
	OFFSET_START(UDP_EXTENDED_DATA_IND_T)
	OFFSET_uint16(UDP_EXTENDED_DATA_IND_T_type),
	OFFSET_uint16(UDP_EXTENDED_DATA_IND_T_phandle),
	OFFSET_IPAddress(UDP_EXTENDED_DATA_IND_T_rem_addr),
	OFFSET_uint16(UDP_EXTENDED_DATA_IND_T_rem_port),
	OFFSET_IPAddress(UDP_EXTENDED_DATA_IND_T_loc_addr),
	OFFSET_uint16(UDP_EXTENDED_DATA_IND_T_id),
	OFFSET_uint16(UDP_EXTENDED_DATA_IND_T_len),
	OFFSET_uint16(UDP_EXTENDED_DATA_IND_T_data),
	UDP_EXTENDED_DATA_IND_T_pduSize
} ;

enum {
	OFFSET_START(UDP_DATA_IND_T)
	OFFSET_uint16(UDP_DATA_IND_T_type),
	OFFSET_uint16(UDP_DATA_IND_T_phandle),
	OFFSET_uint16(UDP_DATA_IND_T_id),
	OFFSET_uint16(UDP_DATA_IND_T_len),
	OFFSET_uint16(UDP_DATA_IND_T_data),
	UDP_DATA_IND_T_pduSize
} ;

enum {
	OFFSET_START(UDP_DATA_REQ_T)
	OFFSET_uint16(UDP_DATA_REQ_T_type),
	OFFSET_uint16(UDP_DATA_REQ_T_id),
	OFFSET_uint16(UDP_DATA_REQ_T_len),
	OFFSET_uint16(UDP_DATA_REQ_T_data),
	UDP_DATA_REQ_T_pduSize
} ;

enum {
	OFFSET_START(UDP_EXTENDED_DATA_REQ_T)
	OFFSET_uint16(UDP_EXTENDED_DATA_REQ_T_type),
	OFFSET_IPAddress(UDP_EXTENDED_DATA_REQ_T_rem_addr),
	OFFSET_uint16(UDP_EXTENDED_DATA_REQ_T_rem_port),
	OFFSET_IPAddress(UDP_EXTENDED_DATA_REQ_T_loc_addr),
	OFFSET_uint16(UDP_EXTENDED_DATA_REQ_T_id),
	OFFSET_uint16(UDP_EXTENDED_DATA_REQ_T_len),
	OFFSET_uint16(UDP_EXTENDED_DATA_REQ_T_data),
	UDP_EXTENDED_DATA_REQ_T_pduSize
} ;

#include "hcipacker/gen_udp.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Class: UDP_EXTENDED_DATA_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

UDP_EXTENDED_DATA_IND_T_PDU::UDP_EXTENDED_DATA_IND_T_PDU()
: UDP_PDU ( UDP_EXTENDED_DATA_IND , UDP_EXTENDED_DATA_IND_T_pduSize )
{
}

UDP_EXTENDED_DATA_IND_T_PDU::UDP_EXTENDED_DATA_IND_T_PDU( const PDU& from )
: UDP_PDU ( from )
{
}

UDP_EXTENDED_DATA_IND_T_PDU::UDP_EXTENDED_DATA_IND_T_PDU( const uint8 * buffer , uint32 len )
: UDP_PDU ( buffer , len )
{
}

uint16 UDP_EXTENDED_DATA_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( UDP_EXTENDED_DATA_IND_T_phandle );
}

void UDP_EXTENDED_DATA_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( UDP_EXTENDED_DATA_IND_T_phandle , value );
}

IPAddress UDP_EXTENDED_DATA_IND_T_PDU::get_rem_addr() const
{
    return get_IPAddress ( UDP_EXTENDED_DATA_IND_T_rem_addr );
}

void UDP_EXTENDED_DATA_IND_T_PDU::set_rem_addr( IPAddress value )
{
    set_IPAddress ( UDP_EXTENDED_DATA_IND_T_rem_addr , value );
}

uint16 UDP_EXTENDED_DATA_IND_T_PDU::get_rem_port() const
{
    return get_uint16 ( UDP_EXTENDED_DATA_IND_T_rem_port );
}

void UDP_EXTENDED_DATA_IND_T_PDU::set_rem_port( uint16 value )
{
    set_uint16 ( UDP_EXTENDED_DATA_IND_T_rem_port , value );
}

IPAddress UDP_EXTENDED_DATA_IND_T_PDU::get_loc_addr() const
{
    return get_IPAddress ( UDP_EXTENDED_DATA_IND_T_loc_addr );
}

void UDP_EXTENDED_DATA_IND_T_PDU::set_loc_addr( IPAddress value )
{
    set_IPAddress ( UDP_EXTENDED_DATA_IND_T_loc_addr , value );
}

uint16 UDP_EXTENDED_DATA_IND_T_PDU::get_id() const
{
    return get_uint16 ( UDP_EXTENDED_DATA_IND_T_id );
}

void UDP_EXTENDED_DATA_IND_T_PDU::set_id( uint16 value )
{
    set_uint16 ( UDP_EXTENDED_DATA_IND_T_id , value );
}

uint16 UDP_EXTENDED_DATA_IND_T_PDU::get_len() const
{
    return get_uint16 ( UDP_EXTENDED_DATA_IND_T_len );
}

const uint8* UDP_EXTENDED_DATA_IND_T_PDU::get_dataPtr() const
{
    return get_uint8ArrayPtr ( UDP_EXTENDED_DATA_IND_T_pduSize );
}

void UDP_EXTENDED_DATA_IND_T_PDU::set_data( const uint8* data , uint16 len )
{
    set_uint16 ( UDP_EXTENDED_DATA_IND_T_len , len );
    PDU::set_uint8Array( data , UDP_EXTENDED_DATA_IND_T_pduSize , len );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: UDP_DATA_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

UDP_DATA_IND_T_PDU::UDP_DATA_IND_T_PDU()
: UDP_PDU ( UDP_DATA_IND , UDP_DATA_IND_T_pduSize )
{
}

UDP_DATA_IND_T_PDU::UDP_DATA_IND_T_PDU( const PDU& from )
: UDP_PDU ( from )
{
}

UDP_DATA_IND_T_PDU::UDP_DATA_IND_T_PDU( const uint8 * buffer , uint32 len )
: UDP_PDU ( buffer , len )
{
}

uint16 UDP_DATA_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( UDP_DATA_IND_T_phandle );
}

void UDP_DATA_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( UDP_DATA_IND_T_phandle , value );
}

uint16 UDP_DATA_IND_T_PDU::get_id() const
{
    return get_uint16 ( UDP_DATA_IND_T_id );
}

void UDP_DATA_IND_T_PDU::set_id( uint16 value )
{
    set_uint16 ( UDP_DATA_IND_T_id , value );
}

uint16 UDP_DATA_IND_T_PDU::get_len() const
{
    return get_uint16 ( UDP_DATA_IND_T_len );
}

const uint8* UDP_DATA_IND_T_PDU::get_dataPtr() const
{
    return get_uint8ArrayPtr ( UDP_DATA_IND_T_pduSize );
}

void UDP_DATA_IND_T_PDU::set_data( const uint8* data , uint16 len )
{
    set_uint16 ( UDP_DATA_IND_T_len , len );
    PDU::set_uint8Array ( data , UDP_DATA_IND_T_pduSize , len );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: UDP_DATA_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

UDP_DATA_REQ_T_PDU::UDP_DATA_REQ_T_PDU()
: UDP_PDU ( UDP_DATA_REQ , UDP_DATA_REQ_T_pduSize )
{
}

UDP_DATA_REQ_T_PDU::UDP_DATA_REQ_T_PDU( const PDU& from )
: UDP_PDU ( from )
{
}

UDP_DATA_REQ_T_PDU::UDP_DATA_REQ_T_PDU( const uint8 * buffer , uint32 len )
: UDP_PDU ( buffer , len )
{
}

uint16 UDP_DATA_REQ_T_PDU::get_id() const
{
    return get_uint16 ( UDP_DATA_REQ_T_id );
}

void UDP_DATA_REQ_T_PDU::set_id( uint16 value )
{
    set_uint16 ( UDP_DATA_REQ_T_id , value );
}

uint16 UDP_DATA_REQ_T_PDU::get_len() const
{
    return get_uint16 ( UDP_DATA_REQ_T_len );
}

void UDP_DATA_REQ_T_PDU::set_len(uint16 len)
{
    set_uint16 ( UDP_DATA_REQ_T_len , len);
}

const uint8* UDP_DATA_REQ_T_PDU::get_dataPtr() const
{
    return get_uint8ArrayPtr ( UDP_DATA_REQ_T_pduSize );
}

void UDP_DATA_REQ_T_PDU::set_data( const uint8* data , uint16 len )
{
    set_final_uint8Ptr ( UDP_DATA_REQ_T_len , UDP_DATA_REQ_T_pduSize , data , len );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: UDP_EXTENDED_DATA_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

UDP_EXTENDED_DATA_REQ_T_PDU::UDP_EXTENDED_DATA_REQ_T_PDU()
: UDP_PDU ( UDP_EXTENDED_DATA_REQ , UDP_EXTENDED_DATA_REQ_T_pduSize )
{
}

UDP_EXTENDED_DATA_REQ_T_PDU::UDP_EXTENDED_DATA_REQ_T_PDU( const PDU& from )
: UDP_PDU ( from )
{
}

UDP_EXTENDED_DATA_REQ_T_PDU::UDP_EXTENDED_DATA_REQ_T_PDU( const uint8 * buffer , uint32 len )
: UDP_PDU ( buffer , len )
{
}

IPAddress UDP_EXTENDED_DATA_REQ_T_PDU::get_rem_addr() const
{
    return get_IPAddress ( UDP_EXTENDED_DATA_REQ_T_rem_addr );
}

void UDP_EXTENDED_DATA_REQ_T_PDU::set_rem_addr( IPAddress value )
{
    set_IPAddress ( UDP_EXTENDED_DATA_REQ_T_rem_addr , value );
}

uint16 UDP_EXTENDED_DATA_REQ_T_PDU::get_rem_port() const
{
    return get_uint16 ( UDP_EXTENDED_DATA_REQ_T_rem_port );
}

void UDP_EXTENDED_DATA_REQ_T_PDU::set_rem_port( uint16 value )
{
    set_uint16 ( UDP_EXTENDED_DATA_REQ_T_rem_port , value );
}

IPAddress UDP_EXTENDED_DATA_REQ_T_PDU::get_loc_addr() const
{
    return get_IPAddress ( UDP_EXTENDED_DATA_REQ_T_loc_addr );
}

void UDP_EXTENDED_DATA_REQ_T_PDU::set_loc_addr( IPAddress value )
{
    set_IPAddress ( UDP_EXTENDED_DATA_REQ_T_loc_addr , value );
}

uint16 UDP_EXTENDED_DATA_REQ_T_PDU::get_id() const
{
    return get_uint16 ( UDP_EXTENDED_DATA_REQ_T_id );
}

void UDP_EXTENDED_DATA_REQ_T_PDU::set_id( uint16 value )
{
    set_uint16 ( UDP_EXTENDED_DATA_REQ_T_id , value );
}

uint16 UDP_EXTENDED_DATA_REQ_T_PDU::get_len() const
{
    return get_uint16 ( UDP_EXTENDED_DATA_REQ_T_len );
}

void UDP_EXTENDED_DATA_REQ_T_PDU::set_len(uint16 len)
{
    set_uint16 ( UDP_EXTENDED_DATA_REQ_T_len , len);
}

const uint8* UDP_EXTENDED_DATA_REQ_T_PDU::get_dataPtr() const
{
    return get_uint8ArrayPtr ( UDP_EXTENDED_DATA_REQ_T_pduSize );
}

void UDP_EXTENDED_DATA_REQ_T_PDU::set_data( const uint8* data , uint16 len )
{
    set_final_uint8Ptr ( UDP_EXTENDED_DATA_REQ_T_len , UDP_EXTENDED_DATA_REQ_T_pduSize , data , len );
}


