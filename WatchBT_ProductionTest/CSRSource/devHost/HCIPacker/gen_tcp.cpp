////////////////////////////////////////////////////////////////////////////////
//
//  WARNING THIS IS AN AUTOGENERATED FILE DEFINING A BLUECORE-FRIENDY PROTOCOL
//
////////////////////////////////////////////////////////////////////////////////

#include "bcflayout.h"


enum {
	OFFSET_START(TCP_CLOSE_REQ_T)
	OFFSET_uint16(TCP_CLOSE_REQ_T_type),
	OFFSET_uint16(TCP_CLOSE_REQ_T_b),
	TCP_CLOSE_REQ_T_pduSize
} ;

enum {
	OFFSET_START(TCP_DATA_CFM_T)
	OFFSET_uint16(TCP_DATA_CFM_T_type),
	OFFSET_uint16(TCP_DATA_CFM_T_phandle),
	OFFSET_uint16(TCP_DATA_CFM_T_b_out),
	OFFSET_uint16(TCP_DATA_CFM_T_len),
	TCP_DATA_CFM_T_pduSize
} ;

enum {
	OFFSET_START(TCP_OPEN_RSP_T)
	OFFSET_uint16(TCP_OPEN_RSP_T_type),
	OFFSET_uint16(TCP_OPEN_RSP_T_b),
	OFFSET_uint16(TCP_OPEN_RSP_T_status),
	TCP_OPEN_RSP_T_pduSize
} ;

enum {
	OFFSET_START(TCP_ABORT_REQ_T)
	OFFSET_uint16(TCP_ABORT_REQ_T_type),
	OFFSET_uint16(TCP_ABORT_REQ_T_b),
	TCP_ABORT_REQ_T_pduSize
} ;

enum {
	OFFSET_START(TCP_CLOSED_RSP_T)
	OFFSET_uint16(TCP_CLOSED_RSP_T_type),
	OFFSET_uint16(TCP_CLOSED_RSP_T_b),
	TCP_CLOSED_RSP_T_pduSize
} ;

enum {
	OFFSET_START(TCP_OPEN_CFM_T)
	OFFSET_uint16(TCP_OPEN_CFM_T_type),
	OFFSET_uint16(TCP_OPEN_CFM_T_phandle),
	OFFSET_uint16(TCP_OPEN_CFM_T_status),
	OFFSET_uint16(TCP_OPEN_CFM_T_b_in),
	OFFSET_uint16(TCP_OPEN_CFM_T_b_out),
	OFFSET_uint16(TCP_OPEN_CFM_T_out_size),
	TCP_OPEN_CFM_T_pduSize
} ;

enum {
	OFFSET_START(TCP_OPEN_IND_T)
	OFFSET_uint16(TCP_OPEN_IND_T_type),
	OFFSET_uint16(TCP_OPEN_IND_T_phandle),
	OFFSET_uint16(TCP_OPEN_IND_T_b_out),
	OFFSET_uint16(TCP_OPEN_IND_T_status),
	OFFSET_IPAddress(TCP_OPEN_IND_T_rem_addr),
	OFFSET_uint16(TCP_OPEN_IND_T_rem_port),
	TCP_OPEN_IND_T_pduSize
} ;

enum {
	OFFSET_START(TCP_ABORT_RSP_T)
	OFFSET_uint16(TCP_ABORT_RSP_T_type),
	OFFSET_uint16(TCP_ABORT_RSP_T_b),
	OFFSET_uint16(TCP_ABORT_RSP_T_flags),
	TCP_ABORT_RSP_T_pduSize
} ;

enum {
	OFFSET_START(TCP_CLOSED_IND_T)
	OFFSET_uint16(TCP_CLOSED_IND_T_type),
	OFFSET_uint16(TCP_CLOSED_IND_T_phandle),
	OFFSET_uint16(TCP_CLOSED_IND_T_b_out),
	TCP_CLOSED_IND_T_pduSize
} ;

enum {
	OFFSET_START(TCP_DATA_RSP_T)
	OFFSET_uint16(TCP_DATA_RSP_T_type),
	OFFSET_uint16(TCP_DATA_RSP_T_b),
	OFFSET_uint16(TCP_DATA_RSP_T_len),
	TCP_DATA_RSP_T_pduSize
} ;

enum {
	OFFSET_START(TCP_OPEN_REQ_T)
	OFFSET_uint16(TCP_OPEN_REQ_T_type),
	OFFSET_uint16(TCP_OPEN_REQ_T_phandle),
	OFFSET_uint16(TCP_OPEN_REQ_T_flags),
	OFFSET_IPAddress(TCP_OPEN_REQ_T_rem_addr),
	OFFSET_uint16(TCP_OPEN_REQ_T_rem_port),
	OFFSET_uint16(TCP_OPEN_REQ_T_out_size),
	OFFSET_uint16(TCP_OPEN_REQ_T_loc_port),
	OFFSET_uint16(TCP_OPEN_REQ_T_in_size),
	TCP_OPEN_REQ_T_pduSize
} ;

enum {
	OFFSET_START(TCP_CLOSE_IND_T)
	OFFSET_uint16(TCP_CLOSE_IND_T_type),
	OFFSET_uint16(TCP_CLOSE_IND_T_phandle),
	OFFSET_uint16(TCP_CLOSE_IND_T_b_out),
	TCP_CLOSE_IND_T_pduSize
} ;

enum {
	OFFSET_START(TCP_ABORT_IND_T)
	OFFSET_uint16(TCP_ABORT_IND_T_type),
	OFFSET_uint16(TCP_ABORT_IND_T_phandle),
	OFFSET_uint16(TCP_ABORT_IND_T_b_out),
	TCP_ABORT_IND_T_pduSize
} ;
#include "hcipacker/gen_tcp.h"
 
///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_CLOSE_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_CLOSE_REQ_T_PDU::TCP_CLOSE_REQ_T_PDU()
: TCP_PDU ( TCP_CLOSE_REQ , TCP_CLOSE_REQ_T_pduSize )
{
}

TCP_CLOSE_REQ_T_PDU::TCP_CLOSE_REQ_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_CLOSE_REQ_T_PDU::TCP_CLOSE_REQ_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_CLOSE_REQ_T_PDU::get_b() const
{
    return get_uint16 ( TCP_CLOSE_REQ_T_b );
}

void TCP_CLOSE_REQ_T_PDU::set_b( uint16 value )
{
    set_uint16 ( TCP_CLOSE_REQ_T_b , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_DATA_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_DATA_CFM_T_PDU::TCP_DATA_CFM_T_PDU()
: TCP_PDU ( TCP_DATA_CFM , TCP_DATA_CFM_T_pduSize )
{
}

TCP_DATA_CFM_T_PDU::TCP_DATA_CFM_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_DATA_CFM_T_PDU::TCP_DATA_CFM_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_DATA_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( TCP_DATA_CFM_T_phandle );
}

void TCP_DATA_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( TCP_DATA_CFM_T_phandle , value );
}

uint16 TCP_DATA_CFM_T_PDU::get_b_out() const
{
    return get_uint16 ( TCP_DATA_CFM_T_b_out );
}

void TCP_DATA_CFM_T_PDU::set_b_out( uint16 value )
{
    set_uint16 ( TCP_DATA_CFM_T_b_out , value );
}

uint16 TCP_DATA_CFM_T_PDU::get_len() const
{
    return get_uint16 ( TCP_DATA_CFM_T_len );
}

void TCP_DATA_CFM_T_PDU::set_len( uint16 value )
{
    set_uint16 ( TCP_DATA_CFM_T_len , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_OPEN_RSP_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_OPEN_RSP_T_PDU::TCP_OPEN_RSP_T_PDU()
: TCP_PDU ( TCP_OPEN_RSP , TCP_OPEN_RSP_T_pduSize )
{
}

TCP_OPEN_RSP_T_PDU::TCP_OPEN_RSP_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_OPEN_RSP_T_PDU::TCP_OPEN_RSP_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_OPEN_RSP_T_PDU::get_b() const
{
    return get_uint16 ( TCP_OPEN_RSP_T_b );
}

void TCP_OPEN_RSP_T_PDU::set_b( uint16 value )
{
    set_uint16 ( TCP_OPEN_RSP_T_b , value );
}

uint16 TCP_OPEN_RSP_T_PDU::get_status() const
{
    return get_uint16 ( TCP_OPEN_RSP_T_status );
}

void TCP_OPEN_RSP_T_PDU::set_status( uint16 value )
{
    set_uint16 ( TCP_OPEN_RSP_T_status , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_ABORT_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_ABORT_REQ_T_PDU::TCP_ABORT_REQ_T_PDU()
: TCP_PDU ( TCP_ABORT_REQ , TCP_ABORT_REQ_T_pduSize )
{
}

TCP_ABORT_REQ_T_PDU::TCP_ABORT_REQ_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_ABORT_REQ_T_PDU::TCP_ABORT_REQ_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_ABORT_REQ_T_PDU::get_b() const
{
    return get_uint16 ( TCP_ABORT_REQ_T_b );
}

void TCP_ABORT_REQ_T_PDU::set_b( uint16 value )
{
    set_uint16 ( TCP_ABORT_REQ_T_b , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_CLOSED_RSP_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_CLOSED_RSP_T_PDU::TCP_CLOSED_RSP_T_PDU()
: TCP_PDU ( TCP_CLOSED_RSP , TCP_CLOSED_RSP_T_pduSize )
{
}

TCP_CLOSED_RSP_T_PDU::TCP_CLOSED_RSP_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_CLOSED_RSP_T_PDU::TCP_CLOSED_RSP_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_CLOSED_RSP_T_PDU::get_b() const
{
    return get_uint16 ( TCP_CLOSED_RSP_T_b );
}

void TCP_CLOSED_RSP_T_PDU::set_b( uint16 value )
{
    set_uint16 ( TCP_CLOSED_RSP_T_b , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_OPEN_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_OPEN_CFM_T_PDU::TCP_OPEN_CFM_T_PDU()
: TCP_PDU ( TCP_OPEN_CFM , TCP_OPEN_CFM_T_pduSize )
{
}

TCP_OPEN_CFM_T_PDU::TCP_OPEN_CFM_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_OPEN_CFM_T_PDU::TCP_OPEN_CFM_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_OPEN_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( TCP_OPEN_CFM_T_phandle );
}

void TCP_OPEN_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( TCP_OPEN_CFM_T_phandle , value );
}

uint16 TCP_OPEN_CFM_T_PDU::get_status() const
{
    return get_uint16 ( TCP_OPEN_CFM_T_status );
}

void TCP_OPEN_CFM_T_PDU::set_status( uint16 value )
{
    set_uint16 ( TCP_OPEN_CFM_T_status , value );
}

uint16 TCP_OPEN_CFM_T_PDU::get_b_in() const
{
    return get_uint16 ( TCP_OPEN_CFM_T_b_in );
}

void TCP_OPEN_CFM_T_PDU::set_b_in( uint16 value )
{
    set_uint16 ( TCP_OPEN_CFM_T_b_in , value );
}

uint16 TCP_OPEN_CFM_T_PDU::get_b_out() const
{
    return get_uint16 ( TCP_OPEN_CFM_T_b_out );
}

void TCP_OPEN_CFM_T_PDU::set_b_out( uint16 value )
{
    set_uint16 ( TCP_OPEN_CFM_T_b_out , value );
}

uint16 TCP_OPEN_CFM_T_PDU::get_out_size() const
{
    return get_uint16 ( TCP_OPEN_CFM_T_out_size );
}

void TCP_OPEN_CFM_T_PDU::set_out_size( uint16 value )
{
    set_uint16 ( TCP_OPEN_CFM_T_out_size , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_OPEN_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_OPEN_IND_T_PDU::TCP_OPEN_IND_T_PDU()
: TCP_PDU ( TCP_OPEN_IND , TCP_OPEN_IND_T_pduSize )
{
}

TCP_OPEN_IND_T_PDU::TCP_OPEN_IND_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_OPEN_IND_T_PDU::TCP_OPEN_IND_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_OPEN_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( TCP_OPEN_IND_T_phandle );
}

void TCP_OPEN_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( TCP_OPEN_IND_T_phandle , value );
}

uint16 TCP_OPEN_IND_T_PDU::get_b_out() const
{
    return get_uint16 ( TCP_OPEN_IND_T_b_out );
}

void TCP_OPEN_IND_T_PDU::set_b_out( uint16 value )
{
    set_uint16 ( TCP_OPEN_IND_T_b_out , value );
}

uint16 TCP_OPEN_IND_T_PDU::get_status() const
{
    return get_uint16 ( TCP_OPEN_IND_T_status );
}

void TCP_OPEN_IND_T_PDU::set_status( uint16 value )
{
    set_uint16 ( TCP_OPEN_IND_T_status , value );
}

IPAddress TCP_OPEN_IND_T_PDU::get_rem_addr() const
{
    return get_IPAddress ( TCP_OPEN_IND_T_rem_addr );
}

void TCP_OPEN_IND_T_PDU::set_rem_addr( IPAddress value )
{
    set_IPAddress ( TCP_OPEN_IND_T_rem_addr , value );
}

uint16 TCP_OPEN_IND_T_PDU::get_rem_port() const
{
    return get_uint16 ( TCP_OPEN_IND_T_rem_port );
}

void TCP_OPEN_IND_T_PDU::set_rem_port( uint16 value )
{
    set_uint16 ( TCP_OPEN_IND_T_rem_port , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_ABORT_RSP_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_ABORT_RSP_T_PDU::TCP_ABORT_RSP_T_PDU()
: TCP_PDU ( TCP_ABORT_RSP , TCP_ABORT_RSP_T_pduSize )
{
}

TCP_ABORT_RSP_T_PDU::TCP_ABORT_RSP_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_ABORT_RSP_T_PDU::TCP_ABORT_RSP_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_ABORT_RSP_T_PDU::get_b() const
{
    return get_uint16 ( TCP_ABORT_RSP_T_b );
}

void TCP_ABORT_RSP_T_PDU::set_b( uint16 value )
{
    set_uint16 ( TCP_ABORT_RSP_T_b , value );
}

uint16 TCP_ABORT_RSP_T_PDU::get_flags() const
{
    return get_uint16 ( TCP_ABORT_RSP_T_flags );
}

void TCP_ABORT_RSP_T_PDU::set_flags( uint16 value )
{
    set_uint16 ( TCP_ABORT_RSP_T_flags , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_CLOSED_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_CLOSED_IND_T_PDU::TCP_CLOSED_IND_T_PDU()
: TCP_PDU ( TCP_CLOSED_IND , TCP_CLOSED_IND_T_pduSize )
{
}

TCP_CLOSED_IND_T_PDU::TCP_CLOSED_IND_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_CLOSED_IND_T_PDU::TCP_CLOSED_IND_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_CLOSED_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( TCP_CLOSED_IND_T_phandle );
}

void TCP_CLOSED_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( TCP_CLOSED_IND_T_phandle , value );
}

uint16 TCP_CLOSED_IND_T_PDU::get_b_out() const
{
    return get_uint16 ( TCP_CLOSED_IND_T_b_out );
}

void TCP_CLOSED_IND_T_PDU::set_b_out( uint16 value )
{
    set_uint16 ( TCP_CLOSED_IND_T_b_out , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_DATA_RSP_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_DATA_RSP_T_PDU::TCP_DATA_RSP_T_PDU()
: TCP_PDU ( TCP_DATA_RSP , TCP_DATA_RSP_T_pduSize )
{
}

TCP_DATA_RSP_T_PDU::TCP_DATA_RSP_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_DATA_RSP_T_PDU::TCP_DATA_RSP_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_DATA_RSP_T_PDU::get_b() const
{
    return get_uint16 ( TCP_DATA_RSP_T_b );
}

void TCP_DATA_RSP_T_PDU::set_b( uint16 value )
{
    set_uint16 ( TCP_DATA_RSP_T_b , value );
}

uint16 TCP_DATA_RSP_T_PDU::get_len() const
{
    return get_uint16 ( TCP_DATA_RSP_T_len );
}

void TCP_DATA_RSP_T_PDU::set_len( uint16 value )
{
    set_uint16 ( TCP_DATA_RSP_T_len , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_OPEN_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_OPEN_REQ_T_PDU::TCP_OPEN_REQ_T_PDU()
: TCP_PDU ( TCP_OPEN_REQ , TCP_OPEN_REQ_T_pduSize )
{
}

TCP_OPEN_REQ_T_PDU::TCP_OPEN_REQ_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_OPEN_REQ_T_PDU::TCP_OPEN_REQ_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_OPEN_REQ_T_PDU::get_phandle() const
{
    return get_uint16 ( TCP_OPEN_REQ_T_phandle );
}

void TCP_OPEN_REQ_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( TCP_OPEN_REQ_T_phandle , value );
}

uint16 TCP_OPEN_REQ_T_PDU::get_flags() const
{
    return get_uint16 ( TCP_OPEN_REQ_T_flags );
}

void TCP_OPEN_REQ_T_PDU::set_flags( uint16 value )
{
    set_uint16 ( TCP_OPEN_REQ_T_flags , value );
}

IPAddress TCP_OPEN_REQ_T_PDU::get_rem_addr() const
{
    return get_IPAddress ( TCP_OPEN_REQ_T_rem_addr );
}

void TCP_OPEN_REQ_T_PDU::set_rem_addr( IPAddress value )
{
    set_IPAddress ( TCP_OPEN_REQ_T_rem_addr , value );
}

uint16 TCP_OPEN_REQ_T_PDU::get_rem_port() const
{
    return get_uint16 ( TCP_OPEN_REQ_T_rem_port );
}

void TCP_OPEN_REQ_T_PDU::set_rem_port( uint16 value )
{
    set_uint16 ( TCP_OPEN_REQ_T_rem_port , value );
}

uint16 TCP_OPEN_REQ_T_PDU::get_out_size() const
{
    return get_uint16 ( TCP_OPEN_REQ_T_out_size );
}

void TCP_OPEN_REQ_T_PDU::set_out_size( uint16 value )
{
    set_uint16 ( TCP_OPEN_REQ_T_out_size , value );
}

uint16 TCP_OPEN_REQ_T_PDU::get_loc_port() const
{
    return get_uint16 ( TCP_OPEN_REQ_T_loc_port );
}

void TCP_OPEN_REQ_T_PDU::set_loc_port( uint16 value )
{
    set_uint16 ( TCP_OPEN_REQ_T_loc_port , value );
}

uint16 TCP_OPEN_REQ_T_PDU::get_in_size() const
{
    return get_uint16 ( TCP_OPEN_REQ_T_in_size );
}

void TCP_OPEN_REQ_T_PDU::set_in_size( uint16 value )
{
    set_uint16 ( TCP_OPEN_REQ_T_in_size , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_CLOSE_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_CLOSE_IND_T_PDU::TCP_CLOSE_IND_T_PDU()
: TCP_PDU ( TCP_CLOSE_IND , TCP_CLOSE_IND_T_pduSize )
{
}

TCP_CLOSE_IND_T_PDU::TCP_CLOSE_IND_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_CLOSE_IND_T_PDU::TCP_CLOSE_IND_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_CLOSE_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( TCP_CLOSE_IND_T_phandle );
}

void TCP_CLOSE_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( TCP_CLOSE_IND_T_phandle , value );
}

uint16 TCP_CLOSE_IND_T_PDU::get_b_out() const
{
    return get_uint16 ( TCP_CLOSE_IND_T_b_out );
}

void TCP_CLOSE_IND_T_PDU::set_b_out( uint16 value )
{
    set_uint16 ( TCP_CLOSE_IND_T_b_out , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: TCP_ABORT_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

TCP_ABORT_IND_T_PDU::TCP_ABORT_IND_T_PDU()
: TCP_PDU ( TCP_ABORT_IND , TCP_ABORT_IND_T_pduSize )
{
}

TCP_ABORT_IND_T_PDU::TCP_ABORT_IND_T_PDU( const PDU& from )
: TCP_PDU ( from )
{
}

TCP_ABORT_IND_T_PDU::TCP_ABORT_IND_T_PDU( const uint8 * buffer , uint32 len )
: TCP_PDU ( buffer , len )
{
}

uint16 TCP_ABORT_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( TCP_ABORT_IND_T_phandle );
}

void TCP_ABORT_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( TCP_ABORT_IND_T_phandle , value );
}

uint16 TCP_ABORT_IND_T_PDU::get_b_out() const
{
    return get_uint16 ( TCP_ABORT_IND_T_b_out );
}

void TCP_ABORT_IND_T_PDU::set_b_out( uint16 value )
{
    set_uint16 ( TCP_ABORT_IND_T_b_out , value );
}

