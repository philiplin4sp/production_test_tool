/////////////////////////WARNING - AUTOGENERATED FILE//////////////////////////
//
//  FILENAME:   gen_cmd_cmplt.h
//
//  PURPOSE :   Headers for autogenerated hci command complete pdus
//
//  Autogenerated from HCIPacker/autogen/templates/cmd_cmplt_hdr.tpl by
//  devTools/bin/pdu/gencode.pl
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __GEN_CMD_CMPLT_H__
#define __GEN_CMD_CMPLT_H__

class HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU ();
        HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU ( const PDU& );
        HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_connection_handle () const;
        UNHANDLED_uint8_t get_ulp_channel_map () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU ();
        HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU ( const PDU& );
        HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        UNHANDLED_uint8_t get_feature_set () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU ();
        HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU ( const PDU& );
        HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        UNHANDLED_uint8_t get_supported_states () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LOCAL_NAME_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LOCAL_NAME_RET_T_PDU ();
        HCI_READ_LOCAL_NAME_RET_T_PDU ( const PDU& );
        HCI_READ_LOCAL_NAME_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        UNHANDLED_uint8_t get_name_part () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_RAND_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_RAND_RET_T_PDU ();
        HCI_ULP_RAND_RET_T_PDU ( const PDU& );
        HCI_ULP_RAND_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        UNHANDLED_uint8_t get_random_number () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU ();
        HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU ( const PDU& );
        HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_fec_required () const;
        UNHANDLED_uint8_t get_eir_data_part () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_ENCRYPT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_ENCRYPT_RET_T_PDU ();
        HCI_ULP_ENCRYPT_RET_T_PDU ( const PDU& );
        HCI_ULP_ENCRYPT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        UNHANDLED_uint8_t get_encrypted_data () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_CURRENT_IAC_LAP_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_CURRENT_IAC_LAP_RET_T_PDU ();
        HCI_READ_CURRENT_IAC_LAP_RET_T_PDU ( const PDU& );
        HCI_READ_CURRENT_IAC_LAP_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_num_current_iac () const;
        UNHANDLED_uint24_t get_iac_lap () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU ();
        HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU ( const PDU& );
        HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_page_num () const;
        uint8 get_max_page_num () const;
        UNHANDLED_uint8_t get_lmp_ext_features () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LOCAL_OOB_DATA_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LOCAL_OOB_DATA_RET_T_PDU ();
        HCI_READ_LOCAL_OOB_DATA_RET_T_PDU ( const PDU& );
        HCI_READ_LOCAL_OOB_DATA_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        UNHANDLED_uint8_t get_c () const;
        UNHANDLED_uint8_t get_r () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU ();
        HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU ( const PDU& );
        HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint8 get_mode () const;
        UNHANDLED_uint8_t get_map () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU ();
        HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU ( const PDU& );
        HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        UNHANDLED_uint8_t get_supp_commands () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU ();
        HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU ( const PDU& );
        HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        UNHANDLED_uint8_t get_lmp_supp_features () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

#endif

////////////////////////////////////////////////////////////////////////////////
//
//  WARNING THIS IS AN AUTOGENERATED FILE DEFINING A BLUETOOTH HCI PROTOCOL
//
////////////////////////////////////////////////////////////////////////////////


#include "hcilayout.h"


enum {
	OFFSET_START(HCI_ULP_READ_CHANNEL_MAP_RET_T)
	OFFSET_uint16(HCI_ULP_READ_CHANNEL_MAP_RET_T_connection_handle),
	OFFSET_UNHANDLED_uint8_t(HCI_ULP_READ_CHANNEL_MAP_RET_T_ulp_channel_map),
	HCI_ULP_READ_CHANNEL_MAP_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T)
	OFFSET_UNHANDLED_uint8_t(HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_feature_set),
	HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_ULP_READ_SUPPORTED_STATES_RET_T)
	OFFSET_UNHANDLED_uint8_t(HCI_ULP_READ_SUPPORTED_STATES_RET_T_supported_states),
	HCI_ULP_READ_SUPPORTED_STATES_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_READ_LOCAL_NAME_RET_T)
	OFFSET_UNHANDLED_uint8_t(HCI_READ_LOCAL_NAME_RET_T_name_part),
	HCI_READ_LOCAL_NAME_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_ULP_RAND_RET_T)
	OFFSET_UNHANDLED_uint8_t(HCI_ULP_RAND_RET_T_random_number),
	HCI_ULP_RAND_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T)
	OFFSET_uint8(HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_fec_required),
	OFFSET_UNHANDLED_uint8_t(HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_eir_data_part),
	HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_ULP_ENCRYPT_RET_T)
	OFFSET_UNHANDLED_uint8_t(HCI_ULP_ENCRYPT_RET_T_encrypted_data),
	HCI_ULP_ENCRYPT_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_READ_CURRENT_IAC_LAP_RET_T)
	OFFSET_uint8(HCI_READ_CURRENT_IAC_LAP_RET_T_num_current_iac),
	OFFSET_UNHANDLED_uint24_t(HCI_READ_CURRENT_IAC_LAP_RET_T_iac_lap),
	HCI_READ_CURRENT_IAC_LAP_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_READ_LOCAL_EXT_FEATURES_RET_T)
	OFFSET_uint8(HCI_READ_LOCAL_EXT_FEATURES_RET_T_page_num),
	OFFSET_uint8(HCI_READ_LOCAL_EXT_FEATURES_RET_T_max_page_num),
	OFFSET_UNHANDLED_uint8_t(HCI_READ_LOCAL_EXT_FEATURES_RET_T_lmp_ext_features),
	HCI_READ_LOCAL_EXT_FEATURES_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_READ_LOCAL_OOB_DATA_RET_T)
	OFFSET_UNHANDLED_uint8_t(HCI_READ_LOCAL_OOB_DATA_RET_T_c),
	OFFSET_UNHANDLED_uint8_t(HCI_READ_LOCAL_OOB_DATA_RET_T_r),
	HCI_READ_LOCAL_OOB_DATA_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_READ_AFH_CHANNEL_MAP_RET_T)
	OFFSET_uint16(HCI_READ_AFH_CHANNEL_MAP_RET_T_handle),
	OFFSET_uint8(HCI_READ_AFH_CHANNEL_MAP_RET_T_mode),
	OFFSET_UNHANDLED_uint8_t(HCI_READ_AFH_CHANNEL_MAP_RET_T_map),
	HCI_READ_AFH_CHANNEL_MAP_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_READ_LOCAL_SUPP_COMMANDS_RET_T)
	OFFSET_UNHANDLED_uint8_t(HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_supp_commands),
	HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_pduSize
} ;

enum {
	OFFSET_START(HCI_READ_LOCAL_SUPP_FEATURES_RET_T)
	OFFSET_UNHANDLED_uint8_t(HCI_READ_LOCAL_SUPP_FEATURES_RET_T_lmp_supp_features),
	HCI_READ_LOCAL_SUPP_FEATURES_RET_T_pduSize
} ;
///////////////////////////////////////////////////////////////////////////////
//  Start of Autogenerated from cmd_cmplt.tpl by gencode.pl
///////////////////////////////////////////////////////////////////////////////

#include "hcipacker/hcicommandcompletepdu.h"
#include "app/bluestack/bluetooth.h"
#include "app/bluestack/hci.h"


HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU::HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_ULP_READ_CHANNEL_MAP , HCI_ULP_READ_CHANNEL_MAP_RET_T_pduSize )
{	
}

HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU::HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU::HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

uint16 HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU::get_connection_handle(void) const
{
    return get_uint16(HCI_ULP_READ_CHANNEL_MAP_RET_T_connection_handle) ;
}

UNHANDLED_uint8_t HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU::get_ulp_channel_map(void) const
{
    return get_UNHANDLED_uint8_t(HCI_ULP_READ_CHANNEL_MAP_RET_T_ulp_channel_map) ;
}

bool HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU::size_expected() const
{
    return size() == HCI_ULP_READ_CHANNEL_MAP_RET_T_pduSize;
}

/*******************************************************************/


HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU::HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES , HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_pduSize )
{	
}

HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU::HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU::HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

UNHANDLED_uint8_t HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU::get_feature_set(void) const
{
    return get_UNHANDLED_uint8_t(HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_feature_set) ;
}

bool HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU::size_expected() const
{
    return size() == HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_pduSize;
}

/*******************************************************************/


HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU::HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_ULP_READ_SUPPORTED_STATES , HCI_ULP_READ_SUPPORTED_STATES_RET_T_pduSize )
{	
}

HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU::HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU::HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

UNHANDLED_uint8_t HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU::get_supported_states(void) const
{
    return get_UNHANDLED_uint8_t(HCI_ULP_READ_SUPPORTED_STATES_RET_T_supported_states) ;
}

bool HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU::size_expected() const
{
    return size() == HCI_ULP_READ_SUPPORTED_STATES_RET_T_pduSize;
}

/*******************************************************************/


HCI_READ_LOCAL_NAME_RET_T_PDU::HCI_READ_LOCAL_NAME_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_READ_LOCAL_NAME , HCI_READ_LOCAL_NAME_RET_T_pduSize )
{	
}

HCI_READ_LOCAL_NAME_RET_T_PDU::HCI_READ_LOCAL_NAME_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_READ_LOCAL_NAME_RET_T_PDU::HCI_READ_LOCAL_NAME_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

UNHANDLED_uint8_t HCI_READ_LOCAL_NAME_RET_T_PDU::get_name_part(void) const
{
    return get_UNHANDLED_uint8_t(HCI_READ_LOCAL_NAME_RET_T_name_part) ;
}

bool HCI_READ_LOCAL_NAME_RET_T_PDU::size_expected() const
{
    return size() == HCI_READ_LOCAL_NAME_RET_T_pduSize;
}

/*******************************************************************/


HCI_ULP_RAND_RET_T_PDU::HCI_ULP_RAND_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_ULP_RAND , HCI_ULP_RAND_RET_T_pduSize )
{	
}

HCI_ULP_RAND_RET_T_PDU::HCI_ULP_RAND_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_ULP_RAND_RET_T_PDU::HCI_ULP_RAND_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

UNHANDLED_uint8_t HCI_ULP_RAND_RET_T_PDU::get_random_number(void) const
{
    return get_UNHANDLED_uint8_t(HCI_ULP_RAND_RET_T_random_number) ;
}

bool HCI_ULP_RAND_RET_T_PDU::size_expected() const
{
    return size() == HCI_ULP_RAND_RET_T_pduSize;
}

/*******************************************************************/


HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU::HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA , HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_pduSize )
{	
}

HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU::HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU::HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

uint8 HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU::get_fec_required(void) const
{
    return get_uint8(HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_fec_required) ;
}

UNHANDLED_uint8_t HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU::get_eir_data_part(void) const
{
    return get_UNHANDLED_uint8_t(HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_eir_data_part) ;
}

bool HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU::size_expected() const
{
    return size() == HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_pduSize;
}

/*******************************************************************/


HCI_ULP_ENCRYPT_RET_T_PDU::HCI_ULP_ENCRYPT_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_ULP_ENCRYPT , HCI_ULP_ENCRYPT_RET_T_pduSize )
{	
}

HCI_ULP_ENCRYPT_RET_T_PDU::HCI_ULP_ENCRYPT_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_ULP_ENCRYPT_RET_T_PDU::HCI_ULP_ENCRYPT_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

UNHANDLED_uint8_t HCI_ULP_ENCRYPT_RET_T_PDU::get_encrypted_data(void) const
{
    return get_UNHANDLED_uint8_t(HCI_ULP_ENCRYPT_RET_T_encrypted_data) ;
}

bool HCI_ULP_ENCRYPT_RET_T_PDU::size_expected() const
{
    return size() == HCI_ULP_ENCRYPT_RET_T_pduSize;
}

/*******************************************************************/


HCI_READ_CURRENT_IAC_LAP_RET_T_PDU::HCI_READ_CURRENT_IAC_LAP_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_READ_CURRENT_IAC_LAP , HCI_READ_CURRENT_IAC_LAP_RET_T_pduSize )
{	
}

HCI_READ_CURRENT_IAC_LAP_RET_T_PDU::HCI_READ_CURRENT_IAC_LAP_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_READ_CURRENT_IAC_LAP_RET_T_PDU::HCI_READ_CURRENT_IAC_LAP_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

uint8 HCI_READ_CURRENT_IAC_LAP_RET_T_PDU::get_num_current_iac(void) const
{
    return get_uint8(HCI_READ_CURRENT_IAC_LAP_RET_T_num_current_iac) ;
}

UNHANDLED_uint24_t HCI_READ_CURRENT_IAC_LAP_RET_T_PDU::get_iac_lap(void) const
{
    return get_UNHANDLED_uint24_t(HCI_READ_CURRENT_IAC_LAP_RET_T_iac_lap) ;
}

bool HCI_READ_CURRENT_IAC_LAP_RET_T_PDU::size_expected() const
{
    return size() == HCI_READ_CURRENT_IAC_LAP_RET_T_pduSize;
}

/*******************************************************************/


HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU::HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_READ_LOCAL_EXT_FEATURES , HCI_READ_LOCAL_EXT_FEATURES_RET_T_pduSize )
{	
}

HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU::HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU::HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

uint8 HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU::get_page_num(void) const
{
    return get_uint8(HCI_READ_LOCAL_EXT_FEATURES_RET_T_page_num) ;
}

uint8 HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU::get_max_page_num(void) const
{
    return get_uint8(HCI_READ_LOCAL_EXT_FEATURES_RET_T_max_page_num) ;
}

UNHANDLED_uint8_t HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU::get_lmp_ext_features(void) const
{
    return get_UNHANDLED_uint8_t(HCI_READ_LOCAL_EXT_FEATURES_RET_T_lmp_ext_features) ;
}

bool HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU::size_expected() const
{
    return size() == HCI_READ_LOCAL_EXT_FEATURES_RET_T_pduSize;
}

/*******************************************************************/


HCI_READ_LOCAL_OOB_DATA_RET_T_PDU::HCI_READ_LOCAL_OOB_DATA_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_READ_LOCAL_OOB_DATA , HCI_READ_LOCAL_OOB_DATA_RET_T_pduSize )
{	
}

HCI_READ_LOCAL_OOB_DATA_RET_T_PDU::HCI_READ_LOCAL_OOB_DATA_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_READ_LOCAL_OOB_DATA_RET_T_PDU::HCI_READ_LOCAL_OOB_DATA_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

UNHANDLED_uint8_t HCI_READ_LOCAL_OOB_DATA_RET_T_PDU::get_c(void) const
{
    return get_UNHANDLED_uint8_t(HCI_READ_LOCAL_OOB_DATA_RET_T_c) ;
}

UNHANDLED_uint8_t HCI_READ_LOCAL_OOB_DATA_RET_T_PDU::get_r(void) const
{
    return get_UNHANDLED_uint8_t(HCI_READ_LOCAL_OOB_DATA_RET_T_r) ;
}

bool HCI_READ_LOCAL_OOB_DATA_RET_T_PDU::size_expected() const
{
    return size() == HCI_READ_LOCAL_OOB_DATA_RET_T_pduSize;
}

/*******************************************************************/


HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU::HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_READ_AFH_CHANNEL_MAP , HCI_READ_AFH_CHANNEL_MAP_RET_T_pduSize )
{	
}

HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU::HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU::HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

uint16 HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU::get_handle(void) const
{
    return get_uint16(HCI_READ_AFH_CHANNEL_MAP_RET_T_handle) ;
}

uint8 HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU::get_mode(void) const
{
    return get_uint8(HCI_READ_AFH_CHANNEL_MAP_RET_T_mode) ;
}

UNHANDLED_uint8_t HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU::get_map(void) const
{
    return get_UNHANDLED_uint8_t(HCI_READ_AFH_CHANNEL_MAP_RET_T_map) ;
}

bool HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU::size_expected() const
{
    return size() == HCI_READ_AFH_CHANNEL_MAP_RET_T_pduSize;
}

/*******************************************************************/


HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU::HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_READ_LOCAL_SUPP_COMMANDS , HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_pduSize )
{	
}

HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU::HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU::HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

UNHANDLED_uint8_t HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU::get_supp_commands(void) const
{
    return get_UNHANDLED_uint8_t(HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_supp_commands) ;
}

bool HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU::size_expected() const
{
    return size() == HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_pduSize;
}

/*******************************************************************/


HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU::HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU()
:   HCICommandCompletePDU ( HCI_READ_LOCAL_SUPP_FEATURES , HCI_READ_LOCAL_SUPP_FEATURES_RET_T_pduSize )
{	
}

HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU::HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU ( const PDU& a )
:   HCICommandCompletePDU ( a )
{	
}

HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU::HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU ( const uint8 * data , uint32 len )
:   HCICommandCompletePDU ( data , len )
{	
}

UNHANDLED_uint8_t HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU::get_lmp_supp_features(void) const
{
    return get_UNHANDLED_uint8_t(HCI_READ_LOCAL_SUPP_FEATURES_RET_T_lmp_supp_features) ;
}

bool HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU::size_expected() const
{
    return size() == HCI_READ_LOCAL_SUPP_FEATURES_RET_T_pduSize;
}

/*******************************************************************/

///////////////////////////////////////////////////////////////////////////////
//  End of Autogenerated from cmd_cmplt.tpl by gencode.pl
///////////////////////////////////////////////////////////////////////////////
