///////////////////////////////////////////////////////////////////////////////
//
//  FILE:     xtral2cap.cpp
//
//  PURPOSE:  define non-autogenerated L2CAP primitive pdus
//
///////////////////////////////////////////////////////////////////////////////

#include "hcipacker/xtral2cap.h"
//   FILE DEFINING A BLUECORE-FRIENDY PROTOCOL
#include "bcflayout.h"

#define OFFSET_uint8Ptr(name) OFFSET_uint16(name)
#define OFFSET_uint16Ptr(name) OFFSET_uint16(name)
#define OFFSET_voidPtr(name) OFFSET_uint16(name)

enum {
	OFFSET_START(L2CA_DATAWRITE_REQ_T)
	OFFSET_uint16(L2CA_DATAWRITE_REQ_T_type),
	OFFSET_uint16(L2CA_DATAWRITE_REQ_T_cid),
        OFFSET_uint16(L2CA_DATAWRITE_REQ_T_req_ctx),
	OFFSET_uint16(L2CA_DATAWRITE_REQ_T_length),
	OFFSET_voidPtr(L2CA_DATAWRITE_REQ_T_data),
        OFFSET_uint16(L2CA_DATAWRITE_REQ_T_packets_ack),
	L2CA_DATAWRITE_REQ_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_DATAREAD_IND_T)
	OFFSET_uint16(L2CA_DATAREAD_IND_T_type),
	OFFSET_uint16(L2CA_DATAREAD_IND_T_phandle),
	OFFSET_uint16(L2CA_DATAREAD_IND_T_cid),
        OFFSET_uint16(L2CA_DATAREAD_IND_T_reg_ctx),
	OFFSET_uint16(L2CA_DATAREAD_IND_T_con_ctx),
	OFFSET_uint16(L2CA_DATAREAD_IND_T_length),
	OFFSET_uint8Ptr(L2CA_DATAREAD_IND_T_data),
	OFFSET_uint16(L2CA_DATAREAD_IND_T_result),
        OFFSET_uint16(L2CA_DATAREAD_IND_T_packets),
	L2CA_DATAREAD_IND_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_GETINFO_CFM_T)
	OFFSET_uint16(L2CA_GETINFO_CFM_T_type),
	OFFSET_uint16(L2CA_GETINFO_CFM_T_phandle),
	OFFSET_BluetoothDeviceAddress(L2CA_GETINFO_CFM_T_bd_addr),
        OFFSET_uint16(L2CA_GETINFO_CFM_T_info_type),
	OFFSET_uint16(L2CA_GETINFO_CFM_T_length),
	OFFSET_uint8Ptr(L2CA_GETINFO_CFM_T_info_data),
	OFFSET_uint16(L2CA_GETINFO_CFM_T_result),
        OFFSET_uint16(L2CA_GETINFO_CFM_T_req_ctx),
        OFFSET_uint16(L2CA_GETINFO_CFM_T_flags),
	L2CA_GETINFO_CFM_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_CONFIG_REQ_T)
	OFFSET_uint16(L2CA_CONFIG_REQ_T_type),
	OFFSET_uint16(L2CA_CONFIG_REQ_T_cid),
        OFFSET_uint16(L2CA_CONFIG_REQ_T_options),
        OFFSET_uint16(L2CA_CONFIG_REQ_T_hints),
	OFFSET_uint16(L2CA_CONFIG_REQ_T_unknown_length),
	OFFSET_uint8Ptr(L2CA_CONFIG_REQ_T_unknown),
	OFFSET_uint16(L2CA_CONFIG_REQ_T_mtu),
	OFFSET_uint16(L2CA_CONFIG_REQ_T_flush_to),
	OFFSET_uint8Ptr(L2CA_CONFIG_REQ_T_qos),
	OFFSET_uint8Ptr(L2CA_CONFIG_REQ_T_flow),
        OFFSET_uint16(L2CA_CONFIG_REQ_T_fcs),
        OFFSET_uint8Ptr(L2CA_CONFIG_REQ_T_flowspec),
        OFFSET_uint16(L2CA_CONFIG_REQ_T_ext_window),
	L2CA_CONFIG_REQ_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_CONFIG_CFM_T)
	OFFSET_uint16(L2CA_CONFIG_CFM_T_type),
	OFFSET_uint16(L2CA_CONFIG_CFM_T_phandle),
	OFFSET_uint16(L2CA_CONFIG_CFM_T_cid),
        OFFSET_uint16(L2CA_CONFIG_CFM_T_reg_ctx),
	OFFSET_uint16(L2CA_CONFIG_CFM_T_con_ctx),
	OFFSET_uint16(L2CA_CONFIG_CFM_T_result),
        OFFSET_uint16(L2CA_CONFIG_CFM_T_options),
        OFFSET_uint16(L2CA_CONFIG_CFM_T_hints),
	OFFSET_uint16(L2CA_CONFIG_CFM_T_unknown_length),
	OFFSET_uint8Ptr(L2CA_CONFIG_CFM_T_unknown),
	OFFSET_uint16(L2CA_CONFIG_CFM_T_mtu),
	OFFSET_uint16(L2CA_CONFIG_CFM_T_flush_to),
	OFFSET_uint8Ptr(L2CA_CONFIG_CFM_T_qos),
	OFFSET_uint8Ptr(L2CA_CONFIG_CFM_T_flow),
        OFFSET_uint16(L2CA_CONFIG_CFM_T_fcs),
        OFFSET_uint8Ptr(L2CA_CONFIG_CFM_T_flowspec),
        OFFSET_uint16(L2CA_CONFIG_CFM_T_ext_window),
	L2CA_CONFIG_CFM_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_CONFIG_IND_T)
	OFFSET_uint16(L2CA_CONFIG_IND_T_type),
	OFFSET_uint16(L2CA_CONFIG_IND_T_phandle),
	OFFSET_uint16(L2CA_CONFIG_IND_T_cid),
        OFFSET_uint16(L2CA_CONFIG_IND_T_reg_ctx),
	OFFSET_uint16(L2CA_CONFIG_IND_T_con_ctx),
	OFFSET_uint16(L2CA_CONFIG_IND_T_identifier),
        OFFSET_uint16(L2CA_CONFIG_IND_T_options),
        OFFSET_uint16(L2CA_CONFIG_IND_T_hints),
	OFFSET_uint16(L2CA_CONFIG_IND_T_unknown_length),
	OFFSET_uint8Ptr(L2CA_CONFIG_IND_T_unknown),
	OFFSET_uint16(L2CA_CONFIG_IND_T_mtu),
	OFFSET_uint16(L2CA_CONFIG_IND_T_flush_to),
	OFFSET_uint8Ptr(L2CA_CONFIG_IND_T_qos),
	OFFSET_uint8Ptr(L2CA_CONFIG_IND_T_flow),
        OFFSET_uint16(L2CA_CONFIG_IND_T_fcs),
        OFFSET_uint8Ptr(L2CA_CONFIG_IND_T_flowspec),
        OFFSET_uint16(L2CA_CONFIG_IND_T_ext_window),
	L2CA_CONFIG_IND_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_CONFIG_RSP_T)
	OFFSET_uint16(L2CA_CONFIG_RSP_T_type),
	OFFSET_uint16(L2CA_CONFIG_RSP_T_cid),
	OFFSET_uint16(L2CA_CONFIG_RSP_T_identifier),
	OFFSET_uint16(L2CA_CONFIG_RSP_T_response),
        OFFSET_uint16(L2CA_CONFIG_RSP_T_options),
        OFFSET_uint16(L2CA_CONFIG_RSP_T_hints),
	OFFSET_uint16(L2CA_CONFIG_RSP_T_unknown_length),
	OFFSET_uint8Ptr(L2CA_CONFIG_RSP_T_unknown),
	OFFSET_uint16(L2CA_CONFIG_RSP_T_mtu),
	OFFSET_uint16(L2CA_CONFIG_RSP_T_flush_to),
	OFFSET_uint8Ptr(L2CA_CONFIG_RSP_T_qos),
	OFFSET_uint8Ptr(L2CA_CONFIG_RSP_T_flow),
        OFFSET_uint16(L2CA_CONFIG_RSP_T_fcs),
        OFFSET_uint8Ptr(L2CA_CONFIG_RSP_T_flowspec),
        OFFSET_uint16(L2CA_CONFIG_RSP_T_ext_window),
	L2CA_CONFIG_RSP_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_REGISTER_FIXED_CID_REQ_T)
	OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_type),
	OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_phandle),
	OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_fixed_cid),
        OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_reg_ctx),
        OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_options),
        OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_hints),
	OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_unknown_length),
	OFFSET_uint8Ptr(L2CA_REGISTER_FIXED_CID_REQ_T_unknown),
	OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_mtu),
	OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_flush_to),
	OFFSET_uint8Ptr(L2CA_REGISTER_FIXED_CID_REQ_T_qos),
	OFFSET_uint8Ptr(L2CA_REGISTER_FIXED_CID_REQ_T_flow),
        OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_fcs),
        OFFSET_uint8Ptr(L2CA_REGISTER_FIXED_CID_REQ_T_flowspec),
        OFFSET_uint16(L2CA_REGISTER_FIXED_CID_REQ_T_ext_window),
        OFFSET_STREAM_BUFFER_SIZES_T(L2CA_REGISTER_FIXED_CID_REQ_T_streams),
	L2CA_REGISTER_FIXED_CID_REQ_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_PING_REQ_T)
	OFFSET_uint16(L2CA_PING_REQ_T_type),
	OFFSET_uint16(L2CA_PING_REQ_T_phandle),
	OFFSET_BluetoothDeviceAddress(L2CA_PING_REQ_T_bd_addr),
	OFFSET_uint16(L2CA_PING_REQ_T_length),
	OFFSET_uint8Ptr(L2CA_PING_REQ_T_data),
        OFFSET_uint16(L2CA_PING_REQ_T_req_ctx),
        OFFSET_uint16(L2CA_PING_REQ_T_flags),
	L2CA_PING_REQ_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_PING_CFM_T)
	OFFSET_uint16(L2CA_PING_CFM_T_type),
	OFFSET_uint16(L2CA_PING_CFM_T_phandle),
	OFFSET_BluetoothDeviceAddress(L2CA_PING_CFM_T_bd_addr),
	OFFSET_uint16(L2CA_PING_CFM_T_length),
	OFFSET_uint8Ptr(L2CA_PING_CFM_T_data),
	OFFSET_uint16(L2CA_PING_CFM_T_result),
        OFFSET_uint16(L2CA_PING_CFM_T_req_ctx),
        OFFSET_uint16(L2CA_PING_CFM_T_flags),
	L2CA_PING_CFM_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_MULTICAST_REQ_T)
	OFFSET_uint16(L2CA_MULTICAST_REQ_T_type),
	OFFSET_uint16_array(L2CA_MULTICAST_REQ_T_cids,L2CA_MAX_MULTICAST_CIDS),
   	OFFSET_uint16(L2CA_MULTICAST_REQ_T_length),
	OFFSET_voidPtr(L2CA_MULTICAST_REQ_T_data),
	L2CA_MULTICAST_REQ_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_AUTO_CONNECT_REQ_T)
	OFFSET_uint16(L2CA_AUTO_CONNECT_REQ_T_type),
	OFFSET_uint16(L2CA_AUTO_CONNECT_REQ_T_cid),
	OFFSET_uint16(L2CA_AUTO_CONNECT_REQ_T_psm_local),
	OFFSET_BluetoothDeviceAddress(L2CA_AUTO_CONNECT_REQ_T_bd_addr),
        OFFSET_uint16(L2CA_AUTO_CONNECT_REQ_T_psm_remote),
	OFFSET_uint16(L2CA_AUTO_CONNECT_REQ_T_con_ctx),
	OFFSET_uint16(L2CA_AUTO_CONNECT_REQ_T_remote_control),
	OFFSET_uint16(L2CA_AUTO_CONNECT_REQ_T_local_control),
	OFFSET_uint16(L2CA_AUTO_CONNECT_REQ_T_conftab_length),
        OFFSET_uint16Ptr(L2CA_AUTO_CONNECT_REQ_T_conftab),
	L2CA_AUTO_CONNECT_REQ_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_AUTO_CONNECT_RSP_T)
	OFFSET_uint16(L2CA_AUTO_CONNECT_RSP_T_type),
        OFFSET_uint16(L2CA_AUTO_CONNECT_RSP_T_cid),
	OFFSET_uint16(L2CA_AUTO_CONNECT_RSP_T_identifier),
	OFFSET_uint16(L2CA_AUTO_CONNECT_RSP_T_response),
	OFFSET_uint16(L2CA_AUTO_CONNECT_RSP_T_con_ctx),
	OFFSET_uint16(L2CA_AUTO_CONNECT_RSP_T_conftab_length),
        OFFSET_uint16Ptr(L2CA_AUTO_CONNECT_RSP_T_conftab),
	L2CA_AUTO_CONNECT_RSP_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_AUTO_CONNECT_CFM_T)
	OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_type),
	OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_phandle),
        OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_cid),
        OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_reg_ctx),
	OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_con_ctx),
	OFFSET_BluetoothDeviceAddress(L2CA_AUTO_CONNECT_CFM_T_bd_addr),
	OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_psm_local),
	OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_result),
        OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_options),
        OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_hints),
	OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_unknown_length),
	OFFSET_uint8Ptr(L2CA_AUTO_CONNECT_CFM_T_unknown),
	OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_mtu),
	OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_flush_to),
	OFFSET_uint8Ptr(L2CA_AUTO_CONNECT_CFM_T_qos),
	OFFSET_uint8Ptr(L2CA_AUTO_CONNECT_CFM_T_flow),
        OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_fcs),
        OFFSET_uint8Ptr(L2CA_AUTO_CONNECT_CFM_T_flowspec),
        OFFSET_uint16(L2CA_AUTO_CONNECT_CFM_T_ext_window),
        OFFSET_uint32(L2CA_AUTO_CONNECT_CFM_T_ext_feats),
	L2CA_AUTO_CONNECT_CFM_T_pduSize
} ;

enum {
	OFFSET_START(L2CA_RAW_DATA_REQ_T)
	OFFSET_uint16(L2CA_RAW_DATA_REQ_T_type),
	OFFSET_uint16(L2CA_RAW_DATA_REQ_T_cid),
        OFFSET_uint16(L2CA_RAW_DATA_REQ_T_raw_length),
	OFFSET_uint16(L2CA_RAW_DATA_REQ_T_flush_to),
	OFFSET_uint16(L2CA_RAW_DATA_REQ_T_length),
	OFFSET_voidPtr(L2CA_RAW_DATA_REQ_T_data),
	L2CA_RAW_DATA_REQ_T_pduSize
} ;

enum {
        OFFSET_START(L2CA_RAW_DATA_IND_T)
        OFFSET_uint16(L2CA_RAW_DATA_IND_T_type),
        OFFSET_uint16(L2CA_RAW_DATA_IND_T_phandle),
        OFFSET_uint16(L2CA_RAW_DATA_IND_T_cid),
        OFFSET_BluetoothDeviceAddressWithType(L2CA_RAW_DATA_IND_T_addrt),
        OFFSET_l2ca_data_result_t(L2CA_RAW_DATA_IND_T_result),
        OFFSET_uint8(L2CA_RAW_DATA_IND_T_packet_type),
        OFFSET_uint16(L2CA_RAW_DATA_IND_T_length),
        OFFSET_uint8Ptr(L2CA_RAW_DATA_IND_T_data),
        L2CA_RAW_DATA_IND_T_pduSize
} ;

#include "hcipacker/gen_l2cap.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_DATAREAD_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_DATAREAD_IND_T_PDU::L2CA_DATAREAD_IND_T_PDU()
: L2CAP_PDU ( L2CA_DATAREAD_IND , L2CA_DATAREAD_IND_T_pduSize )
{
}

L2CA_DATAREAD_IND_T_PDU::L2CA_DATAREAD_IND_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_DATAREAD_IND_T_PDU::L2CA_DATAREAD_IND_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_DATAREAD_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_DATAREAD_IND_T_phandle );
}

void L2CA_DATAREAD_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_DATAREAD_IND_T_phandle , value );
}

uint16 L2CA_DATAREAD_IND_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_DATAREAD_IND_T_cid );
}

void L2CA_DATAREAD_IND_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_DATAREAD_IND_T_cid , value );
}

uint16 L2CA_DATAREAD_IND_T_PDU::get_reg_ctx() const
{
    return get_uint16 ( L2CA_DATAREAD_IND_T_reg_ctx );
}

void L2CA_DATAREAD_IND_T_PDU::set_reg_ctx( uint16 value )
{
    set_uint16 ( L2CA_DATAREAD_IND_T_reg_ctx , value );
}

uint16 L2CA_DATAREAD_IND_T_PDU::get_con_ctx() const
{
    return get_uint16 ( L2CA_DATAREAD_IND_T_con_ctx );
}

void L2CA_DATAREAD_IND_T_PDU::set_con_ctx( uint16 value )
{
    set_uint16 ( L2CA_DATAREAD_IND_T_con_ctx , value );
}

uint16 L2CA_DATAREAD_IND_T_PDU::get_length() const
{
    return get_uint16 ( L2CA_DATAREAD_IND_T_length );
}

void L2CA_DATAREAD_IND_T_PDU::get_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , L2CA_DATAREAD_IND_T_pduSize , get_length () );
}

const uint8 * L2CA_DATAREAD_IND_T_PDU::get_dataPtr() const
{
    return PDU::get_uint8ArrayPtr ( L2CA_DATAREAD_IND_T_pduSize );
}

void L2CA_DATAREAD_IND_T_PDU::set_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( L2CA_DATAREAD_IND_T_length ,
                         L2CA_DATAREAD_IND_T_pduSize ,
                         toCopy , length );
}

uint16 L2CA_DATAREAD_IND_T_PDU::get_result() const
{
    return get_uint16 ( L2CA_DATAREAD_IND_T_result );
}

void L2CA_DATAREAD_IND_T_PDU::set_result( uint16 value )
{
    set_uint16 ( L2CA_DATAREAD_IND_T_result , value );
}

uint16 L2CA_DATAREAD_IND_T_PDU::get_packets() const
{
    return get_uint16 ( L2CA_DATAREAD_IND_T_packets );
}

void L2CA_DATAREAD_IND_T_PDU::set_packets( uint16 value )
{
    set_uint16 ( L2CA_DATAREAD_IND_T_packets , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_CONFIG_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_CONFIG_REQ_T_PDU::L2CA_CONFIG_REQ_T_PDU()
: L2CAP_PDU ( L2CA_CONFIG_REQ , L2CA_CONFIG_REQ_T_pduSize )
{
    unknown_data = 0;
    qos_data = 0;
    flow_data = 0;
    flowspec_data = 0;
    next_data = L2CA_CONFIG_REQ_T_pduSize;
}

L2CA_CONFIG_REQ_T_PDU::L2CA_CONFIG_REQ_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
    init();
}

L2CA_CONFIG_REQ_T_PDU::L2CA_CONFIG_REQ_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
    init();
}

void L2CA_CONFIG_REQ_T_PDU::init( void )
{ 
    next_data = L2CA_CONFIG_REQ_T_pduSize;

    if(get_unknown_length() > 0)
    {
        unknown_data = next_data;
        next_data += get_unknown_length();
    }
    else
    {
        unknown_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_QOS)
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
    }
    else
    {
        qos_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOW)
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
    }
    else
    {
        flow_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOWSPEC)
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
    }
    else
    {
        flowspec_data = 0;
    }
}

uint16 L2CA_CONFIG_REQ_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_CONFIG_REQ_T_cid );
}


void L2CA_CONFIG_REQ_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_REQ_T_cid , value );
}

uint16 L2CA_CONFIG_REQ_T_PDU::get_options() const
{
    return get_uint16 ( L2CA_CONFIG_REQ_T_options );
}

void L2CA_CONFIG_REQ_T_PDU::set_options( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_REQ_T_options , value );
}

uint16 L2CA_CONFIG_REQ_T_PDU::get_hints() const
{
    return get_uint16 ( L2CA_CONFIG_REQ_T_hints );
}

void L2CA_CONFIG_REQ_T_PDU::set_hints( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_REQ_T_hints , value );
}

uint16 L2CA_CONFIG_REQ_T_PDU::get_unknown_length() const
{
    return get_uint16 ( L2CA_CONFIG_REQ_T_unknown_length );
}

void L2CA_CONFIG_REQ_T_PDU::get_unknown( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill ,
                          unknown_data ,
                          get_unknown_length () );
}

const uint8 * L2CA_CONFIG_REQ_T_PDU::get_unknownPtr() const
{
    return (unknown_data
            ? PDU::get_uint8ArrayPtr ( unknown_data )
            : NULL);
}

void L2CA_CONFIG_REQ_T_PDU::set_unknown( const uint8 * toCopy , uint16 length )
{
    if((unknown_data == 0) && (length > 0))
    {
        unknown_data = next_data;
        set_final_uint8Ptr( L2CA_CONFIG_REQ_T_unknown_length,
                            unknown_data,
                            toCopy,
                            length);
        next_data += length;
    }
}

uint16 L2CA_CONFIG_REQ_T_PDU::get_mtu() const
{
    return get_uint16 ( L2CA_CONFIG_REQ_T_mtu );
}

void L2CA_CONFIG_REQ_T_PDU::set_mtu( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_REQ_T_mtu , value );
}

uint16 L2CA_CONFIG_REQ_T_PDU::get_flush_to() const
{
    return get_uint16 ( L2CA_CONFIG_REQ_T_flush_to );
}

void L2CA_CONFIG_REQ_T_PDU::set_flush_to( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_REQ_T_flush_to , value );
}

L2caQos L2CA_CONFIG_REQ_T_PDU::get_qos( void ) const
{
    return L2caQos( (qos_data > 0
                     ? get_uint8ArrayPtr(qos_data)
                     : NULL ) );
}

void L2CA_CONFIG_REQ_T_PDU::set_qos( const L2caQos& qos )
{
    if((qos.get_length() > 0) && (qos_data == 0))
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
        set_final_uint8Ptr( qos_data,
                            qos_data,
                            qos.get_data(),
                            qos.get_length() );
    }
}

L2caFlow L2CA_CONFIG_REQ_T_PDU::get_flow( void ) const
{
    return L2caFlow( (flow_data > 0
                      ? get_uint8ArrayPtr(flow_data)
                      : NULL ) );
}

void L2CA_CONFIG_REQ_T_PDU::set_flow( const L2caFlow &flow )
{
    if((flow.get_length() > 0) && (flow_data == 0))
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
        set_final_uint8Ptr( flow_data,
                            flow_data,
                            flow.get_data(),
                            flow.get_length() );
    }
}

uint16_t L2CA_CONFIG_REQ_T_PDU::get_fcs() const
{
    return get_uint16 ( L2CA_CONFIG_REQ_T_fcs );
}

void L2CA_CONFIG_REQ_T_PDU::set_fcs(uint16_t value)
{
    set_uint16 ( L2CA_CONFIG_REQ_T_fcs, value );
}

L2caFlowSpec L2CA_CONFIG_REQ_T_PDU::get_flowspec( void ) const
{
    return L2caFlowSpec( (flowspec_data > 0
                          ? get_uint8ArrayPtr(flowspec_data)
                          : NULL ) );
}

void L2CA_CONFIG_REQ_T_PDU::set_flowspec( const L2caFlowSpec &flowspec )
{
    if((flowspec.get_length() > 0) && (flowspec_data == 0))
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
        set_final_uint8Ptr( flowspec_data,
                            flowspec_data,
                            flowspec.get_data(),
                            flowspec.get_length() );
    }
}

uint16 L2CA_CONFIG_REQ_T_PDU::get_ext_window() const
{
    return get_uint16 ( L2CA_CONFIG_REQ_T_ext_window );
}

void L2CA_CONFIG_REQ_T_PDU::set_ext_window( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_REQ_T_ext_window , value );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_CONFIG_RSP_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_CONFIG_RSP_T_PDU::L2CA_CONFIG_RSP_T_PDU()
: L2CAP_PDU ( L2CA_CONFIG_RSP , L2CA_CONFIG_RSP_T_pduSize )
{
    unknown_data = 0;
    qos_data = 0;
    flow_data = 0;
    flowspec_data = 0;
    next_data = L2CA_CONFIG_RSP_T_pduSize;
}

L2CA_CONFIG_RSP_T_PDU::L2CA_CONFIG_RSP_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
    init();
}

L2CA_CONFIG_RSP_T_PDU::L2CA_CONFIG_RSP_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
    init();
}

void L2CA_CONFIG_RSP_T_PDU::init( void )
{
    next_data = L2CA_CONFIG_RSP_T_pduSize;

    if(get_unknown_length() > 0)
    {
        unknown_data = next_data;
        next_data += get_unknown_length();
    }
    else
    {
        unknown_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_QOS)
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
    }
    else
    {
        qos_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOW)
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
    }
    else
    {
        flow_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOWSPEC)
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
    }
    else
    {
        flowspec_data = 0;
    }
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_cid );
}


void L2CA_CONFIG_RSP_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_RSP_T_cid , value );
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_identifier() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_identifier );
}

void L2CA_CONFIG_RSP_T_PDU::set_identifier( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_RSP_T_identifier , value );
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_response() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_response );
}

void L2CA_CONFIG_RSP_T_PDU::set_response( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_RSP_T_response , value );
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_options() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_options );
}

void L2CA_CONFIG_RSP_T_PDU::set_options( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_RSP_T_options , value );
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_hints() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_hints );
}

void L2CA_CONFIG_RSP_T_PDU::set_hints( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_RSP_T_hints , value );
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_unknown_length() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_unknown_length );
}

void L2CA_CONFIG_RSP_T_PDU::get_unknown( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill ,
                          unknown_data ,
                          get_unknown_length () );
}

const uint8 * L2CA_CONFIG_RSP_T_PDU::get_unknownPtr() const
{
    return (unknown_data
            ? PDU::get_uint8ArrayPtr ( unknown_data )
            : NULL);
}

void L2CA_CONFIG_RSP_T_PDU::set_unknown( const uint8 * toCopy , uint16 length )
{
    if((unknown_data == 0) && (length > 0))
    {
        unknown_data = next_data;
        set_final_uint8Ptr( L2CA_CONFIG_RSP_T_unknown_length,
                            unknown_data,
                            toCopy,
                            length);
        next_data += length;
    }
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_mtu() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_mtu );
}

void L2CA_CONFIG_RSP_T_PDU::set_mtu( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_RSP_T_mtu , value );
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_flush_to() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_flush_to );
}

void L2CA_CONFIG_RSP_T_PDU::set_flush_to( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_RSP_T_flush_to , value );
}

L2caQos L2CA_CONFIG_RSP_T_PDU::get_qos( void ) const
{
    return L2caQos( (qos_data > 0
                     ? get_uint8ArrayPtr(qos_data)
                     : NULL ) );
}

void L2CA_CONFIG_RSP_T_PDU::set_qos( const L2caQos &qos )
{
    if((qos.get_length() > 0) && (qos_data == 0))
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
        set_final_uint8Ptr( qos_data,
                            qos_data,
                            qos.get_data(),
                            qos.get_length() );
    }
}

L2caFlow L2CA_CONFIG_RSP_T_PDU::get_flow( void ) const
{
    return L2caFlow( (flow_data > 0
                      ? get_uint8ArrayPtr(flow_data)
                      : NULL ) );
}

void L2CA_CONFIG_RSP_T_PDU::set_flow( const L2caFlow &flow )
{
    if((flow.get_length() > 0) && (flow_data == 0))
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
        set_final_uint8Ptr( flow_data,
                            flow_data,
                            flow.get_data(),
                            flow.get_length() );
    }
}

uint16_t L2CA_CONFIG_RSP_T_PDU::get_fcs() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_fcs );
}

void L2CA_CONFIG_RSP_T_PDU::set_fcs(uint16_t value)
{
    set_uint16 ( L2CA_CONFIG_RSP_T_fcs, value );
}

L2caFlowSpec L2CA_CONFIG_RSP_T_PDU::get_flowspec( void ) const
{
    return L2caFlowSpec( (flowspec_data > 0
                          ? get_uint8ArrayPtr(flowspec_data)
                          : NULL ) );
}

void L2CA_CONFIG_RSP_T_PDU::set_flowspec( const L2caFlowSpec &flowspec )
{
    if((flowspec.get_length() > 0) && (flowspec_data == 0))
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
        set_final_uint8Ptr( flowspec_data,
                            flowspec_data,
                            flowspec.get_data(),
                            flowspec.get_length() );
    }
}

uint16 L2CA_CONFIG_RSP_T_PDU::get_ext_window() const
{
    return get_uint16 ( L2CA_CONFIG_RSP_T_ext_window );
}

void L2CA_CONFIG_RSP_T_PDU::set_ext_window( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_RSP_T_ext_window , value );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_CONFIG_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_CONFIG_IND_T_PDU::L2CA_CONFIG_IND_T_PDU()
: L2CAP_PDU ( L2CA_CONFIG_IND , L2CA_CONFIG_IND_T_pduSize )
{
    unknown_data = 0;
    qos_data = 0;
    flow_data = 0;
    flowspec_data = 0;
    next_data = L2CA_CONFIG_IND_T_pduSize;
}

L2CA_CONFIG_IND_T_PDU::L2CA_CONFIG_IND_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
    init();
}

L2CA_CONFIG_IND_T_PDU::L2CA_CONFIG_IND_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
    init();
}

void L2CA_CONFIG_IND_T_PDU::init( void )
{
    next_data = L2CA_CONFIG_IND_T_pduSize;

    if(get_unknown_length() > 0)
    {
        unknown_data = next_data;
        next_data += get_unknown_length();
    }
    else
    {
        unknown_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_QOS)
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
    }
    else
    {
        qos_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOW)
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
    }
    else
    {
        flow_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOWSPEC)
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
    }
    else
    {
        flowspec_data = 0;
    }
}

uint16 L2CA_CONFIG_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_phandle );
}

void L2CA_CONFIG_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_phandle , value );
}

uint16 L2CA_CONFIG_IND_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_cid );
}

void L2CA_CONFIG_IND_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_cid , value );
}

uint16 L2CA_CONFIG_IND_T_PDU::get_reg_ctx() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_reg_ctx );
}

void L2CA_CONFIG_IND_T_PDU::set_reg_ctx( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_reg_ctx , value );
}

uint16 L2CA_CONFIG_IND_T_PDU::get_con_ctx() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_con_ctx );
}

void L2CA_CONFIG_IND_T_PDU::set_con_ctx( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_con_ctx , value );
}

uint16 L2CA_CONFIG_IND_T_PDU::get_identifier() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_identifier );
}

void L2CA_CONFIG_IND_T_PDU::set_identifier( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_identifier , value );
}

uint16 L2CA_CONFIG_IND_T_PDU::get_options() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_options );
}

void L2CA_CONFIG_IND_T_PDU::set_options( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_options , value );
}

uint16 L2CA_CONFIG_IND_T_PDU::get_hints() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_hints );
}

void L2CA_CONFIG_IND_T_PDU::set_hints( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_hints , value );
}

uint16 L2CA_CONFIG_IND_T_PDU::get_unknown_length() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_unknown_length );
}

void L2CA_CONFIG_IND_T_PDU::get_unknown( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill ,
                          unknown_data ,
                          get_unknown_length () );
}

const uint8 * L2CA_CONFIG_IND_T_PDU::get_unknownPtr() const
{
    return (unknown_data
            ? PDU::get_uint8ArrayPtr ( unknown_data )
            : NULL);
}

void L2CA_CONFIG_IND_T_PDU::set_unknown( const uint8 * toCopy , uint16 length )
{
    if((unknown_data == 0) && (length > 0))
    {
        unknown_data = next_data;
        set_final_uint8Ptr( L2CA_CONFIG_IND_T_unknown_length,
                            unknown_data,
                            toCopy,
                            length);
        next_data += length;
    }
}

uint16 L2CA_CONFIG_IND_T_PDU::get_mtu() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_mtu );
}

void L2CA_CONFIG_IND_T_PDU::set_mtu( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_mtu , value );
}

uint16 L2CA_CONFIG_IND_T_PDU::get_flush_to() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_flush_to );
}

void L2CA_CONFIG_IND_T_PDU::set_flush_to( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_flush_to , value );
}

L2caQos L2CA_CONFIG_IND_T_PDU::get_qos( void ) const
{
    return L2caQos( (qos_data > 0
                     ? get_uint8ArrayPtr(qos_data)
                     : NULL ) );
}

void L2CA_CONFIG_IND_T_PDU::set_qos( const L2caQos &qos )
{
    if((qos.get_length() > 0) && (qos_data == 0))
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
        set_final_uint8Ptr( qos_data,
                            qos_data,
                            qos.get_data(),
                            qos.get_length() );
    }
}

L2caFlow L2CA_CONFIG_IND_T_PDU::get_flow( void ) const
{
    return L2caFlow( (flow_data > 0
                      ? get_uint8ArrayPtr(flow_data)
                      : NULL ) );
}

void L2CA_CONFIG_IND_T_PDU::set_flow( const L2caFlow &flow )
{
    if((flow.get_length() > 0) && (flow_data == 0))
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
        set_final_uint8Ptr( flow_data,
                            flow_data,
                            flow.get_data(),
                            flow.get_length() );
    }
}

uint16_t L2CA_CONFIG_IND_T_PDU::get_fcs() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_fcs );
}

void L2CA_CONFIG_IND_T_PDU::set_fcs(uint16_t value)
{
    set_uint16 ( L2CA_CONFIG_IND_T_fcs, value );
}

L2caFlowSpec L2CA_CONFIG_IND_T_PDU::get_flowspec( void ) const
{
    return L2caFlowSpec( (flowspec_data > 0
                          ? get_uint8ArrayPtr(flowspec_data)
                          : NULL ) );
}

void L2CA_CONFIG_IND_T_PDU::set_flowspec( const L2caFlowSpec &flowspec )
{
    if((flowspec.get_length() > 0) && (flowspec_data == 0))
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
        set_final_uint8Ptr( flowspec_data,
                            flowspec_data,
                            flowspec.get_data(),
                            flowspec.get_length() );
    }
}

uint16 L2CA_CONFIG_IND_T_PDU::get_ext_window() const
{
    return get_uint16 ( L2CA_CONFIG_IND_T_ext_window );
}

void L2CA_CONFIG_IND_T_PDU::set_ext_window( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_IND_T_ext_window , value );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_CONFIG_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_CONFIG_CFM_T_PDU::L2CA_CONFIG_CFM_T_PDU()
: L2CAP_PDU ( L2CA_CONFIG_CFM , L2CA_CONFIG_CFM_T_pduSize )
{
    unknown_data = 0;
    qos_data = 0;
    flow_data = 0;
    flowspec_data = 0;
    next_data = L2CA_CONFIG_CFM_T_pduSize;
}

L2CA_CONFIG_CFM_T_PDU::L2CA_CONFIG_CFM_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
    init();
}

L2CA_CONFIG_CFM_T_PDU::L2CA_CONFIG_CFM_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
    init();
}

void L2CA_CONFIG_CFM_T_PDU::init( void )
{
    next_data = L2CA_CONFIG_CFM_T_pduSize;

    if(get_unknown_length() > 0)
    {
        unknown_data = next_data;
        next_data += get_unknown_length();
    }
    else
    {
        unknown_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_QOS)
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
    }
    else
    {
        qos_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOW)
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
    }
    else
    {
        flow_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOWSPEC)
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
    }
    else
    {
        flowspec_data = 0;
    }
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_phandle );
}

void L2CA_CONFIG_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_phandle , value );
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_cid );
}

void L2CA_CONFIG_CFM_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_cid , value );
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_reg_ctx() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_reg_ctx );
}

void L2CA_CONFIG_CFM_T_PDU::set_reg_ctx( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_reg_ctx , value );
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_con_ctx() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_con_ctx );
}

void L2CA_CONFIG_CFM_T_PDU::set_con_ctx( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_con_ctx , value );
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_result() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_result );
}

void L2CA_CONFIG_CFM_T_PDU::set_result( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_result , value );
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_options() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_options );
}

void L2CA_CONFIG_CFM_T_PDU::set_options( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_options , value );
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_hints() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_hints );
}

void L2CA_CONFIG_CFM_T_PDU::set_hints( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_hints , value );
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_unknown_length() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_unknown_length );
}

void L2CA_CONFIG_CFM_T_PDU::get_unknown( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill ,
                          unknown_data ,
                          get_unknown_length () );
}

const uint8 * L2CA_CONFIG_CFM_T_PDU::get_unknownPtr() const
{
    return (unknown_data
            ? PDU::get_uint8ArrayPtr ( unknown_data )
            : NULL);
}

void L2CA_CONFIG_CFM_T_PDU::set_unknown( const uint8 * toCopy , uint16 length )
{
    if((unknown_data == 0) && (length > 0))
    {
        unknown_data = next_data;
        set_final_uint8Ptr( L2CA_CONFIG_CFM_T_unknown_length,
                            unknown_data,
                            toCopy,
                            length);
        next_data += length;
    }
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_mtu() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_mtu );
}

void L2CA_CONFIG_CFM_T_PDU::set_mtu( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_mtu , value );
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_flush_to() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_flush_to );
}

void L2CA_CONFIG_CFM_T_PDU::set_flush_to( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_flush_to , value );
}

L2caQos L2CA_CONFIG_CFM_T_PDU::get_qos( void ) const
{
    return L2caQos( (qos_data > 0
                     ? get_uint8ArrayPtr(qos_data)
                     : NULL ) );
}

void L2CA_CONFIG_CFM_T_PDU::set_qos( const L2caQos &qos )
{
    if((qos.get_length() > 0) && (qos_data == 0))
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
        set_final_uint8Ptr( qos_data,
                            qos_data,
                            qos.get_data(),
                            qos.get_length() );
    }
}

L2caFlow L2CA_CONFIG_CFM_T_PDU::get_flow( void ) const
{
    return L2caFlow( (flow_data > 0
                      ? get_uint8ArrayPtr(flow_data)
                      : NULL ) );
}

void L2CA_CONFIG_CFM_T_PDU::set_flow( const L2caFlow &flow )
{
    if((flow.get_length() > 0) && (flow_data == 0))
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
        set_final_uint8Ptr( flow_data,
                            flow_data,
                            flow.get_data(),
                            flow.get_length() );
    }
}

uint16_t L2CA_CONFIG_CFM_T_PDU::get_fcs() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_fcs );
}

void L2CA_CONFIG_CFM_T_PDU::set_fcs(uint16_t value)
{
    set_uint16 ( L2CA_CONFIG_CFM_T_fcs, value );
}

L2caFlowSpec L2CA_CONFIG_CFM_T_PDU::get_flowspec( void ) const
{
    return L2caFlowSpec( (flowspec_data > 0
                          ? get_uint8ArrayPtr(flowspec_data)
                          : NULL ) );
}

void L2CA_CONFIG_CFM_T_PDU::set_flowspec( const L2caFlowSpec &flowspec )
{
    if((flowspec.get_length() > 0) && (flowspec_data == 0))
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
        set_final_uint8Ptr( flowspec_data,
                            flowspec_data,
                            flowspec.get_data(),
                            flowspec.get_length() );
    }
}

uint16 L2CA_CONFIG_CFM_T_PDU::get_ext_window() const
{
    return get_uint16 ( L2CA_CONFIG_CFM_T_ext_window );
}

void L2CA_CONFIG_CFM_T_PDU::set_ext_window( uint16 value )
{
    set_uint16 ( L2CA_CONFIG_CFM_T_ext_window , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_GETINFO_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_GETINFO_CFM_T_PDU::L2CA_GETINFO_CFM_T_PDU()
: L2CAP_PDU ( L2CA_GETINFO_CFM , L2CA_GETINFO_CFM_T_pduSize )
{
}

L2CA_GETINFO_CFM_T_PDU::L2CA_GETINFO_CFM_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_GETINFO_CFM_T_PDU::L2CA_GETINFO_CFM_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_GETINFO_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_GETINFO_CFM_T_phandle );
}

void L2CA_GETINFO_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_GETINFO_CFM_T_phandle , value );
}

BluetoothDeviceAddress L2CA_GETINFO_CFM_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( L2CA_GETINFO_CFM_T_bd_addr );
}

void L2CA_GETINFO_CFM_T_PDU::set_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( L2CA_GETINFO_CFM_T_bd_addr , value );
}

uint16 L2CA_GETINFO_CFM_T_PDU::get_info_type() const
{
    return get_uint16 ( L2CA_GETINFO_CFM_T_info_type );
}

void L2CA_GETINFO_CFM_T_PDU::set_info_type( uint16 value )
{
    set_uint16 ( L2CA_GETINFO_CFM_T_info_type , value );
}

uint16 L2CA_GETINFO_CFM_T_PDU::get_length() const
{
    return get_uint16 ( L2CA_GETINFO_CFM_T_length );
}

void L2CA_GETINFO_CFM_T_PDU::set_length( uint16 value )
{
    set_uint16 ( L2CA_GETINFO_CFM_T_length , value );
}

void L2CA_GETINFO_CFM_T_PDU::get_info_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , L2CA_GETINFO_CFM_T_pduSize , get_length() );
}

const uint8 * L2CA_GETINFO_CFM_T_PDU::get_info_dataPtr() const
{
    return get_uint8ArrayPtr ( L2CA_GETINFO_CFM_T_pduSize );
}

void L2CA_GETINFO_CFM_T_PDU::set_info_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( L2CA_GETINFO_CFM_T_length ,
                         L2CA_GETINFO_CFM_T_pduSize ,
                         toCopy , length );
}

uint16 L2CA_GETINFO_CFM_T_PDU::get_result() const
{
    return get_uint16 ( L2CA_GETINFO_CFM_T_result );
}

void L2CA_GETINFO_CFM_T_PDU::set_result( uint16 value )
{
    set_uint16 ( L2CA_GETINFO_CFM_T_result , value );
}

uint16 L2CA_GETINFO_CFM_T_PDU::get_req_ctx() const
{
    return get_uint16 ( L2CA_GETINFO_CFM_T_req_ctx );
}

void L2CA_GETINFO_CFM_T_PDU::set_req_ctx( uint16 value )
{
    set_uint16 ( L2CA_GETINFO_CFM_T_req_ctx , value );
}

uint16 L2CA_GETINFO_CFM_T_PDU::get_flags() const
{
    return get_uint16 ( L2CA_GETINFO_CFM_T_flags );
}

void L2CA_GETINFO_CFM_T_PDU::set_flags( uint16 value )
{
    set_uint16 ( L2CA_GETINFO_CFM_T_flags , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_REGISTER_FIXED_CID_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_REGISTER_FIXED_CID_REQ_T_PDU::L2CA_REGISTER_FIXED_CID_REQ_T_PDU()
: L2CAP_PDU ( L2CA_REGISTER_FIXED_CID_REQ , L2CA_REGISTER_FIXED_CID_REQ_T_pduSize )
{
    unknown_data = 0;
    qos_data = 0;
    flow_data = 0;
    flowspec_data = 0;
    next_data = L2CA_REGISTER_FIXED_CID_REQ_T_pduSize;
}

L2CA_REGISTER_FIXED_CID_REQ_T_PDU::L2CA_REGISTER_FIXED_CID_REQ_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
    init();
}

L2CA_REGISTER_FIXED_CID_REQ_T_PDU::L2CA_REGISTER_FIXED_CID_REQ_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
    init();
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::init( void )
{ 
    next_data = L2CA_REGISTER_FIXED_CID_REQ_T_pduSize;

    if(get_unknown_length() > 0)
    {
        unknown_data = next_data;
        next_data += get_unknown_length();
    }
    else
    {
        unknown_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_QOS)
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
    }
    else
    {
        qos_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOW)
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
    }
    else
    {
        flow_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOWSPEC)
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
    }
    else
    {
        flowspec_data = 0;
    }
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_phandle );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_phandle , value );
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_reg_ctx() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_reg_ctx );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_reg_ctx( uint16 value )
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_reg_ctx , value );
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_fixed_cid() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_fixed_cid );
}


void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_fixed_cid( uint16 value )
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_fixed_cid , value );
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_options() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_options );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_options( uint16 value )
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_options , value );
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_hints() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_hints );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_hints( uint16 value )
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_hints , value );
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_unknown_length() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_unknown_length );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_unknown( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill ,
                          unknown_data ,
                          get_unknown_length () );
}

const uint8 * L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_unknownPtr() const
{
    return (unknown_data
            ? PDU::get_uint8ArrayPtr ( unknown_data )
            : NULL);
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_unknown( const uint8 * toCopy , uint16 length )
{
    if((unknown_data == 0) && (length > 0))
    {
        unknown_data = next_data;
        set_final_uint8Ptr( L2CA_REGISTER_FIXED_CID_REQ_T_unknown_length,
                            unknown_data,
                            toCopy,
                            length);
        next_data += length;
    }
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_mtu() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_mtu );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_mtu( uint16 value )
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_mtu , value );
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_flush_to() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_flush_to );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_flush_to( uint16 value )
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_flush_to , value );
}

L2caQos L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_qos( void ) const
{
    return L2caQos( (qos_data > 0
                     ? get_uint8ArrayPtr(qos_data)
                     : NULL ) );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_qos( const L2caQos& qos )
{
    if((qos.get_length() > 0) && (qos_data == 0))
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
        set_final_uint8Ptr( qos_data,
                            qos_data,
                            qos.get_data(),
                            qos.get_length() );
    }
}

L2caFlow L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_flow( void ) const
{
    return L2caFlow( (flow_data > 0
                      ? get_uint8ArrayPtr(flow_data)
                      : NULL ) );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_flow( const L2caFlow &flow )
{
    if((flow.get_length() > 0) && (flow_data == 0))
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
        set_final_uint8Ptr( flow_data,
                            flow_data,
                            flow.get_data(),
                            flow.get_length() );
    }
}

uint16_t L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_fcs() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_fcs );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_fcs(uint16_t value)
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_fcs, value );
}

L2caFlowSpec L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_flowspec( void ) const
{
    return L2caFlowSpec( (flowspec_data > 0
                          ? get_uint8ArrayPtr(flowspec_data)
                          : NULL ) );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_flowspec( const L2caFlowSpec &flowspec )
{
    if((flowspec.get_length() > 0) && (flowspec_data == 0))
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
        set_final_uint8Ptr( flowspec_data,
                            flowspec_data,
                            flowspec.get_data(),
                            flowspec.get_length() );
    }
}

uint16 L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_ext_window() const
{
    return get_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_ext_window );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_ext_window( uint16 value )
{
    set_uint16 ( L2CA_REGISTER_FIXED_CID_REQ_T_ext_window , value );
}

void L2CA_REGISTER_FIXED_CID_REQ_T_PDU::set_streams (STREAM_BUFFER_SIZES_T streams)
{
    set_STREAM_BUFFER_SIZES_T ( L2CA_REGISTER_FIXED_CID_REQ_T_streams, streams);
}

STREAM_BUFFER_SIZES_T L2CA_REGISTER_FIXED_CID_REQ_T_PDU::get_streams(void) const
{
    return get_STREAM_BUFFER_SIZES_T ( L2CA_REGISTER_FIXED_CID_REQ_T_streams);
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_PING_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_PING_REQ_T_PDU::L2CA_PING_REQ_T_PDU()
: L2CAP_PDU ( L2CA_PING_REQ , L2CA_PING_REQ_T_pduSize )
{
}

L2CA_PING_REQ_T_PDU::L2CA_PING_REQ_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_PING_REQ_T_PDU::L2CA_PING_REQ_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_PING_REQ_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_PING_REQ_T_phandle );
}

void L2CA_PING_REQ_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_PING_REQ_T_phandle , value );
}

BluetoothDeviceAddress L2CA_PING_REQ_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( L2CA_PING_REQ_T_bd_addr );
}

void L2CA_PING_REQ_T_PDU::set_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( L2CA_PING_REQ_T_bd_addr , value );
}

uint16 L2CA_PING_REQ_T_PDU::get_length() const
{
    return get_uint16 ( L2CA_PING_REQ_T_length );
}

void L2CA_PING_REQ_T_PDU::set_length(uint16 length)
{
    set_uint16 ( L2CA_PING_REQ_T_length , length);
}

void L2CA_PING_REQ_T_PDU::get_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , L2CA_PING_REQ_T_pduSize , get_length () );
}

const uint8 * L2CA_PING_REQ_T_PDU::get_dataPtr() const
{
    return get_uint8ArrayPtr ( L2CA_PING_REQ_T_pduSize );
}

void L2CA_PING_REQ_T_PDU::set_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( L2CA_PING_REQ_T_length ,
                         L2CA_PING_REQ_T_pduSize ,
                         toCopy , length );
}

uint16 L2CA_PING_REQ_T_PDU::get_req_ctx() const
{
    return get_uint16 ( L2CA_PING_REQ_T_req_ctx );
}

void L2CA_PING_REQ_T_PDU::set_req_ctx( uint16 value )
{
    set_uint16 ( L2CA_PING_REQ_T_req_ctx , value );
}

uint16 L2CA_PING_REQ_T_PDU::get_flags() const
{
    return get_uint16 ( L2CA_PING_REQ_T_flags );
}

void L2CA_PING_REQ_T_PDU::set_flags( uint16 value )
{
    set_uint16 ( L2CA_PING_REQ_T_flags , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_PING_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_PING_CFM_T_PDU::L2CA_PING_CFM_T_PDU()
: L2CAP_PDU ( L2CA_PING_CFM , L2CA_PING_CFM_T_pduSize )
{
}

L2CA_PING_CFM_T_PDU::L2CA_PING_CFM_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_PING_CFM_T_PDU::L2CA_PING_CFM_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_PING_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_PING_CFM_T_phandle );
}

void L2CA_PING_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_PING_CFM_T_phandle , value );
}

BluetoothDeviceAddress L2CA_PING_CFM_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( L2CA_PING_CFM_T_bd_addr );
}

void L2CA_PING_CFM_T_PDU::set_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( L2CA_PING_CFM_T_bd_addr , value );
}

uint16 L2CA_PING_CFM_T_PDU::get_length() const
{
    return get_uint16 ( L2CA_PING_CFM_T_length );
}

void L2CA_PING_CFM_T_PDU::get_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , L2CA_PING_CFM_T_pduSize , get_length() );
}

const uint8 * L2CA_PING_CFM_T_PDU::get_dataPtr() const
{
    return get_uint8ArrayPtr ( L2CA_PING_CFM_T_pduSize );
}

void L2CA_PING_CFM_T_PDU::set_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( L2CA_PING_CFM_T_length ,
                         L2CA_PING_CFM_T_pduSize ,
                         toCopy , length );
}

uint16 L2CA_PING_CFM_T_PDU::get_result() const
{
    return get_uint16 ( L2CA_PING_CFM_T_result );
}

void L2CA_PING_CFM_T_PDU::set_result( uint16 value )
{
    set_uint16 ( L2CA_PING_CFM_T_result , value );
}

uint16 L2CA_PING_CFM_T_PDU::get_req_ctx() const
{
    return get_uint16 ( L2CA_PING_CFM_T_req_ctx );
}

void L2CA_PING_CFM_T_PDU::set_req_ctx( uint16 value )
{
    set_uint16 ( L2CA_PING_CFM_T_req_ctx , value );
}

uint16 L2CA_PING_CFM_T_PDU::get_flags() const
{
    return get_uint16 ( L2CA_PING_CFM_T_flags );
}

void L2CA_PING_CFM_T_PDU::set_flags( uint16 value )
{
    set_uint16 ( L2CA_PING_CFM_T_flags , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_DATAWRITE_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_DATAWRITE_REQ_T_PDU::L2CA_DATAWRITE_REQ_T_PDU()
: L2CAP_PDU ( L2CA_DATAWRITE_REQ , L2CA_DATAWRITE_REQ_T_pduSize )
{
}

L2CA_DATAWRITE_REQ_T_PDU::L2CA_DATAWRITE_REQ_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_DATAWRITE_REQ_T_PDU::L2CA_DATAWRITE_REQ_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_DATAWRITE_REQ_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_DATAWRITE_REQ_T_cid );
}

void L2CA_DATAWRITE_REQ_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_DATAWRITE_REQ_T_cid , value );
}

uint16 L2CA_DATAWRITE_REQ_T_PDU::get_req_ctx() const
{
    return get_uint16 ( L2CA_DATAWRITE_REQ_T_req_ctx );
}

void L2CA_DATAWRITE_REQ_T_PDU::set_req_ctx( uint16 value )
{
    set_uint16 ( L2CA_DATAWRITE_REQ_T_req_ctx , value );
}

uint16 L2CA_DATAWRITE_REQ_T_PDU::get_length() const
{
    return get_uint16 ( L2CA_DATAWRITE_REQ_T_length );
}

void L2CA_DATAWRITE_REQ_T_PDU::get_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , L2CA_DATAWRITE_REQ_T_pduSize , get_length () );
}

const uint8 * L2CA_DATAWRITE_REQ_T_PDU::get_dataPtr() const
{
    return PDU::get_uint8ArrayPtr ( L2CA_DATAWRITE_REQ_T_pduSize );
}

void L2CA_DATAWRITE_REQ_T_PDU::set_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( L2CA_DATAWRITE_REQ_T_length ,
                         L2CA_DATAWRITE_REQ_T_pduSize ,
                         toCopy , length );
}

uint16 L2CA_DATAWRITE_REQ_T_PDU::get_packets_ack() const
{
    return get_uint16 ( L2CA_DATAWRITE_REQ_T_packets_ack );
}

void L2CA_DATAWRITE_REQ_T_PDU::set_packets_ack( uint16 value )
{
    set_uint16 ( L2CA_DATAWRITE_REQ_T_packets_ack , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_RAW_DATA_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_RAW_DATA_REQ_T_PDU::L2CA_RAW_DATA_REQ_T_PDU()
: L2CAP_PDU ( L2CA_RAW_DATA_REQ , L2CA_RAW_DATA_REQ_T_pduSize )
{
}

L2CA_RAW_DATA_REQ_T_PDU::L2CA_RAW_DATA_REQ_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_RAW_DATA_REQ_T_PDU::L2CA_RAW_DATA_REQ_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_RAW_DATA_REQ_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_RAW_DATA_REQ_T_cid );
}

void L2CA_RAW_DATA_REQ_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_RAW_DATA_REQ_T_cid , value );
}

uint16 L2CA_RAW_DATA_REQ_T_PDU::get_length() const
{
    return get_uint16 ( L2CA_RAW_DATA_REQ_T_length );
}

void L2CA_RAW_DATA_REQ_T_PDU::get_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , L2CA_RAW_DATA_REQ_T_pduSize , get_length () );
}

const uint8 * L2CA_RAW_DATA_REQ_T_PDU::get_dataPtr() const
{
    return PDU::get_uint8ArrayPtr ( L2CA_RAW_DATA_REQ_T_pduSize );
}

void L2CA_RAW_DATA_REQ_T_PDU::set_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( L2CA_RAW_DATA_REQ_T_length ,
                         L2CA_RAW_DATA_REQ_T_pduSize ,
                         toCopy , length );
}

uint16 L2CA_RAW_DATA_REQ_T_PDU::get_raw_length() const
{
    return get_uint16 ( L2CA_RAW_DATA_REQ_T_raw_length );
}

void L2CA_RAW_DATA_REQ_T_PDU::set_raw_length( uint16 value )
{
    set_uint16 ( L2CA_RAW_DATA_REQ_T_raw_length , value );
}

uint16 L2CA_RAW_DATA_REQ_T_PDU::get_flush_to() const
{
    return get_uint16 ( L2CA_RAW_DATA_REQ_T_flush_to );
}

void L2CA_RAW_DATA_REQ_T_PDU::set_flush_to( uint16 value )
{
    set_uint16 ( L2CA_RAW_DATA_REQ_T_flush_to , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_RAW_DATA_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_RAW_DATA_IND_T_PDU::L2CA_RAW_DATA_IND_T_PDU()
: L2CAP_PDU ( L2CA_RAW_DATA_IND , L2CA_RAW_DATA_IND_T_pduSize )
{
}

L2CA_RAW_DATA_IND_T_PDU::L2CA_RAW_DATA_IND_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_RAW_DATA_IND_T_PDU::L2CA_RAW_DATA_IND_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_RAW_DATA_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_RAW_DATA_IND_T_phandle );
}

void L2CA_RAW_DATA_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_RAW_DATA_IND_T_phandle , value );
}

uint16 L2CA_RAW_DATA_IND_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_RAW_DATA_IND_T_cid );
}

void L2CA_RAW_DATA_IND_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_RAW_DATA_IND_T_cid , value );
}

BluetoothDeviceAddressWithType L2CA_RAW_DATA_IND_T_PDU::get_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( L2CA_RAW_DATA_IND_T_addrt );
}

void L2CA_RAW_DATA_IND_T_PDU::set_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( L2CA_RAW_DATA_IND_T_addrt , value );
}

l2ca_data_result_t L2CA_RAW_DATA_IND_T_PDU::get_result() const
{
    return get_l2ca_data_result_t ( L2CA_RAW_DATA_IND_T_result );
}

void L2CA_RAW_DATA_IND_T_PDU::set_result( l2ca_data_result_t value )
{
    set_l2ca_data_result_t ( L2CA_RAW_DATA_IND_T_result , value );
}

uint8 L2CA_RAW_DATA_IND_T_PDU::get_packet_type() const
{
    return get_uint8 ( L2CA_RAW_DATA_IND_T_packet_type );
}

void L2CA_RAW_DATA_IND_T_PDU::set_packet_type( uint8 value )
{
    set_uint8 ( L2CA_RAW_DATA_IND_T_packet_type , value );
}

uint16 L2CA_RAW_DATA_IND_T_PDU::get_length() const
{
    return get_uint16 ( L2CA_RAW_DATA_IND_T_length );
}

void L2CA_RAW_DATA_IND_T_PDU::set_length( uint16 value )
{
    set_uint16 ( L2CA_RAW_DATA_IND_T_length , value );
}

void L2CA_RAW_DATA_IND_T_PDU::get_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , L2CA_RAW_DATA_IND_T_pduSize , get_length () );
}

const uint8 * L2CA_RAW_DATA_IND_T_PDU::get_dataPtr() const
{
    return PDU::get_uint8ArrayPtr ( L2CA_RAW_DATA_IND_T_pduSize );
}

void L2CA_RAW_DATA_IND_T_PDU::set_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( L2CA_RAW_DATA_IND_T_length ,
                         L2CA_RAW_DATA_IND_T_pduSize ,
                         toCopy , length );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_MULTICAST_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

L2CA_MULTICAST_REQ_T_PDU::L2CA_MULTICAST_REQ_T_PDU()
: L2CAP_PDU ( L2CA_MULTICAST_REQ , L2CA_MULTICAST_REQ_T_pduSize )
{
}

L2CA_MULTICAST_REQ_T_PDU::L2CA_MULTICAST_REQ_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_MULTICAST_REQ_T_PDU::L2CA_MULTICAST_REQ_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

void L2CA_MULTICAST_REQ_T_PDU::get_cids(uint16* toFill) const
{
    PDU::get_uint16Array ( toFill, L2CA_MULTICAST_REQ_T_cids, 7);
}

void L2CA_MULTICAST_REQ_T_PDU::set_cids(const uint16* toCopy, const uint16 len)
{
    uint16_t zeropad[7] = {0, 0, 0, 0, 0, 0, 0};
    PDU::set_uint16Array ( zeropad, L2CA_MULTICAST_REQ_T_cids, sizeof(zeropad));
    PDU::set_uint16Array ( toCopy, L2CA_MULTICAST_REQ_T_cids, len);
}

uint16 L2CA_MULTICAST_REQ_T_PDU::get_length() const
{
    return get_uint16 ( L2CA_MULTICAST_REQ_T_length );
}

void L2CA_MULTICAST_REQ_T_PDU::get_data( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill , L2CA_MULTICAST_REQ_T_pduSize , get_length () );
}

const uint8 * L2CA_MULTICAST_REQ_T_PDU::get_dataPtr() const
{
    return PDU::get_uint8ArrayPtr ( L2CA_MULTICAST_REQ_T_pduSize );
}

void L2CA_MULTICAST_REQ_T_PDU::set_data( const uint8 * toCopy , uint16 length )
{
    set_final_uint8Ptr ( L2CA_MULTICAST_REQ_T_length ,
                         L2CA_MULTICAST_REQ_T_pduSize ,
                         toCopy , length );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_AUTO_CONNECT_REQ
//
///////////////////////////////////////////////////////////////////////////////

L2CA_AUTO_CONNECT_REQ_T_PDU::L2CA_AUTO_CONNECT_REQ_T_PDU()
: L2CAP_PDU ( L2CA_AUTO_CONNECT_REQ , L2CA_AUTO_CONNECT_REQ_T_pduSize )
{
}

L2CA_AUTO_CONNECT_REQ_T_PDU::L2CA_AUTO_CONNECT_REQ_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_AUTO_CONNECT_REQ_T_PDU::L2CA_AUTO_CONNECT_REQ_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_AUTO_CONNECT_REQ_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_REQ_T_cid );
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_REQ_T_cid , value );
}

uint16 L2CA_AUTO_CONNECT_REQ_T_PDU::get_psm_local() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_REQ_T_psm_local );
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::set_psm_local( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_REQ_T_psm_local , value );
}

BluetoothDeviceAddress L2CA_AUTO_CONNECT_REQ_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( L2CA_AUTO_CONNECT_REQ_T_bd_addr );
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::set_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( L2CA_AUTO_CONNECT_REQ_T_bd_addr , value );
}

uint16 L2CA_AUTO_CONNECT_REQ_T_PDU::get_psm_remote() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_REQ_T_psm_remote );
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::set_psm_remote( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_REQ_T_psm_remote , value );
}

uint16 L2CA_AUTO_CONNECT_REQ_T_PDU::get_con_ctx() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_REQ_T_con_ctx );
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::set_con_ctx( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_REQ_T_con_ctx , value );
}

uint16 L2CA_AUTO_CONNECT_REQ_T_PDU::get_remote_control() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_REQ_T_remote_control );
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::set_remote_control( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_REQ_T_remote_control , value );
}

uint16 L2CA_AUTO_CONNECT_REQ_T_PDU::get_local_control() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_REQ_T_local_control );
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::set_local_control( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_REQ_T_local_control , value );
}

uint16 L2CA_AUTO_CONNECT_REQ_T_PDU::get_conftab_length() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_REQ_T_conftab_length );
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::get_conftab( uint16 * toFill ) const
{
    PDU::get_uint16Array ( toFill ,
                           L2CA_AUTO_CONNECT_REQ_T_pduSize ,
                           get_conftab_length () );
}

const uint16 * L2CA_AUTO_CONNECT_REQ_T_PDU::get_conftabPtr() const
{
    return (get_conftab_length() > 0
            ? PDU::get_uint16ArrayPtr ( L2CA_AUTO_CONNECT_REQ_T_pduSize )
            : NULL);
}

void L2CA_AUTO_CONNECT_REQ_T_PDU::set_conftab( const uint16 * toCopy , uint16 length )
{
    resize ( L2CA_AUTO_CONNECT_REQ_T_pduSize + length*2 );
    set_uint16 ( L2CA_AUTO_CONNECT_REQ_T_conftab_length , length );
    if(length > 0)
    {
        set_uint16Array ( toCopy,
                          L2CA_AUTO_CONNECT_REQ_T_pduSize,
                          length );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_AUTO_CONNECT_RSP
//
///////////////////////////////////////////////////////////////////////////////

L2CA_AUTO_CONNECT_RSP_T_PDU::L2CA_AUTO_CONNECT_RSP_T_PDU()
: L2CAP_PDU ( L2CA_AUTO_CONNECT_RSP , L2CA_AUTO_CONNECT_RSP_T_pduSize )
{
}

L2CA_AUTO_CONNECT_RSP_T_PDU::L2CA_AUTO_CONNECT_RSP_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
}

L2CA_AUTO_CONNECT_RSP_T_PDU::L2CA_AUTO_CONNECT_RSP_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
}

uint16 L2CA_AUTO_CONNECT_RSP_T_PDU::get_identifier() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_RSP_T_identifier );
}

void L2CA_AUTO_CONNECT_RSP_T_PDU::set_identifier( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_RSP_T_identifier , value );
}

uint16 L2CA_AUTO_CONNECT_RSP_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_RSP_T_cid );
}

void L2CA_AUTO_CONNECT_RSP_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_RSP_T_cid , value );
}

uint16 L2CA_AUTO_CONNECT_RSP_T_PDU::get_response() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_RSP_T_response );
}

void L2CA_AUTO_CONNECT_RSP_T_PDU::set_response( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_RSP_T_response , value );
}

uint16 L2CA_AUTO_CONNECT_RSP_T_PDU::get_con_ctx() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_RSP_T_con_ctx );
}

void L2CA_AUTO_CONNECT_RSP_T_PDU::set_con_ctx( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_RSP_T_con_ctx , value );
}

uint16 L2CA_AUTO_CONNECT_RSP_T_PDU::get_conftab_length() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_RSP_T_conftab_length );
}

void L2CA_AUTO_CONNECT_RSP_T_PDU::get_conftab( uint16 * toFill ) const
{
    PDU::get_uint16Array ( toFill , L2CA_AUTO_CONNECT_RSP_T_pduSize , get_conftab_length () );
}

const uint16 * L2CA_AUTO_CONNECT_RSP_T_PDU::get_conftabPtr() const
{
    return ( get_conftab_length() > 0
             ? PDU::get_uint16ArrayPtr ( L2CA_AUTO_CONNECT_RSP_T_pduSize )
             : NULL);
}

void L2CA_AUTO_CONNECT_RSP_T_PDU::set_conftab( const uint16 * toCopy , uint16 length )
{
    resize ( L2CA_AUTO_CONNECT_RSP_T_pduSize + length*2 );
    set_uint16 ( L2CA_AUTO_CONNECT_RSP_T_conftab_length , length );
    if(length > 0)
    {
        set_uint16Array ( toCopy,
                          L2CA_AUTO_CONNECT_RSP_T_pduSize,
                          length );
    }
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: L2CA_AUTO_CONNECT_CFM
//
///////////////////////////////////////////////////////////////////////////////

L2CA_AUTO_CONNECT_CFM_T_PDU::L2CA_AUTO_CONNECT_CFM_T_PDU()
: L2CAP_PDU ( L2CA_AUTO_CONNECT_CFM , L2CA_AUTO_CONNECT_CFM_T_pduSize )
{
    unknown_data = 0;
    qos_data = 0;
    flow_data = 0;
    flowspec_data = 0;
    next_data = L2CA_AUTO_CONNECT_CFM_T_pduSize;
}

L2CA_AUTO_CONNECT_CFM_T_PDU::L2CA_AUTO_CONNECT_CFM_T_PDU( const PDU& from )
: L2CAP_PDU ( from )
{
    init();
}

L2CA_AUTO_CONNECT_CFM_T_PDU::L2CA_AUTO_CONNECT_CFM_T_PDU( const uint8 * buffer , uint32 len )
: L2CAP_PDU ( buffer , len )
{
    init();
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::init( void )
{
    next_data = L2CA_AUTO_CONNECT_CFM_T_pduSize;

    if(get_unknown_length() > 0)
    {
        unknown_data = next_data;
        next_data += get_unknown_length();
    }
    else
    {
        unknown_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_QOS)
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
    }
    else
    {
        qos_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOW)
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
    }
    else
    {
        flow_data = 0;
    }

    if(get_options() & L2CA_SPECIFY_FLOWSPEC)
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
    }
    else
    {
        flowspec_data = 0;
    }
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_phandle );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_phandle , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_reg_ctx() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_reg_ctx );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_reg_ctx( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_reg_ctx , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_con_ctx() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_con_ctx );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_con_ctx( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_con_ctx , value );
}

BluetoothDeviceAddress L2CA_AUTO_CONNECT_CFM_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( L2CA_AUTO_CONNECT_CFM_T_bd_addr );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( L2CA_AUTO_CONNECT_CFM_T_bd_addr , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_cid() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_cid );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_cid( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_cid , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_psm_local() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_psm_local );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_psm_local( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_psm_local , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_result() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_result );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_result( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_result , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_options() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_options );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_options( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_options , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_hints() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_hints );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_hints( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_hints , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_unknown_length() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_unknown_length );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::get_unknown( uint8 * toFill ) const
{
    PDU::get_uint8Array ( toFill ,
                          unknown_data ,
                          get_unknown_length () );
}

const uint8 * L2CA_AUTO_CONNECT_CFM_T_PDU::get_unknownPtr() const
{
    return (unknown_data
            ? PDU::get_uint8ArrayPtr ( unknown_data )
            : NULL);
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_unknown( const uint8 * toCopy , uint16 length )
{
    if((unknown_data == 0) && (length > 0))
    {
        unknown_data = next_data;
        set_final_uint8Ptr( L2CA_AUTO_CONNECT_CFM_T_unknown_length,
                            unknown_data,
                            toCopy,
                            length);
        next_data += length;
    }
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_mtu() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_mtu );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_mtu( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_mtu , value );
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_flush_to() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_flush_to );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_flush_to( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_flush_to , value );
}

L2caQos L2CA_AUTO_CONNECT_CFM_T_PDU::get_qos( void ) const
{
    return L2caQos( (qos_data > 0
                     ? get_uint8ArrayPtr(qos_data)
                     : NULL ) );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_qos( const L2caQos &qos )
{
    if((qos.get_length() > 0) && (qos_data == 0))
    {
        qos_data = next_data;
        next_data += QOS_SIZE;
        set_final_uint8Ptr( qos_data,
                            qos_data,
                            qos.get_data(),
                            qos.get_length() );
    }
}

L2caFlow L2CA_AUTO_CONNECT_CFM_T_PDU::get_flow( void ) const
{
    return L2caFlow( (flow_data > 0
                      ? get_uint8ArrayPtr(flow_data)
                      : NULL ) );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_flow( const L2caFlow &flow )
{
    if((flow.get_length() > 0) && (flow_data == 0))
    {
        flow_data = next_data;
        next_data += Flow_SIZE;
        set_final_uint8Ptr( flow_data,
                            flow_data,
                            flow.get_data(),
                            flow.get_length() );
    }
}

uint16_t L2CA_AUTO_CONNECT_CFM_T_PDU::get_fcs() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_fcs );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_fcs(uint16_t value)
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_fcs, value );
}

L2caFlowSpec L2CA_AUTO_CONNECT_CFM_T_PDU::get_flowspec( void ) const
{
    return L2caFlowSpec( (flowspec_data > 0
                          ? get_uint8ArrayPtr(flowspec_data)
                          : NULL ) );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_flowspec( const L2caFlowSpec &flowspec )
{
    if((flowspec.get_length() > 0) && (flowspec_data == 0))
    {
        flowspec_data = next_data;
        next_data += FS_SIZE;
        set_final_uint8Ptr( flowspec_data,
                            flowspec_data,
                            flowspec.get_data(),
                            flowspec.get_length() );
    }
}

uint16 L2CA_AUTO_CONNECT_CFM_T_PDU::get_ext_window() const
{
    return get_uint16 ( L2CA_AUTO_CONNECT_CFM_T_ext_window );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_ext_window( uint16 value )
{
    set_uint16 ( L2CA_AUTO_CONNECT_CFM_T_ext_window , value );
}

uint32_t L2CA_AUTO_CONNECT_CFM_T_PDU::get_ext_feats(void) const
{
    return get_uint32 ( L2CA_AUTO_CONNECT_CFM_T_ext_feats );
}

void L2CA_AUTO_CONNECT_CFM_T_PDU::set_ext_feats(uint32_t value)
{
    set_uint32 ( L2CA_AUTO_CONNECT_CFM_T_ext_window , value );
}
