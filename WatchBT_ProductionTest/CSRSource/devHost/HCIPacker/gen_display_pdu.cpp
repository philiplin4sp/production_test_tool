////////////////////////////////////////////////////////////////////////////////
//
//  FILE     : gen_display_pdu.cpp
//
//  AUTHOR   : Adam Hughes
//
//  Copyright CSR 2003.  All rights reserved.
//
//  PURPOSE  : to hold the autogenerated working funtions for displaying
//             primitives.
//
//  Autogenerated
//  from devHost/HCIPacker/Autogen/templates/display_prim.tpl
//  by devTools/bin/pdu/gencode.pl
//
////////////////////////////////////////////////////////////////////////////////
#ifdef USE_DISPLAY_PDU

#include "gen_display_pdu.h"
#include <cstdio>

template<class T> a_string display_event_filter ( int indent , const T& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_uint8 ( indent , "filter_type" , prim.get_filter_type() );
    switch ( prim.get_filter_type() )
    {
    case 1:
    case 2:
        rv += policy->display_uint8 ( indent , "filter_condition_type" , prim.get_filter_condition_type() );
        {
        uint8 aaf;
        ClassOfDevice cod , mask;
        BluetoothDeviceAddress bda;
        if ( prim.get_condition(bda) )
            rv += policy->display_BluetoothDeviceAddress ( indent , "bd_addr" , bda );
        if ( prim.get_condition(cod,mask) )
            rv += policy->display_uint24 ( indent , "class_of_device" , cod.get_class_of_device() )
               +  policy->display_uint24 ( indent , "mask" , mask.get_class_of_device() );
        if ( prim.get_condition(aaf) )
            rv += policy->display_uint8 ( indent , "auto_accept_flag" , aaf );
        }
        break;
    default:
        break;
    }
    return rv;
}

a_string display_HCI_ULP_READ_CHANNEL_MAP_pdu ( int indent , const HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_CHANNEL_MAP" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_uint8Array ( indent + 1 , "ulp_channel_map" , prim.get_ulp_channel_map().get_ptr() , 5 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_CHANNEL_MAP" );
    return rv;
}
a_string display_HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_pdu ( int indent , const HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY" );
    return rv;
}
a_string display_HCI_READ_SCO_FLOW_CON_ENABLE_pdu ( int indent , const HCI_READ_SCO_FLOW_CON_ENABLE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_SCO_FLOW_CON_ENABLE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "sco_flow_control_enable" , prim.get_sco_flow_control_enable() );
    rv += policy->display_prim_end ( indent , "HCI_READ_SCO_FLOW_CON_ENABLE" );
    return rv;
}
a_string display_HCI_READ_INQUIRY_MODE_pdu ( int indent , const HCI_READ_INQUIRY_MODE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_INQUIRY_MODE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_INQUIRY_MODE" );
    return rv;
}
a_string display_HCI_GET_LINK_QUALITY_pdu ( int indent , const HCI_GET_LINK_QUALITY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_GET_LINK_QUALITY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "link_quality" , prim.get_link_quality() );
    rv += policy->display_prim_end ( indent , "HCI_GET_LINK_QUALITY" );
    return rv;
}
a_string display_HCI_READ_HOLD_MODE_ACTIVITY_pdu ( int indent , const HCI_READ_HOLD_MODE_ACTIVITY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_HOLD_MODE_ACTIVITY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "activity" , prim.get_activity() );
    rv += policy->display_prim_end ( indent , "HCI_READ_HOLD_MODE_ACTIVITY" );
    return rv;
}
a_string display_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_pdu ( int indent , const HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_int8 ( indent + 1 , "tx_power" , prim.get_tx_power() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER" );
    return rv;
}
a_string display_HCI_READ_ALIAS_AUTH_ENABLE_pdu ( int indent , const HCI_READ_ALIAS_AUTH_ENABLE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ALIAS_AUTH_ENABLE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "enabled" , prim.get_enabled() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ALIAS_AUTH_ENABLE" );
    return rv;
}
a_string display_HCI_READ_INQUIRYSCAN_ACTIVITY_pdu ( int indent , const HCI_READ_INQUIRYSCAN_ACTIVITY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_INQUIRYSCAN_ACTIVITY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "inqscan_interval" , prim.get_inqscan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "inqscan_window" , prim.get_inqscan_window() );
    rv += policy->display_prim_end ( indent , "HCI_READ_INQUIRYSCAN_ACTIVITY" );
    return rv;
}
a_string display_HCI_RESET_FAILED_CONTACT_COUNT_pdu ( int indent , const HCI_RESET_FAILED_CONTACT_COUNT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_RESET_FAILED_CONTACT_COUNT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_RESET_FAILED_CONTACT_COUNT" );
    return rv;
}
a_string display_HCI_USER_PASSKEY_REQUEST_REPLY_pdu ( int indent , const HCI_USER_PASSKEY_REQUEST_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_USER_PASSKEY_REQUEST_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_USER_PASSKEY_REQUEST_REPLY" );
    return rv;
}
a_string display_HCI_LINK_KEY_REQ_REPLY_pdu ( int indent , const HCI_LINK_KEY_REQ_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_LINK_KEY_REQ_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_LINK_KEY_REQ_REPLY" );
    return rv;
}
a_string display_HCI_READ_CLOCK_pdu ( int indent , const HCI_READ_CLOCK_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CLOCK" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint32 ( indent + 1 , "clock" , prim.get_clock() );
    rv += policy->display_uint16 ( indent + 1 , "accuracy" , prim.get_accuracy() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CLOCK" );
    return rv;
}
a_string display_HCI_READ_LMP_HANDLE_pdu ( int indent , const HCI_READ_LMP_HANDLE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LMP_HANDLE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "lmp_handle" , prim.get_lmp_handle() );
    rv += policy->display_uint32 ( indent + 1 , "reserved" , prim.get_reserved() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LMP_HANDLE" );
    return rv;
}
a_string display_HCI_READ_PAGE_SCAN_TYPE_pdu ( int indent , const HCI_READ_PAGE_SCAN_TYPE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGE_SCAN_TYPE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGE_SCAN_TYPE" );
    return rv;
}
a_string display_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_pdu ( int indent , const HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8Array ( indent + 1 , "feature_set" , prim.get_feature_set().get_ptr() , 8 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES" );
    return rv;
}
a_string display_HCI_LINK_KEY_REQ_NEG_REPLY_pdu ( int indent , const HCI_LINK_KEY_REQ_NEG_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_LINK_KEY_REQ_NEG_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_LINK_KEY_REQ_NEG_REPLY" );
    return rv;
}
a_string display_HCI_PIN_CODE_REQ_NEG_REPLY_pdu ( int indent , const HCI_PIN_CODE_REQ_NEG_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PIN_CODE_REQ_NEG_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_PIN_CODE_REQ_NEG_REPLY" );
    return rv;
}
a_string display_HCI_READ_PAGESCAN_PERIOD_MODE_pdu ( int indent , const HCI_READ_PAGESCAN_PERIOD_MODE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGESCAN_PERIOD_MODE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGESCAN_PERIOD_MODE" );
    return rv;
}
a_string display_HCI_ROLE_DISCOVERY_pdu ( int indent , const HCI_ROLE_DISCOVERY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ROLE_DISCOVERY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "current_role" , prim.get_current_role() );
    rv += policy->display_prim_end ( indent , "HCI_ROLE_DISCOVERY" );
    return rv;
}
a_string display_HCI_READ_CONN_ACCEPT_TIMEOUT_pdu ( int indent , const HCI_READ_CONN_ACCEPT_TIMEOUT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CONN_ACCEPT_TIMEOUT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "conn_accept_timeout" , prim.get_conn_accept_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CONN_ACCEPT_TIMEOUT" );
    return rv;
}
a_string display_HCI_REMOTE_NAME_REQ_CANCEL_pdu ( int indent , const HCI_REMOTE_NAME_REQ_CANCEL_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REMOTE_NAME_REQ_CANCEL" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_REMOTE_NAME_REQ_CANCEL" );
    return rv;
}
a_string display_HCI_READ_ENCRYPTION_KEY_SIZE_pdu ( int indent , const HCI_READ_ENCRYPTION_KEY_SIZE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ENCRYPTION_KEY_SIZE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "key_size" , prim.get_key_size() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ENCRYPTION_KEY_SIZE" );
    return rv;
}
a_string display_HCI_DELETE_STORED_LINK_KEY_pdu ( int indent , const HCI_DELETE_STORED_LINK_KEY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_DELETE_STORED_LINK_KEY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "num_keys_deleted" , prim.get_num_keys_deleted() );
    rv += policy->display_prim_end ( indent , "HCI_DELETE_STORED_LINK_KEY" );
    return rv;
}
a_string display_HCI_ULP_TEST_END_pdu ( int indent , const HCI_ULP_TEST_END_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_TEST_END" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "number_of_packets" , prim.get_number_of_packets() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_TEST_END" );
    return rv;
}
a_string display_HCI_ULP_READ_WHITE_LIST_SIZE_pdu ( int indent , const HCI_ULP_READ_WHITE_LIST_SIZE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_WHITE_LIST_SIZE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "white_list_size" , prim.get_white_list_size() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_WHITE_LIST_SIZE" );
    return rv;
}
a_string display_HCI_ULP_READ_SUPPORTED_STATES_pdu ( int indent , const HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_SUPPORTED_STATES" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8Array ( indent + 1 , "supported_states" , prim.get_supported_states().get_ptr() , 8 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_SUPPORTED_STATES" );
    return rv;
}
a_string display_HCI_READ_ENH_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_ENH_TX_POWER_LEVEL_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ENH_TX_POWER_LEVEL" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_int8 ( indent + 1 , "pwr_level_GFSK" , prim.get_pwr_level_GFSK() );
    rv += policy->display_int8 ( indent + 1 , "pwr_level_DQPSK" , prim.get_pwr_level_DQPSK() );
    rv += policy->display_int8 ( indent + 1 , "pwr_level_8DPSK" , prim.get_pwr_level_8DPSK() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ENH_TX_POWER_LEVEL" );
    return rv;
}
a_string display_HCI_READ_LOOPBACK_MODE_pdu ( int indent , const HCI_READ_LOOPBACK_MODE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOOPBACK_MODE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOOPBACK_MODE" );
    return rv;
}
a_string display_HCI_READ_BUFFER_SIZE_pdu ( int indent , const HCI_READ_BUFFER_SIZE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_BUFFER_SIZE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "acl_data_pkt_length" , prim.get_acl_data_pkt_length() );
    rv += policy->display_uint8 ( indent + 1 , "sco_data_pkt_length" , prim.get_sco_data_pkt_length() );
    rv += policy->display_uint16 ( indent + 1 , "total_acl_data_pkts" , prim.get_total_acl_data_pkts() );
    rv += policy->display_uint16 ( indent + 1 , "total_sco_data_pkts" , prim.get_total_sco_data_pkts() );
    rv += policy->display_prim_end ( indent , "HCI_READ_BUFFER_SIZE" );
    return rv;
}
a_string display_HCI_READ_LE_HOST_SUPPORT_pdu ( int indent , const HCI_READ_LE_HOST_SUPPORT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LE_HOST_SUPPORT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "le_supported_host" , prim.get_le_supported_host() );
    rv += policy->display_uint8 ( indent + 1 , "simultaneous_le_host" , prim.get_simultaneous_le_host() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LE_HOST_SUPPORT" );
    return rv;
}
a_string display_HCI_WRITE_AUTO_FLUSH_TIMEOUT_pdu ( int indent , const HCI_WRITE_AUTO_FLUSH_TIMEOUT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_AUTO_FLUSH_TIMEOUT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_AUTO_FLUSH_TIMEOUT" );
    return rv;
}
a_string display_HCI_IO_CAPABILITY_RESPONSE_pdu ( int indent , const HCI_IO_CAPABILITY_RESPONSE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_IO_CAPABILITY_RESPONSE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_IO_CAPABILITY_RESPONSE" );
    return rv;
}
a_string display_HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_pdu ( int indent , const HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PRIVATE_PAIRING_REQ_NEG_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_PRIVATE_PAIRING_REQ_NEG_REPLY" );
    return rv;
}
a_string display_HCI_ALIAS_ADDRESS_REQ_REPLY_pdu ( int indent , const HCI_ALIAS_ADDRESS_REQ_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ALIAS_ADDRESS_REQ_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_ALIAS_ADDRESS_REQ_REPLY" );
    return rv;
}
a_string display_HCI_READ_AUTO_FLUSH_TIMEOUT_pdu ( int indent , const HCI_READ_AUTO_FLUSH_TIMEOUT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_AUTO_FLUSH_TIMEOUT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_READ_AUTO_FLUSH_TIMEOUT" );
    return rv;
}
a_string display_HCI_READ_LOCAL_NAME_pdu ( int indent , const HCI_READ_LOCAL_NAME_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_NAME" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_name ( indent + 1 , "name_part" , prim.get_name_part().get_str() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_NAME" );
    return rv;
}
a_string display_HCI_ULP_RAND_pdu ( int indent , const HCI_ULP_RAND_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_RAND" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8Array ( indent + 1 , "random_number" , prim.get_random_number().get_ptr() , 16 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_RAND" );
    return rv;
}
a_string display_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( int indent , const HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "fec_required" , prim.get_fec_required() );
    rv += policy->display_uint8Array( indent + 1 , "eir_data_part" , prim.get_eir_data_part().get_data() , prim.get_eir_data_part().get_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA" );
    return rv;
}
a_string display_HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY" );
    return rv;
}
a_string display_HCI_ULP_ENCRYPT_pdu ( int indent , const HCI_ULP_ENCRYPT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_ENCRYPT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8Array ( indent + 1 , "encrypted_data" , prim.get_encrypted_data().get_ptr(), 16 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_ENCRYPT" );
    return rv;
}
a_string display_HCI_READ_SIMPLE_PAIRING_MODE_pdu ( int indent , const HCI_READ_SIMPLE_PAIRING_MODE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_SIMPLE_PAIRING_MODE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "simple_pairing_mode" , prim.get_simple_pairing_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_SIMPLE_PAIRING_MODE" );
    return rv;
}
a_string display_HCI_READ_BD_ADDR_pdu ( int indent , const HCI_READ_BD_ADDR_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_BD_ADDR" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_READ_BD_ADDR" );
    return rv;
}
a_string display_HCI_READ_LOCAL_VER_INFO_pdu ( int indent , const HCI_READ_LOCAL_VER_INFO_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_VER_INFO" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "hci_version" , prim.get_hci_version() );
    rv += policy->display_uint16 ( indent + 1 , "hci_revision" , prim.get_hci_revision() );
    rv += policy->display_uint8 ( indent + 1 , "lmp_version" , prim.get_lmp_version() );
    rv += policy->display_uint16 ( indent + 1 , "manuf_name" , prim.get_manuf_name() );
    rv += policy->display_uint16 ( indent + 1 , "lmp_subversion" , prim.get_lmp_subversion() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_VER_INFO" );
    return rv;
}
a_string display_HCI_READ_CURRENT_IAC_LAP_pdu ( int indent , const HCI_READ_CURRENT_IAC_LAP_RET_T_PDU& prim , PDU_displayer * policy )
{
    uint24 iac_laps[96]; // plenty (256/3 = 85).
    for ( int i = 0 ; i < prim.get_num_current_iac() ; ++i )
        iac_laps[i] = prim.get_iac_lap (i);
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CURRENT_IAC_LAP" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "num_current_iac" , prim.get_num_current_iac() );
    rv += policy->display_uint24Array ( indent + 1 , "iac_lap" , iac_laps , prim.get_num_current_iac() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CURRENT_IAC_LAP" );
    return rv;
}
a_string display_HCI_READ_LOCAL_EXT_FEATURES_pdu ( int indent , const HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_EXT_FEATURES" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "page_num" , prim.get_page_num() );
    rv += policy->display_uint8 ( indent + 1 , "max_page_num" , prim.get_max_page_num() );
    rv += policy->display_uint8Array ( indent + 1 , "lmp_ext_features" , prim.get_lmp_ext_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_EXT_FEATURES" );
    return rv;
}
a_string display_HCI_READ_NUM_BCAST_RETXS_pdu ( int indent , const HCI_READ_NUM_BCAST_RETXS_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_NUM_BCAST_RETXS" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "num" , prim.get_num() );
    rv += policy->display_prim_end ( indent , "HCI_READ_NUM_BCAST_RETXS" );
    return rv;
}
a_string display_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_int8 ( indent + 1 , "tx_power" , prim.get_tx_power() );
    rv += policy->display_prim_end ( indent , "HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL" );
    return rv;
}
a_string display_HCI_READ_NUM_SUPPORTED_IAC_pdu ( int indent , const HCI_READ_NUM_SUPPORTED_IAC_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_NUM_SUPPORTED_IAC" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "num" , prim.get_num() );
    rv += policy->display_prim_end ( indent , "HCI_READ_NUM_SUPPORTED_IAC" );
    return rv;
}
a_string display_HCI_READ_COUNTRY_CODE_pdu ( int indent , const HCI_READ_COUNTRY_CODE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_COUNTRY_CODE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "country_code" , prim.get_country_code() );
    rv += policy->display_prim_end ( indent , "HCI_READ_COUNTRY_CODE" );
    return rv;
}
a_string display_HCI_READ_FAILED_CONTACT_COUNT_pdu ( int indent , const HCI_READ_FAILED_CONTACT_COUNT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_FAILED_CONTACT_COUNT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "failed_contact_count" , prim.get_failed_contact_count() );
    rv += policy->display_prim_end ( indent , "HCI_READ_FAILED_CONTACT_COUNT" );
    return rv;
}
a_string display_HCI_READ_PIN_TYPE_pdu ( int indent , const HCI_READ_PIN_TYPE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PIN_TYPE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "pin_type" , prim.get_pin_type() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PIN_TYPE" );
    return rv;
}
a_string display_HCI_READ_LOCAL_OOB_DATA_pdu ( int indent , const HCI_READ_LOCAL_OOB_DATA_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_OOB_DATA" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8Array ( indent + 1 , "c" , prim.get_c().get_data() , 16 );
    rv += policy->display_uint8Array ( indent + 1 , "r" , prim.get_r().get_data() , 16 );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_OOB_DATA" );
    return rv;
}
a_string display_HCI_SNIFF_SUB_RATE_pdu ( int indent , const HCI_SNIFF_SUB_RATE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SNIFF_SUB_RATE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_SNIFF_SUB_RATE" );
    return rv;
}
a_string display_HCI_READ_AUTH_ENABLE_pdu ( int indent , const HCI_READ_AUTH_ENABLE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_AUTH_ENABLE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "auth_enable" , prim.get_auth_enable() );
    rv += policy->display_prim_end ( indent , "HCI_READ_AUTH_ENABLE" );
    return rv;
}
a_string display_HCI_READ_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_READ_LINK_POLICY_SETTINGS_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LINK_POLICY_SETTINGS" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "link_policy_settings" , prim.get_link_policy_settings() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LINK_POLICY_SETTINGS" );
    return rv;
}
a_string display_HCI_READ_INQUIRY_SCAN_TYPE_pdu ( int indent , const HCI_READ_INQUIRY_SCAN_TYPE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_INQUIRY_SCAN_TYPE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_INQUIRY_SCAN_TYPE" );
    return rv;
}
a_string display_HCI_SEND_KEYPRESS_NOTIFICATION_pdu ( int indent , const HCI_SEND_KEYPRESS_NOTIFICATION_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SEND_KEYPRESS_NOTIFICATION" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_SEND_KEYPRESS_NOTIFICATION" );
    return rv;
}
a_string display_HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY" );
    return rv;
}
a_string display_HCI_READ_PAGE_TIMEOUT_pdu ( int indent , const HCI_READ_PAGE_TIMEOUT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGE_TIMEOUT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "page_timeout" , prim.get_page_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGE_TIMEOUT" );
    return rv;
}
a_string display_HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_IO_CAPABILITY_REQUEST_NEG_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_IO_CAPABILITY_REQUEST_NEG_REPLY" );
    return rv;
}
a_string display_HCI_ULP_READ_BUFFER_SIZE_pdu ( int indent , const HCI_ULP_READ_BUFFER_SIZE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_BUFFER_SIZE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "data_packet_length" , prim.get_data_packet_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_data_packets" , prim.get_num_data_packets() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_BUFFER_SIZE" );
    return rv;
}
a_string display_HCI_READ_VOICE_SETTING_pdu ( int indent , const HCI_READ_VOICE_SETTING_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_VOICE_SETTING" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "voice_setting" , prim.get_voice_setting() );
    rv += policy->display_prim_end ( indent , "HCI_READ_VOICE_SETTING" );
    return rv;
}
a_string display_HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_pdu ( int indent , const HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY" );
    return rv;
}
a_string display_HCI_READ_SCAN_ENABLE_pdu ( int indent , const HCI_READ_SCAN_ENABLE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_SCAN_ENABLE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "scan_enable" , prim.get_scan_enable() );
    rv += policy->display_prim_end ( indent , "HCI_READ_SCAN_ENABLE" );
    return rv;
}
a_string display_HCI_READ_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_TX_POWER_LEVEL_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_TX_POWER_LEVEL" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_int8 ( indent + 1 , "pwr_level" , prim.get_pwr_level() );
    rv += policy->display_prim_end ( indent , "HCI_READ_TX_POWER_LEVEL" );
    return rv;
}
a_string display_HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_pdu ( int indent , const HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ALIAS_ADDRESS_REQ_NEG_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_ALIAS_ADDRESS_REQ_NEG_REPLY" );
    return rv;
}
a_string display_HCI_READ_LINK_SUPERV_TIMEOUT_pdu ( int indent , const HCI_READ_LINK_SUPERV_TIMEOUT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LINK_SUPERV_TIMEOUT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LINK_SUPERV_TIMEOUT" );
    return rv;
}
a_string display_HCI_PRIVATE_PAIRING_REQ_REPLY_pdu ( int indent , const HCI_PRIVATE_PAIRING_REQ_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PRIVATE_PAIRING_REQ_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_PRIVATE_PAIRING_REQ_REPLY" );
    return rv;
}
a_string display_HCI_PIN_CODE_REQ_REPLY_pdu ( int indent , const HCI_PIN_CODE_REQ_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PIN_CODE_REQ_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_PIN_CODE_REQ_REPLY" );
    return rv;
}
a_string display_HCI_USER_CONFIRMATION_REQUEST_REPLY_pdu ( int indent , const HCI_USER_CONFIRMATION_REQUEST_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_USER_CONFIRMATION_REQUEST_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_USER_CONFIRMATION_REQUEST_REPLY" );
    return rv;
}
a_string display_HCI_READ_AFH_CHANNEL_MAP_pdu ( int indent , const HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_AFH_CHANNEL_MAP" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_uint8Array ( indent + 1 , "map" , prim.get_map().get_ptr() , 10 );
    rv += policy->display_prim_end ( indent , "HCI_READ_AFH_CHANNEL_MAP" );
    return rv;
}
a_string display_HCI_READ_AFH_CHANNEL_CLASS_M_pdu ( int indent , const HCI_READ_AFH_CHANNEL_CLASS_M_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_AFH_CHANNEL_CLASS_M" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "class_mode" , prim.get_class_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_AFH_CHANNEL_CLASS_M" );
    return rv;
}
a_string display_HCI_GENERATED_ALIAS_pdu ( int indent , const HCI_GENERATED_ALIAS_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_GENERATED_ALIAS" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_GENERATED_ALIAS" );
    return rv;
}
a_string display_HCI_READ_PAGESCAN_ACTIVITY_pdu ( int indent , const HCI_READ_PAGESCAN_ACTIVITY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGESCAN_ACTIVITY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "pagescan_interval" , prim.get_pagescan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "pagescan_window" , prim.get_pagescan_window() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGESCAN_ACTIVITY" );
    return rv;
}
a_string display_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_DEFAULT_LINK_POLICY_SETTINGS" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "default_lps" , prim.get_default_lps() );
    rv += policy->display_prim_end ( indent , "HCI_READ_DEFAULT_LINK_POLICY_SETTINGS" );
    return rv;
}
a_string display_HCI_READ_LOCAL_SUPP_COMMANDS_pdu ( int indent , const HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_SUPP_COMMANDS" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8Array ( indent + 1 , "supp_commands" , prim.get_supp_commands().get_data() , 64 );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_SUPP_COMMANDS" );
    return rv;
}
a_string display_HCI_READ_PAGESCAN_MODE_pdu ( int indent , const HCI_READ_PAGESCAN_MODE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGESCAN_MODE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGESCAN_MODE" );
    return rv;
}
a_string display_HCI_USER_PASSKEY_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_USER_PASSKEY_REQUEST_NEG_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_USER_PASSKEY_REQUEST_NEG_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_USER_PASSKEY_REQUEST_NEG_REPLY" );
    return rv;
}
a_string display_HCI_CREATE_CONNECTION_CANCEL_pdu ( int indent , const HCI_CREATE_CONNECTION_CANCEL_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_CREATE_CONNECTION_CANCEL" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_CREATE_CONNECTION_CANCEL" );
    return rv;
}
a_string display_HCI_READ_ENC_MODE_pdu ( int indent , const HCI_READ_ENC_MODE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ENC_MODE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ENC_MODE" );
    return rv;
}
a_string display_HCI_REMOTE_OOB_DATA_REQUEST_REPLY_pdu ( int indent , const HCI_REMOTE_OOB_DATA_REQUEST_REPLY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REMOTE_OOB_DATA_REQUEST_REPLY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_REMOTE_OOB_DATA_REQUEST_REPLY" );
    return rv;
}
a_string display_HCI_WRITE_LINK_SUPERV_TIMEOUT_pdu ( int indent , const HCI_WRITE_LINK_SUPERV_TIMEOUT_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_LINK_SUPERV_TIMEOUT" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_LINK_SUPERV_TIMEOUT" );
    return rv;
}
a_string display_HCI_READ_ANON_ADDR_CHANGE_PARAMS_pdu ( int indent , const HCI_READ_ANON_ADDR_CHANGE_PARAMS_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ANON_ADDR_CHANGE_PARAMS" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint32 ( indent + 1 , "addr_update_time" , prim.get_addr_update_time() );
    rv += policy->display_uint16 ( indent + 1 , "addr_inquiry_period" , prim.get_addr_inquiry_period() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ANON_ADDR_CHANGE_PARAMS" );
    return rv;
}
a_string display_HCI_FLUSH_pdu ( int indent , const HCI_FLUSH_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_FLUSH" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_FLUSH" );
    return rv;
}
a_string display_HCI_READ_LOCAL_SUPP_FEATURES_pdu ( int indent , const HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_SUPP_FEATURES" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8Array ( indent + 1 , "lmp_supp_features" , prim.get_lmp_supp_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_SUPP_FEATURES" );
    return rv;
}
a_string display_HCI_WRITE_STORED_LINK_KEY_pdu ( int indent , const HCI_WRITE_STORED_LINK_KEY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_STORED_LINK_KEY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "num_keys_written" , prim.get_num_keys_written() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_STORED_LINK_KEY" );
    return rv;
}
a_string display_HCI_READ_RSSI_pdu ( int indent , const HCI_READ_RSSI_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_RSSI" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_int8 ( indent + 1 , "rssi" , prim.get_rssi() );
    rv += policy->display_prim_end ( indent , "HCI_READ_RSSI" );
    return rv;
}
a_string display_HCI_READ_STORED_LINK_KEY_pdu ( int indent , const HCI_READ_STORED_LINK_KEY_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_STORED_LINK_KEY" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "max_num_keys" , prim.get_max_num_keys() );
    rv += policy->display_uint16 ( indent + 1 , "num_keys_read" , prim.get_num_keys_read() );
    rv += policy->display_prim_end ( indent , "HCI_READ_STORED_LINK_KEY" );
    return rv;
}
a_string display_HCI_WRITE_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_WRITE_LINK_POLICY_SETTINGS_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_LINK_POLICY_SETTINGS" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_LINK_POLICY_SETTINGS" );
    return rv;
}
a_string display_HCI_READ_ANON_MODE_pdu ( int indent , const HCI_READ_ANON_MODE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ANON_MODE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ANON_MODE" );
    return rv;
}
a_string display_HCI_READ_CLASS_OF_DEVICE_pdu ( int indent , const HCI_READ_CLASS_OF_DEVICE_RET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CLASS_OF_DEVICE" )    + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
    + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
    + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
    + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
    + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) ;
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CLASS_OF_DEVICE" );
    return rv;
}
a_string display_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL" );
    return rv;
}
a_string display_HCI_READ_LMP_HANDLE_pdu ( int indent , const HCI_READ_LMP_HANDLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LMP_HANDLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LMP_HANDLE" );
    return rv;
}
a_string display_HCI_REJECT_SYNCHRONOUS_CONN_REQ_pdu ( int indent , const HCI_REJECT_SYNCHRONOUS_CONN_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REJECT_SYNCHRONOUS_CONN_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "HCI_REJECT_SYNCHRONOUS_CONN_REQ" );
    return rv;
}
a_string display_HCI_ADD_SCO_CONNECTION_pdu ( int indent , const HCI_ADD_SCO_CONNECTION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ADD_SCO_CONNECTION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_prim_end ( indent , "HCI_ADD_SCO_CONNECTION" );
    return rv;
}
a_string display_HCI_WRITE_ANON_MODE_pdu ( int indent , const HCI_WRITE_ANON_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_ANON_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_ANON_MODE" );
    return rv;
}
a_string display_HCI_SEND_KEYPRESS_NOTIFICATION_pdu ( int indent , const HCI_SEND_KEYPRESS_NOTIFICATION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SEND_KEYPRESS_NOTIFICATION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "notification_type" , prim.get_notification_type() );
    rv += policy->display_prim_end ( indent , "HCI_SEND_KEYPRESS_NOTIFICATION" );
    return rv;
}
a_string display_HCI_CHANGE_CONN_LINK_KEY_pdu ( int indent , const HCI_CHANGE_CONN_LINK_KEY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_CHANGE_CONN_LINK_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_CHANGE_CONN_LINK_KEY" );
    return rv;
}
a_string display_HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_pdu ( int indent , const HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ALIAS_ADDRESS_REQ_NEG_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_ALIAS_ADDRESS_REQ_NEG_REPLY" );
    return rv;
}
a_string display_HCI_WRITE_AUTO_FLUSH_TIMEOUT_pdu ( int indent , const HCI_WRITE_AUTO_FLUSH_TIMEOUT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_AUTO_FLUSH_TIMEOUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_AUTO_FLUSH_TIMEOUT" );
    return rv;
}
a_string display_HCI_WRITE_SCO_FLOW_CON_ENABLE_pdu ( int indent , const HCI_WRITE_SCO_FLOW_CON_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_SCO_FLOW_CON_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "sco_flow_control_enable" , prim.get_sco_flow_control_enable() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_SCO_FLOW_CON_ENABLE" );
    return rv;
}
a_string display_HCI_ULP_CREATE_CONNECTION_CANCEL_pdu ( int indent , const HCI_ULP_CREATE_CONNECTION_CANCEL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_CREATE_CONNECTION_CANCEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_CREATE_CONNECTION_CANCEL" );
    return rv;
}
a_string display_HCI_READ_NUM_SUPPORTED_IAC_pdu ( int indent , const HCI_READ_NUM_SUPPORTED_IAC_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_NUM_SUPPORTED_IAC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_NUM_SUPPORTED_IAC" );
    return rv;
}
a_string display_HCI_WRITE_AUTH_ENABLE_pdu ( int indent , const HCI_WRITE_AUTH_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_AUTH_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "auth_enable" , prim.get_auth_enable() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_AUTH_ENABLE" );
    return rv;
}
a_string display_HCI_READ_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_READ_LINK_POLICY_SETTINGS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LINK_POLICY_SETTINGS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LINK_POLICY_SETTINGS" );
    return rv;
}
a_string display_HCI_READ_SCO_FLOW_CON_ENABLE_pdu ( int indent , const HCI_READ_SCO_FLOW_CON_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_SCO_FLOW_CON_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_SCO_FLOW_CON_ENABLE" );
    return rv;
}
a_string display_HCI_ULP_CLEAR_WHITE_LIST_pdu ( int indent , const HCI_ULP_CLEAR_WHITE_LIST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_CLEAR_WHITE_LIST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_CLEAR_WHITE_LIST" );
    return rv;
}
a_string display_HCI_READ_STORED_LINK_KEY_pdu ( int indent , const HCI_READ_STORED_LINK_KEY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_STORED_LINK_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "read_all" , prim.get_read_all() );
    rv += policy->display_prim_end ( indent , "HCI_READ_STORED_LINK_KEY" );
    return rv;
}
a_string display_HCI_SWITCH_ROLE_pdu ( int indent , const HCI_SWITCH_ROLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SWITCH_ROLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "role" , prim.get_role() );
    rv += policy->display_prim_end ( indent , "HCI_SWITCH_ROLE" );
    return rv;
}
a_string display_HCI_INQUIRY_pdu ( int indent , const HCI_INQUIRY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_INQUIRY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint24 ( indent + 1 , "lap" , prim.get_lap() );
    rv += policy->display_uint8 ( indent + 1 , "inquiry_length" , prim.get_inquiry_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += policy->display_prim_end ( indent , "HCI_INQUIRY" );
    return rv;
}
a_string display_HCI_READ_REMOTE_EXT_FEATURES_pdu ( int indent , const HCI_READ_REMOTE_EXT_FEATURES_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_REMOTE_EXT_FEATURES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "page_num" , prim.get_page_num() );
    rv += policy->display_prim_end ( indent , "HCI_READ_REMOTE_EXT_FEATURES" );
    return rv;
}
a_string display_HCI_ULP_TRANSMITTER_TEST_pdu ( int indent , const HCI_ULP_TRANSMITTER_TEST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_TRANSMITTER_TEST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "tx_channel" , prim.get_tx_channel() );
    rv += policy->display_uint8 ( indent + 1 , "length_test_data" , prim.get_length_test_data() );
    rv += policy->display_uint8 ( indent + 1 , "packet_payload" , prim.get_packet_payload() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_TRANSMITTER_TEST" );
    return rv;
}
a_string display_HCI_WRITE_INQUIRY_SCAN_TYPE_pdu ( int indent , const HCI_WRITE_INQUIRY_SCAN_TYPE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_INQUIRY_SCAN_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_INQUIRY_SCAN_TYPE" );
    return rv;
}
a_string display_HCI_RESET_pdu ( int indent , const HCI_RESET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_RESET" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_RESET" );
    return rv;
}
a_string display_HCI_ULP_RAND_pdu ( int indent , const HCI_ULP_RAND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_RAND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_RAND" );
    return rv;
}
a_string display_HCI_REFRESH_ENCRYPTION_KEY_pdu ( int indent , const HCI_REFRESH_ENCRYPTION_KEY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REFRESH_ENCRYPTION_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_REFRESH_ENCRYPTION_KEY" );
    return rv;
}
a_string display_HCI_EXCHANGE_FIXED_INFO_pdu ( int indent , const HCI_EXCHANGE_FIXED_INFO_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EXCHANGE_FIXED_INFO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EXCHANGE_FIXED_INFO" );
    return rv;
}
a_string display_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_pdu ( int indent , const HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER" );
    return rv;
}
a_string display_HCI_SETUP_SYNCHRONOUS_CONN_pdu ( int indent , const HCI_SETUP_SYNCHRONOUS_CONN_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SETUP_SYNCHRONOUS_CONN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint32 ( indent + 1 , "tx_bdw" , prim.get_tx_bdw() );
    rv += policy->display_uint32 ( indent + 1 , "rx_bdw" , prim.get_rx_bdw() );
    rv += policy->display_uint16 ( indent + 1 , "max_latency" , prim.get_max_latency() );
    rv += policy->display_uint16 ( indent + 1 , "voice_settings" , prim.get_voice_settings() );
    rv += policy->display_uint8 ( indent + 1 , "retx_effort" , prim.get_retx_effort() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_prim_end ( indent , "HCI_SETUP_SYNCHRONOUS_CONN" );
    return rv;
}
a_string display_HCI_READ_INQUIRY_SCAN_TYPE_pdu ( int indent , const HCI_READ_INQUIRY_SCAN_TYPE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_INQUIRY_SCAN_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_INQUIRY_SCAN_TYPE" );
    return rv;
}
a_string display_HCI_FLUSH_pdu ( int indent , const HCI_FLUSH_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_FLUSH" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_FLUSH" );
    return rv;
}
a_string display_HCI_ULP_START_ENCRYPTION_pdu ( int indent , const HCI_ULP_START_ENCRYPTION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_START_ENCRYPTION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_uint8Array ( indent + 1 , "random_number" , prim.get_random_number().get_ptr() , 16 );
    rv += policy->display_uint16 ( indent + 1 , "encrypted_diversifier" , prim.get_encrypted_diversifier() );
    rv += policy->display_uint8Array ( indent +1 , "long_term_key", prim.get_long_term_key().get_str(), 16 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_START_ENCRYPTION" );
    return rv;
}
a_string display_HCI_ULP_READ_WHITE_LIST_SIZE_pdu ( int indent , const HCI_ULP_READ_WHITE_LIST_SIZE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_WHITE_LIST_SIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_WHITE_LIST_SIZE" );
    return rv;
}
a_string display_HCI_ULP_SET_SCAN_ENABLE_pdu ( int indent , const HCI_ULP_SET_SCAN_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_SCAN_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "scan_enable" , prim.get_scan_enable() );
    rv += policy->display_uint8 ( indent + 1 , "filter_duplicates" , prim.get_filter_duplicates() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_SCAN_ENABLE" );
    return rv;
}
a_string display_HCI_SET_AFH_CHANNEL_CLASS_pdu ( int indent , const HCI_SET_AFH_CHANNEL_CLASS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SET_AFH_CHANNEL_CLASS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8Array ( indent + 1 , "map" , prim.get_map().get_ptr() , 10 );
    rv += policy->display_prim_end ( indent , "HCI_SET_AFH_CHANNEL_CLASS" );
    return rv;
}
a_string display_HCI_IO_CAPABILITY_RESPONSE_pdu ( int indent , const HCI_IO_CAPABILITY_RESPONSE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_IO_CAPABILITY_RESPONSE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "io_capability" , prim.get_io_capability() );
    rv += policy->display_uint8 ( indent + 1 , "oob_data_present" , prim.get_oob_data_present() );
    rv += policy->display_uint8 ( indent + 1 , "authentication_requirements" , prim.get_authentication_requirements() );
    rv += policy->display_prim_end ( indent , "HCI_IO_CAPABILITY_RESPONSE" );
    return rv;
}
a_string display_HCI_SET_CONN_ENCRYPTION_pdu ( int indent , const HCI_SET_CONN_ENCRYPTION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SET_CONN_ENCRYPTION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "enc_enable" , prim.get_enc_enable() );
    rv += policy->display_prim_end ( indent , "HCI_SET_CONN_ENCRYPTION" );
    return rv;
}
a_string display_HCI_READ_PIN_TYPE_pdu ( int indent , const HCI_READ_PIN_TYPE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PIN_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PIN_TYPE" );
    return rv;
}
a_string display_HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_pdu ( int indent , const HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_uint8Array ( indent +1 , "long_term_key", prim.get_long_term_key().get_str(), 16 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY" );
    return rv;
}
a_string display_HCI_ULP_TEST_END_pdu ( int indent , const HCI_ULP_TEST_END_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_TEST_END" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_TEST_END" );
    return rv;
}
a_string display_HCI_HOST_NUM_COMPLETED_PACKETS_pdu ( int indent , const HCI_HOST_NUM_COMPLETED_PACKETS_T_PDU& prim , PDU_displayer * policy )
{
    PDU_displayer::ncp_element ncp_array[64]; // plenty (256/4 = 64).
    for ( int i = 0 ; i < prim.get_num_handles() ; ++i )
        prim.get_num_completed_pkts ( i , ncp_array[i].handle , ncp_array[i].pkts );
    a_string rv = policy->display_prim_start ( indent , "HCI_HOST_NUM_COMPLETED_PACKETS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_handles" , prim.get_num_handles() );
    rv += policy->display_ncp_elementArray ( indent + 1 , "num_completed_pkts_ptr" , ncp_array , prim.get_num_handles() );
    rv += policy->display_prim_end ( indent , "HCI_HOST_NUM_COMPLETED_PACKETS" );
    return rv;
}
a_string display_HCI_READ_REMOTE_SUPP_FEATURES_pdu ( int indent , const HCI_READ_REMOTE_SUPP_FEATURES_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_REMOTE_SUPP_FEATURES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_REMOTE_SUPP_FEATURES" );
    return rv;
}
a_string display_HCI_READ_REMOTE_VER_INFO_pdu ( int indent , const HCI_READ_REMOTE_VER_INFO_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_REMOTE_VER_INFO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_REMOTE_VER_INFO" );
    return rv;
}
a_string display_HCI_HOST_BUFFER_SIZE_pdu ( int indent , const HCI_HOST_BUFFER_SIZE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_HOST_BUFFER_SIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "acl_packet_len" , prim.get_acl_packet_len() );
    rv += policy->display_uint8 ( indent + 1 , "sco_packet_len" , prim.get_sco_packet_len() );
    rv += policy->display_uint16 ( indent + 1 , "acl_total_packets" , prim.get_acl_total_packets() );
    rv += policy->display_uint16 ( indent + 1 , "sco_total_packets" , prim.get_sco_total_packets() );
    rv += policy->display_prim_end ( indent , "HCI_HOST_BUFFER_SIZE" );
    return rv;
}
a_string display_HCI_ALIAS_ADDRESS_REQ_REPLY_pdu ( int indent , const HCI_ALIAS_ADDRESS_REQ_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ALIAS_ADDRESS_REQ_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr_alias" , prim.get_bd_addr_alias() );
    rv += policy->display_prim_end ( indent , "HCI_ALIAS_ADDRESS_REQ_REPLY" );
    return rv;
}
a_string display_HCI_READ_PAGESCAN_MODE_pdu ( int indent , const HCI_READ_PAGESCAN_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGESCAN_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGESCAN_MODE" );
    return rv;
}
a_string display_HCI_WRITE_SIMPLE_PAIRING_MODE_pdu ( int indent , const HCI_WRITE_SIMPLE_PAIRING_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_SIMPLE_PAIRING_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "simple_pairing_mode" , prim.get_simple_pairing_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_SIMPLE_PAIRING_MODE" );
    return rv;
}
a_string display_HCI_ULP_CONNECTION_UPDATE_pdu ( int indent , const HCI_ULP_CONNECTION_UPDATE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_CONNECTION_UPDATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval_min" , prim.get_conn_interval_min() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval_max" , prim.get_conn_interval_max() );
    rv += policy->display_uint16 ( indent + 1 , "conn_latency" , prim.get_conn_latency() );
    rv += policy->display_uint16 ( indent + 1 , "supervision_timeout" , prim.get_supervision_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "minimum_ce_length" , prim.get_minimum_ce_length() );
    rv += policy->display_uint16 ( indent + 1 , "maximum_ce_length" , prim.get_maximum_ce_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_CONNECTION_UPDATE" );
    return rv;
}
a_string display_HCI_READ_CLOCK_pdu ( int indent , const HCI_READ_CLOCK_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CLOCK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "which_clock" , prim.get_which_clock() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CLOCK" );
    return rv;
}
a_string display_HCI_ENHANCED_FLUSH_pdu ( int indent , const HCI_ENHANCED_FLUSH_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ENHANCED_FLUSH" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_prim_end ( indent , "HCI_ENHANCED_FLUSH" );
    return rv;
}
a_string display_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_DEFAULT_LINK_POLICY_SETTINGS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_DEFAULT_LINK_POLICY_SETTINGS" );
    return rv;
}
a_string display_HCI_PERIODIC_INQUIRY_MODE_pdu ( int indent , const HCI_PERIODIC_INQUIRY_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PERIODIC_INQUIRY_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "max_period_length" , prim.get_max_period_length() );
    rv += policy->display_uint16 ( indent + 1 , "min_period_length" , prim.get_min_period_length() );
    rv += policy->display_uint24 ( indent + 1 , "lap" , prim.get_lap() );
    rv += policy->display_uint8 ( indent + 1 , "inquiry_length" , prim.get_inquiry_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += policy->display_prim_end ( indent , "HCI_PERIODIC_INQUIRY_MODE" );
    return rv;
}
a_string display_HCI_MNFR_EXTENSION_pdu ( int indent , const HCI_MNFR_EXTENSION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_MNFR_EXTENSION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "payload_descriptor" , prim.get_payload_descriptor() );
    rv += policy->display_uint8Array ( indent + 1 , "payload" , prim.get_payloadPtr() , prim.get_payload_length() );
    rv += policy->display_prim_end ( indent , "HCI_MNFR_EXTENSION" );
    return rv;
}
a_string display_HCI_ROLE_DISCOVERY_pdu ( int indent , const HCI_ROLE_DISCOVERY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ROLE_DISCOVERY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_ROLE_DISCOVERY" );
    return rv;
}
a_string display_HCI_SET_EVENT_FILTER_pdu ( int indent , const HCI_SET_EVENT_FILTER_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SET_EVENT_FILTER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += display_event_filter ( indent + 1 , prim , policy );
    rv += policy->display_prim_end ( indent , "HCI_SET_EVENT_FILTER" );
    return rv;
}
a_string display_HCI_PRIVATE_PAIRING_REQ_REPLY_pdu ( int indent , const HCI_PRIVATE_PAIRING_REQ_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PRIVATE_PAIRING_REQ_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_PRIVATE_PAIRING_REQ_REPLY" );
    return rv;
}
a_string display_HCI_READ_INQUIRYSCAN_ACTIVITY_pdu ( int indent , const HCI_READ_INQUIRYSCAN_ACTIVITY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_INQUIRYSCAN_ACTIVITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_INQUIRYSCAN_ACTIVITY" );
    return rv;
}
a_string display_HCI_READ_SIMPLE_PAIRING_MODE_pdu ( int indent , const HCI_READ_SIMPLE_PAIRING_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_SIMPLE_PAIRING_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_SIMPLE_PAIRING_MODE" );
    return rv;
}
a_string display_HCI_WRITE_INQUIRY_MODE_pdu ( int indent , const HCI_WRITE_INQUIRY_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_INQUIRY_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_INQUIRY_MODE" );
    return rv;
}
a_string display_HCI_USER_CONFIRMATION_REQUEST_REPLY_pdu ( int indent , const HCI_USER_CONFIRMATION_REQUEST_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_USER_CONFIRMATION_REQUEST_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_USER_CONFIRMATION_REQUEST_REPLY" );
    return rv;
}
a_string display_HCI_WRITE_PAGE_TIMEOUT_pdu ( int indent , const HCI_WRITE_PAGE_TIMEOUT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_PAGE_TIMEOUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "page_timeout" , prim.get_page_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_PAGE_TIMEOUT" );
    return rv;
}
a_string display_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_pdu ( int indent , const HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_ADD_DEVICE_TO_WHITE_LIST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "address_type" , prim.get_address_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "address" , prim.get_address() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_ADD_DEVICE_TO_WHITE_LIST" );
    return rv;
}
a_string display_HCI_READ_PAGESCAN_PERIOD_MODE_pdu ( int indent , const HCI_READ_PAGESCAN_PERIOD_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGESCAN_PERIOD_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGESCAN_PERIOD_MODE" );
    return rv;
}
a_string display_HCI_WRITE_PAGE_SCAN_TYPE_pdu ( int indent , const HCI_WRITE_PAGE_SCAN_TYPE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_PAGE_SCAN_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_PAGE_SCAN_TYPE" );
    return rv;
}
a_string display_HCI_REMOTE_NAME_REQ_pdu ( int indent , const HCI_REMOTE_NAME_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REMOTE_NAME_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_rep_mode" , prim.get_page_scan_rep_mode() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_mode" , prim.get_page_scan_mode() );
    rv += policy->display_uint16 ( indent + 1 , "clock_offset" , prim.get_clock_offset() );
    rv += policy->display_prim_end ( indent , "HCI_REMOTE_NAME_REQ" );
    return rv;
}
a_string display_HCI_CREATE_CONNECTION_CANCEL_pdu ( int indent , const HCI_CREATE_CONNECTION_CANCEL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_CREATE_CONNECTION_CANCEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_CREATE_CONNECTION_CANCEL" );
    return rv;
}
a_string display_HCI_READ_PAGE_SCAN_TYPE_pdu ( int indent , const HCI_READ_PAGE_SCAN_TYPE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGE_SCAN_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGE_SCAN_TYPE" );
    return rv;
}
a_string display_HCI_REMOTE_OOB_DATA_REQUEST_REPLY_pdu ( int indent , const HCI_REMOTE_OOB_DATA_REQUEST_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REMOTE_OOB_DATA_REQUEST_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8Array ( indent + 1 , "c" , prim.get_c().get_data() , 16 );
    rv += policy->display_uint8Array ( indent + 1 , "r" , prim.get_r().get_data() , 16 );
    rv += policy->display_prim_end ( indent , "HCI_REMOTE_OOB_DATA_REQUEST_REPLY" );
    return rv;
}
a_string display_HCI_READ_LOCAL_NAME_pdu ( int indent , const HCI_READ_LOCAL_NAME_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_NAME" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_NAME" );
    return rv;
}
a_string display_HCI_READ_LOCAL_VER_INFO_pdu ( int indent , const HCI_READ_LOCAL_VER_INFO_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_VER_INFO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_VER_INFO" );
    return rv;
}
a_string display_HCI_DISCONNECT_pdu ( int indent , const HCI_DISCONNECT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_DISCONNECT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "HCI_DISCONNECT" );
    return rv;
}
a_string display_HCI_WRITE_AFH_CHANNEL_CLASS_M_pdu ( int indent , const HCI_WRITE_AFH_CHANNEL_CLASS_M_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_AFH_CHANNEL_CLASS_M" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "class_mode" , prim.get_class_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_AFH_CHANNEL_CLASS_M" );
    return rv;
}
a_string display_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_pdu ( int indent , const HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8Array ( indent + 1 , "channel_map" , prim.get_channel_map().get_ptr() , 5 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION" );
    return rv;
}
a_string display_HCI_READ_ENC_MODE_pdu ( int indent , const HCI_READ_ENC_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ENC_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ENC_MODE" );
    return rv;
}
a_string display_HCI_READ_BD_ADDR_pdu ( int indent , const HCI_READ_BD_ADDR_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_BD_ADDR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_BD_ADDR" );
    return rv;
}
a_string display_HCI_GENERATED_ALIAS_pdu ( int indent , const HCI_GENERATED_ALIAS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_GENERATED_ALIAS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr_alias" , prim.get_bd_addr_alias() );
    rv += policy->display_prim_end ( indent , "HCI_GENERATED_ALIAS" );
    return rv;
}
a_string display_HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_pdu ( int indent , const HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PRIVATE_PAIRING_REQ_NEG_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_PRIVATE_PAIRING_REQ_NEG_REPLY" );
    return rv;
}
a_string display_HCI_LINK_KEY_REQ_REPLY_pdu ( int indent , const HCI_LINK_KEY_REQ_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_LINK_KEY_REQ_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    {
        size_t n = 0;

        if (prim.get_key_val().get_data() != 0)
            n = 16;

        rv += policy->display_uint8Array ( indent + 1 , "key_val" , prim.get_key_val().get_data() , n );
    }
    rv += policy->display_prim_end ( indent , "HCI_LINK_KEY_REQ_REPLY" );
    return rv;
}
a_string display_HCI_WRITE_NUM_BCAST_RETXS_pdu ( int indent , const HCI_WRITE_NUM_BCAST_RETXS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_NUM_BCAST_RETXS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num" , prim.get_num() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_NUM_BCAST_RETXS" );
    return rv;
}
a_string display_HCI_PIN_CODE_REQ_NEG_REPLY_pdu ( int indent , const HCI_PIN_CODE_REQ_NEG_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PIN_CODE_REQ_NEG_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_PIN_CODE_REQ_NEG_REPLY" );
    return rv;
}
a_string display_HCI_WRITE_ALIAS_AUTH_ENABLE_pdu ( int indent , const HCI_WRITE_ALIAS_AUTH_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_ALIAS_AUTH_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "enable" , prim.get_enable() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_ALIAS_AUTH_ENABLE" );
    return rv;
}
a_string display_HCI_WRITE_LE_HOST_SUPPORT_pdu ( int indent , const HCI_WRITE_LE_HOST_SUPPORT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_LE_HOST_SUPPORT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "le_supported_host" , prim.get_le_supported_host() );
    rv += policy->display_uint8 ( indent + 1 , "simultaneous_le_host" , prim.get_simultaneous_le_host() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_LE_HOST_SUPPORT" );
    return rv;
}
a_string display_HCI_MASTER_LINK_KEY_pdu ( int indent , const HCI_MASTER_LINK_KEY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_MASTER_LINK_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "link_key_type" , prim.get_link_key_type() );
    rv += policy->display_prim_end ( indent , "HCI_MASTER_LINK_KEY" );
    return rv;
}
a_string display_HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY" );
    return rv;
}
a_string display_HCI_ULP_ENCRYPT_pdu ( int indent , const HCI_ULP_ENCRYPT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_ENCRYPT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8Array ( indent + 1 , "aes_key" , prim.get_aes_key().get_str(), 16 );
    rv += policy->display_uint8Array ( indent + 1 , "plaintext_data" , prim.get_plaintext_data().get_str(), 16 );
    rv += policy->display_prim_end ( indent , "HCI_ULP_ENCRYPT" );
    return rv;
}
a_string display_HCI_READ_AFH_CHANNEL_CLASS_M_pdu ( int indent , const HCI_READ_AFH_CHANNEL_CLASS_M_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_AFH_CHANNEL_CLASS_M" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_AFH_CHANNEL_CLASS_M" );
    return rv;
}
a_string display_HCI_WRITE_HOLD_MODE_ACTIVITY_pdu ( int indent , const HCI_WRITE_HOLD_MODE_ACTIVITY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_HOLD_MODE_ACTIVITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "activity" , prim.get_activity() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_HOLD_MODE_ACTIVITY" );
    return rv;
}
a_string display_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_pdu ( int indent , const HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_int8 ( indent + 1 , "tx_power" , prim.get_tx_power() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL" );
    return rv;
}
a_string display_HCI_READ_SCAN_ENABLE_pdu ( int indent , const HCI_READ_SCAN_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_SCAN_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_SCAN_ENABLE" );
    return rv;
}
a_string display_HCI_READ_ENCRYPTION_KEY_SIZE_pdu ( int indent , const HCI_READ_ENCRYPTION_KEY_SIZE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ENCRYPTION_KEY_SIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ENCRYPTION_KEY_SIZE" );
    return rv;
}
a_string display_HCI_WRITE_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_WRITE_LINK_POLICY_SETTINGS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_LINK_POLICY_SETTINGS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "link_policy_settings" , prim.get_link_policy_settings() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_LINK_POLICY_SETTINGS" );
    return rv;
}
a_string display_HCI_READ_ALIAS_AUTH_ENABLE_pdu ( int indent , const HCI_READ_ALIAS_AUTH_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ALIAS_AUTH_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ALIAS_AUTH_ENABLE" );
    return rv;
}
a_string display_HCI_PIN_CODE_REQ_REPLY_pdu ( int indent , const HCI_PIN_CODE_REQ_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PIN_CODE_REQ_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "pin_code_length" , prim.get_pin_code_length() );
    rv += policy->display_uint8Array ( indent + 1 , "pin" , prim.get_pin().get_data() , prim.get_pin().get_length() );
    rv += policy->display_prim_end ( indent , "HCI_PIN_CODE_REQ_REPLY" );
    return rv;
}
a_string display_HCI_CREATE_NEW_UNIT_KEY_pdu ( int indent , const HCI_CREATE_NEW_UNIT_KEY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_CREATE_NEW_UNIT_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_CREATE_NEW_UNIT_KEY" );
    return rv;
}
a_string display_HCI_WRITE_PAGESCAN_MODE_pdu ( int indent , const HCI_WRITE_PAGESCAN_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_PAGESCAN_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_PAGESCAN_MODE" );
    return rv;
}
a_string display_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( int indent , const HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "fec_required" , prim.get_fec_required() );
    rv += policy->display_uint8Array( indent + 1 , "eir_data_part" , prim.get_eir_data_part().get_data() , prim.get_eir_data_part().get_length() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA" );
    return rv;
}
a_string display_HCI_EXIT_SNIFF_MODE_pdu ( int indent , const HCI_EXIT_SNIFF_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EXIT_SNIFF_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EXIT_SNIFF_MODE" );
    return rv;
}
a_string display_HCI_READ_LOOPBACK_MODE_pdu ( int indent , const HCI_READ_LOOPBACK_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOOPBACK_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOOPBACK_MODE" );
    return rv;
}
a_string display_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( int indent , const HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA" );
    return rv;
}
a_string display_HCI_READ_FAILED_CONTACT_COUNT_pdu ( int indent , const HCI_READ_FAILED_CONTACT_COUNT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_FAILED_CONTACT_COUNT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_FAILED_CONTACT_COUNT" );
    return rv;
}
a_string display_HCI_SNIFF_SUB_RATE_pdu ( int indent , const HCI_SNIFF_SUB_RATE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SNIFF_SUB_RATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "max_remote_latency" , prim.get_max_remote_latency() );
    rv += policy->display_uint16 ( indent + 1 , "min_remote_timeout" , prim.get_min_remote_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "min_local_timeout" , prim.get_min_local_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_SNIFF_SUB_RATE" );
    return rv;
}
a_string display_HCI_READ_ANON_MODE_pdu ( int indent , const HCI_READ_ANON_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ANON_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ANON_MODE" );
    return rv;
}
a_string display_HCI_ULP_SET_SCAN_PARAMETERS_pdu ( int indent , const HCI_ULP_SET_SCAN_PARAMETERS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_SCAN_PARAMETERS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "scan_type" , prim.get_scan_type() );
    rv += policy->display_uint16 ( indent + 1 , "scan_interval" , prim.get_scan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "scan_window" , prim.get_scan_window() );
    rv += policy->display_uint8 ( indent + 1 , "own_address_type" , prim.get_own_address_type() );
    rv += policy->display_uint8 ( indent + 1 , "scanning_filter_policy" , prim.get_scanning_filter_policy() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_SCAN_PARAMETERS" );
    return rv;
}
a_string display_HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_pdu ( int indent , const HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "simple_pairing_debug_mode" , prim.get_simple_pairing_debug_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE" );
    return rv;
}
a_string display_HCI_READ_AUTO_FLUSH_TIMEOUT_pdu ( int indent , const HCI_READ_AUTO_FLUSH_TIMEOUT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_AUTO_FLUSH_TIMEOUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_AUTO_FLUSH_TIMEOUT" );
    return rv;
}
a_string display_HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY" );
    return rv;
}
a_string display_HCI_DELETE_STORED_LINK_KEY_pdu ( int indent , const HCI_DELETE_STORED_LINK_KEY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_DELETE_STORED_LINK_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "flag" , prim.get_flag() );
    rv += policy->display_prim_end ( indent , "HCI_DELETE_STORED_LINK_KEY" );
    return rv;
}
a_string display_HCI_WRITE_CLASS_OF_DEVICE_pdu ( int indent , const HCI_WRITE_CLASS_OF_DEVICE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_CLASS_OF_DEVICE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_CLASS_OF_DEVICE" );
    return rv;
}
a_string display_HCI_WRITE_PIN_TYPE_pdu ( int indent , const HCI_WRITE_PIN_TYPE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_PIN_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "pin_type" , prim.get_pin_type() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_PIN_TYPE" );
    return rv;
}
a_string display_HCI_EXIT_PARK_MODE_pdu ( int indent , const HCI_EXIT_PARK_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EXIT_PARK_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EXIT_PARK_MODE" );
    return rv;
}
a_string display_HCI_ULP_SET_ADVERTISE_ENABLE_pdu ( int indent , const HCI_ULP_SET_ADVERTISE_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_ADVERTISE_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_enable" , prim.get_advertising_enable() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_ADVERTISE_ENABLE" );
    return rv;
}
a_string display_HCI_QOS_SETUP_pdu ( int indent , const HCI_QOS_SETUP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_QOS_SETUP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "service_type" , prim.get_service_type() );
    rv += policy->display_uint32 ( indent + 1 , "token_rate" , prim.get_token_rate() );
    rv += policy->display_uint32 ( indent + 1 , "peak_bandwidth" , prim.get_peak_bandwidth() );
    rv += policy->display_uint32 ( indent + 1 , "latency" , prim.get_latency() );
    rv += policy->display_uint32 ( indent + 1 , "delay_variation" , prim.get_delay_variation() );
    rv += policy->display_prim_end ( indent , "HCI_QOS_SETUP" );
    return rv;
}
a_string display_HCI_WRITE_PAGESCAN_ACTIVITY_pdu ( int indent , const HCI_WRITE_PAGESCAN_ACTIVITY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_PAGESCAN_ACTIVITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "pagescan_interval" , prim.get_pagescan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "pagescan_window" , prim.get_pagescan_window() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_PAGESCAN_ACTIVITY" );
    return rv;
}
a_string display_HCI_READ_VOICE_SETTING_pdu ( int indent , const HCI_READ_VOICE_SETTING_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_VOICE_SETTING" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_VOICE_SETTING" );
    return rv;
}
a_string display_HCI_PARK_MODE_pdu ( int indent , const HCI_PARK_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_PARK_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "max_interval" , prim.get_max_interval() );
    rv += policy->display_uint16 ( indent + 1 , "min_interval" , prim.get_min_interval() );
    rv += policy->display_prim_end ( indent , "HCI_PARK_MODE" );
    return rv;
}
a_string display_HCI_READ_COUNTRY_CODE_pdu ( int indent , const HCI_READ_COUNTRY_CODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_COUNTRY_CODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_COUNTRY_CODE" );
    return rv;
}
a_string display_HCI_SET_EVENT_MASK_pdu ( int indent , const HCI_SET_EVENT_MASK_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SET_EVENT_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_HCIEventMask ( indent + 1 , "event_mask" , prim.get_event_mask() );
    rv += policy->display_prim_end ( indent , "HCI_SET_EVENT_MASK" );
    return rv;
}
a_string display_HCI_HOLD_MODE_pdu ( int indent , const HCI_HOLD_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_HOLD_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "max_interval" , prim.get_max_interval() );
    rv += policy->display_uint16 ( indent + 1 , "min_interval" , prim.get_min_interval() );
    rv += policy->display_prim_end ( indent , "HCI_HOLD_MODE" );
    return rv;
}
a_string display_HCI_READ_AUTH_ENABLE_pdu ( int indent , const HCI_READ_AUTH_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_AUTH_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_AUTH_ENABLE" );
    return rv;
}
a_string display_HCI_READ_LOCAL_OOB_DATA_pdu ( int indent , const HCI_READ_LOCAL_OOB_DATA_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_OOB_DATA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_OOB_DATA" );
    return rv;
}
a_string display_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_pdu ( int indent , const HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "default_lps" , prim.get_default_lps() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS" );
    return rv;
}
a_string display_HCI_READ_PAGESCAN_ACTIVITY_pdu ( int indent , const HCI_READ_PAGESCAN_ACTIVITY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGESCAN_ACTIVITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGESCAN_ACTIVITY" );
    return rv;
}
a_string display_HCI_WRITE_CURRENT_IAC_LAP_pdu ( int indent , const HCI_WRITE_CURRENT_IAC_LAP_T_PDU& prim , PDU_displayer * policy )
{
    uint24 iac_laps[96]; // plenty (256/3 = 85).
    for ( int i = 0 ; i < prim.get_num_current_iac() ; ++i )
        iac_laps[i] = prim.get_iac_lap (i);
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_CURRENT_IAC_LAP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_current_iac" , prim.get_num_current_iac() );
    rv += policy->display_uint24Array ( indent + 1 , "iac_lap" , iac_laps , prim.get_num_current_iac() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_CURRENT_IAC_LAP" );
    return rv;
}
a_string display_HCI_ACCEPT_CONNECTION_REQ_pdu ( int indent , const HCI_ACCEPT_CONNECTION_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ACCEPT_CONNECTION_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "role" , prim.get_role() );
    rv += policy->display_prim_end ( indent , "HCI_ACCEPT_CONNECTION_REQ" );
    return rv;
}
a_string display_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_pdu ( int indent , const HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES" );
    return rv;
}
a_string display_HCI_READ_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_TX_POWER_LEVEL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_TX_POWER_LEVEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_prim_end ( indent , "HCI_READ_TX_POWER_LEVEL" );
    return rv;
}
a_string display_HCI_WRITE_LINK_SUPERV_TIMEOUT_pdu ( int indent , const HCI_WRITE_LINK_SUPERV_TIMEOUT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_LINK_SUPERV_TIMEOUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_LINK_SUPERV_TIMEOUT" );
    return rv;
}
a_string display_HCI_AUTH_REQ_pdu ( int indent , const HCI_AUTH_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_AUTH_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_AUTH_REQ" );
    return rv;
}
a_string display_HCI_INQUIRY_CANCEL_pdu ( int indent , const HCI_INQUIRY_CANCEL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_INQUIRY_CANCEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_INQUIRY_CANCEL" );
    return rv;
}
a_string display_HCI_WRITE_INQUIRYSCAN_ACTIVITY_pdu ( int indent , const HCI_WRITE_INQUIRYSCAN_ACTIVITY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_INQUIRYSCAN_ACTIVITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "inqscan_interval" , prim.get_inqscan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "inqscan_window" , prim.get_inqscan_window() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_INQUIRYSCAN_ACTIVITY" );
    return rv;
}
a_string display_HCI_READ_NUM_BCAST_RETXS_pdu ( int indent , const HCI_READ_NUM_BCAST_RETXS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_NUM_BCAST_RETXS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_NUM_BCAST_RETXS" );
    return rv;
}
a_string display_HCI_READ_AFH_CHANNEL_MAP_pdu ( int indent , const HCI_READ_AFH_CHANNEL_MAP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_AFH_CHANNEL_MAP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_AFH_CHANNEL_MAP" );
    return rv;
}
a_string display_HCI_USER_PASSKEY_REQUEST_REPLY_pdu ( int indent , const HCI_USER_PASSKEY_REQUEST_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_USER_PASSKEY_REQUEST_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint32 ( indent + 1 , "numeric_value" , prim.get_numeric_value() );
    rv += policy->display_prim_end ( indent , "HCI_USER_PASSKEY_REQUEST_REPLY" );
    return rv;
}
a_string display_HCI_WRITE_PAGESCAN_PERIOD_MODE_pdu ( int indent , const HCI_WRITE_PAGESCAN_PERIOD_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_PAGESCAN_PERIOD_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_PAGESCAN_PERIOD_MODE" );
    return rv;
}
a_string display_HCI_READ_LE_HOST_SUPPORT_pdu ( int indent , const HCI_READ_LE_HOST_SUPPORT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LE_HOST_SUPPORT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LE_HOST_SUPPORT" );
    return rv;
}
a_string display_HCI_READ_LINK_SUPERV_TIMEOUT_pdu ( int indent , const HCI_READ_LINK_SUPERV_TIMEOUT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LINK_SUPERV_TIMEOUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LINK_SUPERV_TIMEOUT" );
    return rv;
}
a_string display_HCI_EXCHANGE_ALIAS_INFO_pdu ( int indent , const HCI_EXCHANGE_ALIAS_INFO_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EXCHANGE_ALIAS_INFO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "local_alias_addr" , prim.get_local_alias_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EXCHANGE_ALIAS_INFO" );
    return rv;
}
a_string display_HCI_ULP_SET_SCAN_RESPONSE_DATA_pdu ( int indent , const HCI_ULP_SET_SCAN_RESPONSE_DATA_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_SCAN_RESPONSE_DATA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "scan_response_data_len" , prim.get_scan_response_data_len() );
    rv += policy->display_name ( indent + 1 , "scan_response_data" , prim.get_scan_response_data().get_str() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_SCAN_RESPONSE_DATA" );
    return rv;
}
a_string display_HCI_WRITE_CONN_ACCEPT_TIMEOUT_pdu ( int indent , const HCI_WRITE_CONN_ACCEPT_TIMEOUT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_CONN_ACCEPT_TIMEOUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "conn_accept_timeout" , prim.get_conn_accept_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_CONN_ACCEPT_TIMEOUT" );
    return rv;
}
a_string display_HCI_RESET_FAILED_CONTACT_COUNT_pdu ( int indent , const HCI_RESET_FAILED_CONTACT_COUNT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_RESET_FAILED_CONTACT_COUNT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_RESET_FAILED_CONTACT_COUNT" );
    return rv;
}
a_string display_HCI_WRITE_LOOPBACK_MODE_pdu ( int indent , const HCI_WRITE_LOOPBACK_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_LOOPBACK_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_LOOPBACK_MODE" );
    return rv;
}
a_string display_HCI_READ_ANON_ADDR_CHANGE_PARAMS_pdu ( int indent , const HCI_READ_ANON_ADDR_CHANGE_PARAMS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ANON_ADDR_CHANGE_PARAMS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ANON_ADDR_CHANGE_PARAMS" );
    return rv;
}
a_string display_HCI_ULP_CREATE_CONNECTION_pdu ( int indent , const HCI_ULP_CREATE_CONNECTION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_CREATE_CONNECTION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "scan_interval" , prim.get_scan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "scan_window" , prim.get_scan_window() );
    rv += policy->display_uint8 ( indent + 1 , "initiator_filter_policy" , prim.get_initiator_filter_policy() );
    rv += policy->display_uint8 ( indent + 1 , "peer_address_type" , prim.get_peer_address_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "peer_address" , prim.get_peer_address() );
    rv += policy->display_uint8 ( indent + 1 , "own_address_type" , prim.get_own_address_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval_min" , prim.get_conn_interval_min() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval_max" , prim.get_conn_interval_max() );
    rv += policy->display_uint16 ( indent + 1 , "conn_latency" , prim.get_conn_latency() );
    rv += policy->display_uint16 ( indent + 1 , "supervision_timeout" , prim.get_supervision_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "minimum_ce_length" , prim.get_minimum_ce_length() );
    rv += policy->display_uint16 ( indent + 1 , "maximum_ce_length" , prim.get_maximum_ce_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_CREATE_CONNECTION" );
    return rv;
}
a_string display_HCI_READ_LOCAL_SUPP_FEATURES_pdu ( int indent , const HCI_READ_LOCAL_SUPP_FEATURES_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_SUPP_FEATURES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_SUPP_FEATURES" );
    return rv;
}
a_string display_HCI_READ_RSSI_pdu ( int indent , const HCI_READ_RSSI_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_RSSI" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_RSSI" );
    return rv;
}
a_string display_HCI_EXIT_PERIODIC_INQUIRY_MODE_pdu ( int indent , const HCI_EXIT_PERIODIC_INQUIRY_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EXIT_PERIODIC_INQUIRY_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_EXIT_PERIODIC_INQUIRY_MODE" );
    return rv;
}
a_string display_HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_pdu ( int indent , const HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY" );
    return rv;
}
a_string display_HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_pdu ( int indent , const HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ACCEPT_SYNCHRONOUS_CONN_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint32 ( indent + 1 , "tx_bdw" , prim.get_tx_bdw() );
    rv += policy->display_uint32 ( indent + 1 , "rx_bdw" , prim.get_rx_bdw() );
    rv += policy->display_uint16 ( indent + 1 , "max_latency" , prim.get_max_latency() );
    rv += policy->display_uint16 ( indent + 1 , "voice_settings" , prim.get_voice_settings() );
    rv += policy->display_uint8 ( indent + 1 , "retx_effort" , prim.get_retx_effort() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_prim_end ( indent , "HCI_ACCEPT_SYNCHRONOUS_CONN_REQ" );
    return rv;
}
a_string display_HCI_WRITE_ENC_MODE_pdu ( int indent , const HCI_WRITE_ENC_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_ENC_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_ENC_MODE" );
    return rv;
}
a_string display_HCI_READ_CONN_ACCEPT_TIMEOUT_pdu ( int indent , const HCI_READ_CONN_ACCEPT_TIMEOUT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CONN_ACCEPT_TIMEOUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CONN_ACCEPT_TIMEOUT" );
    return rv;
}
a_string display_HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_IO_CAPABILITY_REQUEST_NEG_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "HCI_IO_CAPABILITY_REQUEST_NEG_REPLY" );
    return rv;
}
a_string display_HCI_ENABLE_DUT_MODE_pdu ( int indent , const HCI_ENABLE_DUT_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ENABLE_DUT_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ENABLE_DUT_MODE" );
    return rv;
}
a_string display_HCI_ULP_READ_SUPPORTED_STATES_pdu ( int indent , const HCI_ULP_READ_SUPPORTED_STATES_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_SUPPORTED_STATES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_SUPPORTED_STATES" );
    return rv;
}
a_string display_HCI_GET_LINK_QUALITY_pdu ( int indent , const HCI_GET_LINK_QUALITY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_GET_LINK_QUALITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_GET_LINK_QUALITY" );
    return rv;
}
a_string display_HCI_CHANGE_CONN_PKT_TYPE_pdu ( int indent , const HCI_CHANGE_CONN_PKT_TYPE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_CHANGE_CONN_PKT_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_prim_end ( indent , "HCI_CHANGE_CONN_PKT_TYPE" );
    return rv;
}
a_string display_HCI_WRITE_VOICE_SETTING_pdu ( int indent , const HCI_WRITE_VOICE_SETTING_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_VOICE_SETTING" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "voice_setting" , prim.get_voice_setting() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_VOICE_SETTING" );
    return rv;
}
a_string display_HCI_READ_ENH_TX_POWER_LEVEL_pdu ( int indent , const HCI_READ_ENH_TX_POWER_LEVEL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_ENH_TX_POWER_LEVEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_prim_end ( indent , "HCI_READ_ENH_TX_POWER_LEVEL" );
    return rv;
}
a_string display_HCI_ULP_SET_RANDOM_ADDRESS_pdu ( int indent , const HCI_ULP_SET_RANDOM_ADDRESS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_RANDOM_ADDRESS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "random_address" , prim.get_random_address() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_RANDOM_ADDRESS" );
    return rv;
}
a_string display_HCI_READ_CLOCK_OFFSET_pdu ( int indent , const HCI_READ_CLOCK_OFFSET_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CLOCK_OFFSET" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CLOCK_OFFSET" );
    return rv;
}
a_string display_HCI_REMOTE_NAME_REQ_CANCEL_pdu ( int indent , const HCI_REMOTE_NAME_REQ_CANCEL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REMOTE_NAME_REQ_CANCEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_REMOTE_NAME_REQ_CANCEL" );
    return rv;
}
a_string display_HCI_WRITE_STORED_LINK_KEY_pdu ( int indent , const HCI_WRITE_STORED_LINK_KEY_T_PDU& prim , PDU_displayer * policy )
{
    PDU_displayer::lb_element lb_array[16]; // plenty (256/22 = 11).
    uint8 key_count = prim.get_number_keys();
    for ( int i = 0 ; i < key_count ; ++i )
        prim.get_link_key_bd_addr ( i , lb_array[i].bd_addr , lb_array[i].key );
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_STORED_LINK_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "number_keys" , prim.get_number_keys() );
    rv += policy->display_link_key_bd_addrArray ( indent + 1 , "link_key_bd_addr" , lb_array , key_count );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_STORED_LINK_KEY" );
    return rv;
}
a_string display_HCI_ULP_RECEIVER_TEST_pdu ( int indent , const HCI_ULP_RECEIVER_TEST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_RECEIVER_TEST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "rx_channel" , prim.get_rx_channel() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_RECEIVER_TEST" );
    return rv;
}
a_string display_HCI_ULP_READ_BUFFER_SIZE_pdu ( int indent , const HCI_ULP_READ_BUFFER_SIZE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_BUFFER_SIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_BUFFER_SIZE" );
    return rv;
}
a_string display_HCI_USER_PASSKEY_REQUEST_NEG_REPLY_pdu ( int indent , const HCI_USER_PASSKEY_REQUEST_NEG_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_USER_PASSKEY_REQUEST_NEG_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_USER_PASSKEY_REQUEST_NEG_REPLY" );
    return rv;
}
a_string display_HCI_LINK_KEY_REQ_NEG_REPLY_pdu ( int indent , const HCI_LINK_KEY_REQ_NEG_REPLY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_LINK_KEY_REQ_NEG_REPLY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_LINK_KEY_REQ_NEG_REPLY" );
    return rv;
}
a_string display_HCI_READ_LOCAL_EXT_FEATURES_pdu ( int indent , const HCI_READ_LOCAL_EXT_FEATURES_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_EXT_FEATURES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "page_num" , prim.get_page_num() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_EXT_FEATURES" );
    return rv;
}
a_string display_HCI_READ_CLASS_OF_DEVICE_pdu ( int indent , const HCI_READ_CLASS_OF_DEVICE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CLASS_OF_DEVICE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CLASS_OF_DEVICE" );
    return rv;
}
a_string display_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_pdu ( int indent , const HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "address_type" , prim.get_address_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "address" , prim.get_address() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST" );
    return rv;
}
a_string display_HCI_READ_BUFFER_SIZE_pdu ( int indent , const HCI_READ_BUFFER_SIZE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_BUFFER_SIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_BUFFER_SIZE" );
    return rv;
}
a_string display_HCI_ULP_READ_REMOTE_USED_FEATURES_pdu ( int indent , const HCI_ULP_READ_REMOTE_USED_FEATURES_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_REMOTE_USED_FEATURES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_REMOTE_USED_FEATURES" );
    return rv;
}
a_string display_HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_pdu ( int indent , const HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "max_failures" , prim.get_max_failures() );
    rv += policy->display_prim_end ( indent , "HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER" );
    return rv;
}
a_string display_HCI_FLOW_SPEC_pdu ( int indent , const HCI_FLOW_SPEC_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_FLOW_SPEC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "flow_direction" , prim.get_flow_direction() );
    rv += policy->display_uint8 ( indent + 1 , "service_type" , prim.get_service_type() );
    rv += policy->display_uint32 ( indent + 1 , "token_rate" , prim.get_token_rate() );
    rv += policy->display_uint32 ( indent + 1 , "token_bucket_size" , prim.get_token_bucket_size() );
    rv += policy->display_uint32 ( indent + 1 , "peak_bandwidth" , prim.get_peak_bandwidth() );
    rv += policy->display_uint32 ( indent + 1 , "access_latency" , prim.get_access_latency() );
    rv += policy->display_prim_end ( indent , "HCI_FLOW_SPEC" );
    return rv;
}
a_string display_HCI_ULP_SET_EVENT_MASK_pdu ( int indent , const HCI_ULP_SET_EVENT_MASK_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_EVENT_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_ULPEventMask ( indent + 1 , "ulp_event_mask" , prim.get_ulp_event_mask() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_EVENT_MASK" );
    return rv;
}
a_string display_HCI_SET_HCTOHOST_FLOW_CONTROL_pdu ( int indent , const HCI_SET_HCTOHOST_FLOW_CONTROL_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SET_HCTOHOST_FLOW_CONTROL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "enable" , prim.get_enable() );
    rv += policy->display_prim_end ( indent , "HCI_SET_HCTOHOST_FLOW_CONTROL" );
    return rv;
}
a_string display_HCI_WRITE_SCAN_ENABLE_pdu ( int indent , const HCI_WRITE_SCAN_ENABLE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_SCAN_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "scan_enable" , prim.get_scan_enable() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_SCAN_ENABLE" );
    return rv;
}
a_string display_HCI_ULP_READ_CHANNEL_MAP_pdu ( int indent , const HCI_ULP_READ_CHANNEL_MAP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_READ_CHANNEL_MAP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_READ_CHANNEL_MAP" );
    return rv;
}
a_string display_HCI_SNIFF_MODE_pdu ( int indent , const HCI_SNIFF_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_SNIFF_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "max_interval" , prim.get_max_interval() );
    rv += policy->display_uint16 ( indent + 1 , "min_interval" , prim.get_min_interval() );
    rv += policy->display_uint16 ( indent + 1 , "attempt" , prim.get_attempt() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_SNIFF_MODE" );
    return rv;
}
a_string display_HCI_READ_LOCAL_SUPP_COMMANDS_pdu ( int indent , const HCI_READ_LOCAL_SUPP_COMMANDS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_LOCAL_SUPP_COMMANDS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_LOCAL_SUPP_COMMANDS" );
    return rv;
}
a_string display_HCI_REJECT_CONNECTION_REQ_pdu ( int indent , const HCI_REJECT_CONNECTION_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_REJECT_CONNECTION_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "HCI_REJECT_CONNECTION_REQ" );
    return rv;
}
a_string display_HCI_ULP_SET_ADVERTISING_PARAMETERS_pdu ( int indent , const HCI_ULP_SET_ADVERTISING_PARAMETERS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_ADVERTISING_PARAMETERS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "adv_interval_min" , prim.get_adv_interval_min() );
    rv += policy->display_uint16 ( indent + 1 , "adv_interval_max" , prim.get_adv_interval_max() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_type" , prim.get_advertising_type() );
    rv += policy->display_uint8 ( indent + 1 , "own_address_type" , prim.get_own_address_type() );
    rv += policy->display_uint8 ( indent + 1 , "direct_address_type" , prim.get_direct_address_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "direct_address" , prim.get_direct_address() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_channel_map" , prim.get_advertising_channel_map() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_filter_policy" , prim.get_advertising_filter_policy() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_ADVERTISING_PARAMETERS" );
    return rv;
}
a_string display_HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_pdu ( int indent , const HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_WRITE_ANON_ADDR_CHANGE_PARAMS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint32 ( indent + 1 , "addr_update_time" , prim.get_addr_update_time() );
    rv += policy->display_uint16 ( indent + 1 , "addr_inquiry_period" , prim.get_addr_inquiry_period() );
    rv += policy->display_prim_end ( indent , "HCI_WRITE_ANON_ADDR_CHANGE_PARAMS" );
    return rv;
}
a_string display_HCI_CREATE_CONNECTION_pdu ( int indent , const HCI_CREATE_CONNECTION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_CREATE_CONNECTION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_rep_mode" , prim.get_page_scan_rep_mode() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_mode" , prim.get_page_scan_mode() );
    rv += policy->display_uint16 ( indent + 1 , "clock_offset" , prim.get_clock_offset() );
    rv += policy->display_uint8 ( indent + 1 , "allow_role_switch" , prim.get_allow_role_switch() );
    rv += policy->display_prim_end ( indent , "HCI_CREATE_CONNECTION" );
    return rv;
}
a_string display_HCI_READ_CURRENT_IAC_LAP_pdu ( int indent , const HCI_READ_CURRENT_IAC_LAP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_CURRENT_IAC_LAP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_CURRENT_IAC_LAP" );
    return rv;
}
a_string display_HCI_READ_HOLD_MODE_ACTIVITY_pdu ( int indent , const HCI_READ_HOLD_MODE_ACTIVITY_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_HOLD_MODE_ACTIVITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_HOLD_MODE_ACTIVITY" );
    return rv;
}
a_string display_HCI_CHANGE_LOCAL_NAME_pdu ( int indent , const HCI_CHANGE_LOCAL_NAME_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_CHANGE_LOCAL_NAME" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_name ( indent + 1 , "name_part" , prim.get_name_part().get_str() );
    rv += policy->display_prim_end ( indent , "HCI_CHANGE_LOCAL_NAME" );
    return rv;
}
a_string display_HCI_ULP_SET_ADVERTISING_DATA_pdu ( int indent , const HCI_ULP_SET_ADVERTISING_DATA_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_ULP_SET_ADVERTISING_DATA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_data_len" , prim.get_advertising_data_len() );
    rv += policy->display_name ( indent + 1 , "advertising_data" , prim.get_advertising_data().get_str() );
    rv += policy->display_prim_end ( indent , "HCI_ULP_SET_ADVERTISING_DATA" );
    return rv;
}
a_string display_HCI_READ_INQUIRY_MODE_pdu ( int indent , const HCI_READ_INQUIRY_MODE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_INQUIRY_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_INQUIRY_MODE" );
    return rv;
}
a_string display_HCI_READ_PAGE_TIMEOUT_pdu ( int indent , const HCI_READ_PAGE_TIMEOUT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_READ_PAGE_TIMEOUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_prim_end ( indent , "HCI_READ_PAGE_TIMEOUT" );
    return rv;
}
a_string display_HCI_EV_USER_PASSKEY_REQUEST_pdu ( int indent , const HCI_EV_USER_PASSKEY_REQUEST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_USER_PASSKEY_REQUEST" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_USER_PASSKEY_REQUEST" );
    return rv;
}
a_string display_HCI_EV_KEYPRESS_NOTIFICATION_pdu ( int indent , const HCI_EV_KEYPRESS_NOTIFICATION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_KEYPRESS_NOTIFICATION" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "notification_type" , prim.get_notification_type() );
    rv += policy->display_prim_end ( indent , "HCI_EV_KEYPRESS_NOTIFICATION" );
    return rv;
}
a_string display_HCI_EV_DATA_BUFFER_OVERFLOW_pdu ( int indent , const HCI_EV_DATA_BUFFER_OVERFLOW_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_DATA_BUFFER_OVERFLOW" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "link_type" , prim.get_link_type() );
    rv += policy->display_prim_end ( indent , "HCI_EV_DATA_BUFFER_OVERFLOW" );
    return rv;
}
a_string display_HCI_EV_ACTIVE_ADDRESS_pdu ( int indent , const HCI_EV_ACTIVE_ADDRESS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ACTIVE_ADDRESS" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr_fixed" , prim.get_bd_addr_fixed() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ACTIVE_ADDRESS" );
    return rv;
}
a_string display_HCI_EV_SYNC_CONN_COMPLETE_pdu ( int indent , const HCI_EV_SYNC_CONN_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_SYNC_CONN_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "link_type" , prim.get_link_type() );
    rv += policy->display_uint8 ( indent + 1 , "tx_interval" , prim.get_tx_interval() );
    rv += policy->display_uint8 ( indent + 1 , "wesco" , prim.get_wesco() );
    rv += policy->display_uint16 ( indent + 1 , "rx_packet_length" , prim.get_rx_packet_length() );
    rv += policy->display_uint16 ( indent + 1 , "tx_packet_length" , prim.get_tx_packet_length() );
    rv += policy->display_uint8 ( indent + 1 , "air_mode" , prim.get_air_mode() );
    rv += policy->display_prim_end ( indent , "HCI_EV_SYNC_CONN_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_ALIAS_ADDRESS_REQ_pdu ( int indent , const HCI_EV_ALIAS_ADDRESS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ALIAS_ADDRESS_REQ" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ALIAS_ADDRESS_REQ" );
    return rv;
}
a_string display_HCI_EV_LINK_KEY_NOTIFICATION_pdu ( int indent , const HCI_EV_LINK_KEY_NOTIFICATION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_LINK_KEY_NOTIFICATION" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    {
        size_t n = 0;

        if (prim.get_link_key().get_data() != 0)
            n = 16;

        rv += policy->display_uint8Array ( indent + 1 , "link_key" , prim.get_link_key().get_data() , n );
    }
    rv += policy->display_uint8 ( indent + 1 , "key_type" , prim.get_key_type() );
    rv += policy->display_prim_end ( indent , "HCI_EV_LINK_KEY_NOTIFICATION" );
    return rv;
}
a_string display_HCI_EV_ALLOW_PRIVATE_PAIRING_pdu ( int indent , const HCI_EV_ALLOW_PRIVATE_PAIRING_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ALLOW_PRIVATE_PAIRING" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ALLOW_PRIVATE_PAIRING" );
    return rv;
}
a_string display_HCI_EV_DISCONNECT_COMPLETE_pdu ( int indent , const HCI_EV_DISCONNECT_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_DISCONNECT_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "HCI_EV_DISCONNECT_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_INQUIRY_RESULT_pdu ( int indent , const HCI_EV_INQUIRY_RESULT_T_PDU& prim , PDU_displayer * policy )
{
    a_string results;
    char str[32] = "inquiry_result_";
    for ( int i = 0 ; i < prim.get_num_responses() ; ++i )
    {
        sprintf ( str+15 , "%d" , i );
        results += policy->display_InquiryResult ( indent + 1 , str , prim.get_result ( i ) );
    }
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_INQUIRY_RESULT" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += results;
    rv += policy->display_prim_end ( indent , "HCI_EV_INQUIRY_RESULT" );
    return rv;
}
a_string display_HCI_EV_LST_CHANGE_pdu ( int indent , const HCI_EV_LST_CHANGE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_LST_CHANGE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_EV_LST_CHANGE" );
    return rv;
}
a_string display_HCI_EV_COMMAND_STATUS_pdu ( int indent , const HCI_EV_COMMAND_STATUS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_COMMAND_STATUS" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "num_hci_command_pkts" , prim.get_num_hci_command_pkts() );
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_prim_end ( indent , "HCI_EV_COMMAND_STATUS" );
    return rv;
}
a_string display_HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE_pdu ( int indent , const HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_READ_CLOCK_OFFSET_COMPLETE_pdu ( int indent , const HCI_EV_READ_CLOCK_OFFSET_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_READ_CLOCK_OFFSET_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "clock_offset" , prim.get_clock_offset() );
    rv += policy->display_prim_end ( indent , "HCI_EV_READ_CLOCK_OFFSET_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_CONN_REQUEST_pdu ( int indent , const HCI_EV_CONN_REQUEST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_CONN_REQUEST" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_uint8 ( indent + 1 , "link_type" , prim.get_link_type() );
    rv += policy->display_prim_end ( indent , "HCI_EV_CONN_REQUEST" );
    return rv;
}
a_string display_HCI_EV_MODE_CHANGE_pdu ( int indent , const HCI_EV_MODE_CHANGE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_MODE_CHANGE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "curr_mode" , prim.get_curr_mode() );
    rv += policy->display_uint16 ( indent + 1 , "interval" , prim.get_interval() );
    rv += policy->display_prim_end ( indent , "HCI_EV_MODE_CHANGE" );
    return rv;
}
a_string display_HCI_EV_USER_PASSKEY_NOTIFICATION_pdu ( int indent , const HCI_EV_USER_PASSKEY_NOTIFICATION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_USER_PASSKEY_NOTIFICATION" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint32 ( indent + 1 , "passkey" , prim.get_passkey() );
    rv += policy->display_prim_end ( indent , "HCI_EV_USER_PASSKEY_NOTIFICATION" );
    return rv;
}
a_string display_HCI_EV_FIXED_ADDRESS_ATTEMPT_pdu ( int indent , const HCI_EV_FIXED_ADDRESS_ATTEMPT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_FIXED_ADDRESS_ATTEMPT" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint32 ( indent + 1 , "reserved" , prim.get_reserved() );
    rv += policy->display_prim_end ( indent , "HCI_EV_FIXED_ADDRESS_ATTEMPT" );
    return rv;
}
a_string display_HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE_pdu ( int indent , const HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8Array ( indent + 1 , "lmp_supp_features" , prim.get_lmp_supp_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_REMOTE_NAME_REQ_COMPLETE_pdu ( int indent , const HCI_EV_REMOTE_NAME_REQ_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_REMOTE_NAME_REQ_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_name ( indent + 1 , "name_part" , prim.get_name_part().get_str() );
    rv += policy->display_prim_end ( indent , "HCI_EV_REMOTE_NAME_REQ_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_CONN_COMPLETE_pdu ( int indent , const HCI_EV_CONN_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_CONN_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "link_type" , prim.get_link_type() );
    rv += policy->display_uint8 ( indent + 1 , "enc_mode" , prim.get_enc_mode() );
    rv += policy->display_prim_end ( indent , "HCI_EV_CONN_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_REM_HOST_SUPPORTED_FEATURES_pdu ( int indent , const HCI_EV_REM_HOST_SUPPORTED_FEATURES_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_REM_HOST_SUPPORTED_FEATURES" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8Array ( indent + 1 , "host_features" , prim.get_host_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "HCI_EV_REM_HOST_SUPPORTED_FEATURES" );
    return rv;
}
a_string display_HCI_EV_GENERATE_ALIAS_REQ_pdu ( int indent , const HCI_EV_GENERATE_ALIAS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_GENERATE_ALIAS_REQ" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EV_GENERATE_ALIAS_REQ" );
    return rv;
}
a_string display_HCI_EV_READ_REMOTE_VER_INFO_COMPLETE_pdu ( int indent , const HCI_EV_READ_REMOTE_VER_INFO_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_READ_REMOTE_VER_INFO_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "lmp_version" , prim.get_lmp_version() );
    rv += policy->display_uint16 ( indent + 1 , "manuf_name" , prim.get_manuf_name() );
    rv += policy->display_uint16 ( indent + 1 , "lmp_subversion" , prim.get_lmp_subversion() );
    rv += policy->display_prim_end ( indent , "HCI_EV_READ_REMOTE_VER_INFO_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_EXTENDED_INQUIRY_RESULT_pdu ( int indent , const HCI_EV_EXTENDED_INQUIRY_RESULT_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_EXTENDED_INQUIRY_RESULT" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_rep_mode" , prim.get_page_scan_rep_mode() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_period_mode" , prim.get_page_scan_period_mode() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_uint16 ( indent + 1 , "clock_offset" , prim.get_clock_offset() );
    rv += policy->display_int8 ( indent + 1 , "rssi" , prim.get_rssi() );
    rv += policy->display_uint8Array( indent + 1 , "eir_data_part" , prim.get_eir_data_part().get_data() , prim.get_eir_data_part().get_length() );
    rv += policy->display_prim_end ( indent , "HCI_EV_EXTENDED_INQUIRY_RESULT" );
    return rv;
}
a_string display_HCI_EV_IO_CAPABILITY_REQUEST_pdu ( int indent , const HCI_EV_IO_CAPABILITY_REQUEST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_IO_CAPABILITY_REQUEST" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_IO_CAPABILITY_REQUEST" );
    return rv;
}
a_string display_HCI_EV_IO_CAPABILITY_RESPONSE_pdu ( int indent , const HCI_EV_IO_CAPABILITY_RESPONSE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_IO_CAPABILITY_RESPONSE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "io_capability" , prim.get_io_capability() );
    rv += policy->display_uint8 ( indent + 1 , "oob_data_present" , prim.get_oob_data_present() );
    rv += policy->display_uint8 ( indent + 1 , "authentication_requirements" , prim.get_authentication_requirements() );
    rv += policy->display_prim_end ( indent , "HCI_EV_IO_CAPABILITY_RESPONSE" );
    return rv;
}
a_string display_HCI_EV_ROLE_CHANGE_pdu ( int indent , const HCI_EV_ROLE_CHANGE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ROLE_CHANGE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "new_role" , prim.get_new_role() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ROLE_CHANGE" );
    return rv;
}
a_string display_HCI_EV_LINK_KEY_REQ_pdu ( int indent , const HCI_EV_LINK_KEY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_LINK_KEY_REQ" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_LINK_KEY_REQ" );
    return rv;
}
a_string display_HCI_EV_USER_CONFIRMATION_REQUEST_pdu ( int indent , const HCI_EV_USER_CONFIRMATION_REQUEST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_USER_CONFIRMATION_REQUEST" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint32 ( indent + 1 , "numeric_value" , prim.get_numeric_value() );
    rv += policy->display_prim_end ( indent , "HCI_EV_USER_CONFIRMATION_REQUEST" );
    return rv;
}
a_string display_HCI_EV_FLOW_SPEC_COMPLETE_pdu ( int indent , const HCI_EV_FLOW_SPEC_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_FLOW_SPEC_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "flow_direction" , prim.get_flow_direction() );
    rv += policy->display_uint8 ( indent + 1 , "service_type" , prim.get_service_type() );
    rv += policy->display_uint32 ( indent + 1 , "token_rate" , prim.get_token_rate() );
    rv += policy->display_uint32 ( indent + 1 , "token_bucket_size" , prim.get_token_bucket_size() );
    rv += policy->display_uint32 ( indent + 1 , "peak_bandwidth" , prim.get_peak_bandwidth() );
    rv += policy->display_uint32 ( indent + 1 , "access_latency" , prim.get_access_latency() );
    rv += policy->display_prim_end ( indent , "HCI_EV_FLOW_SPEC_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_REMOTE_OOB_DATA_REQUEST_pdu ( int indent , const HCI_EV_REMOTE_OOB_DATA_REQUEST_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_REMOTE_OOB_DATA_REQUEST" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_REMOTE_OOB_DATA_REQUEST" );
    return rv;
}
a_string display_HCI_EV_MASTER_LINK_KEY_COMPLETE_pdu ( int indent , const HCI_EV_MASTER_LINK_KEY_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_MASTER_LINK_KEY_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "key_flag" , prim.get_key_flag() );
    rv += policy->display_prim_end ( indent , "HCI_EV_MASTER_LINK_KEY_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_SIMPLE_PAIRING_COMPLETE_pdu ( int indent , const HCI_EV_SIMPLE_PAIRING_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_SIMPLE_PAIRING_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_SIMPLE_PAIRING_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_FLUSH_OCCURRED_pdu ( int indent , const HCI_EV_FLUSH_OCCURRED_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_FLUSH_OCCURRED" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EV_FLUSH_OCCURRED" );
    return rv;
}
a_string display_HCI_EV_PAGE_SCAN_REP_MODE_CHANGE_pdu ( int indent , const HCI_EV_PAGE_SCAN_REP_MODE_CHANGE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_PAGE_SCAN_REP_MODE_CHANGE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_rep_mode" , prim.get_page_scan_rep_mode() );
    rv += policy->display_prim_end ( indent , "HCI_EV_PAGE_SCAN_REP_MODE_CHANGE" );
    return rv;
}
a_string display_HCI_EV_MNFR_EXTENSION_pdu ( int indent , const HCI_EV_MNFR_EXTENSION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_MNFR_EXTENSION" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "payload_descriptor" , prim.get_payload_descriptor() );
    rv += policy->display_uint8Array ( indent + 1 , "payload" , prim.get_payloadPtr() , prim.get_payload_length() );
    rv += policy->display_prim_end ( indent , "HCI_EV_MNFR_EXTENSION" );
    return rv;
}
a_string display_HCI_EV_CONN_PACKET_TYPE_CHANGED_pdu ( int indent , const HCI_EV_CONN_PACKET_TYPE_CHANGED_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_CONN_PACKET_TYPE_CHANGED" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_prim_end ( indent , "HCI_EV_CONN_PACKET_TYPE_CHANGED" );
    return rv;
}
a_string display_HCI_EV_INQUIRY_RESULT_WITH_RSSI_pdu ( int indent , const HCI_EV_INQUIRY_RESULT_WITH_RSSI_T_PDU& prim , PDU_displayer * policy )
{
    a_string results;
    char str[32] = "inquiry_result_";
    for ( int i = 0 ; i < prim.get_num_responses() ; ++i )
    {
        sprintf ( str+15 , "%d" , i );
        results += policy->display_InquiryResultWithRSSI ( indent + 1 , str , prim.get_result ( i ) );
    }
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_INQUIRY_RESULT_WITH_RSSI" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += results;
    rv += policy->display_prim_end ( indent , "HCI_EV_INQUIRY_RESULT_WITH_RSSI" );
    return rv;
}
a_string display_HCI_EV_HARDWARE_ERROR_pdu ( int indent , const HCI_EV_HARDWARE_ERROR_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_HARDWARE_ERROR" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "hw_error" , prim.get_hw_error() );
    rv += policy->display_prim_end ( indent , "HCI_EV_HARDWARE_ERROR" );
    return rv;
}
a_string display_HCI_EV_SYNC_CONN_CHANGED_pdu ( int indent , const HCI_EV_SYNC_CONN_CHANGED_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_SYNC_CONN_CHANGED" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "tx_interval" , prim.get_tx_interval() );
    rv += policy->display_uint8 ( indent + 1 , "wesco" , prim.get_wesco() );
    rv += policy->display_uint16 ( indent + 1 , "rx_packet_length" , prim.get_rx_packet_length() );
    rv += policy->display_uint16 ( indent + 1 , "tx_packet_length" , prim.get_tx_packet_length() );
    rv += policy->display_prim_end ( indent , "HCI_EV_SYNC_CONN_CHANGED" );
    return rv;
}
a_string display_HCI_EV_QOS_VIOLATION_pdu ( int indent , const HCI_EV_QOS_VIOLATION_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_QOS_VIOLATION" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EV_QOS_VIOLATION" );
    return rv;
}
a_string display_HCI_EV_READ_REM_EXT_FEATURES_COMPLETE_pdu ( int indent , const HCI_EV_READ_REM_EXT_FEATURES_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_READ_REM_EXT_FEATURES_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "page_num" , prim.get_page_num() );
    rv += policy->display_uint8 ( indent + 1 , "max_page_num" , prim.get_max_page_num() );
    rv += policy->display_uint8Array ( indent + 1 , "lmp_ext_features" , prim.get_lmp_ext_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "HCI_EV_READ_REM_EXT_FEATURES_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_MAX_SLOTS_CHANGE_pdu ( int indent , const HCI_EV_MAX_SLOTS_CHANGE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_MAX_SLOTS_CHANGE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "lmp_max_slots" , prim.get_lmp_max_slots() );
    rv += policy->display_prim_end ( indent , "HCI_EV_MAX_SLOTS_CHANGE" );
    return rv;
}
a_string display_HCI_EV_ALIAS_ADDRESS_pdu ( int indent , const HCI_EV_ALIAS_ADDRESS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ALIAS_ADDRESS" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ALIAS_ADDRESS" );
    return rv;
}
a_string display_HCI_EV_RETURN_LINK_KEYS_pdu ( int indent , const HCI_EV_RETURN_LINK_KEYS_T_PDU& prim , PDU_displayer * policy )
{
    PDU_displayer::lb_element lb_array[16]; // plenty (256/22 = 11).
    uint8 key_count = prim.get_number_keys();
    for ( int i = 0 ; i < key_count ; ++i )
        prim.get_link_key_bd_addr ( i , lb_array[i].bd_addr , lb_array[i].key );
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_RETURN_LINK_KEYS" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "number_keys" , prim.get_number_keys() );
    rv += policy->display_link_key_bd_addrArray ( indent + 1 , "link_key_bd_addr" , lb_array , key_count );
    rv += policy->display_prim_end ( indent , "HCI_EV_RETURN_LINK_KEYS" );
    return rv;
}
a_string display_HCI_EV_FIXED_ADDRESS_pdu ( int indent , const HCI_EV_FIXED_ADDRESS_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_FIXED_ADDRESS" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_FIXED_ADDRESS" );
    return rv;
}
a_string display_HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE_pdu ( int indent , const HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_SNIFF_SUB_RATE_pdu ( int indent , const HCI_EV_SNIFF_SUB_RATE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_SNIFF_SUB_RATE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "transmit_latency" , prim.get_transmit_latency() );
    rv += policy->display_uint16 ( indent + 1 , "receive_latency" , prim.get_receive_latency() );
    rv += policy->display_uint16 ( indent + 1 , "remote_timeout" , prim.get_remote_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "local_timeout" , prim.get_local_timeout() );
    rv += policy->display_prim_end ( indent , "HCI_EV_SNIFF_SUB_RATE" );
    return rv;
}
a_string display_HCI_EV_INQUIRY_COMPLETE_pdu ( int indent , const HCI_EV_INQUIRY_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_INQUIRY_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HCI_EV_INQUIRY_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_ALIAS_NOT_RECOGNISED_pdu ( int indent , const HCI_EV_ALIAS_NOT_RECOGNISED_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ALIAS_NOT_RECOGNISED" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ALIAS_NOT_RECOGNISED" );
    return rv;
}
a_string display_HCI_EV_QOS_SETUP_COMPLETE_pdu ( int indent , const HCI_EV_QOS_SETUP_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_QOS_SETUP_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "service_type" , prim.get_service_type() );
    rv += policy->display_uint32 ( indent + 1 , "token_rate" , prim.get_token_rate() );
    rv += policy->display_uint32 ( indent + 1 , "peak_bandwidth" , prim.get_peak_bandwidth() );
    rv += policy->display_uint32 ( indent + 1 , "latency" , prim.get_latency() );
    rv += policy->display_uint32 ( indent + 1 , "delay_variation" , prim.get_delay_variation() );
    rv += policy->display_prim_end ( indent , "HCI_EV_QOS_SETUP_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_NUMBER_COMPLETED_PKTS_pdu ( int indent , const HCI_EV_NUMBER_COMPLETED_PKTS_T_PDU& prim , PDU_displayer * policy )
{
    PDU_displayer::ncp_element ncp_array[64]; // plenty (256/4 = 64).
    for ( int i = 0 ; i < prim.get_num_handles() ; ++i )
        prim.get_num_completed_pkts ( i , ncp_array[i].handle , ncp_array[i].pkts );
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_NUMBER_COMPLETED_PKTS" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_handles" , prim.get_num_handles() );
    rv += policy->display_ncp_elementArray ( indent + 1 , "num_completed_pkts_ptr" , ncp_array , prim.get_num_handles() );
    rv += policy->display_prim_end ( indent , "HCI_EV_NUMBER_COMPLETED_PKTS" );
    return rv;
}
a_string display_HCI_EV_AUTH_COMPLETE_pdu ( int indent , const HCI_EV_AUTH_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_AUTH_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EV_AUTH_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_ENHANCED_FLUSH_COMPLETE_pdu ( int indent , const HCI_EV_ENHANCED_FLUSH_COMPLETE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ENHANCED_FLUSH_COMPLETE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ENHANCED_FLUSH_COMPLETE" );
    return rv;
}
a_string display_HCI_EV_PAGE_SCAN_MODE_CHANGE_pdu ( int indent , const HCI_EV_PAGE_SCAN_MODE_CHANGE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_PAGE_SCAN_MODE_CHANGE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_mode" , prim.get_page_scan_mode() );
    rv += policy->display_prim_end ( indent , "HCI_EV_PAGE_SCAN_MODE_CHANGE" );
    return rv;
}
a_string display_HCI_EV_ENCRYPTION_CHANGE_pdu ( int indent , const HCI_EV_ENCRYPTION_CHANGE_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_ENCRYPTION_CHANGE" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "enc_enable" , prim.get_enc_enable() );
    rv += policy->display_prim_end ( indent , "HCI_EV_ENCRYPTION_CHANGE" );
    return rv;
}
a_string display_HCI_EV_LOOPBACK_COMMAND_pdu ( int indent , const HCI_EV_LOOPBACK_COMMAND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_LOOPBACK_COMMAND" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_data ( indent + 1 , "loopback_part_ptr" , display_cmd_pdu ( indent + 2 , prim.get_loopback_part() , policy ) );
    rv += policy->display_prim_end ( indent , "HCI_EV_LOOPBACK_COMMAND" );
    return rv;
}
a_string display_HCI_EV_PIN_CODE_REQ_pdu ( int indent , const HCI_EV_PIN_CODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HCI_EV_PIN_CODE_REQ" ) ;
    rv += policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() );
    rv += policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "HCI_EV_PIN_CODE_REQ" );
    return rv;
}
a_string display_RFC_CLIENT_CONNECT_CFM_pdu ( int indent , const RFC_CLIENT_CONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_CLIENT_CONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "serv_chan" , prim.get_serv_chan() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_RFC_CONNECT_CFM_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "max_payload_size" , prim.get_max_payload_size() );
    rv += policy->display_uint16 ( indent + 1 , "remote_l2cap_control" , prim.get_remote_l2cap_control() );
    rv += policy->display_uint16 ( indent + 1 , "local_l2cap_control" , prim.get_local_l2cap_control() );
    rv += policy->display_prim_end ( indent , "RFC_CLIENT_CONNECT_CFM" );
    return rv;
}
a_string display_RFC_LINESTATUS_IND_pdu ( int indent , const RFC_LINESTATUS_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_LINESTATUS_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_bool ( indent + 1 , "error_flag" , prim.get_error_flag() );
    rv += policy->display_uint8 ( indent + 1 , "line_status" , prim.get_line_status() );
    rv += policy->display_prim_end ( indent , "RFC_LINESTATUS_IND" );
    return rv;
}
a_string display_RFC_L2CA_AMP_LINK_LOSS_IND_pdu ( int indent , const RFC_L2CA_AMP_LINK_LOSS_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_L2CA_AMP_LINK_LOSS_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "RFC_L2CA_AMP_LINK_LOSS_IND" );
    return rv;
}
a_string display_RFC_INIT_CFM_pdu ( int indent , const RFC_INIT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_INIT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "RFC_INIT_CFM" );
    return rv;
}
a_string display_RFC_DISCONNECT_IND_pdu ( int indent , const RFC_DISCONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_DISCONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint16 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "RFC_DISCONNECT_IND" );
    return rv;
}
a_string display_RFC_SERVER_CONNECT_CFM_pdu ( int indent , const RFC_SERVER_CONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_SERVER_CONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "serv_chan" , prim.get_serv_chan() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_RFC_CONNECT_CFM_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "max_payload_size" , prim.get_max_payload_size() );
    rv += policy->display_uint16 ( indent + 1 , "remote_l2cap_control" , prim.get_remote_l2cap_control() );
    rv += policy->display_uint16 ( indent + 1 , "local_l2cap_control" , prim.get_local_l2cap_control() );
    rv += policy->display_prim_end ( indent , "RFC_SERVER_CONNECT_CFM" );
    return rv;
}
a_string display_RFC_LINESTATUS_REQ_pdu ( int indent , const RFC_LINESTATUS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_LINESTATUS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_bool ( indent + 1 , "error_flag" , prim.get_error_flag() );
    rv += policy->display_uint8 ( indent + 1 , "line_status" , prim.get_line_status() );
    rv += policy->display_prim_end ( indent , "RFC_LINESTATUS_REQ" );
    return rv;
}
a_string display_RFC_L2CA_MOVE_CHANNEL_RSP_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_L2CA_MOVE_CHANNEL_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_L2CA_MOVE_CHANNEL_RSP" );
    return rv;
}
a_string display_RFC_DATAREAD_IND_pdu ( int indent , const RFC_DATAREAD_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_DATAREAD_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint16 ( indent + 1 , "payload_length" , prim.get_payload_length() );
    rv += policy->display_uint8Array ( indent + 1 , "payload" , prim.get_payloadPtr() , prim.get_payload_length() );
    rv += policy->display_prim_end ( indent , "RFC_DATAREAD_IND" );
    return rv;
}
a_string display_RFC_UNREGISTER_CFM_pdu ( int indent , const RFC_UNREGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_UNREGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "loc_serv_chan" , prim.get_loc_serv_chan() );
    rv += policy->display_RFC_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_prim_end ( indent , "RFC_UNREGISTER_CFM" );
    return rv;
}
a_string display_RFC_PORTNEG_CFM_pdu ( int indent , const RFC_PORTNEG_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_PORTNEG_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint8 ( indent + 1 , "baud_rate" , prim.get_baud_rate() );
    rv += policy->display_uint8 ( indent + 1 , "data_bits" , prim.get_data_bits() );
    rv += policy->display_uint8 ( indent + 1 , "stop_bits" , prim.get_stop_bits() );
    rv += policy->display_uint8 ( indent + 1 , "parity" , prim.get_parity() );
    rv += policy->display_uint8 ( indent + 1 , "parity_type" , prim.get_parity_type() );
    rv += policy->display_uint8 ( indent + 1 , "flow_ctrl_mask" , prim.get_flow_ctrl_mask() );
    rv += policy->display_uint8 ( indent + 1 , "xon" , prim.get_xon() );
    rv += policy->display_uint8 ( indent + 1 , "xoff" , prim.get_xoff() );
    rv += policy->display_uint16 ( indent + 1 , "parameter_mask" , prim.get_parameter_mask() );
    rv += policy->display_RFC_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_PORTNEG_CFM" );
    return rv;
}
a_string display_RFC_DATAWRITE_REQ_pdu ( int indent , const RFC_DATAWRITE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_DATAWRITE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint16 ( indent + 1 , "payload_length" , prim.get_payload_length() );
    rv += policy->display_uint8Array ( indent + 1 , "payload" , prim.get_payloadPtr() , prim.get_payload_length() );
    rv += policy->display_uint16 ( indent + 1 , "rx_credits" , prim.get_rx_credits() );
    rv += policy->display_prim_end ( indent , "RFC_DATAWRITE_REQ" );
    return rv;
}
a_string display_RFC_DISCONNECT_REQ_pdu ( int indent , const RFC_DISCONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_DISCONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_prim_end ( indent , "RFC_DISCONNECT_REQ" );
    return rv;
}
a_string display_RFC_MODEM_STATUS_CFM_pdu ( int indent , const RFC_MODEM_STATUS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_MODEM_STATUS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_RFC_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_MODEM_STATUS_CFM" );
    return rv;
}
a_string display_RFC_FC_CFM_pdu ( int indent , const RFC_FC_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_FC_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "fc" , prim.get_fc() );
    rv += policy->display_RFC_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_FC_CFM" );
    return rv;
}
a_string display_RFC_TEST_REQ_pdu ( int indent , const RFC_TEST_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_TEST_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "test_data_length" , prim.get_test_data_length() );
    rv += policy->display_uint8Array ( indent + 1 , "test_data" , prim.get_test_dataPtr() , prim.get_test_data_length() );
    rv += policy->display_prim_end ( indent , "RFC_TEST_REQ" );
    return rv;
}
a_string display_RFC_L2CA_MOVE_CHANNEL_IND_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_L2CA_MOVE_CHANNEL_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_prim_end ( indent , "RFC_L2CA_MOVE_CHANNEL_IND" );
    return rv;
}
a_string display_RFC_NSC_IND_pdu ( int indent , const RFC_NSC_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_NSC_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "command_type" , prim.get_command_type() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_res" , prim.get_cmd_res() );
    rv += policy->display_prim_end ( indent , "RFC_NSC_IND" );
    return rv;
}
a_string display_RFC_SERVER_CONNECT_RSP_pdu ( int indent , const RFC_SERVER_CONNECT_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_SERVER_CONNECT_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint16 ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "max_payload_size" , prim.get_max_payload_size() );
    rv += policy->display_uint8 ( indent + 1 , "priority" , prim.get_priority() );
    rv += policy->display_uint16 ( indent + 1 , "total_credits" , prim.get_total_credits() );
    rv += policy->display_uint16 ( indent + 1 , "remote_l2cap_control" , prim.get_remote_l2cap_control() );
    rv += policy->display_uint16 ( indent + 1 , "local_l2cap_control" , prim.get_local_l2cap_control() );
    rv += policy->display_uint8 ( indent + 1 , "modem_signal" , prim.get_modem_signal() );
    rv += policy->display_uint8 ( indent + 1 , "break_signal" , prim.get_break_signal() );
    rv += policy->display_uint16 ( indent + 1 , "msc_timeout" , prim.get_msc_timeout() );
    rv += policy->display_prim_end ( indent , "RFC_SERVER_CONNECT_RSP" );
    return rv;
}
a_string display_RFC_LINESTATUS_CFM_pdu ( int indent , const RFC_LINESTATUS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_LINESTATUS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_RFC_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_LINESTATUS_CFM" );
    return rv;
}
a_string display_RFC_L2CA_MOVE_CHANNEL_REQ_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_L2CA_MOVE_CHANNEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "remote_control" , prim.get_remote_control() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_prim_end ( indent , "RFC_L2CA_MOVE_CHANNEL_REQ" );
    return rv;
}
a_string display_RFC_ERROR_IND_pdu ( int indent , const RFC_ERROR_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_ERROR_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "err_prim_type" , prim.get_err_prim_type() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_ERROR_IND" );
    return rv;
}
a_string display_RFC_PORTNEG_RSP_pdu ( int indent , const RFC_PORTNEG_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_PORTNEG_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint8 ( indent + 1 , "baud_rate" , prim.get_baud_rate() );
    rv += policy->display_uint8 ( indent + 1 , "data_bits" , prim.get_data_bits() );
    rv += policy->display_uint8 ( indent + 1 , "stop_bits" , prim.get_stop_bits() );
    rv += policy->display_uint8 ( indent + 1 , "parity" , prim.get_parity() );
    rv += policy->display_uint8 ( indent + 1 , "parity_type" , prim.get_parity_type() );
    rv += policy->display_uint8 ( indent + 1 , "flow_ctrl_mask" , prim.get_flow_ctrl_mask() );
    rv += policy->display_uint8 ( indent + 1 , "xon" , prim.get_xon() );
    rv += policy->display_uint8 ( indent + 1 , "xoff" , prim.get_xoff() );
    rv += policy->display_uint16 ( indent + 1 , "parameter_mask" , prim.get_parameter_mask() );
    rv += policy->display_prim_end ( indent , "RFC_PORTNEG_RSP" );
    return rv;
}
a_string display_RFC_DISCONNECT_CFM_pdu ( int indent , const RFC_DISCONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_DISCONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_RFC_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_DISCONNECT_CFM" );
    return rv;
}
a_string display_RFC_DATAWRITE_CFM_pdu ( int indent , const RFC_DATAWRITE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_DATAWRITE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_RFC_DATAWRITE_CFM_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_DATAWRITE_CFM" );
    return rv;
}
a_string display_RFC_REGISTER_REQ_pdu ( int indent , const RFC_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint8 ( indent + 1 , "loc_serv_chan_req" , prim.get_loc_serv_chan_req() );
    rv += policy->display_prim_end ( indent , "RFC_REGISTER_REQ" );
    return rv;
}
a_string display_RFC_CLIENT_CONNECT_REQ_pdu ( int indent , const RFC_CLIENT_CONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_CLIENT_CONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "rem_serv_chan" , prim.get_rem_serv_chan() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "client_security_chan" , prim.get_client_security_chan() );
    rv += policy->display_uint16 ( indent + 1 , "max_payload_size" , prim.get_max_payload_size() );
    rv += policy->display_uint8 ( indent + 1 , "priority" , prim.get_priority() );
    rv += policy->display_uint16 ( indent + 1 , "total_credits" , prim.get_total_credits() );
    rv += policy->display_uint16 ( indent + 1 , "remote_l2cap_control" , prim.get_remote_l2cap_control() );
    rv += policy->display_uint16 ( indent + 1 , "local_l2cap_control" , prim.get_local_l2cap_control() );
    rv += policy->display_uint16 ( indent + 1 , "reserved_length" , prim.get_reserved_length() );
    {
        size_t n = 0;

        if (prim.get_reserved() != 0)
            n = prim.get_reserved_length();

        rv += policy->display_uint16Array ( indent + 1 , "reserved" , prim.get_reserved(), n );
    }
    rv += policy->display_uint8 ( indent + 1 , "modem_signal" , prim.get_modem_signal() );
    rv += policy->display_uint8 ( indent + 1 , "break_signal" , prim.get_break_signal() );
    rv += policy->display_uint16 ( indent + 1 , "msc_timeout" , prim.get_msc_timeout() );
    rv += policy->display_prim_end ( indent , "RFC_CLIENT_CONNECT_REQ" );
    return rv;
}
a_string display_RFC_SERVER_CONNECT_IND_pdu ( int indent , const RFC_SERVER_CONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_SERVER_CONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "loc_serv_chan" , prim.get_loc_serv_chan() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "local_l2cap_control" , prim.get_local_l2cap_control() );
    rv += policy->display_prim_end ( indent , "RFC_SERVER_CONNECT_IND" );
    return rv;
}
a_string display_RFC_TEST_CFM_pdu ( int indent , const RFC_TEST_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_TEST_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "test_data_length" , prim.get_test_data_length() );
    rv += policy->display_uint8Array ( indent + 1 , "test_data" , prim.get_test_dataPtr() , prim.get_test_data_length() );
    rv += policy->display_RFC_RESPONSE_T ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_TEST_CFM" );
    return rv;
}
a_string display_RFC_INIT_REQ_pdu ( int indent , const RFC_INIT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_INIT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "RFC_INIT_REQ" );
    return rv;
}
a_string display_RFC_PORTNEG_IND_pdu ( int indent , const RFC_PORTNEG_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_PORTNEG_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_bool ( indent + 1 , "request" , prim.get_request() );
    rv += policy->display_uint8 ( indent + 1 , "baud_rate" , prim.get_baud_rate() );
    rv += policy->display_uint8 ( indent + 1 , "data_bits" , prim.get_data_bits() );
    rv += policy->display_uint8 ( indent + 1 , "stop_bits" , prim.get_stop_bits() );
    rv += policy->display_uint8 ( indent + 1 , "parity" , prim.get_parity() );
    rv += policy->display_uint8 ( indent + 1 , "parity_type" , prim.get_parity_type() );
    rv += policy->display_uint8 ( indent + 1 , "flow_ctrl_mask" , prim.get_flow_ctrl_mask() );
    rv += policy->display_uint8 ( indent + 1 , "xon" , prim.get_xon() );
    rv += policy->display_uint8 ( indent + 1 , "xoff" , prim.get_xoff() );
    rv += policy->display_uint16 ( indent + 1 , "parameter_mask" , prim.get_parameter_mask() );
    rv += policy->display_prim_end ( indent , "RFC_PORTNEG_IND" );
    return rv;
}
a_string display_RFC_UNREGISTER_REQ_pdu ( int indent , const RFC_UNREGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_UNREGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint8 ( indent + 1 , "loc_serv_chan" , prim.get_loc_serv_chan() );
    rv += policy->display_prim_end ( indent , "RFC_UNREGISTER_REQ" );
    return rv;
}
a_string display_RFC_L2CA_MOVE_CHANNEL_CMP_IND_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_CMP_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_L2CA_MOVE_CHANNEL_CMP_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_L2CA_MOVE_CHANNEL_CMP_IND" );
    return rv;
}
a_string display_RFC_L2CA_MOVE_CHANNEL_CFM_pdu ( int indent , const RFC_L2CA_MOVE_CHANNEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_L2CA_MOVE_CHANNEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_uint16 ( indent + 1 , "remote_control" , prim.get_remote_control() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "RFC_L2CA_MOVE_CHANNEL_CFM" );
    return rv;
}
a_string display_RFC_FC_IND_pdu ( int indent , const RFC_FC_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_FC_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "fc" , prim.get_fc() );
    rv += policy->display_prim_end ( indent , "RFC_FC_IND" );
    return rv;
}
a_string display_RFC_MODEM_STATUS_IND_pdu ( int indent , const RFC_MODEM_STATUS_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_MODEM_STATUS_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint8 ( indent + 1 , "modem_signal" , prim.get_modem_signal() );
    rv += policy->display_uint8 ( indent + 1 , "break_signal" , prim.get_break_signal() );
    rv += policy->display_prim_end ( indent , "RFC_MODEM_STATUS_IND" );
    return rv;
}
a_string display_RFC_PORTNEG_REQ_pdu ( int indent , const RFC_PORTNEG_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_PORTNEG_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_bool ( indent + 1 , "request" , prim.get_request() );
    rv += policy->display_uint8 ( indent + 1 , "baud_rate" , prim.get_baud_rate() );
    rv += policy->display_uint8 ( indent + 1 , "data_bits" , prim.get_data_bits() );
    rv += policy->display_uint8 ( indent + 1 , "stop_bits" , prim.get_stop_bits() );
    rv += policy->display_uint8 ( indent + 1 , "parity" , prim.get_parity() );
    rv += policy->display_uint8 ( indent + 1 , "parity_type" , prim.get_parity_type() );
    rv += policy->display_uint8 ( indent + 1 , "flow_ctrl_mask" , prim.get_flow_ctrl_mask() );
    rv += policy->display_uint8 ( indent + 1 , "xon" , prim.get_xon() );
    rv += policy->display_uint8 ( indent + 1 , "xoff" , prim.get_xoff() );
    rv += policy->display_uint16 ( indent + 1 , "parameter_mask" , prim.get_parameter_mask() );
    rv += policy->display_prim_end ( indent , "RFC_PORTNEG_REQ" );
    return rv;
}
a_string display_RFC_DISCONNECT_RSP_pdu ( int indent , const RFC_DISCONNECT_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_DISCONNECT_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_prim_end ( indent , "RFC_DISCONNECT_RSP" );
    return rv;
}
a_string display_RFC_DATAREAD_RSP_pdu ( int indent , const RFC_DATAREAD_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_DATAREAD_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_prim_end ( indent , "RFC_DATAREAD_RSP" );
    return rv;
}
a_string display_RFC_REGISTER_CFM_pdu ( int indent , const RFC_REGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_REGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "loc_serv_chan" , prim.get_loc_serv_chan() );
    rv += policy->display_bool ( indent + 1 , "accept" , prim.get_accept() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_prim_end ( indent , "RFC_REGISTER_CFM" );
    return rv;
}
a_string display_RFC_FC_REQ_pdu ( int indent , const RFC_FC_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_FC_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "fc" , prim.get_fc() );
    rv += policy->display_prim_end ( indent , "RFC_FC_REQ" );
    return rv;
}
a_string display_RFC_MODEM_STATUS_REQ_pdu ( int indent , const RFC_MODEM_STATUS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RFC_MODEM_STATUS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "conn_id" , prim.get_conn_id() );
    rv += policy->display_uint8 ( indent + 1 , "modem_signal" , prim.get_modem_signal() );
    rv += policy->display_uint8 ( indent + 1 , "break_signal" , prim.get_break_signal() );
    rv += policy->display_prim_end ( indent , "RFC_MODEM_STATUS_REQ" );
    return rv;
}
a_string display_L2CA_MOVE_CHANNEL_REQ_pdu ( int indent , const L2CA_MOVE_CHANNEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MOVE_CHANNEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "remote_control" , prim.get_remote_control() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_prim_end ( indent , "L2CA_MOVE_CHANNEL_REQ" );
    return rv;
}
a_string display_L2CA_CREATE_CHANNEL_IND_pdu ( int indent , const L2CA_CREATE_CHANNEL_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CREATE_CHANNEL_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_prim_end ( indent , "L2CA_CREATE_CHANNEL_IND" );
    return rv;
}
a_string display_L2CA_DISCONNECT_IND_pdu ( int indent , const L2CA_DISCONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DISCONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_l2ca_disc_result_t ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "L2CA_DISCONNECT_IND" );
    return rv;
}
a_string display_L2CA_DATAREAD_RSP_pdu ( int indent , const L2CA_DATAREAD_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DATAREAD_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "packets" , prim.get_packets() );
    rv += policy->display_prim_end ( indent , "L2CA_DATAREAD_RSP" );
    return rv;
}
a_string display_L2CA_REGISTER_CFM_pdu ( int indent , const L2CA_REGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_REGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "mode_mask" , prim.get_mode_mask() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_l2ca_misc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "L2CA_REGISTER_CFM" );
    return rv;
}
a_string display_L2CA_AUTO_CONNECT_IND_pdu ( int indent , const L2CA_AUTO_CONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_AUTO_CONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_prim_end ( indent , "L2CA_AUTO_CONNECT_IND" );
    return rv;
}
a_string display_L2CA_ROUTE_DATA_REQ_pdu ( int indent , const L2CA_ROUTE_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_ROUTE_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_prim_end ( indent , "L2CA_ROUTE_DATA_REQ" );
    return rv;
}
a_string display_L2CA_REGISTER_FIXED_CID_REQ_pdu ( int indent , const L2CA_REGISTER_FIXED_CID_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_REGISTER_FIXED_CID_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "fixed_cid" , prim.get_fixed_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_uint16 ( indent + 1 , "hints" , prim.get_hints() );
    rv += policy->display_uint8 ( indent + 1 , "unknown_length" , prim.get_unknown_length() );
    rv += policy->display_uint8Array ( indent + 1 , "unknown" , prim.get_unknownPtr() , prim.get_unknown_length() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flush_to" , prim.get_flush_to() );
    {
        const L2caQos qos = prim.get_qos();

        rv += policy->display_prim_start (indent + 1, "qos:" );

        if (qos.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "flags", qos.flags() )
                + policy->display_uint8  ( indent + 2 , "service_type", qos.service_type() )
                + policy->display_uint32 ( indent + 2 , "token_rate", qos.token_rate() )
                + policy->display_uint32 ( indent + 2 , "token_bucket", qos.token_bucket() )
                + policy->display_uint32 ( indent + 2 , "peak_bw", qos.peak_bw() )
                + policy->display_uint32 ( indent + 2 , "latency", qos.latency() )
                + policy->display_uint32 ( indent + 2 , "delay_var", qos.delay_var() );
        }

        rv += policy->display_prim_end (0, "");
    }
    {
        const L2caFlow flow = prim.get_flow();

        rv += policy->display_prim_start (indent + 1, "flow:" );

        if (flow.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "mode", flow.mode() )
                + policy->display_uint8  ( indent + 2 , "tx_window", flow.tx_window() )
                + policy->display_uint8  ( indent + 2 , "max_retransmit", flow.max_retransmit() )
                + policy->display_uint16 ( indent + 2 , "retrans_timeout", flow.retrans_timeout() )
                + policy->display_uint16 ( indent + 2 , "monitor_timeout", flow.monitor_timeout() )
                + policy->display_uint16 ( indent + 2 , "maximum_pdu", flow.maximum_pdu() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint8 ( indent + 1 , "fcs" , prim.get_fcs() );
    {
        const L2caFlowSpec flowspec = prim.get_flowspec();

        rv += policy->display_prim_start (indent + 1, "flowspec:" );

        if (flowspec.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "fs_identifier", flowspec.fs_identifier() )
                + policy->display_uint8  ( indent + 2 , "fs_service_type", flowspec.fs_service_type() )
                + policy->display_uint16 ( indent + 2 , "fs_max_sdu", flowspec.fs_max_sdu() )
                + policy->display_uint32 ( indent + 2 , "fs_interarrival", flowspec.fs_interarrival() )
                + policy->display_uint32 ( indent + 2 , "fs_latency", flowspec.fs_latency() )
                + policy->display_uint32 ( indent + 2 , "fs_flush_to", flowspec.fs_flush_to() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint16 ( indent + 1 , "ext_window" , prim.get_ext_window() );
    rv += policy->display_STREAM_BUFFER_SIZES_T ( indent + 1 , "streams" , prim.get_streams() );
    rv += policy->display_prim_end ( indent , "L2CA_REGISTER_FIXED_CID_REQ" );
    return rv;
}
a_string display_L2CA_CONNECT_IND_pdu ( int indent , const L2CA_CONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_CONNECT_IND" );
    return rv;
}
a_string display_L2CA_UNREGISTER_CFM_pdu ( int indent , const L2CA_UNREGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_UNREGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_l2ca_misc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "L2CA_UNREGISTER_CFM" );
    return rv;
}
a_string display_L2CA_CREATE_CHANNEL_REQ_pdu ( int indent , const L2CA_CREATE_CHANNEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CREATE_CHANNEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_remote" , prim.get_psm_remote() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "remote_control" , prim.get_remote_control() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_DM_SM_SERVICE_T ( indent + 1 , "service" , prim.get_service() );
    rv += policy->display_prim_end ( indent , "L2CA_CREATE_CHANNEL_REQ" );
    return rv;
}
a_string display_L2CA_MULTICAST_REQ_pdu ( int indent , const L2CA_MULTICAST_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MULTICAST_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    uint16 cids[L2CA_MAX_MULTICAST_CIDS];
    prim.get_cids(cids);
    rv += policy->display_uint16Array ( indent + 1 , "cids" , cids, L2CA_MAX_MULTICAST_CIDS);
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_length() );
    rv += policy->display_prim_end ( indent , "L2CA_MULTICAST_REQ" );
    return rv;
}
a_string display_L2CA_CONFIG_CFM_pdu ( int indent , const L2CA_CONFIG_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONFIG_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_l2ca_conf_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_uint16 ( indent + 1 , "hints" , prim.get_hints() );
    rv += policy->display_uint8 ( indent + 1 , "unknown_length" , prim.get_unknown_length() );
    rv += policy->display_uint8Array ( indent + 1 , "unknown" , prim.get_unknownPtr() , prim.get_unknown_length() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flush_to" , prim.get_flush_to() );
    {
        const L2caQos qos = prim.get_qos();

        rv += policy->display_prim_start (indent + 1, "qos:" );

        if (qos.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "flags", qos.flags() )
                + policy->display_uint8  ( indent + 2 , "service_type", qos.service_type() )
                + policy->display_uint32 ( indent + 2 , "token_rate", qos.token_rate() )
                + policy->display_uint32 ( indent + 2 , "token_bucket", qos.token_bucket() )
                + policy->display_uint32 ( indent + 2 , "peak_bw", qos.peak_bw() )
                + policy->display_uint32 ( indent + 2 , "latency", qos.latency() )
                + policy->display_uint32 ( indent + 2 , "delay_var", qos.delay_var() );
        }

        rv += policy->display_prim_end (0, "");
    }
    {
        const L2caFlow flow = prim.get_flow();

        rv += policy->display_prim_start (indent + 1, "flow:" );

        if (flow.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "mode", flow.mode() )
                + policy->display_uint8  ( indent + 2 , "tx_window", flow.tx_window() )
                + policy->display_uint8  ( indent + 2 , "max_retransmit", flow.max_retransmit() )
                + policy->display_uint16 ( indent + 2 , "retrans_timeout", flow.retrans_timeout() )
                + policy->display_uint16 ( indent + 2 , "monitor_timeout", flow.monitor_timeout() )
                + policy->display_uint16 ( indent + 2 , "maximum_pdu", flow.maximum_pdu() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint8 ( indent + 1 , "fcs" , prim.get_fcs() );
    {
        const L2caFlowSpec flowspec = prim.get_flowspec();

        rv += policy->display_prim_start (indent + 1, "flowspec:" );

        if (flowspec.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "fs_identifier", flowspec.fs_identifier() )
                + policy->display_uint8  ( indent + 2 , "fs_service_type", flowspec.fs_service_type() )
                + policy->display_uint16 ( indent + 2 , "fs_max_sdu", flowspec.fs_max_sdu() )
                + policy->display_uint32 ( indent + 2 , "fs_interarrival", flowspec.fs_interarrival() )
                + policy->display_uint32 ( indent + 2 , "fs_latency", flowspec.fs_latency() )
                + policy->display_uint32 ( indent + 2 , "fs_flush_to", flowspec.fs_flush_to() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint16 ( indent + 1 , "ext_window" , prim.get_ext_window() );
    rv += policy->display_prim_end ( indent , "L2CA_CONFIG_CFM" );
    return rv;
}
a_string display_L2CA_AUTO_CONNECT_REQ_pdu ( int indent , const L2CA_AUTO_CONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_AUTO_CONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_remote" , prim.get_psm_remote() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "remote_control" , prim.get_remote_control() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_uint16 ( indent + 1 , "conftab_length" , prim.get_conftab_length() );
    rv += policy->display_uint16Array ( indent + 1 , "conftab" , prim.get_conftabPtr(), prim.get_conftab_length());
    rv += policy->display_prim_end ( indent , "L2CA_AUTO_CONNECT_REQ" );
    return rv;
}
a_string display_L2CA_DISCONNECT_REQ_pdu ( int indent , const L2CA_DISCONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DISCONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_prim_end ( indent , "L2CA_DISCONNECT_REQ" );
    return rv;
}
a_string display_L2CA_UNKNOWN_SIGNAL_IND_pdu ( int indent , const L2CA_UNKNOWN_SIGNAL_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_UNKNOWN_SIGNAL_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_prim_end ( indent , "L2CA_UNKNOWN_SIGNAL_IND" );
    return rv;
}
a_string display_L2CA_CONNECT_REQ_pdu ( int indent , const L2CA_CONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_remote" , prim.get_psm_remote() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_DM_SM_SERVICE_T ( indent + 1 , "service" , prim.get_service() );
    rv += policy->display_prim_end ( indent , "L2CA_CONNECT_REQ" );
    return rv;
}
a_string display_L2CA_DATAWRITE_CFM_pdu ( int indent , const L2CA_DATAWRITE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DATAWRITE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "req_ctx" , prim.get_req_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_l2ca_data_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "L2CA_DATAWRITE_CFM" );
    return rv;
}
a_string display_L2CA_MTU_VIOLATION_IND_pdu ( int indent , const L2CA_MTU_VIOLATION_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MTU_VIOLATION_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_uint16 ( indent + 1 , "signal_mtu" , prim.get_signal_mtu() );
    rv += policy->display_prim_end ( indent , "L2CA_MTU_VIOLATION_IND" );
    return rv;
}
a_string display_L2CA_CONNECTION_PAR_UPDATE_CFM_pdu ( int indent , const L2CA_CONNECTION_PAR_UPDATE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONNECTION_PAR_UPDATE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_l2ca_misc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "L2CA_CONNECTION_PAR_UPDATE_CFM" );
    return rv;
}
a_string display_L2CA_MAP_FIXED_CID_CFM_pdu ( int indent , const L2CA_MAP_FIXED_CID_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MAP_FIXED_CID_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "fixed_cid" , prim.get_fixed_cid() );
    rv += policy->display_uint16 ( indent + 1 , "cl_local_psm" , prim.get_cl_local_psm() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_l2ca_misc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_MAP_FIXED_CID_CFM" );
    return rv;
}
a_string display_L2CA_DATAREAD_IND_pdu ( int indent , const L2CA_DATAREAD_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DATAREAD_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_length() );
    rv += policy->display_l2ca_data_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "packets" , prim.get_packets() );
    rv += policy->display_prim_end ( indent , "L2CA_DATAREAD_IND" );
    return rv;
}
a_string display_L2CA_MOVE_CHANNEL_CFM_pdu ( int indent , const L2CA_MOVE_CHANNEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MOVE_CHANNEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_l2ca_move_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_uint16 ( indent + 1 , "remote_control" , prim.get_remote_control() );
    rv += policy->display_prim_end ( indent , "L2CA_MOVE_CHANNEL_CFM" );
    return rv;
}
a_string display_L2CA_UNROUTE_DATA_IND_pdu ( int indent , const L2CA_UNROUTE_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_UNROUTE_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_prim_end ( indent , "L2CA_UNROUTE_DATA_IND" );
    return rv;
}
a_string display_L2CA_BUSY_IND_pdu ( int indent , const L2CA_BUSY_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_BUSY_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_bool ( indent + 1 , "busy" , prim.get_busy() );
    rv += policy->display_prim_end ( indent , "L2CA_BUSY_IND" );
    return rv;
}
a_string display_L2CA_GETINFO_REQ_pdu ( int indent , const L2CA_GETINFO_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_GETINFO_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "info_type" , prim.get_info_type() );
    rv += policy->display_uint16 ( indent + 1 , "req_ctx" , prim.get_req_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_GETINFO_REQ" );
    return rv;
}
a_string display_L2CA_PING_REQ_pdu ( int indent , const L2CA_PING_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_PING_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "req_ctx" , prim.get_req_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_PING_REQ" );
    return rv;
}
a_string display_L2CA_ROUTE_DATA_CFM_pdu ( int indent , const L2CA_ROUTE_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_ROUTE_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "out_mtu" , prim.get_out_mtu() );
    rv += policy->display_l2ca_misc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "L2CA_ROUTE_DATA_CFM" );
    return rv;
}
a_string display_L2CA_REGISTER_FIXED_CID_CFM_pdu ( int indent , const L2CA_REGISTER_FIXED_CID_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_REGISTER_FIXED_CID_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "fixed_cid" , prim.get_fixed_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_l2ca_misc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "L2CA_REGISTER_FIXED_CID_CFM" );
    return rv;
}
a_string display_L2CA_BUSY_REQ_pdu ( int indent , const L2CA_BUSY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_BUSY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_bool ( indent + 1 , "busy" , prim.get_busy() );
    rv += policy->display_prim_end ( indent , "L2CA_BUSY_REQ" );
    return rv;
}
a_string display_L2CA_UNROUTE_DATA_REQ_pdu ( int indent , const L2CA_UNROUTE_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_UNROUTE_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_prim_end ( indent , "L2CA_UNROUTE_DATA_REQ" );
    return rv;
}
a_string display_L2CA_DATAWRITE_ABORT_REQ_pdu ( int indent , const L2CA_DATAWRITE_ABORT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DATAWRITE_ABORT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_prim_end ( indent , "L2CA_DATAWRITE_ABORT_REQ" );
    return rv;
}
a_string display_L2CA_MOVE_CHANNEL_CMP_IND_pdu ( int indent , const L2CA_MOVE_CHANNEL_CMP_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MOVE_CHANNEL_CMP_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_l2ca_move_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_prim_end ( indent , "L2CA_MOVE_CHANNEL_CMP_IND" );
    return rv;
}
a_string display_L2CA_CREATE_CHANNEL_CFM_pdu ( int indent , const L2CA_CREATE_CHANNEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CREATE_CHANNEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_l2ca_conn_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_prim_end ( indent , "L2CA_CREATE_CHANNEL_CFM" );
    return rv;
}
a_string display_L2CA_CONFIG_RSP_pdu ( int indent , const L2CA_CONFIG_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONFIG_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_l2ca_conf_result_t ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_uint16 ( indent + 1 , "hints" , prim.get_hints() );
    rv += policy->display_uint8 ( indent + 1 , "unknown_length" , prim.get_unknown_length() );
    rv += policy->display_uint8Array ( indent + 1 , "unknown" , prim.get_unknownPtr() , prim.get_unknown_length() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flush_to" , prim.get_flush_to() );
    {
        const L2caQos qos = prim.get_qos();

        rv += policy->display_prim_start (indent + 1, "qos:" );

        if (qos.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "flags", qos.flags() )
                + policy->display_uint8  ( indent + 2 , "service_type", qos.service_type() )
                + policy->display_uint32 ( indent + 2 , "token_rate", qos.token_rate() )
                + policy->display_uint32 ( indent + 2 , "token_bucket", qos.token_bucket() )
                + policy->display_uint32 ( indent + 2 , "peak_bw", qos.peak_bw() )
                + policy->display_uint32 ( indent + 2 , "latency", qos.latency() )
                + policy->display_uint32 ( indent + 2 , "delay_var", qos.delay_var() );
        }

        rv += policy->display_prim_end (0, "");
    }
    {
        const L2caFlow flow = prim.get_flow();

        rv += policy->display_prim_start (indent + 1, "flow:" );

        if (flow.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "mode", flow.mode() )
                + policy->display_uint8  ( indent + 2 , "tx_window", flow.tx_window() )
                + policy->display_uint8  ( indent + 2 , "max_retransmit", flow.max_retransmit() )
                + policy->display_uint16 ( indent + 2 , "retrans_timeout", flow.retrans_timeout() )
                + policy->display_uint16 ( indent + 2 , "monitor_timeout", flow.monitor_timeout() )
                + policy->display_uint16 ( indent + 2 , "maximum_pdu", flow.maximum_pdu() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint8 ( indent + 1 , "fcs" , prim.get_fcs() );
    {
        const L2caFlowSpec flowspec = prim.get_flowspec();

        rv += policy->display_prim_start (indent + 1, "flowspec:" );

        if (flowspec.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "fs_identifier", flowspec.fs_identifier() )
                + policy->display_uint8  ( indent + 2 , "fs_service_type", flowspec.fs_service_type() )
                + policy->display_uint16 ( indent + 2 , "fs_max_sdu", flowspec.fs_max_sdu() )
                + policy->display_uint32 ( indent + 2 , "fs_interarrival", flowspec.fs_interarrival() )
                + policy->display_uint32 ( indent + 2 , "fs_latency", flowspec.fs_latency() )
                + policy->display_uint32 ( indent + 2 , "fs_flush_to", flowspec.fs_flush_to() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint16 ( indent + 1 , "ext_window" , prim.get_ext_window() );
    rv += policy->display_prim_end ( indent , "L2CA_CONFIG_RSP" );
    return rv;
}
a_string display_L2CA_DISCONNECT_CFM_pdu ( int indent , const L2CA_DISCONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DISCONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_l2ca_disc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "L2CA_DISCONNECT_CFM" );
    return rv;
}
a_string display_L2CA_AUTO_CONNECT_CFM_pdu ( int indent , const L2CA_AUTO_CONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_AUTO_CONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_l2ca_conn_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_uint16 ( indent + 1 , "hints" , prim.get_hints() );
    rv += policy->display_uint8 ( indent + 1 , "unknown_length" , prim.get_unknown_length() );
    rv += policy->display_uint8Array ( indent + 1 , "unknown" , prim.get_unknownPtr() , prim.get_unknown_length() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flush_to" , prim.get_flush_to() );
    {
        const L2caQos qos = prim.get_qos();

        rv += policy->display_prim_start (indent + 1, "qos:" );

        if (qos.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "flags", qos.flags() )
                + policy->display_uint8  ( indent + 2 , "service_type", qos.service_type() )
                + policy->display_uint32 ( indent + 2 , "token_rate", qos.token_rate() )
                + policy->display_uint32 ( indent + 2 , "token_bucket", qos.token_bucket() )
                + policy->display_uint32 ( indent + 2 , "peak_bw", qos.peak_bw() )
                + policy->display_uint32 ( indent + 2 , "latency", qos.latency() )
                + policy->display_uint32 ( indent + 2 , "delay_var", qos.delay_var() );
        }

        rv += policy->display_prim_end (0, "");
    }
    {
        const L2caFlow flow = prim.get_flow();

        rv += policy->display_prim_start (indent + 1, "flow:" );

        if (flow.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "mode", flow.mode() )
                + policy->display_uint8  ( indent + 2 , "tx_window", flow.tx_window() )
                + policy->display_uint8  ( indent + 2 , "max_retransmit", flow.max_retransmit() )
                + policy->display_uint16 ( indent + 2 , "retrans_timeout", flow.retrans_timeout() )
                + policy->display_uint16 ( indent + 2 , "monitor_timeout", flow.monitor_timeout() )
                + policy->display_uint16 ( indent + 2 , "maximum_pdu", flow.maximum_pdu() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint8 ( indent + 1 , "fcs" , prim.get_fcs() );
    {
        const L2caFlowSpec flowspec = prim.get_flowspec();

        rv += policy->display_prim_start (indent + 1, "flowspec:" );

        if (flowspec.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "fs_identifier", flowspec.fs_identifier() )
                + policy->display_uint8  ( indent + 2 , "fs_service_type", flowspec.fs_service_type() )
                + policy->display_uint16 ( indent + 2 , "fs_max_sdu", flowspec.fs_max_sdu() )
                + policy->display_uint32 ( indent + 2 , "fs_interarrival", flowspec.fs_interarrival() )
                + policy->display_uint32 ( indent + 2 , "fs_latency", flowspec.fs_latency() )
                + policy->display_uint32 ( indent + 2 , "fs_flush_to", flowspec.fs_flush_to() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint16 ( indent + 1 , "ext_window" , prim.get_ext_window() );
    rv += policy->display_uint32 ( indent + 1 , "ext_feats" , prim.get_ext_feats() );
    rv += policy->display_prim_end ( indent , "L2CA_AUTO_CONNECT_CFM" );
    return rv;
}
a_string display_L2CA_RAW_DATA_IND_pdu ( int indent , const L2CA_RAW_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_RAW_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_l2ca_data_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint8 ( indent + 1 , "packet_type" , prim.get_packet_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_length() );
    rv += policy->display_prim_end ( indent , "L2CA_RAW_DATA_IND" );
    return rv;
}
a_string display_L2CA_DEBUG_DROP_REQ_pdu ( int indent , const L2CA_DEBUG_DROP_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DEBUG_DROP_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "rx_interval" , prim.get_rx_interval() );
    rv += policy->display_uint16 ( indent + 1 , "rx_number" , prim.get_rx_number() );
    rv += policy->display_uint16 ( indent + 1 , "tx_interval" , prim.get_tx_interval() );
    rv += policy->display_uint16 ( indent + 1 , "tx_number" , prim.get_tx_number() );
    rv += policy->display_prim_end ( indent , "L2CA_DEBUG_DROP_REQ" );
    return rv;
}
a_string display_L2CA_CONNECT_CFM_pdu ( int indent , const L2CA_CONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_l2ca_conn_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_CONNECT_CFM" );
    return rv;
}
a_string display_L2CA_MAP_FIXED_CID_RSP_pdu ( int indent , const L2CA_MAP_FIXED_CID_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MAP_FIXED_CID_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "ucd_remote_psm" , prim.get_ucd_remote_psm() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_MAP_FIXED_CID_RSP" );
    return rv;
}
a_string display_L2CA_MOVE_CHANNEL_RSP_pdu ( int indent , const L2CA_MOVE_CHANNEL_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MOVE_CHANNEL_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_l2ca_move_result_t ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_prim_end ( indent , "L2CA_MOVE_CHANNEL_RSP" );
    return rv;
}
a_string display_L2CA_RAW_DATA_REQ_pdu ( int indent , const L2CA_RAW_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_RAW_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "raw_length" , prim.get_raw_length() );
    rv += policy->display_uint16 ( indent + 1 , "flush_to" , prim.get_flush_to() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_length() );
    rv += policy->display_prim_end ( indent , "L2CA_RAW_DATA_REQ" );
    return rv;
}
a_string display_L2CA_CONFIG_IND_pdu ( int indent , const L2CA_CONFIG_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONFIG_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_uint16 ( indent + 1 , "hints" , prim.get_hints() );
    rv += policy->display_uint8 ( indent + 1 , "unknown_length" , prim.get_unknown_length() );
    rv += policy->display_uint8Array ( indent + 1 , "unknown" , prim.get_unknownPtr() , prim.get_unknown_length() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flush_to" , prim.get_flush_to() );
    {
        const L2caQos qos = prim.get_qos();

        rv += policy->display_prim_start (indent + 1, "qos:" );

        if (qos.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "flags", qos.flags() )
                + policy->display_uint8  ( indent + 2 , "service_type", qos.service_type() )
                + policy->display_uint32 ( indent + 2 , "token_rate", qos.token_rate() )
                + policy->display_uint32 ( indent + 2 , "token_bucket", qos.token_bucket() )
                + policy->display_uint32 ( indent + 2 , "peak_bw", qos.peak_bw() )
                + policy->display_uint32 ( indent + 2 , "latency", qos.latency() )
                + policy->display_uint32 ( indent + 2 , "delay_var", qos.delay_var() );
        }

        rv += policy->display_prim_end (0, "");
    }
    {
        const L2caFlow flow = prim.get_flow();

        rv += policy->display_prim_start (indent + 1, "flow:" );

        if (flow.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "mode", flow.mode() )
                + policy->display_uint8  ( indent + 2 , "tx_window", flow.tx_window() )
                + policy->display_uint8  ( indent + 2 , "max_retransmit", flow.max_retransmit() )
                + policy->display_uint16 ( indent + 2 , "retrans_timeout", flow.retrans_timeout() )
                + policy->display_uint16 ( indent + 2 , "monitor_timeout", flow.monitor_timeout() )
                + policy->display_uint16 ( indent + 2 , "maximum_pdu", flow.maximum_pdu() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint8 ( indent + 1 , "fcs" , prim.get_fcs() );
    {
        const L2caFlowSpec flowspec = prim.get_flowspec();

        rv += policy->display_prim_start (indent + 1, "flowspec:" );

        if (flowspec.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "fs_identifier", flowspec.fs_identifier() )
                + policy->display_uint8  ( indent + 2 , "fs_service_type", flowspec.fs_service_type() )
                + policy->display_uint16 ( indent + 2 , "fs_max_sdu", flowspec.fs_max_sdu() )
                + policy->display_uint32 ( indent + 2 , "fs_interarrival", flowspec.fs_interarrival() )
                + policy->display_uint32 ( indent + 2 , "fs_latency", flowspec.fs_latency() )
                + policy->display_uint32 ( indent + 2 , "fs_flush_to", flowspec.fs_flush_to() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint16 ( indent + 1 , "ext_window" , prim.get_ext_window() );
    rv += policy->display_prim_end ( indent , "L2CA_CONFIG_IND" );
    return rv;
}
a_string display_L2CA_GETINFO_CFM_pdu ( int indent , const L2CA_GETINFO_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_GETINFO_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "info_type" , prim.get_info_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8Array ( indent + 1 , "info_data" , prim.get_info_dataPtr() , prim.get_length() );
    rv += policy->display_l2ca_info_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "req_ctx" , prim.get_req_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_GETINFO_CFM" );
    return rv;
}
a_string display_L2CA_REGISTER_REQ_pdu ( int indent , const L2CA_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "mode_mask" , prim.get_mode_mask() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_STREAM_BUFFER_SIZES_T ( indent + 1 , "connection_oriented" , prim.get_connection_oriented() );
    rv += policy->display_STREAM_BUFFER_SIZES_T ( indent + 1 , "connectionless" , prim.get_connectionless() );
    rv += policy->display_prim_end ( indent , "L2CA_REGISTER_REQ" );
    return rv;
}
a_string display_L2CA_UNMAP_FIXED_CID_IND_pdu ( int indent , const L2CA_UNMAP_FIXED_CID_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_UNMAP_FIXED_CID_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_l2ca_disc_result_t ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "L2CA_UNMAP_FIXED_CID_IND" );
    return rv;
}
a_string display_L2CA_PING_CFM_pdu ( int indent , const L2CA_PING_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_PING_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_length() );
    rv += policy->display_l2ca_misc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "req_ctx" , prim.get_req_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_PING_CFM" );
    return rv;
}
a_string display_L2CA_UNREGISTER_REQ_pdu ( int indent , const L2CA_UNREGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_UNREGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "psm_local" , prim.get_psm_local() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "L2CA_UNREGISTER_REQ" );
    return rv;
}
a_string display_L2CA_MAP_FIXED_CID_IND_pdu ( int indent , const L2CA_MAP_FIXED_CID_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MAP_FIXED_CID_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "fixed_cid" , prim.get_fixed_cid() );
    rv += policy->display_uint16 ( indent + 1 , "cl_local_psm" , prim.get_cl_local_psm() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_MAP_FIXED_CID_IND" );
    return rv;
}
a_string display_L2CA_UNROUTE_DATA_CFM_pdu ( int indent , const L2CA_UNROUTE_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_UNROUTE_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_l2ca_misc_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "L2CA_UNROUTE_DATA_CFM" );
    return rv;
}
a_string display_L2CA_DATAWRITE_ABORT_CFM_pdu ( int indent , const L2CA_DATAWRITE_ABORT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DATAWRITE_ABORT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_prim_end ( indent , "L2CA_DATAWRITE_ABORT_CFM" );
    return rv;
}
a_string display_L2CA_TIMEOUT_IND_pdu ( int indent , const L2CA_TIMEOUT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_TIMEOUT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_prim_end ( indent , "L2CA_TIMEOUT_IND" );
    return rv;
}
a_string display_L2CA_CREATE_CHANNEL_RSP_pdu ( int indent , const L2CA_CREATE_CHANNEL_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CREATE_CHANNEL_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_l2ca_conn_result_t ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_prim_end ( indent , "L2CA_CREATE_CHANNEL_RSP" );
    return rv;
}
a_string display_L2CA_MOVE_CHANNEL_IND_pdu ( int indent , const L2CA_MOVE_CHANNEL_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MOVE_CHANNEL_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_uint16 ( indent + 1 , "local_control" , prim.get_local_control() );
    rv += policy->display_prim_end ( indent , "L2CA_MOVE_CHANNEL_IND" );
    return rv;
}
a_string display_L2CA_CONFIG_REQ_pdu ( int indent , const L2CA_CONFIG_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONFIG_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_uint16 ( indent + 1 , "hints" , prim.get_hints() );
    rv += policy->display_uint8 ( indent + 1 , "unknown_length" , prim.get_unknown_length() );
    rv += policy->display_uint8Array ( indent + 1 , "unknown" , prim.get_unknownPtr() , prim.get_unknown_length() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flush_to" , prim.get_flush_to() );
    {
        const L2caQos qos = prim.get_qos();

        rv += policy->display_prim_start (indent + 1, "qos:" );

        if (qos.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "flags", qos.flags() )
                + policy->display_uint8  ( indent + 2 , "service_type", qos.service_type() )
                + policy->display_uint32 ( indent + 2 , "token_rate", qos.token_rate() )
                + policy->display_uint32 ( indent + 2 , "token_bucket", qos.token_bucket() )
                + policy->display_uint32 ( indent + 2 , "peak_bw", qos.peak_bw() )
                + policy->display_uint32 ( indent + 2 , "latency", qos.latency() )
                + policy->display_uint32 ( indent + 2 , "delay_var", qos.delay_var() );
        }

        rv += policy->display_prim_end (0, "");
    }
    {
        const L2caFlow flow = prim.get_flow();

        rv += policy->display_prim_start (indent + 1, "flow:" );

        if (flow.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "mode", flow.mode() )
                + policy->display_uint8  ( indent + 2 , "tx_window", flow.tx_window() )
                + policy->display_uint8  ( indent + 2 , "max_retransmit", flow.max_retransmit() )
                + policy->display_uint16 ( indent + 2 , "retrans_timeout", flow.retrans_timeout() )
                + policy->display_uint16 ( indent + 2 , "monitor_timeout", flow.monitor_timeout() )
                + policy->display_uint16 ( indent + 2 , "maximum_pdu", flow.maximum_pdu() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint8 ( indent + 1 , "fcs" , prim.get_fcs() );
    {
        const L2caFlowSpec flowspec = prim.get_flowspec();

        rv += policy->display_prim_start (indent + 1, "flowspec:" );

        if (flowspec.get_length() != 0)
        {
            rv += policy->display_uint8  ( indent + 2 , "fs_identifier", flowspec.fs_identifier() )
                + policy->display_uint8  ( indent + 2 , "fs_service_type", flowspec.fs_service_type() )
                + policy->display_uint16 ( indent + 2 , "fs_max_sdu", flowspec.fs_max_sdu() )
                + policy->display_uint32 ( indent + 2 , "fs_interarrival", flowspec.fs_interarrival() )
                + policy->display_uint32 ( indent + 2 , "fs_latency", flowspec.fs_latency() )
                + policy->display_uint32 ( indent + 2 , "fs_flush_to", flowspec.fs_flush_to() );
        }

        rv += policy->display_prim_end (0, "");
    }
    rv += policy->display_uint16 ( indent + 1 , "ext_window" , prim.get_ext_window() );
    rv += policy->display_prim_end ( indent , "L2CA_CONFIG_REQ" );
    return rv;
}
a_string display_L2CA_DISCONNECT_RSP_pdu ( int indent , const L2CA_DISCONNECT_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DISCONNECT_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_prim_end ( indent , "L2CA_DISCONNECT_RSP" );
    return rv;
}
a_string display_L2CA_RAW_MODE_REQ_pdu ( int indent , const L2CA_RAW_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_RAW_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "raw_mode" , prim.get_raw_mode() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "L2CA_RAW_MODE_REQ" );
    return rv;
}
a_string display_L2CA_UNMAP_FIXED_CID_REQ_pdu ( int indent , const L2CA_UNMAP_FIXED_CID_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_UNMAP_FIXED_CID_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_prim_end ( indent , "L2CA_UNMAP_FIXED_CID_REQ" );
    return rv;
}
a_string display_L2CA_AUTO_CONNECT_RSP_pdu ( int indent , const L2CA_AUTO_CONNECT_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_AUTO_CONNECT_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_l2ca_conn_result_t ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "conftab_length" , prim.get_conftab_length() );
    rv += policy->display_uint16Array ( indent + 1 , "conftab" , prim.get_conftabPtr(), prim.get_conftab_length());
    rv += policy->display_prim_end ( indent , "L2CA_AUTO_CONNECT_RSP" );
    return rv;
}
a_string display_L2CA_DATAWRITE_REQ_pdu ( int indent , const L2CA_DATAWRITE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_DATAWRITE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "req_ctx" , prim.get_req_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "packets_ack" , prim.get_packets_ack() );
    rv += policy->display_prim_end ( indent , "L2CA_DATAWRITE_REQ" );
    return rv;
}
a_string display_L2CA_CONNECT_RSP_pdu ( int indent , const L2CA_CONNECT_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONNECT_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint8 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_l2ca_conn_result_t ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_prim_end ( indent , "L2CA_CONNECT_RSP" );
    return rv;
}
a_string display_L2CA_CONNECTION_PAR_UPDATE_REQ_pdu ( int indent , const L2CA_CONNECTION_PAR_UPDATE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_CONNECTION_PAR_UPDATE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "min_interval" , prim.get_min_interval() );
    rv += policy->display_uint16 ( indent + 1 , "max_interval" , prim.get_max_interval() );
    rv += policy->display_uint16 ( indent + 1 , "latency" , prim.get_latency() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "L2CA_CONNECTION_PAR_UPDATE_REQ" );
    return rv;
}
a_string display_L2CA_MAP_FIXED_CID_REQ_pdu ( int indent , const L2CA_MAP_FIXED_CID_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "L2CA_MAP_FIXED_CID_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "fixed_cid" , prim.get_fixed_cid() );
    rv += policy->display_uint16 ( indent + 1 , "cl_local_psm" , prim.get_cl_local_psm() );
    rv += policy->display_uint16 ( indent + 1 , "cl_remote_psm" , prim.get_cl_remote_psm() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "L2CA_MAP_FIXED_CID_REQ" );
    return rv;
}
a_string display_SDC_CONFIG_REQ_pdu ( int indent , const SDC_CONFIG_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_CONFIG_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "l2cap_mtu" , prim.get_l2cap_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "SDC_CONFIG_REQ" );
    return rv;
}
a_string display_SDC_OPEN_SEARCH_CFM_pdu ( int indent , const SDC_OPEN_SEARCH_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_OPEN_SEARCH_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_SDC_RESPONSE_T ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "SDC_OPEN_SEARCH_CFM" );
    return rv;
}
a_string display_SDS_REGISTER_CFM_pdu ( int indent , const SDS_REGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDS_REGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint32 ( indent + 1 , "svc_rec_hndl" , prim.get_svc_rec_hndl() );
    rv += policy->display_SDS_RESPONSE_T ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "SDS_REGISTER_CFM" );
    return rv;
}
a_string display_SDS_CONFIG_CFM_pdu ( int indent , const SDS_CONFIG_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDS_CONFIG_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "l2cap_mtu" , prim.get_l2cap_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "SDS_CONFIG_CFM" );
    return rv;
}
a_string display_SDC_SERVICE_ATTRIBUTE_REQ_pdu ( int indent , const SDC_SERVICE_ATTRIBUTE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_SERVICE_ATTRIBUTE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint32 ( indent + 1 , "svc_rec_hndl" , prim.get_svc_rec_hndl() );
    rv += policy->display_uint16 ( indent + 1 , "size_attr_list" , prim.get_size_attr_list() );
    rv += policy->display_uint8Array ( indent + 1 , "attr_list" , prim.get_attr_listPtr() , prim.get_size_attr_list() );
    rv += policy->display_uint16 ( indent + 1 , "max_num_attr" , prim.get_max_num_attr() );
    rv += policy->display_prim_end ( indent , "SDC_SERVICE_ATTRIBUTE_REQ" );
    return rv;
}
a_string display_SDS_UNREGISTER_CFM_pdu ( int indent , const SDS_UNREGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDS_UNREGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint32 ( indent + 1 , "svc_rec_hndl" , prim.get_svc_rec_hndl() );
    rv += policy->display_SDS_RESPONSE_T ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "SDS_UNREGISTER_CFM" );
    return rv;
}
a_string display_SDC_TERMINATE_PRIMITIVE_REQ_pdu ( int indent , const SDC_TERMINATE_PRIMITIVE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_TERMINATE_PRIMITIVE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "SDC_TERMINATE_PRIMITIVE_REQ" );
    return rv;
}
a_string display_SDC_CONFIG_CFM_pdu ( int indent , const SDC_CONFIG_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_CONFIG_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "l2cap_mtu" , prim.get_l2cap_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "SDC_CONFIG_CFM" );
    return rv;
}
a_string display_SDC_SERVICE_SEARCH_ATTRIBUTE_REQ_pdu ( int indent , const SDC_SERVICE_SEARCH_ATTRIBUTE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_SERVICE_SEARCH_ATTRIBUTE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "size_srch_pttrn" , prim.get_size_srch_pttrn() );
    rv += policy->display_uint8Array ( indent + 1 , "srch_pttrn" , prim.get_srch_pttrnPtr() , prim.get_size_srch_pttrn() );
    rv += policy->display_uint16 ( indent + 1 , "size_attr_list" , prim.get_size_attr_list() );
    rv += policy->display_uint8Array ( indent + 1 , "attr_list" , prim.get_attr_listPtr() , prim.get_size_attr_list() );
    rv += policy->display_uint16 ( indent + 1 , "max_num_attr" , prim.get_max_num_attr() );
    rv += policy->display_prim_end ( indent , "SDC_SERVICE_SEARCH_ATTRIBUTE_REQ" );
    return rv;
}
a_string display_SDC_SERVICE_SEARCH_REQ_pdu ( int indent , const SDC_SERVICE_SEARCH_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_SERVICE_SEARCH_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "size_srch_pttrn" , prim.get_size_srch_pttrn() );
    rv += policy->display_uint8Array ( indent + 1 , "srch_pttrn" , prim.get_srch_pttrnPtr() , prim.get_size_srch_pttrn() );
    rv += policy->display_uint16 ( indent + 1 , "max_num_recs" , prim.get_max_num_recs() );
    rv += policy->display_prim_end ( indent , "SDC_SERVICE_SEARCH_REQ" );
    return rv;
}
a_string display_SDC_SERVICE_ATTRIBUTE_CFM_pdu ( int indent , const SDC_SERVICE_ATTRIBUTE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_SERVICE_ATTRIBUTE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "size_attr_list" , prim.get_size_attr_list() );
    rv += policy->display_uint8Array ( indent + 1 , "attr_list" , prim.get_attr_listPtr() , prim.get_size_attr_list() );
    rv += policy->display_SDC_RESPONSE_T ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "err_code" , prim.get_err_code() );
    rv += policy->display_uint16 ( indent + 1 , "size_err_info" , prim.get_size_err_info() );
    rv += policy->display_uint8Array ( indent + 1 , "err_info" , prim.get_err_infoPtr() , prim.get_size_err_info() );
    rv += policy->display_prim_end ( indent , "SDC_SERVICE_ATTRIBUTE_CFM" );
    return rv;
}
a_string display_SDC_CLOSE_SEARCH_IND_pdu ( int indent , const SDC_CLOSE_SEARCH_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_CLOSE_SEARCH_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_SDC_RESPONSE_T ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "SDC_CLOSE_SEARCH_IND" );
    return rv;
}
a_string display_SDC_OPEN_SEARCH_REQ_pdu ( int indent , const SDC_OPEN_SEARCH_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_OPEN_SEARCH_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "SDC_OPEN_SEARCH_REQ" );
    return rv;
}
a_string display_SDC_SERVICE_SEARCH_ATTRIBUTE_CFM_pdu ( int indent , const SDC_SERVICE_SEARCH_ATTRIBUTE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_SERVICE_SEARCH_ATTRIBUTE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "total_response_size" , prim.get_total_response_size() );
    rv += policy->display_uint16 ( indent + 1 , "size_attr_list" , prim.get_size_attr_list() );
    rv += policy->display_uint8Array ( indent + 1 , "attr_list" , prim.get_attr_listPtr() , prim.get_size_attr_list() );
    rv += policy->display_bool ( indent + 1 , "more_to_come" , prim.get_more_to_come() );
    rv += policy->display_SDC_RESPONSE_T ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "err_code" , prim.get_err_code() );
    rv += policy->display_uint16 ( indent + 1 , "size_err_info" , prim.get_size_err_info() );
    rv += policy->display_uint8Array ( indent + 1 , "err_info" , prim.get_err_infoPtr() , prim.get_size_err_info() );
    rv += policy->display_prim_end ( indent , "SDC_SERVICE_SEARCH_ATTRIBUTE_CFM" );
    return rv;
}
a_string display_SDC_CLOSE_SEARCH_REQ_pdu ( int indent , const SDC_CLOSE_SEARCH_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_CLOSE_SEARCH_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "SDC_CLOSE_SEARCH_REQ" );
    return rv;
}
a_string display_SDS_CONFIG_REQ_pdu ( int indent , const SDS_CONFIG_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDS_CONFIG_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "l2cap_mtu" , prim.get_l2cap_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "SDS_CONFIG_REQ" );
    return rv;
}
a_string display_SDS_REGISTER_REQ_pdu ( int indent , const SDS_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDS_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "reg_ctx" , prim.get_reg_ctx() );
    rv += policy->display_uint16 ( indent + 1 , "num_rec_bytes" , prim.get_num_rec_bytes() );
    rv += policy->display_uint8Array ( indent + 1 , "service_rec" , prim.get_service_recPtr() , prim.get_num_rec_bytes() );
    rv += policy->display_prim_end ( indent , "SDS_REGISTER_REQ" );
    return rv;
}
a_string display_SDC_SERVICE_SEARCH_CFM_pdu ( int indent , const SDC_SERVICE_SEARCH_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDC_SERVICE_SEARCH_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "con_ctx" , prim.get_con_ctx() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "num_recs_ret" , prim.get_num_recs_ret() );
    rv += policy->display_uint16 ( indent + 1 , "size_rec_list" , prim.get_size_rec_list() );
    rv += policy->display_uint8Array ( indent + 1 , "rec_list" , prim.get_rec_listPtr() , prim.get_size_rec_list() );
    rv += policy->display_SDC_RESPONSE_T ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "err_code" , prim.get_err_code() );
    rv += policy->display_uint16 ( indent + 1 , "size_err_info" , prim.get_size_err_info() );
    rv += policy->display_uint8Array ( indent + 1 , "err_info" , prim.get_err_infoPtr() , prim.get_size_err_info() );
    rv += policy->display_prim_end ( indent , "SDC_SERVICE_SEARCH_CFM" );
    return rv;
}
a_string display_SDS_UNREGISTER_REQ_pdu ( int indent , const SDS_UNREGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "SDS_UNREGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint32 ( indent + 1 , "svc_rec_hndl" , prim.get_svc_rec_hndl() );
    rv += policy->display_prim_end ( indent , "SDS_UNREGISTER_REQ" );
    return rv;
}
a_string display_BNEP_DATA_REQ_pdu ( int indent , const BNEP_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "ether_type" , prim.get_ether_type() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "rem_addr" , prim.get_rem_addr() );
    rv += policy->display_uint8Array ( indent + 1 , "mblk" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BNEP_DATA_REQ" );
    return rv;
}
a_string display_BNEP_DISCONNECT_IND_pdu ( int indent , const BNEP_DISCONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_DISCONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "BNEP_DISCONNECT_IND" );
    return rv;
}
a_string display_BNEP_DOWN_IND_pdu ( int indent , const BNEP_DOWN_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_DOWN_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "BNEP_DOWN_IND" );
    return rv;
}
a_string display_BNEP_UP_IND_pdu ( int indent , const BNEP_UP_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_UP_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "rem_uuid" , prim.get_rem_uuid() );
    rv += policy->display_uint16 ( indent + 1 , "loc_uuid" , prim.get_loc_uuid() );
    rv += policy->display_prim_end ( indent , "BNEP_UP_IND" );
    return rv;
}
a_string display_BNEP_LISTEN_REQ_pdu ( int indent , const BNEP_LISTEN_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_LISTEN_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "ether_type" , prim.get_ether_type() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "addr" , prim.get_addr() );
    rv += policy->display_prim_end ( indent , "BNEP_LISTEN_REQ" );
    return rv;
}
a_string display_BNEP_DEBUG_IND_pdu ( int indent , const BNEP_DEBUG_IND_T_PDU& prim , PDU_displayer * policy )
{
    uint16 args[18];
    prim.get_args(args);
    a_string rv = policy->display_prim_start ( indent , "BNEP_DEBUG_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "test" , prim.get_test() );
    rv += policy->display_uint16Array ( indent + 1 , "args" , args , 18 );
    rv += policy->display_prim_end ( indent , "BNEP_DEBUG_IND" );
    return rv;
}
a_string display_BNEP_DISCONNECT_REQ_pdu ( int indent , const BNEP_DISCONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_DISCONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_prim_end ( indent , "BNEP_DISCONNECT_REQ" );
    return rv;
}
a_string display_BNEP_IGNORE_REQ_pdu ( int indent , const BNEP_IGNORE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_IGNORE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "ether_type" , prim.get_ether_type() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "addr" , prim.get_addr() );
    rv += policy->display_prim_end ( indent , "BNEP_IGNORE_REQ" );
    return rv;
}
a_string display_BNEP_DEBUG_REQ_pdu ( int indent , const BNEP_DEBUG_REQ_T_PDU& prim , PDU_displayer * policy )
{
    uint16 args[18];
    prim.get_args(args);
    a_string rv = policy->display_prim_start ( indent , "BNEP_DEBUG_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "test" , prim.get_test() );
    rv += policy->display_uint16Array ( indent + 1 , "args" , args , 18 );
    rv += policy->display_prim_end ( indent , "BNEP_DEBUG_REQ" );
    return rv;
}
a_string display_BNEP_FLOW_IND_pdu ( int indent , const BNEP_FLOW_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_FLOW_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "free" , prim.get_free() );
    rv += policy->display_prim_end ( indent , "BNEP_FLOW_IND" );
    return rv;
}
a_string display_BNEP_CONNECT_CFM_pdu ( int indent , const BNEP_CONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_CONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BNEP_CONNECT_CFM" );
    return rv;
}
a_string display_BNEP_CONNECT_IND_pdu ( int indent , const BNEP_CONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_CONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "rem_addr" , prim.get_rem_addr() );
    rv += policy->display_uint16 ( indent + 1 , "rem_uuid" , prim.get_rem_uuid() );
    rv += policy->display_uint16 ( indent + 1 , "loc_uuid" , prim.get_loc_uuid() );
    rv += policy->display_prim_end ( indent , "BNEP_CONNECT_IND" );
    return rv;
}
a_string display_BNEP_EXTENDED_MULTICAST_DATA_REQ_pdu ( int indent , const BNEP_EXTENDED_MULTICAST_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_EXTENDED_MULTICAST_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id_not" , prim.get_id_not() );
    rv += policy->display_uint16 ( indent + 1 , "ether_type" , prim.get_ether_type() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "dst_addr" , prim.get_dst_addr() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "src_addr" , prim.get_src_addr() );
    rv += policy->display_uint8Array ( indent + 1 , "mblk" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BNEP_EXTENDED_MULTICAST_DATA_REQ" );
    return rv;
}
a_string display_BNEP_LOOPBACK_DATA_IND_pdu ( int indent , const BNEP_LOOPBACK_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_LOOPBACK_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8Array ( indent + 1 , "mblk" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BNEP_LOOPBACK_DATA_IND" );
    return rv;
}
a_string display_BNEP_FLOW_REQ_pdu ( int indent , const BNEP_FLOW_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_FLOW_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_prim_end ( indent , "BNEP_FLOW_REQ" );
    return rv;
}
a_string display_BNEP_EXTENDED_DATA_IND_pdu ( int indent , const BNEP_EXTENDED_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_EXTENDED_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "ether_type" , prim.get_ether_type() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "dst_addr" , prim.get_dst_addr() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "src_addr" , prim.get_src_addr() );
    rv += policy->display_uint8Array ( indent + 1 , "mblk" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BNEP_EXTENDED_DATA_IND" );
    return rv;
}
a_string display_BNEP_CONNECT_REQ_pdu ( int indent , const BNEP_CONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_CONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "rem_addr" , prim.get_rem_addr() );
    rv += policy->display_prim_end ( indent , "BNEP_CONNECT_REQ" );
    return rv;
}
a_string display_BNEP_REGISTER_REQ_pdu ( int indent , const BNEP_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "BNEP_REGISTER_REQ" );
    return rv;
}
a_string display_BNEP_HCI_SWITCH_ROLE_RSP_pdu ( int indent , const BNEP_HCI_SWITCH_ROLE_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_HCI_SWITCH_ROLE_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "role" , prim.get_role() );
    rv += policy->display_prim_end ( indent , "BNEP_HCI_SWITCH_ROLE_RSP" );
    return rv;
}
a_string display_BNEP_DATA_IND_pdu ( int indent , const BNEP_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8Array ( indent + 1 , "mblk" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BNEP_DATA_IND" );
    return rv;
}
a_string display_BNEP_MULTICAST_DATA_IND_pdu ( int indent , const BNEP_MULTICAST_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_MULTICAST_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8Array ( indent + 1 , "mblk" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BNEP_MULTICAST_DATA_IND" );
    return rv;
}
a_string display_BNEP_EXTENDED_DATA_REQ_pdu ( int indent , const BNEP_EXTENDED_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BNEP_EXTENDED_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "ether_type" , prim.get_ether_type() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "dst_addr" , prim.get_dst_addr() );
    rv += policy->display_EtherNetAddress ( indent + 1 , "src_addr" , prim.get_src_addr() );
    rv += policy->display_uint8Array ( indent + 1 , "mblk" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BNEP_EXTENDED_DATA_REQ" );
    return rv;
}
a_string display_TCP_CLOSE_REQ_pdu ( int indent , const TCP_CLOSE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_CLOSE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "b" , prim.get_b() );
    rv += policy->display_prim_end ( indent , "TCP_CLOSE_REQ" );
    return rv;
}
a_string display_TCP_DATA_CFM_pdu ( int indent , const TCP_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "b_out" , prim.get_b_out() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "TCP_DATA_CFM" );
    return rv;
}
a_string display_TCP_OPEN_RSP_pdu ( int indent , const TCP_OPEN_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_OPEN_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "b" , prim.get_b() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "TCP_OPEN_RSP" );
    return rv;
}
a_string display_TCP_DATA_IND_pdu ( int indent , const TCP_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "b_out" , prim.get_b_out() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_prim_end ( indent , "TCP_DATA_IND" );
    return rv;
}
a_string display_TCP_ABORT_REQ_pdu ( int indent , const TCP_ABORT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_ABORT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "b" , prim.get_b() );
    rv += policy->display_prim_end ( indent , "TCP_ABORT_REQ" );
    return rv;
}
a_string display_TCP_CLOSED_RSP_pdu ( int indent , const TCP_CLOSED_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_CLOSED_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "b" , prim.get_b() );
    rv += policy->display_prim_end ( indent , "TCP_CLOSED_RSP" );
    return rv;
}
a_string display_TCP_DATA_REQ_pdu ( int indent , const TCP_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "b_out" , prim.get_b_out() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_prim_end ( indent , "TCP_DATA_REQ" );
    return rv;
}
a_string display_TCP_OPEN_CFM_pdu ( int indent , const TCP_OPEN_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_OPEN_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "b_in" , prim.get_b_in() );
    rv += policy->display_uint16 ( indent + 1 , "b_out" , prim.get_b_out() );
    rv += policy->display_uint16 ( indent + 1 , "out_size" , prim.get_out_size() );
    rv += policy->display_prim_end ( indent , "TCP_OPEN_CFM" );
    return rv;
}
a_string display_TCP_OPEN_IND_pdu ( int indent , const TCP_OPEN_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_OPEN_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "b_out" , prim.get_b_out() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_IPAddress ( indent + 1 , "rem_addr" , prim.get_rem_addr() );
    rv += policy->display_uint16 ( indent + 1 , "rem_port" , prim.get_rem_port() );
    rv += policy->display_prim_end ( indent , "TCP_OPEN_IND" );
    return rv;
}
a_string display_TCP_ABORT_RSP_pdu ( int indent , const TCP_ABORT_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_ABORT_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "b" , prim.get_b() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "TCP_ABORT_RSP" );
    return rv;
}
a_string display_TCP_CLOSED_IND_pdu ( int indent , const TCP_CLOSED_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_CLOSED_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "b_out" , prim.get_b_out() );
    rv += policy->display_prim_end ( indent , "TCP_CLOSED_IND" );
    return rv;
}
a_string display_TCP_DATA_RSP_pdu ( int indent , const TCP_DATA_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_DATA_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "b" , prim.get_b() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "TCP_DATA_RSP" );
    return rv;
}
a_string display_TCP_OPEN_REQ_pdu ( int indent , const TCP_OPEN_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_OPEN_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_IPAddress ( indent + 1 , "rem_addr" , prim.get_rem_addr() );
    rv += policy->display_uint16 ( indent + 1 , "rem_port" , prim.get_rem_port() );
    rv += policy->display_uint16 ( indent + 1 , "out_size" , prim.get_out_size() );
    rv += policy->display_uint16 ( indent + 1 , "loc_port" , prim.get_loc_port() );
    rv += policy->display_uint16 ( indent + 1 , "in_size" , prim.get_in_size() );
    rv += policy->display_prim_end ( indent , "TCP_OPEN_REQ" );
    return rv;
}
a_string display_TCP_CLOSE_IND_pdu ( int indent , const TCP_CLOSE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_CLOSE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "b_out" , prim.get_b_out() );
    rv += policy->display_prim_end ( indent , "TCP_CLOSE_IND" );
    return rv;
}
a_string display_TCP_ABORT_IND_pdu ( int indent , const TCP_ABORT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "TCP_ABORT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "b_out" , prim.get_b_out() );
    rv += policy->display_prim_end ( indent , "TCP_ABORT_IND" );
    return rv;
}
a_string display_UDP_DATA_CFM_pdu ( int indent , const UDP_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_prim_end ( indent , "UDP_DATA_CFM" );
    return rv;
}
a_string display_UDP_EXTENDED_DATA_IND_pdu ( int indent , const UDP_EXTENDED_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_EXTENDED_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_IPAddress ( indent + 1 , "rem_addr" , prim.get_rem_addr() );
    rv += policy->display_uint16 ( indent + 1 , "rem_port" , prim.get_rem_port() );
    rv += policy->display_IPAddress ( indent + 1 , "loc_addr" , prim.get_loc_addr() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_prim_end ( indent , "UDP_EXTENDED_DATA_IND" );
    return rv;
}
a_string display_UDP_DATA_IND_pdu ( int indent , const UDP_DATA_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_DATA_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_prim_end ( indent , "UDP_DATA_IND" );
    return rv;
}
a_string display_UDP_CLOSE_CFM_pdu ( int indent , const UDP_CLOSE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_CLOSE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_prim_end ( indent , "UDP_CLOSE_CFM" );
    return rv;
}
a_string display_UDP_DATA_REQ_pdu ( int indent , const UDP_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_prim_end ( indent , "UDP_DATA_REQ" );
    return rv;
}
a_string display_UDP_EXTENDED_DATA_REQ_pdu ( int indent , const UDP_EXTENDED_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_EXTENDED_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_IPAddress ( indent + 1 , "rem_addr" , prim.get_rem_addr() );
    rv += policy->display_uint16 ( indent + 1 , "rem_port" , prim.get_rem_port() );
    rv += policy->display_IPAddress ( indent + 1 , "loc_addr" , prim.get_loc_addr() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , prim.get_dataPtr() , prim.get_len() );
    rv += policy->display_prim_end ( indent , "UDP_EXTENDED_DATA_REQ" );
    return rv;
}
a_string display_UDP_OPEN_CFM_pdu ( int indent , const UDP_OPEN_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_OPEN_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "reserved" , prim.get_reserved() );
    rv += policy->display_prim_end ( indent , "UDP_OPEN_CFM" );
    return rv;
}
a_string display_UDP_LISTEN_REQ_pdu ( int indent , const UDP_LISTEN_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_LISTEN_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_IPAddress ( indent + 1 , "loc_addr" , prim.get_loc_addr() );
    rv += policy->display_prim_end ( indent , "UDP_LISTEN_REQ" );
    return rv;
}
a_string display_UDP_CLOSE_REQ_pdu ( int indent , const UDP_CLOSE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_CLOSE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_prim_end ( indent , "UDP_CLOSE_REQ" );
    return rv;
}
a_string display_UDP_OPEN_REQ_pdu ( int indent , const UDP_OPEN_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_OPEN_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_IPAddress ( indent + 1 , "rem_addr" , prim.get_rem_addr() );
    rv += policy->display_uint16 ( indent + 1 , "rem_port" , prim.get_rem_port() );
    rv += policy->display_uint16 ( indent + 1 , "loc_port" , prim.get_loc_port() );
    rv += policy->display_prim_end ( indent , "UDP_OPEN_REQ" );
    return rv;
}
a_string display_UDP_IGNORE_REQ_pdu ( int indent , const UDP_IGNORE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "UDP_IGNORE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_IPAddress ( indent + 1 , "loc_addr" , prim.get_loc_addr() );
    rv += policy->display_prim_end ( indent , "UDP_IGNORE_REQ" );
    return rv;
}
a_string display_ATT_FIND_BY_TYPE_VALUE_REQ_pdu ( int indent , const ATT_FIND_BY_TYPE_VALUE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_FIND_BY_TYPE_VALUE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "start" , prim.get_start() );
    rv += policy->display_uint16 ( indent + 1 , "end" , prim.get_end() );
    rv += policy->display_uint16 ( indent + 1 , "uuid" , prim.get_uuid() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_FIND_BY_TYPE_VALUE_REQ" );
    return rv;
}
a_string display_ATT_CONNECT_CFM_pdu ( int indent , const ATT_CONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_CONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_l2ca_conn_result_t ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_CONNECT_CFM" );
    return rv;
}
a_string display_ATT_READ_BLOB_REQ_pdu ( int indent , const ATT_READ_BLOB_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_BLOB_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "offset" , prim.get_offset() );
    rv += policy->display_prim_end ( indent , "ATT_READ_BLOB_REQ" );
    return rv;
}
a_string display_ATT_FIND_INFO_CFM_pdu ( int indent , const ATT_FIND_INFO_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_FIND_INFO_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "uuid_type" , prim.get_uuid_type() );
    uint32 uuid[4];
    prim.get_uuid(uuid);
    rv += policy->display_uint32Array ( indent + 1 , "uuid" , uuid, 4);
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_FIND_INFO_CFM" );
    return rv;
}
a_string display_ATT_HANDLE_VALUE_IND_pdu ( int indent , const ATT_HANDLE_VALUE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_HANDLE_VALUE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_HANDLE_VALUE_IND" );
    return rv;
}
a_string display_ATT_EXCHANGE_MTU_RSP_pdu ( int indent , const ATT_EXCHANGE_MTU_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_EXCHANGE_MTU_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "server_mtu" , prim.get_server_mtu() );
    rv += policy->display_prim_end ( indent , "ATT_EXCHANGE_MTU_RSP" );
    return rv;
}
a_string display_ATT_DISCONNECT_IND_pdu ( int indent , const ATT_DISCONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_DISCONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_l2ca_disc_result_t ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "ATT_DISCONNECT_IND" );
    return rv;
}
a_string display_ATT_READ_MULTI_CFM_pdu ( int indent , const ATT_READ_MULTI_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_MULTI_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_READ_MULTI_CFM" );
    return rv;
}
a_string display_ATT_UNREGISTER_CFM_pdu ( int indent , const ATT_UNREGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_UNREGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_UNREGISTER_CFM" );
    return rv;
}
a_string display_ATT_ACCESS_RSP_pdu ( int indent , const ATT_ACCESS_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_ACCESS_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_ACCESS_RSP" );
    return rv;
}
a_string display_ATT_EXECUTE_WRITE_REQ_pdu ( int indent , const ATT_EXECUTE_WRITE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_EXECUTE_WRITE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "ATT_EXECUTE_WRITE_REQ" );
    return rv;
}
a_string display_ATT_HANDLE_VALUE_REQ_pdu ( int indent , const ATT_HANDLE_VALUE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_HANDLE_VALUE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_HANDLE_VALUE_REQ" );
    return rv;
}
a_string display_ATT_DISCONNECT_REQ_pdu ( int indent , const ATT_DISCONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_DISCONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_prim_end ( indent , "ATT_DISCONNECT_REQ" );
    return rv;
}
a_string display_ATT_DEBUG_IND_pdu ( int indent , const ATT_DEBUG_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_DEBUG_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "size_debug" , prim.get_size_debug() );
    rv += policy->display_uint8Array ( indent + 1 , "debug" , prim.get_debugPtr() , prim.get_size_debug() );
    rv += policy->display_prim_end ( indent , "ATT_DEBUG_IND" );
    return rv;
}
a_string display_ATT_REGISTER_CFM_pdu ( int indent , const ATT_REGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_REGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_REGISTER_CFM" );
    return rv;
}
a_string display_ATT_FIND_BY_TYPE_VALUE_CFM_pdu ( int indent , const ATT_FIND_BY_TYPE_VALUE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_FIND_BY_TYPE_VALUE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "end" , prim.get_end() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_FIND_BY_TYPE_VALUE_CFM" );
    return rv;
}
a_string display_ATT_EXCHANGE_MTU_IND_pdu ( int indent , const ATT_EXCHANGE_MTU_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_EXCHANGE_MTU_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "client_mtu" , prim.get_client_mtu() );
    rv += policy->display_prim_end ( indent , "ATT_EXCHANGE_MTU_IND" );
    return rv;
}
a_string display_ATT_READ_BLOB_CFM_pdu ( int indent , const ATT_READ_BLOB_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_BLOB_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_READ_BLOB_CFM" );
    return rv;
}
a_string display_ATT_PREPARE_WRITE_REQ_pdu ( int indent , const ATT_PREPARE_WRITE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_PREPARE_WRITE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "offset" , prim.get_offset() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_PREPARE_WRITE_REQ" );
    return rv;
}
a_string display_ATT_WRITE_REQ_pdu ( int indent , const ATT_WRITE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_WRITE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_WRITE_REQ" );
    return rv;
}
a_string display_ATT_READ_BY_TYPE_REQ_pdu ( int indent , const ATT_READ_BY_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_BY_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "start" , prim.get_start() );
    rv += policy->display_uint16 ( indent + 1 , "end" , prim.get_end() );
    rv += policy->display_uint16 ( indent + 1 , "uuid_type" , prim.get_uuid_type() );
    uint32 uuid[4];
    prim.get_uuid(uuid);
    rv += policy->display_uint32Array ( indent + 1 , "uuid" , uuid, 4);
    rv += policy->display_prim_end ( indent , "ATT_READ_BY_TYPE_REQ" );
    return rv;
}
a_string display_ATT_ADD_DB_REQ_pdu ( int indent , const ATT_ADD_DB_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_ADD_DB_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "size_db" , prim.get_size_db() );
    rv += policy->display_uint16Array ( indent + 1 , "db" , prim.get_dbPtr() , prim.get_size_db() );
    rv += policy->display_prim_end ( indent , "ATT_ADD_DB_REQ" );
    return rv;
}
a_string display_ATT_ACCESS_IND_pdu ( int indent , const ATT_ACCESS_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_ACCESS_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "offset" , prim.get_offset() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_ACCESS_IND" );
    return rv;
}
a_string display_ATT_EXCHANGE_MTU_REQ_pdu ( int indent , const ATT_EXCHANGE_MTU_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_EXCHANGE_MTU_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_prim_end ( indent , "ATT_EXCHANGE_MTU_REQ" );
    return rv;
}
a_string display_ATT_CONNECT_IND_pdu ( int indent , const ATT_CONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_CONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_prim_end ( indent , "ATT_CONNECT_IND" );
    return rv;
}
a_string display_ATT_READ_REQ_pdu ( int indent , const ATT_READ_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "ATT_READ_REQ" );
    return rv;
}
a_string display_ATT_READ_BY_GROUP_TYPE_REQ_pdu ( int indent , const ATT_READ_BY_GROUP_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_BY_GROUP_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "start" , prim.get_start() );
    rv += policy->display_uint16 ( indent + 1 , "end" , prim.get_end() );
    rv += policy->display_uint16 ( indent + 1 , "group_type" , prim.get_group_type() );
    uint32 uuid[4];
    prim.get_group(uuid);
    rv += policy->display_uint32Array ( indent + 1 , "group" , uuid, 4);
    rv += policy->display_prim_end ( indent , "ATT_READ_BY_GROUP_TYPE_REQ" );
    return rv;
}
a_string display_ATT_EXECUTE_WRITE_CFM_pdu ( int indent , const ATT_EXECUTE_WRITE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_EXECUTE_WRITE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_EXECUTE_WRITE_CFM" );
    return rv;
}
a_string display_ATT_HANDLE_VALUE_CFM_pdu ( int indent , const ATT_HANDLE_VALUE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_HANDLE_VALUE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_HANDLE_VALUE_CFM" );
    return rv;
}
a_string display_ATT_CONNECT_REQ_pdu ( int indent , const ATT_CONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_CONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "ATT_CONNECT_REQ" );
    return rv;
}
a_string display_ATT_FIND_INFO_REQ_pdu ( int indent , const ATT_FIND_INFO_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_FIND_INFO_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "start" , prim.get_start() );
    rv += policy->display_uint16 ( indent + 1 , "end" , prim.get_end() );
    rv += policy->display_prim_end ( indent , "ATT_FIND_INFO_REQ" );
    return rv;
}
a_string display_ATT_PREPARE_WRITE_CFM_pdu ( int indent , const ATT_PREPARE_WRITE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_PREPARE_WRITE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "offset" , prim.get_offset() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_PREPARE_WRITE_CFM" );
    return rv;
}
a_string display_ATT_WRITE_CFM_pdu ( int indent , const ATT_WRITE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_WRITE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_WRITE_CFM" );
    return rv;
}
a_string display_ATT_READ_BY_TYPE_CFM_pdu ( int indent , const ATT_READ_BY_TYPE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_BY_TYPE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_READ_BY_TYPE_CFM" );
    return rv;
}
a_string display_ATT_ADD_DB_CFM_pdu ( int indent , const ATT_ADD_DB_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_ADD_DB_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_ADD_DB_CFM" );
    return rv;
}
a_string display_ATT_EXCHANGE_MTU_CFM_pdu ( int indent , const ATT_EXCHANGE_MTU_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_EXCHANGE_MTU_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "mtu" , prim.get_mtu() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "ATT_EXCHANGE_MTU_CFM" );
    return rv;
}
a_string display_ATT_READ_MULTI_REQ_pdu ( int indent , const ATT_READ_MULTI_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_MULTI_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "size_handles" , prim.get_size_handles() );
    rv += policy->display_uint16Array ( indent + 1 , "handles" , prim.get_handlesPtr() , prim.get_size_handles() );
    rv += policy->display_prim_end ( indent , "ATT_READ_MULTI_REQ" );
    return rv;
}
a_string display_ATT_UNREGISTER_REQ_pdu ( int indent , const ATT_UNREGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_UNREGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "ATT_UNREGISTER_REQ" );
    return rv;
}
a_string display_ATT_READ_CFM_pdu ( int indent , const ATT_READ_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_READ_CFM" );
    return rv;
}
a_string display_ATT_READ_BY_GROUP_TYPE_CFM_pdu ( int indent , const ATT_READ_BY_GROUP_TYPE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_READ_BY_GROUP_TYPE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "end" , prim.get_end() );
    rv += policy->display_uint16 ( indent + 1 , "size_value" , prim.get_size_value() );
    rv += policy->display_uint8Array ( indent + 1 , "value" , prim.get_valuePtr() , prim.get_size_value() );
    rv += policy->display_prim_end ( indent , "ATT_READ_BY_GROUP_TYPE_CFM" );
    return rv;
}
a_string display_ATT_HANDLE_VALUE_RSP_pdu ( int indent , const ATT_HANDLE_VALUE_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_HANDLE_VALUE_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_prim_end ( indent , "ATT_HANDLE_VALUE_RSP" );
    return rv;
}
a_string display_ATT_REGISTER_REQ_pdu ( int indent , const ATT_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "ATT_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "ATT_REGISTER_REQ" );
    return rv;
}
a_string display_BCCMD_MAP_SCO_WBS_pdu ( int indent , const BCCMD_MAP_SCO_WBS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_MAP_SCO_WBS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "source_sid" , prim.get_source_sid() );
    rv += policy->display_uint16 ( indent + 1 , "sink_sid" , prim.get_sink_sid() );
    rv += policy->display_prim_end ( indent , "BCCMD_MAP_SCO_WBS" );
    return rv;
}
a_string display_BCCMD_BLE_ADV_FILT_CLEAR_pdu ( int indent , const BCCMD_BLE_ADV_FILT_CLEAR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BLE_ADV_FILT_CLEAR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_BLE_ADV_FILT_CLEAR" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U10_pdu ( int indent , const BCCMD_STIBBONS_U10_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U10" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U10" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U11_pdu ( int indent , const BCCMD_STIBBONS_U11_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U11" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U11" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U12_pdu ( int indent , const BCCMD_STIBBONS_U12_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U12" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U12" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U13_pdu ( int indent , const BCCMD_STIBBONS_U13_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U13" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U13" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U14_pdu ( int indent , const BCCMD_STIBBONS_U14_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U14" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U14" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U15_pdu ( int indent , const BCCMD_STIBBONS_U15_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U15" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U15" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U16_pdu ( int indent , const BCCMD_STIBBONS_U16_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U16" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U16" );
    return rv;
}
a_string display_BCCMD_PCM_RATE_AND_ROUTE_pdu ( int indent , const BCCMD_PCM_RATE_AND_ROUTE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PCM_RATE_AND_ROUTE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "port_id" , prim.get_port_id() );
    rv += policy->display_uint16 ( indent + 1 , "sync_port" , prim.get_sync_port() );
    rv += policy->display_uint16 ( indent + 1 , "io_type" , prim.get_io_type() );
    rv += policy->display_uint32 ( indent + 1 , "read_rate" , prim.get_read_rate() );
    rv += policy->display_uint32 ( indent + 1 , "write_rate" , prim.get_write_rate() );
    rv += policy->display_prim_end ( indent , "BCCMD_PCM_RATE_AND_ROUTE" );
    return rv;
}
a_string display_BCCMD_VM_STATUS_pdu ( int indent , const BCCMD_VM_STATUS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_VM_STATUS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "vmstatus" , prim.get_vmstatus() );
    rv += policy->display_uint16 ( indent + 1 , "exit_code" , prim.get_exit_code() );
    rv += policy->display_prim_end ( indent , "BCCMD_VM_STATUS" );
    return rv;
}
a_string display_BCCMD_COEX_ENABLE_pdu ( int indent , const BCCMD_COEX_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COEX_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_COEX_ENABLE" );
    return rv;
}
a_string display_BCCMD_MIC_BIAS_CTRL_pdu ( int indent , const BCCMD_MIC_BIAS_CTRL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_MIC_BIAS_CTRL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "mic_bias_enable" , prim.get_mic_bias_enable() );
    rv += policy->display_uint16 ( indent + 1 , "mic_bias_current" , prim.get_mic_bias_current() );
    rv += policy->display_uint16 ( indent + 1 , "mic_bias_voltage" , prim.get_mic_bias_voltage() );
    rv += policy->display_uint16 ( indent + 1 , "enable_mic_bias_low_power_mode" , prim.get_enable_mic_bias_low_power_mode() );
    rv += policy->display_prim_end ( indent , "BCCMD_MIC_BIAS_CTRL" );
    return rv;
}
a_string display_BCCMD_BABEL_SPI_RESET_AND_GO_pdu ( int indent , const BCCMD_BABEL_SPI_RESET_AND_GO_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BABEL_SPI_RESET_AND_GO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_BABEL_SPI_RESET_AND_GO" );
    return rv;
}
a_string display_BCCMD_PSCLR_pdu ( int indent , const BCCMD_PSCLR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSCLR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSCLR" );
    return rv;
}
a_string display_BCCMD_RDF_BLE_ADVERTISING_pdu ( int indent , const BCCMD_RDF_BLE_ADVERTISING_PDU& prim , PDU_displayer * policy )
{
    uint8 data[65536];
    prim.get_data( data, prim.get_data_len() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RDF_BLE_ADVERTISING" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_uint16 ( indent + 1 , "adv_interval" , prim.get_adv_interval() );
    rv += policy->display_uint8 ( indent + 1 , "adv_type" , prim.get_adv_type() );
    rv += policy->display_uint8 ( indent + 1 , "addr_type" , prim.get_addr_type() );
    rv += policy->display_uint8 ( indent + 1 , "channels" , prim.get_channels() );
    rv += policy->display_uint8 ( indent + 1 , "data_len" , prim.get_data_len() );
    rv += policy->display_uint8 ( indent + 1 , "anti_whiten_begin" , prim.get_anti_whiten_begin() );
    rv += policy->display_uint8 ( indent + 1 , "anti_whiten_end" , prim.get_anti_whiten_end() );
    rv += policy->display_uint8Array ( indent + 1 , "data" , data , prim.get_data_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_RDF_BLE_ADVERTISING" );
    return rv;
}
a_string display_BCCMD_AFH_CHANNEL_RELEASE_TIME_pdu ( int indent , const BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_AFH_CHANNEL_RELEASE_TIME" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_AFH_CHANNEL_RELEASE_TIME" );
    return rv;
}
a_string display_BCCMD_CONFIG_UART_pdu ( int indent , const BCCMD_CONFIG_UART_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CONFIG_UART" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CONFIG_UART" );
    return rv;
}
a_string display_BCCMD_CHARGER_SET_TRIM_NOW_pdu ( int indent , const BCCMD_CHARGER_SET_TRIM_NOW_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHARGER_SET_TRIM_NOW" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHARGER_SET_TRIM_NOW" );
    return rv;
}
a_string display_BCCMD_CHARGER_DISABLE_pdu ( int indent , const BCCMD_CHARGER_DISABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHARGER_DISABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHARGER_DISABLE" );
    return rv;
}
a_string display_BCCMD_BUILDID_LOADER_pdu ( int indent , const BCCMD_BUILDID_LOADER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BUILDID_LOADER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BUILDID_LOADER" );
    return rv;
}
a_string display_BCCMD_EXT_CLOCK_PERIOD_pdu ( int indent , const BCCMD_EXT_CLOCK_PERIOD_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_EXT_CLOCK_PERIOD" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_EXT_CLOCK_PERIOD" );
    return rv;
}
a_string display_BCCMD_FMTX_REG_pdu ( int indent , const BCCMD_FMTX_REG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FMTX_REG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "fmtx_register" , prim.get_fmtx_register() );
    rv += policy->display_uint16 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "BCCMD_FMTX_REG" );
    return rv;
}
a_string display_BCCMD_RDF_BLE_PACKET_MATCH_pdu ( int indent , const BCCMD_RDF_BLE_PACKET_MATCH_PDU& prim , PDU_displayer * policy )
{
    uint16 tplate[3];
    uint16 match[3];
    prim.get_tplate( tplate, 3 );
    prim.get_match( match, 3 );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RDF_BLE_PACKET_MATCH" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16Array ( indent + 1 , "tplate" , tplate , 3 );
    rv += policy->display_uint16Array ( indent + 1 , "tplate" , match , 3 );
    rv += policy->display_uint16Array ( indent + 1 , "match" , tplate , 3 );
    rv += policy->display_uint16Array ( indent + 1 , "match" , match , 3 );
    rv += policy->display_prim_end ( indent , "BCCMD_RDF_BLE_PACKET_MATCH" );
    return rv;
}
a_string display_BCCMD_ADCRES_pdu ( int indent , const BCCMD_ADCRES_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADCRES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_bool ( indent + 1 , "valid" , prim.get_valid() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADCRES" );
    return rv;
}
a_string display_BCCMD_VM_DEBUG_pdu ( int indent , const BCCMD_VM_DEBUG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_VM_DEBUG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "function" , prim.get_function() );
    rv += policy->display_prim_end ( indent , "BCCMD_VM_DEBUG" );
    return rv;
}
a_string display_BCCMD_RESET_OPERATOR_pdu ( int indent , const BCCMD_RESET_OPERATOR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RESET_OPERATOR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "count" , prim.get_count() );
 uint16 *data;
 data = new uint16[prim.get_count()];
 rv += policy->display_uint16Array ( indent + 1 , "list" , data , prim.get_count());
 delete[] data;
    rv += policy->display_prim_end ( indent , "BCCMD_RESET_OPERATOR" );
    return rv;
}
a_string display_BCCMD_PIO_PROTECT_MASK_pdu ( int indent , const BCCMD_PIO_PROTECT_MASK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO_PROTECT_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO_PROTECT_MASK" );
    return rv;
}
a_string display_BCCMD_SCATTERNET_OVERRIDE_SCO_pdu ( int indent , const BCCMD_SCATTERNET_OVERRIDE_SCO_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SCATTERNET_OVERRIDE_SCO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_SCATTERNET_OVERRIDE_SCO" );
    return rv;
}
a_string display_BCCMD_STREAM_TRANSACTION_COMPLETE_pdu ( int indent , const BCCMD_STREAM_TRANSACTION_COMPLETE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_TRANSACTION_COMPLETE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_TRANSACTION_COMPLETE" );
    return rv;
}
a_string display_BCCMD_GSM_RX_ARFCN_pdu ( int indent , const BCCMD_GSM_RX_ARFCN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_GSM_RX_ARFCN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_GSM_RX_ARFCN" );
    return rv;
}
a_string display_BCCMD_PS_FACTORY_SET_pdu ( int indent , const BCCMD_PS_FACTORY_SET_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PS_FACTORY_SET" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_PS_FACTORY_SET" );
    return rv;
}
a_string display_BCCMD_SPI_LOCK_INITIATE_LOCK_pdu ( int indent , const BCCMD_SPI_LOCK_INITIATE_LOCK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SPI_LOCK_INITIATE_LOCK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_SPI_LOCK_INITIATE_LOCK" );
    return rv;
}
a_string display_BCCMD_PIO_DIRECTION_MASK_pdu ( int indent , const BCCMD_PIO_DIRECTION_MASK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO_DIRECTION_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO_DIRECTION_MASK" );
    return rv;
}
a_string display_BCCMD_AUX_DAC_ENABLE_pdu ( int indent , const BCCMD_AUX_DAC_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_AUX_DAC_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_AUX_DAC_ENABLE" );
    return rv;
}
a_string display_BCCMD_CHIPANAVER_pdu ( int indent , const BCCMD_CHIPANAVER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHIPANAVER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHIPANAVER" );
    return rv;
}
a_string display_BCCMD_ACTIVATE_BT_STACK_pdu ( int indent , const BCCMD_ACTIVATE_BT_STACK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ACTIVATE_BT_STACK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_ACTIVATE_BT_STACK" );
    return rv;
}
a_string display_BCCMD_PSCLRALL_pdu ( int indent , const BCCMD_PSCLRALL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSCLRALL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSCLRALL" );
    return rv;
}
a_string display_BCCMD_BLE_T_IFS_pdu ( int indent , const BCCMD_BLE_T_IFS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BLE_T_IFS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BLE_T_IFS" );
    return rv;
}
a_string display_BCCMD_FM_AUDIO_ROUTING_pdu ( int indent , const BCCMD_FM_AUDIO_ROUTING_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FM_AUDIO_ROUTING" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_FM_AUDIO_ROUTING" );
    return rv;
}
a_string display_BCCMD_FASTPIPE_ENABLE_pdu ( int indent , const BCCMD_FASTPIPE_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FASTPIPE_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "limit_host" , prim.get_limit_host() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_FASTPIPE_ENABLE" );
    return rv;
}
a_string display_BCCMD_COEX_SYNC_PERIOD_pdu ( int indent , const BCCMD_COEX_SYNC_PERIOD_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COEX_SYNC_PERIOD" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_COEX_SYNC_PERIOD" );
    return rv;
}
a_string display_BCCMD_PICONET_INSTANT_pdu ( int indent , const BCCMD_PICONET_INSTANT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PICONET_INSTANT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_uint32 ( indent + 1 , "h_instant" , prim.get_h_instant() );
    rv += policy->display_prim_end ( indent , "BCCMD_PICONET_INSTANT" );
    return rv;
}
a_string display_BCCMD_CAPSENSE_RT_PADS_pdu ( int indent , const BCCMD_CAPSENSE_RT_PADS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CAPSENSE_RT_PADS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pad_sel" , prim.get_pad_sel() );
    rv += policy->display_uint16 ( indent + 1 , "num_pads_board" , prim.get_num_pads_board() );
    rv += policy->display_uint16 ( indent + 1 , "shield" , prim.get_shield() );
    rv += policy->display_uint16 ( indent + 1 , "pad_cap0" , prim.get_pad_cap0() );
    rv += policy->display_uint16 ( indent + 1 , "pad_cap1" , prim.get_pad_cap1() );
    rv += policy->display_uint16 ( indent + 1 , "pad_cap2" , prim.get_pad_cap2() );
    rv += policy->display_uint16 ( indent + 1 , "pad_cap3" , prim.get_pad_cap3() );
    rv += policy->display_uint16 ( indent + 1 , "pad_cap4" , prim.get_pad_cap4() );
    rv += policy->display_uint16 ( indent + 1 , "pad_cap5" , prim.get_pad_cap5() );
    rv += policy->display_prim_end ( indent , "BCCMD_CAPSENSE_RT_PADS" );
    return rv;
}
a_string display_BCCMD_SNIFF_MULTISLOT_ENABLE_pdu ( int indent , const BCCMD_SNIFF_MULTISLOT_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SNIFF_MULTISLOT_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_SNIFF_MULTISLOT_ENABLE" );
    return rv;
}
a_string display_BCCMD_RECAL_pdu ( int indent , const BCCMD_RECAL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RECAL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_RECAL" );
    return rv;
}
a_string display_BCCMD_PSU_HV_LINEAR_ENABLE_pdu ( int indent , const BCCMD_PSU_HV_LINEAR_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSU_HV_LINEAR_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSU_HV_LINEAR_ENABLE" );
    return rv;
}
a_string display_BCCMD_STREAM_TRANSFORM_DISCONNECT_pdu ( int indent , const BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_TRANSFORM_DISCONNECT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_TRANSFORM_DISCONNECT" );
    return rv;
}
a_string display_BCCMD_FM_RDS_pdu ( int indent , const BCCMD_FM_RDS_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_rds_data( data , prim.get_rds_len() * BCCMD_FM_RDS_PDU::words_per_block );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FM_RDS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "rds_len" , prim.get_rds_len() );
    rv += policy->display_uint16Array ( indent + 1 , "rds_data" , data , BCCMD_FM_RDS_PDU::words_per_block * prim.get_rds_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_FM_RDS" );
    return rv;
}
a_string display_BCCMD_FAULT_ARG_pdu ( int indent , const BCCMD_FAULT_ARG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FAULT_ARG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_FAULT_ARG" );
    return rv;
}
a_string display_BCCMD_RECLAIM_RAM_RESERVE_pdu ( int indent , const BCCMD_RECLAIM_RAM_RESERVE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RECLAIM_RAM_RESERVE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "BCCMD_RECLAIM_RAM_RESERVE" );
    return rv;
}
a_string display_BCCMD_LC_FRAC_COUNT_pdu ( int indent , const BCCMD_LC_FRAC_COUNT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_LC_FRAC_COUNT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_LC_FRAC_COUNT" );
    return rv;
}
a_string display_BCCMD_MAX_TX_POWER_pdu ( int indent , const BCCMD_MAX_TX_POWER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_MAX_TX_POWER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_MAX_TX_POWER" );
    return rv;
}
a_string display_BCCMD_COASTER_ADD_SV_pdu ( int indent , const BCCMD_COASTER_ADD_SV_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COASTER_ADD_SV" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "num_entries" , prim.get_num_entries() );
    rv += policy->display_uint32 ( indent + 1 , "uSecs" , prim.get_uSecs() );
    rv += policy->display_uint8 ( indent + 1 , "uSec80ths" , prim.get_uSec80ths() );
    rv += policy->display_uint32 ( indent + 1 , "code_doppler" , prim.get_code_doppler() );
    rv += policy->display_uint32 ( indent + 1 , "code_shift" , prim.get_code_shift() );
    rv += policy->display_uint32 ( indent + 1 , "carrier_doppler" , prim.get_carrier_doppler() );
    rv += policy->display_uint8 ( indent + 1 , "data_transition" , prim.get_data_transition() );
    rv += policy->display_uint16 ( indent + 1 , "satid_prn" , prim.get_satid_prn() );
    rv += policy->display_uint16 ( indent + 1 , "e1_dummy" , prim.get_e1_dummy() );
    rv += policy->display_uint32 ( indent + 1 , "e1_uSecs" , prim.get_e1_uSecs() );
    rv += policy->display_uint8 ( indent + 1 , "e1_uSec80ths" , prim.get_e1_uSec80ths() );
    rv += policy->display_uint32 ( indent + 1 , "e1_code_doppler" , prim.get_e1_code_doppler() );
    rv += policy->display_uint32 ( indent + 1 , "e1_code_shift" , prim.get_e1_code_shift() );
    rv += policy->display_uint32 ( indent + 1 , "e1_carrier_doppler" , prim.get_e1_carrier_doppler() );
    rv += policy->display_uint8 ( indent + 1 , "e1_data_transition" , prim.get_e1_data_transition() );
    rv += policy->display_uint16 ( indent + 1 , "e1_satid_prn" , prim.get_e1_satid_prn() );
    rv += policy->display_uint16 ( indent + 1 , "e2_dummy" , prim.get_e2_dummy() );
    rv += policy->display_uint32 ( indent + 1 , "e2_uSecs" , prim.get_e2_uSecs() );
    rv += policy->display_uint8 ( indent + 1 , "e2_uSec80ths" , prim.get_e2_uSec80ths() );
    rv += policy->display_uint32 ( indent + 1 , "e2_code_doppler" , prim.get_e2_code_doppler() );
    rv += policy->display_uint32 ( indent + 1 , "e2_code_shift" , prim.get_e2_code_shift() );
    rv += policy->display_uint32 ( indent + 1 , "e2_carrier_doppler" , prim.get_e2_carrier_doppler() );
    rv += policy->display_uint8 ( indent + 1 , "e2_data_transition" , prim.get_e2_data_transition() );
    rv += policy->display_uint16 ( indent + 1 , "e2_satid_prn" , prim.get_e2_satid_prn() );
    rv += policy->display_uint16 ( indent + 1 , "e3_dummy" , prim.get_e3_dummy() );
    rv += policy->display_uint32 ( indent + 1 , "e3_uSecs" , prim.get_e3_uSecs() );
    rv += policy->display_uint8 ( indent + 1 , "e3_uSec80ths" , prim.get_e3_uSec80ths() );
    rv += policy->display_uint32 ( indent + 1 , "e3_code_doppler" , prim.get_e3_code_doppler() );
    rv += policy->display_uint32 ( indent + 1 , "e3_code_shift" , prim.get_e3_code_shift() );
    rv += policy->display_uint32 ( indent + 1 , "e3_carrier_doppler" , prim.get_e3_carrier_doppler() );
    rv += policy->display_uint8 ( indent + 1 , "e3_data_transition" , prim.get_e3_data_transition() );
    rv += policy->display_uint16 ( indent + 1 , "e3_satid_prn" , prim.get_e3_satid_prn() );
    rv += policy->display_prim_end ( indent , "BCCMD_COASTER_ADD_SV" );
    return rv;
}
a_string display_BCCMD_DEEP_SLEEP_TIME_pdu ( int indent , const BCCMD_DEEP_SLEEP_TIME_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DEEP_SLEEP_TIME" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_DEEP_SLEEP_TIME" );
    return rv;
}
a_string display_BCCMD_BLE_WHITELIST_FREE_SPACE_pdu ( int indent , const BCCMD_BLE_WHITELIST_FREE_SPACE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BLE_WHITELIST_FREE_SPACE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BLE_WHITELIST_FREE_SPACE" );
    return rv;
}
a_string display_BCCMD_MEMORY_pdu ( int indent , const BCCMD_MEMORY_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_mem( data , prim.get_len() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_MEMORY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "base_addr" , prim.get_base_addr() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint16Array ( indent + 1 , "mem" , data , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_MEMORY" );
    return rv;
}
a_string display_BCCMD_BABEL_SPI_RESET_AND_STOP_pdu ( int indent , const BCCMD_BABEL_SPI_RESET_AND_STOP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BABEL_SPI_RESET_AND_STOP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_BABEL_SPI_RESET_AND_STOP" );
    return rv;
}
a_string display_BCCMD_RDF_DATA_CAPTURE_ENABLE_pdu ( int indent , const BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RDF_DATA_CAPTURE_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "modes" , prim.get_modes() );
    rv += policy->display_uint16 ( indent + 1 , "timer_delay" , prim.get_timer_delay() );
    rv += policy->display_uint16 ( indent + 1 , "nsams" , prim.get_nsams() );
    rv += policy->display_uint16 ( indent + 1 , "nap" , prim.get_nap() );
    rv += policy->display_uint8 ( indent + 1 , "uap" , prim.get_uap() );
    rv += policy->display_uint32 ( indent + 1 , "lap" , prim.get_lap() );
    rv += policy->display_prim_end ( indent , "BCCMD_RDF_DATA_CAPTURE_ENABLE" );
    return rv;
}
a_string display_BCCMD_CACHED_TEMPERATURE_pdu ( int indent , const BCCMD_CACHED_TEMPERATURE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CACHED_TEMPERATURE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CACHED_TEMPERATURE" );
    return rv;
}
a_string display_BCCMD_COEX_PRIORITY_PIOS_ON_pdu ( int indent , const BCCMD_COEX_PRIORITY_PIOS_ON_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COEX_PRIORITY_PIOS_ON" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_COEX_PRIORITY_PIOS_ON" );
    return rv;
}
a_string display_BCCMD_FM_REG_pdu ( int indent , const BCCMD_FM_REG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FM_REG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "fm_register" , prim.get_fm_register() );
    rv += policy->display_uint16 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "BCCMD_FM_REG" );
    return rv;
}
a_string display_BCCMD_CODEC_INPUT_GAIN_pdu ( int indent , const BCCMD_CODEC_INPUT_GAIN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CODEC_INPUT_GAIN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "gain_a" , prim.get_gain_a() );
    rv += policy->display_uint16 ( indent + 1 , "gain_b" , prim.get_gain_b() );
    rv += policy->display_prim_end ( indent , "BCCMD_CODEC_INPUT_GAIN" );
    return rv;
}
a_string display_BCCMD_STREAM_GET_SINK_pdu ( int indent , const BCCMD_STREAM_GET_SINK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_GET_SINK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "resource" , prim.get_resource() );
    rv += policy->display_uint16 ( indent + 1 , "opt1" , prim.get_opt1() );
    rv += policy->display_uint16 ( indent + 1 , "opt2" , prim.get_opt2() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_GET_SINK" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U01X_pdu ( int indent , const BCCMD_STIBBONS_U01X_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U01X" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U01X" );
    return rv;
}
a_string display_BCCMD_BYPASS_UART_pdu ( int indent , const BCCMD_BYPASS_UART_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BYPASS_UART" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_BYPASS_UART" );
    return rv;
}
a_string display_BCCMD_INQUIRY_PRIORITY_pdu ( int indent , const BCCMD_INQUIRY_PRIORITY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_INQUIRY_PRIORITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_INQUIRY_PRIORITY" );
    return rv;
}
a_string display_BCCMD_PIO32_DIRECTION_MASK_pdu ( int indent , const BCCMD_PIO32_DIRECTION_MASK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO32_DIRECTION_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "mask" , prim.get_mask() );
    rv += policy->display_uint32 ( indent + 1 , "bits" , prim.get_bits() );
    rv += policy->display_uint32 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO32_DIRECTION_MASK" );
    return rv;
}
a_string display_BCCMD_SIFLASH_pdu ( int indent , const BCCMD_SIFLASH_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SIFLASH" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "command" , prim.get_command() );
    rv += policy->display_uint32 ( indent + 1 , "word_address" , prim.get_word_address() );
    rv += policy->display_uint16 ( indent + 1 , "data_length" , prim.get_data_length() );
    uint16 *data;
    data = new uint16[prim.get_data_length()];
    rv += policy->display_uint16Array ( indent + 1 , "data" , data , prim.get_data_length());
    delete[] data;
    rv += policy->display_prim_end ( indent , "BCCMD_SIFLASH" );
    return rv;
}
a_string display_BCCMD_SPI_LOCK_CUSTOMER_KEY_pdu ( int indent , const BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SPI_LOCK_CUSTOMER_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "cust_key1" , prim.get_cust_key1() );
    rv += policy->display_uint32 ( indent + 1 , "cust_key2" , prim.get_cust_key2() );
    rv += policy->display_uint32 ( indent + 1 , "cust_key3" , prim.get_cust_key3() );
    rv += policy->display_uint32 ( indent + 1 , "cust_key4" , prim.get_cust_key4() );
    rv += policy->display_prim_end ( indent , "BCCMD_SPI_LOCK_CUSTOMER_KEY" );
    return rv;
}
a_string display_BCCMD_HQ_SCRAPING_LEN_pdu ( int indent , const BCCMD_HQ_SCRAPING_LEN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_HQ_SCRAPING_LEN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_HQ_SCRAPING_LEN" );
    return rv;
}
a_string display_BCCMD_WLAN_COEX_PRIORITY_pdu ( int indent , const BCCMD_WLAN_COEX_PRIORITY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_WLAN_COEX_PRIORITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_bool ( indent + 1 , "enable" , prim.get_enable() );
    rv += policy->display_prim_end ( indent , "BCCMD_WLAN_COEX_PRIORITY" );
    return rv;
}
a_string display_BCCMD_HQ_SCRAPING_pdu ( int indent , const BCCMD_HQ_SCRAPING_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_hq_data( data , prim.get_hq_len() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_HQ_SCRAPING" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hq_len" , prim.get_hq_len() );
    rv += policy->display_uint16Array ( indent + 1 , "hq_data" , data , prim.get_hq_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_HQ_SCRAPING" );
    return rv;
}
a_string display_BCCMD_BC01_STATUS_pdu ( int indent , const BCCMD_BC01_STATUS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BC01_STATUS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BC01_STATUS" );
    return rv;
}
a_string display_BCCMD_CHECK_ROM_CRC32_pdu ( int indent , const BCCMD_CHECK_ROM_CRC32_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHECK_ROM_CRC32" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHECK_ROM_CRC32" );
    return rv;
}
a_string display_BCCMD_PS_FACTORY_RESTORE_pdu ( int indent , const BCCMD_PS_FACTORY_RESTORE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PS_FACTORY_RESTORE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_PS_FACTORY_RESTORE" );
    return rv;
}
a_string display_BCCMD_SCO_PARAMETERS_pdu ( int indent , const BCCMD_SCO_PARAMETERS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SCO_PARAMETERS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "sco_handle" , prim.get_sco_handle() );
    rv += policy->display_uint16 ( indent + 1 , "tsco" , prim.get_tsco() );
    rv += policy->display_uint16 ( indent + 1 , "wesco" , prim.get_wesco() );
    rv += policy->display_uint16 ( indent + 1 , "reserved_slots" , prim.get_reserved_slots() );
    rv += policy->display_prim_end ( indent , "BCCMD_SCO_PARAMETERS" );
    return rv;
}
a_string display_BCCMD_PCM_ATTENUATION_pdu ( int indent , const BCCMD_PCM_ATTENUATION_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PCM_ATTENUATION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PCM_ATTENUATION" );
    return rv;
}
a_string display_BCCMD_CODEC_OUTPUT_GAIN_pdu ( int indent , const BCCMD_CODEC_OUTPUT_GAIN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CODEC_OUTPUT_GAIN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "gain_a" , prim.get_gain_a() );
    rv += policy->display_uint16 ( indent + 1 , "gain_b" , prim.get_gain_b() );
    rv += policy->display_prim_end ( indent , "BCCMD_CODEC_OUTPUT_GAIN" );
    return rv;
}
a_string display_BCCMD_RDF_DATA_CAPTURE_DISABLE_pdu ( int indent , const BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RDF_DATA_CAPTURE_DISABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_RDF_DATA_CAPTURE_DISABLE" );
    return rv;
}
a_string display_BCCMD_RSSI_ACL_pdu ( int indent , const BCCMD_RSSI_ACL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RSSI_ACL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_int16 ( indent + 1 , "rssi" , prim.get_rssi() );
    rv += policy->display_prim_end ( indent , "BCCMD_RSSI_ACL" );
    return rv;
}
a_string display_BCCMD_PCM_CONFIG32_pdu ( int indent , const BCCMD_PCM_CONFIG32_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PCM_CONFIG32" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_if_id" , prim.get_pcm_if_id() );
    rv += policy->display_uint32 ( indent + 1 , "config32" , prim.get_config32() );
    rv += policy->display_prim_end ( indent , "BCCMD_PCM_CONFIG32" );
    return rv;
}
a_string display_BCCMD_INQUIRY_TX_POWER_pdu ( int indent , const BCCMD_INQUIRY_TX_POWER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_INQUIRY_TX_POWER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_INQUIRY_TX_POWER" );
    return rv;
}
a_string display_BCCMD_BLE_AROPE_CAPABILITIES_pdu ( int indent , const BCCMD_BLE_AROPE_CAPABILITIES_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BLE_AROPE_CAPABILITIES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BLE_AROPE_CAPABILITIES" );
    return rv;
}
a_string display_BCCMD_BLE_DEFAULT_TX_POWER_pdu ( int indent , const BCCMD_BLE_DEFAULT_TX_POWER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BLE_DEFAULT_TX_POWER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BLE_DEFAULT_TX_POWER" );
    return rv;
}
a_string display_BCCMD_DEFAULT_TX_POWER_pdu ( int indent , const BCCMD_DEFAULT_TX_POWER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DEFAULT_TX_POWER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_DEFAULT_TX_POWER" );
    return rv;
}
a_string display_BCCMD_STREAM_CLOSE_SINK_pdu ( int indent , const BCCMD_STREAM_CLOSE_SINK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_CLOSE_SINK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_CLOSE_SINK" );
    return rv;
}
a_string display_BCCMD_COLD_RESET_pdu ( int indent , const BCCMD_COLD_RESET_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COLD_RESET" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_COLD_RESET" );
    return rv;
}
a_string display_BCCMD_MIC_BIAS_CONFIGURE_pdu ( int indent , const BCCMD_MIC_BIAS_CONFIGURE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_MIC_BIAS_CONFIGURE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "instance" , prim.get_instance() );
    rv += policy->display_uint16 ( indent + 1 , "key_config" , prim.get_key_config() );
    rv += policy->display_uint16 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "BCCMD_MIC_BIAS_CONFIGURE" );
    return rv;
}
a_string display_BCCMD_CHECK_ROM_pdu ( int indent , const BCCMD_CHECK_ROM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHECK_ROM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHECK_ROM" );
    return rv;
}
a_string display_BCCMD_RAND_pdu ( int indent , const BCCMD_RAND_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RAND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_RAND" );
    return rv;
}
a_string display_BCCMD_COLD_HALT_pdu ( int indent , const BCCMD_COLD_HALT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COLD_HALT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_COLD_HALT" );
    return rv;
}
a_string display_BCCMD_PIO32_PROTECT_MASK_pdu ( int indent , const BCCMD_PIO32_PROTECT_MASK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO32_PROTECT_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "mask" , prim.get_mask() );
    rv += policy->display_uint32 ( indent + 1 , "bits" , prim.get_bits() );
    rv += policy->display_uint32 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO32_PROTECT_MASK" );
    return rv;
}
a_string display_BCCMD_DSPMANAGER_DEBUG_pdu ( int indent , const BCCMD_DSPMANAGER_DEBUG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DSPMANAGER_DEBUG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "subsystem" , prim.get_subsystem() );
    rv += policy->display_uint16 ( indent + 1 , "arguments" , prim.get_arguments() );
    rv += policy->display_prim_end ( indent , "BCCMD_DSPMANAGER_DEBUG" );
    return rv;
}
a_string display_BCCMD_COASTER_STOP_pdu ( int indent , const BCCMD_COASTER_STOP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COASTER_STOP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "BCCMD_COASTER_STOP" );
    return rv;
}
a_string display_BCCMD_ALLOCATE_RAM_RESERVE_pdu ( int indent , const BCCMD_ALLOCATE_RAM_RESERVE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ALLOCATE_RAM_RESERVE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "BCCMD_ALLOCATE_RAM_RESERVE" );
    return rv;
}
a_string display_BCCMD_STREAM_TRANSACTION_START_pdu ( int indent , const BCCMD_STREAM_TRANSACTION_START_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_TRANSACTION_START" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_TRANSACTION_START" );
    return rv;
}
a_string display_BCCMD_EGPS_PULSE_CONFIG_pdu ( int indent , const BCCMD_EGPS_PULSE_CONFIG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_EGPS_PULSE_CONFIG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pio" , prim.get_pio() );
    rv += policy->display_prim_end ( indent , "BCCMD_EGPS_PULSE_CONFIG" );
    return rv;
}
a_string display_BCCMD_PANIC_ON_FAULT_pdu ( int indent , const BCCMD_PANIC_ON_FAULT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PANIC_ON_FAULT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PANIC_ON_FAULT" );
    return rv;
}
a_string display_BCCMD_GET_NEXT_BUILDDEF_pdu ( int indent , const BCCMD_GET_NEXT_BUILDDEF_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_GET_NEXT_BUILDDEF" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "nextid" , prim.get_nextid() );
    rv += policy->display_prim_end ( indent , "BCCMD_GET_NEXT_BUILDDEF" );
    return rv;
}
a_string display_BCCMD_SHA256_INIT_pdu ( int indent , const BCCMD_SHA256_INIT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SHA256_INIT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_SHA256_INIT" );
    return rv;
}
a_string display_BCCMD_ENABLE_DUT_MODE_pdu ( int indent , const BCCMD_ENABLE_DUT_MODE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ENABLE_DUT_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_ENABLE_DUT_MODE" );
    return rv;
}
a_string display_BCCMD_BLE_ADV_FILT_ADD_pdu ( int indent , const BCCMD_BLE_ADV_FILT_ADD_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BLE_ADV_FILT_ADD" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "operation" , prim.get_operation() );
    rv += policy->display_uint16 ( indent + 1 , "ad_type" , prim.get_ad_type() );
    rv += policy->display_uint16 ( indent + 1 , "interval" , prim.get_interval() );
    rv += policy->display_uint16 ( indent + 1 , "pattern_length" , prim.get_pattern_length() );
        uint16 *data;
        data = new uint16[prim.get_pattern_length()];
        rv += policy->display_uint16Array ( indent + 1 , "pattern" , data , prim.get_pattern_length());
        delete[] data;
    rv += policy->display_prim_end ( indent , "BCCMD_BLE_ADV_FILT_ADD" );
    return rv;
}
a_string display_BCCMD_BLE_SCAN_BACKOFF_pdu ( int indent , const BCCMD_BLE_SCAN_BACKOFF_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BLE_SCAN_BACKOFF" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BLE_SCAN_BACKOFF" );
    return rv;
}
a_string display_BCCMD_BT_CLOCK_pdu ( int indent , const BCCMD_BT_CLOCK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BT_CLOCK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BT_CLOCK" );
    return rv;
}
a_string display_BCCMD_SPI_BUFSIZE_pdu ( int indent , const BCCMD_SPI_BUFSIZE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SPI_BUFSIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_SPI_BUFSIZE" );
    return rv;
}
a_string display_BCCMD_FMTX_TEXT_pdu ( int indent , const BCCMD_FMTX_TEXT_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536]; //SMB From display_prim.tpl
    prim.get_string( data , 66 );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FMTX_TEXT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "text_type" , prim.get_text_type() );
    rv += policy->display_uint16Array ( indent + 1 , "string" , data , 66 ); //Assume fixed length
    rv += policy->display_prim_end ( indent , "BCCMD_FMTX_TEXT" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C01_pdu ( int indent , const BCCMD_STIBBONS_C01_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C01" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C01" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C02_pdu ( int indent , const BCCMD_STIBBONS_C02_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C02" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C02" );
    return rv;
}
a_string display_BCCMD_PCM_SYNC_RATE_pdu ( int indent , const BCCMD_PCM_SYNC_RATE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PCM_SYNC_RATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_interface" , prim.get_pcm_interface() );
    rv += policy->display_uint32 ( indent + 1 , "sync_rate" , prim.get_sync_rate() );
    rv += policy->display_prim_end ( indent , "BCCMD_PCM_SYNC_RATE" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C03_pdu ( int indent , const BCCMD_STIBBONS_C03_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C03" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C03" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C04_pdu ( int indent , const BCCMD_STIBBONS_C04_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C04" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C04" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C05_pdu ( int indent , const BCCMD_STIBBONS_C05_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C05" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C05" );
    return rv;
}
a_string display_BCCMD_LED2_ENABLE_pdu ( int indent , const BCCMD_LED2_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_LED2_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_LED2_ENABLE" );
    return rv;
}
a_string display_BCCMD_CHECK_RAM_RESULT_pdu ( int indent , const BCCMD_CHECK_RAM_RESULT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHECK_RAM_RESULT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHECK_RAM_RESULT" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C06_pdu ( int indent , const BCCMD_STIBBONS_C06_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C06" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C06" );
    return rv;
}
a_string display_BCCMD_EGPS_PULSE_OUTPUT_START_pdu ( int indent , const BCCMD_EGPS_PULSE_OUTPUT_START_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_EGPS_PULSE_OUTPUT_START" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "pio" , prim.get_pio() );
    rv += policy->display_uint32 ( indent + 1 , "start_time" , prim.get_start_time() );
    rv += policy->display_uint32 ( indent + 1 , "duration_time" , prim.get_duration_time() );
    rv += policy->display_uint32 ( indent + 1 , "repeat_time" , prim.get_repeat_time() );
    rv += policy->display_uint16 ( indent + 1 , "start_time_fine" , prim.get_start_time_fine() );
    rv += policy->display_uint16 ( indent + 1 , "duration_time_fine" , prim.get_duration_time_fine() );
    rv += policy->display_uint16 ( indent + 1 , "repeat_time_fine" , prim.get_repeat_time_fine() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "BCCMD_EGPS_PULSE_OUTPUT_START" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C07_pdu ( int indent , const BCCMD_STIBBONS_C07_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C07" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C07" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C08_pdu ( int indent , const BCCMD_STIBBONS_C08_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C08" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C08" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C09_pdu ( int indent , const BCCMD_STIBBONS_C09_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C09" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C09" );
    return rv;
}
a_string display_BCCMD_CHECK_RAM_pdu ( int indent , const BCCMD_CHECK_RAM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHECK_RAM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHECK_RAM" );
    return rv;
}
a_string display_BCCMD_STREAM_GET_SOURCE_pdu ( int indent , const BCCMD_STREAM_GET_SOURCE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_GET_SOURCE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "resource" , prim.get_resource() );
    rv += policy->display_uint16 ( indent + 1 , "opt1" , prim.get_opt1() );
    rv += policy->display_uint16 ( indent + 1 , "opt2" , prim.get_opt2() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_GET_SOURCE" );
    return rv;
}
a_string display_BCCMD_ROUTE_CLOCK_pdu ( int indent , const BCCMD_ROUTE_CLOCK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ROUTE_CLOCK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_ROUTE_CLOCK" );
    return rv;
}
a_string display_BCCMD_BABEL_SPI_GO_pdu ( int indent , const BCCMD_BABEL_SPI_GO_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BABEL_SPI_GO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_BABEL_SPI_GO" );
    return rv;
}
a_string display_BCCMD_COASTER_SV_STATE_pdu ( int indent , const BCCMD_COASTER_SV_STATE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COASTER_SV_STATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "start_index_num_entries" , prim.get_start_index_num_entries() );
    rv += policy->display_uint32 ( indent + 1 , "uSecs" , prim.get_uSecs() );
    rv += policy->display_uint8 ( indent + 1 , "uSec80ths" , prim.get_uSec80ths() );
    rv += policy->display_uint32 ( indent + 1 , "code_doppler" , prim.get_code_doppler() );
    rv += policy->display_uint32 ( indent + 1 , "code_shift" , prim.get_code_shift() );
    rv += policy->display_uint32 ( indent + 1 , "carrier_doppler" , prim.get_carrier_doppler() );
    rv += policy->display_uint16 ( indent + 1 , "lock_status_bits" , prim.get_lock_status_bits() );
    rv += policy->display_uint16 ( indent + 1 , "SNR" , prim.get_SNR() );
    rv += policy->display_uint8 ( indent + 1 , "data_transition" , prim.get_data_transition() );
    rv += policy->display_uint16 ( indent + 1 , "satid_prn" , prim.get_satid_prn() );
    rv += policy->display_uint16 ( indent + 1 , "e1_dummy" , prim.get_e1_dummy() );
    rv += policy->display_uint32 ( indent + 1 , "e1_uSecs" , prim.get_e1_uSecs() );
    rv += policy->display_uint8 ( indent + 1 , "e1_uSec80ths" , prim.get_e1_uSec80ths() );
    rv += policy->display_uint32 ( indent + 1 , "e1_code_doppler" , prim.get_e1_code_doppler() );
    rv += policy->display_uint32 ( indent + 1 , "e1_code_shift" , prim.get_e1_code_shift() );
    rv += policy->display_uint32 ( indent + 1 , "e1_carrier_doppler" , prim.get_e1_carrier_doppler() );
    rv += policy->display_uint16 ( indent + 1 , "e1_lock_status_bits" , prim.get_e1_lock_status_bits() );
    rv += policy->display_uint16 ( indent + 1 , "e1_SNR" , prim.get_e1_SNR() );
    rv += policy->display_uint8 ( indent + 1 , "e1_data_transition" , prim.get_e1_data_transition() );
    rv += policy->display_uint16 ( indent + 1 , "e1_satid_prn" , prim.get_e1_satid_prn() );
    rv += policy->display_uint16 ( indent + 1 , "e2_dummy" , prim.get_e2_dummy() );
    rv += policy->display_uint32 ( indent + 1 , "e2_uSecs" , prim.get_e2_uSecs() );
    rv += policy->display_uint8 ( indent + 1 , "e2_uSec80ths" , prim.get_e2_uSec80ths() );
    rv += policy->display_uint32 ( indent + 1 , "e2_code_doppler" , prim.get_e2_code_doppler() );
    rv += policy->display_uint32 ( indent + 1 , "e2_code_shift" , prim.get_e2_code_shift() );
    rv += policy->display_uint32 ( indent + 1 , "e2_carrier_doppler" , prim.get_e2_carrier_doppler() );
    rv += policy->display_uint16 ( indent + 1 , "e2_lock_status_bits" , prim.get_e2_lock_status_bits() );
    rv += policy->display_uint16 ( indent + 1 , "e2_SNR" , prim.get_e2_SNR() );
    rv += policy->display_uint8 ( indent + 1 , "e2_data_transition" , prim.get_e2_data_transition() );
    rv += policy->display_uint16 ( indent + 1 , "e2_satid_prn" , prim.get_e2_satid_prn() );
    rv += policy->display_uint16 ( indent + 1 , "e3_dummy" , prim.get_e3_dummy() );
    rv += policy->display_uint32 ( indent + 1 , "e3_uSecs" , prim.get_e3_uSecs() );
    rv += policy->display_uint8 ( indent + 1 , "e3_uSec80ths" , prim.get_e3_uSec80ths() );
    rv += policy->display_uint32 ( indent + 1 , "e3_code_doppler" , prim.get_e3_code_doppler() );
    rv += policy->display_uint32 ( indent + 1 , "e3_code_shift" , prim.get_e3_code_shift() );
    rv += policy->display_uint32 ( indent + 1 , "e3_carrier_doppler" , prim.get_e3_carrier_doppler() );
    rv += policy->display_uint16 ( indent + 1 , "e3_lock_status_bits" , prim.get_e3_lock_status_bits() );
    rv += policy->display_uint16 ( indent + 1 , "e3_SNR" , prim.get_e3_SNR() );
    rv += policy->display_uint8 ( indent + 1 , "e3_data_transition" , prim.get_e3_data_transition() );
    rv += policy->display_uint16 ( indent + 1 , "e3_satid_prn" , prim.get_e3_satid_prn() );
    rv += policy->display_prim_end ( indent , "BCCMD_COASTER_SV_STATE" );
    return rv;
}
a_string display_BCCMD_RDF_BLE_SCAN_MODE_pdu ( int indent , const BCCMD_RDF_BLE_SCAN_MODE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RDF_BLE_SCAN_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_uint8 ( indent + 1 , "samples" , prim.get_samples() );
    rv += policy->display_prim_end ( indent , "BCCMD_RDF_BLE_SCAN_MODE" );
    return rv;
}
a_string display_BCCMD_RANDOM_pdu ( int indent , const BCCMD_RANDOM_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_data( data , prim.get_len() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RANDOM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16Array ( indent + 1 , "data" , data , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_RANDOM" );
    return rv;
}
a_string display_BCCMD_PS_FACTORY_RESTORE_ALL_pdu ( int indent , const BCCMD_PS_FACTORY_RESTORE_ALL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PS_FACTORY_RESTORE_ALL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_PS_FACTORY_RESTORE_ALL" );
    return rv;
}
a_string display_BCCMD_COEX_DUMP_pdu ( int indent , const BCCMD_COEX_DUMP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COEX_DUMP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "scheme" , prim.get_scheme() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_uint16 ( indent + 1 , "bt_priority" , prim.get_bt_priority() );
    rv += policy->display_uint16 ( indent + 1 , "wlan_active" , prim.get_wlan_active() );
    rv += policy->display_uint16 ( indent + 1 , "bt_active" , prim.get_bt_active() );
    rv += policy->display_uint16 ( indent + 1 , "bt_status" , prim.get_bt_status() );
    rv += policy->display_uint16 ( indent + 1 , "wlan_deny" , prim.get_wlan_deny() );
    rv += policy->display_uint16 ( indent + 1 , "bt_periodic" , prim.get_bt_periodic() );
    rv += policy->display_uint16 ( indent + 1 , "bt_inband" , prim.get_bt_inband() );
    rv += policy->display_uint16 ( indent + 1 , "uart_active" , prim.get_uart_active() );
    rv += policy->display_uint16 ( indent + 1 , "uart_tx" , prim.get_uart_tx() );
    rv += policy->display_uint16 ( indent + 1 , "uart_rx" , prim.get_uart_rx() );
    rv += policy->display_uint16 ( indent + 1 , "time_t1" , prim.get_time_t1() );
    rv += policy->display_uint16 ( indent + 1 , "time_t2" , prim.get_time_t2() );
    rv += policy->display_uint16 ( indent + 1 , "btactive_lead" , prim.get_btactive_lead() );
    rv += policy->display_uint16 ( indent + 1 , "btstatus_lead" , prim.get_btstatus_lead() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table00" , prim.get_priority_table00() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table01" , prim.get_priority_table01() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table02" , prim.get_priority_table02() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table03" , prim.get_priority_table03() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table04" , prim.get_priority_table04() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table05" , prim.get_priority_table05() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table06" , prim.get_priority_table06() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table07" , prim.get_priority_table07() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table08" , prim.get_priority_table08() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table09" , prim.get_priority_table09() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table10" , prim.get_priority_table10() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table11" , prim.get_priority_table11() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table12" , prim.get_priority_table12() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table13" , prim.get_priority_table13() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table14" , prim.get_priority_table14() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table15" , prim.get_priority_table15() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table16" , prim.get_priority_table16() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table17" , prim.get_priority_table17() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table18" , prim.get_priority_table18() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table19" , prim.get_priority_table19() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table20" , prim.get_priority_table20() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table21" , prim.get_priority_table21() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table22" , prim.get_priority_table22() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table23" , prim.get_priority_table23() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table24" , prim.get_priority_table24() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table25" , prim.get_priority_table25() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table26" , prim.get_priority_table26() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table27" , prim.get_priority_table27() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table28" , prim.get_priority_table28() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table29" , prim.get_priority_table29() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table30" , prim.get_priority_table30() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table31" , prim.get_priority_table31() );
    rv += policy->display_uint16 ( indent + 1 , "priority_table32" , prim.get_priority_table32() );
    rv += policy->display_uint16 ( indent + 1 , "debug_enable" , prim.get_debug_enable() );
    rv += policy->display_uint16 ( indent + 1 , "debug00" , prim.get_debug00() );
    rv += policy->display_uint16 ( indent + 1 , "debug01" , prim.get_debug01() );
    rv += policy->display_uint16 ( indent + 1 , "debug02" , prim.get_debug02() );
    rv += policy->display_uint16 ( indent + 1 , "debug03" , prim.get_debug03() );
    rv += policy->display_uint16 ( indent + 1 , "debug04" , prim.get_debug04() );
    rv += policy->display_uint16 ( indent + 1 , "debug05" , prim.get_debug05() );
    rv += policy->display_uint16 ( indent + 1 , "debug06" , prim.get_debug06() );
    rv += policy->display_uint16 ( indent + 1 , "debug07" , prim.get_debug07() );
    rv += policy->display_uint16 ( indent + 1 , "debug08" , prim.get_debug08() );
    rv += policy->display_uint16 ( indent + 1 , "debug09" , prim.get_debug09() );
    rv += policy->display_uint16 ( indent + 1 , "debug10" , prim.get_debug10() );
    rv += policy->display_uint16 ( indent + 1 , "debug11" , prim.get_debug11() );
    rv += policy->display_uint16 ( indent + 1 , "debug12" , prim.get_debug12() );
    rv += policy->display_uint16 ( indent + 1 , "debug13" , prim.get_debug13() );
    rv += policy->display_uint16 ( indent + 1 , "debug14" , prim.get_debug14() );
    rv += policy->display_uint16 ( indent + 1 , "debug15" , prim.get_debug15() );
    rv += policy->display_prim_end ( indent , "BCCMD_COEX_DUMP" );
    return rv;
}
a_string display_BCCMD_CLOCK_MODULATION_ENABLE_pdu ( int indent , const BCCMD_CLOCK_MODULATION_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CLOCK_MODULATION_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CLOCK_MODULATION_ENABLE" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C10_pdu ( int indent , const BCCMD_STIBBONS_C10_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C10" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C10" );
    return rv;
}
a_string display_BCCMD_STREAM_TRANSACTION_CANCEL_pdu ( int indent , const BCCMD_STREAM_TRANSACTION_CANCEL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_TRANSACTION_CANCEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_TRANSACTION_CANCEL" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C11_pdu ( int indent , const BCCMD_STIBBONS_C11_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C11" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C11" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C12_pdu ( int indent , const BCCMD_STIBBONS_C12_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C12" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C12" );
    return rv;
}
a_string display_BCCMD_HOST_DECIDES_TIMING_pdu ( int indent , const BCCMD_HOST_DECIDES_TIMING_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_HOST_DECIDES_TIMING" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_HOST_DECIDES_TIMING" );
    return rv;
}
a_string display_BCCMD_RADIOTEST_pdu ( int indent , const BCCMD_RADIOTEST_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RADIOTEST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "BCCMD_RADIOTEST" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C13_pdu ( int indent , const BCCMD_STIBBONS_C13_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C13" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C13" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C14_pdu ( int indent , const BCCMD_STIBBONS_C14_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C14" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C14" );
    return rv;
}
a_string display_BCCMD_VREF_CONSTANT_pdu ( int indent , const BCCMD_VREF_CONSTANT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_VREF_CONSTANT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_VREF_CONSTANT" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C15_pdu ( int indent , const BCCMD_STIBBONS_C15_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C15" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C15" );
    return rv;
}
a_string display_BCCMD_CLK_SKEW_COUNT_pdu ( int indent , const BCCMD_CLK_SKEW_COUNT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CLK_SKEW_COUNT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CLK_SKEW_COUNT" );
    return rv;
}
a_string display_BCCMD_AWAY_TIME_pdu ( int indent , const BCCMD_AWAY_TIME_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_AWAY_TIME" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_uint32 ( indent + 1 , "time" , prim.get_time() );
    rv += policy->display_prim_end ( indent , "BCCMD_AWAY_TIME" );
    return rv;
}
a_string display_BCCMD_STIBBONS_C16_pdu ( int indent , const BCCMD_STIBBONS_C16_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_C16" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_C16" );
    return rv;
}
a_string display_BCCMD_WAIT_FOR_N_MS_pdu ( int indent , const BCCMD_WAIT_FOR_N_MS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_WAIT_FOR_N_MS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_WAIT_FOR_N_MS" );
    return rv;
}
a_string display_BCCMD_PCM_CLOCK_RATE_pdu ( int indent , const BCCMD_PCM_CLOCK_RATE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PCM_CLOCK_RATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_interface" , prim.get_pcm_interface() );
    rv += policy->display_uint32 ( indent + 1 , "clock_rate" , prim.get_clock_rate() );
    rv += policy->display_prim_end ( indent , "BCCMD_PCM_CLOCK_RATE" );
    return rv;
}
a_string display_BCCMD_TESTB_AMUX_pdu ( int indent , const BCCMD_TESTB_AMUX_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_TESTB_AMUX" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_TESTB_AMUX" );
    return rv;
}
a_string display_BCCMD_GPS_START_pdu ( int indent , const BCCMD_GPS_START_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_GPS_START" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "delay" , prim.get_delay() );
    rv += policy->display_prim_end ( indent , "BCCMD_GPS_START" );
    return rv;
}
a_string display_BCCMD_STREAM_ALIAS_SINK_pdu ( int indent , const BCCMD_STREAM_ALIAS_SINK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_ALIAS_SINK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "sink1_sid" , prim.get_sink1_sid() );
    rv += policy->display_uint16 ( indent + 1 , "sink2_sid" , prim.get_sink2_sid() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_ALIAS_SINK" );
    return rv;
}
a_string display_BCCMD_LIMIT_EDR_POWER_pdu ( int indent , const BCCMD_LIMIT_EDR_POWER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_LIMIT_EDR_POWER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_bool ( indent + 1 , "enable" , prim.get_enable() );
    rv += policy->display_prim_end ( indent , "BCCMD_LIMIT_EDR_POWER" );
    return rv;
}
a_string display_BCCMD_HOSTIO_ENABLE_DEBUG_pdu ( int indent , const BCCMD_HOSTIO_ENABLE_DEBUG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_HOSTIO_ENABLE_DEBUG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_HOSTIO_ENABLE_DEBUG" );
    return rv;
}
a_string display_BCCMD_WARM_HALT_pdu ( int indent , const BCCMD_WARM_HALT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_WARM_HALT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_WARM_HALT" );
    return rv;
}
a_string display_BCCMD_STREAM_CLOSE_SOURCE_pdu ( int indent , const BCCMD_STREAM_CLOSE_SOURCE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_CLOSE_SOURCE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_CLOSE_SOURCE" );
    return rv;
}
a_string display_BCCMD_BUILD_NAME_pdu ( int indent , const BCCMD_BUILD_NAME_PDU& prim , PDU_displayer * policy )
{
    uint8 data[65536];
    prim.get_bufmem( data , prim.get_len() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BUILD_NAME" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "start" , prim.get_start() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint8Array ( indent + 1 , "bufmem" , data , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_BUILD_NAME" );
    return rv;
}
a_string display_BCCMD_SINGLE_CHAN_pdu ( int indent , const BCCMD_SINGLE_CHAN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SINGLE_CHAN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_SINGLE_CHAN" );
    return rv;
}
a_string display_BCCMD_PSCLRS_pdu ( int indent , const BCCMD_PSCLRS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSCLRS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "stores" , prim.get_stores() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSCLRS" );
    return rv;
}
a_string display_BCCMD_LED_CONFIG_pdu ( int indent , const BCCMD_LED_CONFIG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_LED_CONFIG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "led" , prim.get_led() );
    rv += policy->display_uint16 ( indent + 1 , "led_key" , prim.get_led_key() );
    rv += policy->display_uint16 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "BCCMD_LED_CONFIG" );
    return rv;
}
a_string display_BCCMD_LOCK_ACL_PACKET_TYPE_pdu ( int indent , const BCCMD_LOCK_ACL_PACKET_TYPE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_LOCK_ACL_PACKET_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_LOCK_ACL_PACKET_TYPE" );
    return rv;
}
a_string display_BCCMD_LC_RX_FRACS_pdu ( int indent , const BCCMD_LC_RX_FRACS_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_rx_frac_vals( data , prim.get_value_count() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_LC_RX_FRACS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "value_count" , prim.get_value_count() );
    rv += policy->display_uint16Array ( indent + 1 , "rx_frac_vals" , data , prim.get_value_count() );
    rv += policy->display_prim_end ( indent , "BCCMD_LC_RX_FRACS" );
    return rv;
}
a_string display_BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_pdu ( int indent , const BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY" );
    return rv;
}
a_string display_BCCMD_TESTA_AMUX_pdu ( int indent , const BCCMD_TESTA_AMUX_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_TESTA_AMUX" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_TESTA_AMUX" );
    return rv;
}
a_string display_BCCMD_PIO32_STRONG_BIAS_pdu ( int indent , const BCCMD_PIO32_STRONG_BIAS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO32_STRONG_BIAS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "mask" , prim.get_mask() );
    rv += policy->display_uint32 ( indent + 1 , "bits" , prim.get_bits() );
    rv += policy->display_uint32 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO32_STRONG_BIAS" );
    return rv;
}
a_string display_BCCMD_PS_MEMORY_TYPE_pdu ( int indent , const BCCMD_PS_MEMORY_TYPE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PS_MEMORY_TYPE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "stores" , prim.get_stores() );
    rv += policy->display_uint16 ( indent + 1 , "memorytype" , prim.get_memorytype() );
    rv += policy->display_prim_end ( indent , "BCCMD_PS_MEMORY_TYPE" );
    return rv;
}
a_string display_BCCMD_BABEL_SPI_RUN_STATE_pdu ( int indent , const BCCMD_BABEL_SPI_RUN_STATE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BABEL_SPI_RUN_STATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BABEL_SPI_RUN_STATE" );
    return rv;
}
a_string display_BCCMD_PSSIZE_pdu ( int indent , const BCCMD_PSSIZE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSSIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "stores" , prim.get_stores() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSSIZE" );
    return rv;
}
a_string display_BCCMD_KILL_VM_APPLICATION_pdu ( int indent , const BCCMD_KILL_VM_APPLICATION_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_KILL_VM_APPLICATION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_KILL_VM_APPLICATION" );
    return rv;
}
a_string display_BCCMD_ANA_FTRIM_READWRITE_pdu ( int indent , const BCCMD_ANA_FTRIM_READWRITE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ANA_FTRIM_READWRITE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ANA_FTRIM_READWRITE" );
    return rv;
}
a_string display_BCCMD_ENABLE_DEV_CONNECT_pdu ( int indent , const BCCMD_ENABLE_DEV_CONNECT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ENABLE_DEV_CONNECT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_ENABLE_DEV_CONNECT" );
    return rv;
}
a_string display_BCCMD_BER_THRESHOLD_pdu ( int indent , const BCCMD_BER_THRESHOLD_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BER_THRESHOLD" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_uint16 ( indent + 1 , "ber_threshold" , prim.get_ber_threshold() );
    rv += policy->display_prim_end ( indent , "BCCMD_BER_THRESHOLD" );
    return rv;
}
a_string display_BCCMD_START_OPERATOR_pdu ( int indent , const BCCMD_START_OPERATOR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_START_OPERATOR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "count" , prim.get_count() );
 uint16 *data;
 data = new uint16[prim.get_count()];
 rv += policy->display_uint16Array ( indent + 1 , "list" , data , prim.get_count());
 delete[] data;
    rv += policy->display_prim_end ( indent , "BCCMD_START_OPERATOR" );
    return rv;
}
a_string display_BCCMD_COEX_INT_TEST_pdu ( int indent , const BCCMD_COEX_INT_TEST_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COEX_INT_TEST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_uint8 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "BCCMD_COEX_INT_TEST" );
    return rv;
}
a_string display_BCCMD_RDF_PT_pdu ( int indent , const BCCMD_RDF_PT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RDF_PT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "enable" , prim.get_enable() );
    rv += policy->display_uint8 ( indent + 1 , "antenna" , prim.get_antenna() );
    rv += policy->display_prim_end ( indent , "BCCMD_RDF_PT" );
    return rv;
}
a_string display_BCCMD_EGPS_PULSE_INPUT_START_pdu ( int indent , const BCCMD_EGPS_PULSE_INPUT_START_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_EGPS_PULSE_INPUT_START" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "pio" , prim.get_pio() );
    rv += policy->display_uint8 ( indent + 1 , "edge_mode" , prim.get_edge_mode() );
    rv += policy->display_prim_end ( indent , "BCCMD_EGPS_PULSE_INPUT_START" );
    return rv;
}
a_string display_BCCMD_RDF_PT_SELECT_ANTENNA_pdu ( int indent , const BCCMD_RDF_PT_SELECT_ANTENNA_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RDF_PT_SELECT_ANTENNA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_RDF_PT_SELECT_ANTENNA" );
    return rv;
}
a_string display_BCCMD_PCM_LOW_JITTER_pdu ( int indent , const BCCMD_PCM_LOW_JITTER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PCM_LOW_JITTER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_if_id" , prim.get_pcm_if_id() );
    rv += policy->display_uint32 ( indent + 1 , "low_jitter" , prim.get_low_jitter() );
    rv += policy->display_prim_end ( indent , "BCCMD_PCM_LOW_JITTER" );
    return rv;
}
a_string display_BCCMD_SHA256_RES_pdu ( int indent , const BCCMD_SHA256_RES_PDU& prim , PDU_displayer * policy )
{
    uint8 data[BCCMDPDU_SHA256_RES_HASH_SIZE];
    prim.get_hash( data );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SHA256_RES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "time" , prim.get_time() );
    rv += policy->display_uint8Array ( indent + 1 , "hash" , data , BCCMDPDU_SHA256_RES_HASH_SIZE );
    rv += policy->display_prim_end ( indent , "BCCMD_SHA256_RES" );
    return rv;
}
a_string display_BCCMD_CHARGER_TRIMS_pdu ( int indent , const BCCMD_CHARGER_TRIMS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHARGER_TRIMS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "chgref_trim" , prim.get_chgref_trim() );
    rv += policy->display_int16 ( indent + 1 , "hvref_trim" , prim.get_hvref_trim() );
    rv += policy->display_uint16 ( indent + 1 , "rtrim" , prim.get_rtrim() );
    rv += policy->display_uint16 ( indent + 1 , "itrim" , prim.get_itrim() );
    rv += policy->display_uint16 ( indent + 1 , "iext_trim" , prim.get_iext_trim() );
    rv += policy->display_uint16 ( indent + 1 , "iterm_trim" , prim.get_iterm_trim() );
    rv += policy->display_uint16 ( indent + 1 , "vfast_trim" , prim.get_vfast_trim() );
    rv += policy->display_uint16 ( indent + 1 , "hyst_trim" , prim.get_hyst_trim() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHARGER_TRIMS" );
    return rv;
}
a_string display_BCCMD_KALSPIDEBUG_SETDEBUGMODE_pdu ( int indent , const BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_KALSPIDEBUG_SETDEBUGMODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_KALSPIDEBUG_SETDEBUGMODE" );
    return rv;
}
a_string display_BCCMD_PCM2_ATTENUATION_pdu ( int indent , const BCCMD_PCM2_ATTENUATION_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PCM2_ATTENUATION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PCM2_ATTENUATION" );
    return rv;
}
a_string display_BCCMD_SAVE_CONNECTION_EVENT_FILTERS_pdu ( int indent , const BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SAVE_CONNECTION_EVENT_FILTERS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_SAVE_CONNECTION_EVENT_FILTERS" );
    return rv;
}
a_string display_BCCMD_ESCOTEST_pdu ( int indent , const BCCMD_ESCOTEST_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ESCOTEST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "function" , prim.get_function() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ESCOTEST" );
    return rv;
}
a_string display_BCCMD_E2_APP_SIZE_pdu ( int indent , const BCCMD_E2_APP_SIZE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_E2_APP_SIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_E2_APP_SIZE" );
    return rv;
}
a_string display_BCCMD_BUFFER_pdu ( int indent , const BCCMD_BUFFER_PDU& prim , PDU_displayer * policy )
{
    uint8 data[65536];
    prim.get_bufmem( data , prim.get_len() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BUFFER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "start" , prim.get_start() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint8Array ( indent + 1 , "bufmem" , data , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_BUFFER" );
    return rv;
}
a_string display_BCCMD_STREAM_CONFIGURE_pdu ( int indent , const BCCMD_STREAM_CONFIGURE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_CONFIGURE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "sid" , prim.get_sid() );
    rv += policy->display_uint16 ( indent + 1 , "key_config" , prim.get_key_config() );
    rv += policy->display_uint32 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_CONFIGURE" );
    return rv;
}
a_string display_BCCMD_ADC_pdu ( int indent , const BCCMD_ADC_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC" );
    return rv;
}
a_string display_BCCMD_PSNEXT_ALL_pdu ( int indent , const BCCMD_PSNEXT_ALL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSNEXT_ALL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "nextid" , prim.get_nextid() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSNEXT_ALL" );
    return rv;
}
a_string display_BCCMD_STREAM_SYNC_SID_pdu ( int indent , const BCCMD_STREAM_SYNC_SID_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_SYNC_SID" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "sid1" , prim.get_sid1() );
    rv += policy->display_uint16 ( indent + 1 , "sid2" , prim.get_sid2() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_SYNC_SID" );
    return rv;
}
a_string display_BCCMD_MAP_SCO_PCM_pdu ( int indent , const BCCMD_MAP_SCO_PCM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_MAP_SCO_PCM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_MAP_SCO_PCM" );
    return rv;
}
a_string display_BCCMD_FASTPIPE_CREATE_pdu ( int indent , const BCCMD_FASTPIPE_CREATE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FASTPIPE_CREATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pipe_id" , prim.get_pipe_id() );
    rv += policy->display_uint32 ( indent + 1 , "overhead_host" , prim.get_overhead_host() );
    rv += policy->display_uint32 ( indent + 1 , "capacity_rx_host" , prim.get_capacity_rx_host() );
    rv += policy->display_uint32 ( indent + 1 , "required_tx_controller" , prim.get_required_tx_controller() );
    rv += policy->display_uint32 ( indent + 1 , "desired_tx_controller" , prim.get_desired_tx_controller() );
    rv += policy->display_uint32 ( indent + 1 , "required_rx_controller" , prim.get_required_rx_controller() );
    rv += policy->display_uint32 ( indent + 1 , "desired_rx_controller" , prim.get_desired_rx_controller() );
    rv += policy->display_uint32 ( indent + 1 , "overhead_controller" , prim.get_overhead_controller() );
    rv += policy->display_uint32 ( indent + 1 , "capacity_tx_controller" , prim.get_capacity_tx_controller() );
    rv += policy->display_uint32 ( indent + 1 , "capacity_rx_controller" , prim.get_capacity_rx_controller() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_FASTPIPE_CREATE" );
    return rv;
}
a_string display_BCCMD_COASTER_INDICATIONS_pdu ( int indent , const BCCMD_COASTER_INDICATIONS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COASTER_INDICATIONS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "events" , prim.get_events() );
    rv += policy->display_uint32 ( indent + 1 , "uu" , prim.get_uu() );
    rv += policy->display_uint16 ( indent + 1 , "optflags" , prim.get_optflags() );
    rv += policy->display_prim_end ( indent , "BCCMD_COASTER_INDICATIONS" );
    return rv;
}
a_string display_BCCMD_LED1_ENABLE_pdu ( int indent , const BCCMD_LED1_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_LED1_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_LED1_ENABLE" );
    return rv;
}
a_string display_BCCMD_ENABLE_COEX_MESSAGE_REPORTING_pdu ( int indent , const BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ENABLE_COEX_MESSAGE_REPORTING" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ENABLE_COEX_MESSAGE_REPORTING" );
    return rv;
}
a_string display_BCCMD_SHA256_DATA_pdu ( int indent , const BCCMD_SHA256_DATA_PDU& prim , PDU_displayer * policy )
{
    uint8 data[65536];
    prim.get_msg( data , prim.get_msg_len() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SHA256_DATA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "msg_len" , prim.get_msg_len() );
    rv += policy->display_uint8Array ( indent + 1 , "msg" , data , prim.get_msg_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_SHA256_DATA" );
    return rv;
}
a_string display_BCCMD_DIGITAL_AUDIO_CONFIG_pdu ( int indent , const BCCMD_DIGITAL_AUDIO_CONFIG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DIGITAL_AUDIO_CONFIG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_if_id" , prim.get_pcm_if_id() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_prim_end ( indent , "BCCMD_DIGITAL_AUDIO_CONFIG" );
    return rv;
}
a_string display_BCCMD_CHIPVER_pdu ( int indent , const BCCMD_CHIPVER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHIPVER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHIPVER" );
    return rv;
}
a_string display_BCCMD_SPI_LOCK_STATUS_pdu ( int indent , const BCCMD_SPI_LOCK_STATUS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SPI_LOCK_STATUS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_SPI_LOCK_STATUS" );
    return rv;
}
a_string display_BCCMD_ADC0_pdu ( int indent , const BCCMD_ADC0_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC0" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC0" );
    return rv;
}
a_string display_BCCMD_ENABLE_MEDIUM_RATE_pdu ( int indent , const BCCMD_ENABLE_MEDIUM_RATE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ENABLE_MEDIUM_RATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_bool ( indent + 1 , "enable" , prim.get_enable() );
    rv += policy->display_prim_end ( indent , "BCCMD_ENABLE_MEDIUM_RATE" );
    return rv;
}
a_string display_BCCMD_ADC1_pdu ( int indent , const BCCMD_ADC1_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC1" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC1" );
    return rv;
}
a_string display_BCCMD_FMTX_SET_CDAC_pdu ( int indent , const BCCMD_FMTX_SET_CDAC_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FMTX_SET_CDAC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_FMTX_SET_CDAC" );
    return rv;
}
a_string display_BCCMD_DIGITAL_AUDIO_RATE_pdu ( int indent , const BCCMD_DIGITAL_AUDIO_RATE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DIGITAL_AUDIO_RATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_if_id" , prim.get_pcm_if_id() );
    rv += policy->display_uint32 ( indent + 1 , "frequency" , prim.get_frequency() );
    rv += policy->display_uint16 ( indent + 1 , "samp_size" , prim.get_samp_size() );
    rv += policy->display_prim_end ( indent , "BCCMD_DIGITAL_AUDIO_RATE" );
    return rv;
}
a_string display_BCCMD_ADC2_pdu ( int indent , const BCCMD_ADC2_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC2" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC2" );
    return rv;
}
a_string display_BCCMD_PROVOKE_PANIC_pdu ( int indent , const BCCMD_PROVOKE_PANIC_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PROVOKE_PANIC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PROVOKE_PANIC" );
    return rv;
}
a_string display_BCCMD_GET_CLR_EVT_pdu ( int indent , const BCCMD_GET_CLR_EVT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_GET_CLR_EVT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "evtcntid" , prim.get_evtcntid() );
    rv += policy->display_uint16 ( indent + 1 , "cnt" , prim.get_cnt() );
    rv += policy->display_prim_end ( indent , "BCCMD_GET_CLR_EVT" );
    return rv;
}
a_string display_BCCMD_E2_DEVICE_pdu ( int indent , const BCCMD_E2_DEVICE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_E2_DEVICE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "log2_bytes" , prim.get_log2_bytes() );
    rv += policy->display_uint16 ( indent + 1 , "addr_mask" , prim.get_addr_mask() );
    rv += policy->display_prim_end ( indent , "BCCMD_E2_DEVICE" );
    return rv;
}
a_string display_BCCMD_ADC3_pdu ( int indent , const BCCMD_ADC3_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC3" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC3" );
    return rv;
}
a_string display_BCCMD_INTERFACE_VERSION_pdu ( int indent , const BCCMD_INTERFACE_VERSION_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_INTERFACE_VERSION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_INTERFACE_VERSION" );
    return rv;
}
a_string display_BCCMD_ADC4_pdu ( int indent , const BCCMD_ADC4_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC4" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC4" );
    return rv;
}
a_string display_BCCMD_ADC5_pdu ( int indent , const BCCMD_ADC5_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC5" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC5" );
    return rv;
}
a_string display_BCCMD_ADC6_pdu ( int indent , const BCCMD_ADC6_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC6" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC6" );
    return rv;
}
a_string display_BCCMD_ADC7_pdu ( int indent , const BCCMD_ADC7_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC7" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC7" );
    return rv;
}
a_string display_BCCMD_ADC8_pdu ( int indent , const BCCMD_ADC8_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC8" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC8" );
    return rv;
}
a_string display_BCCMD_ADC9_pdu ( int indent , const BCCMD_ADC9_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC9" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC9" );
    return rv;
}
a_string display_BCCMD_KALDEBUG_pdu ( int indent , const BCCMD_KALDEBUG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_KALDEBUG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "function" , prim.get_function() );
    rv += policy->display_prim_end ( indent , "BCCMD_KALDEBUG" );
    return rv;
}
a_string display_BCCMD_CHARGER_SUPPRESS_LED0_pdu ( int indent , const BCCMD_CHARGER_SUPPRESS_LED0_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHARGER_SUPPRESS_LED0" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHARGER_SUPPRESS_LED0" );
    return rv;
}
a_string display_BCCMD_RDF_BLE_RAND_ADDR_pdu ( int indent , const BCCMD_RDF_BLE_RAND_ADDR_PDU& prim , PDU_displayer * policy )
{
    uint8 data[65536];
    prim.get_addr( data, 6 );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RDF_BLE_RAND_ADDR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8Array ( indent + 1 , "addr" , data , 6);
    rv += policy->display_prim_end ( indent , "BCCMD_RDF_BLE_RAND_ADDR" );
    return rv;
}
a_string display_BCCMD_DESTROY_OPERATOR_pdu ( int indent , const BCCMD_DESTROY_OPERATOR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DESTROY_OPERATOR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "count" , prim.get_count() );
 uint16 *data;
 data = new uint16[prim.get_count()];
 rv += policy->display_uint16Array ( indent + 1 , "list" , data , prim.get_count());
 delete[] data;
    rv += policy->display_prim_end ( indent , "BCCMD_DESTROY_OPERATOR" );
    return rv;
}
a_string display_BCCMD_PIO_STRONG_BIAS_pdu ( int indent , const BCCMD_PIO_STRONG_BIAS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO_STRONG_BIAS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO_STRONG_BIAS" );
    return rv;
}
a_string display_BCCMD_CHARGER_STATUS_pdu ( int indent , const BCCMD_CHARGER_STATUS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHARGER_STATUS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHARGER_STATUS" );
    return rv;
}
a_string display_BCCMD_PREVIN_TUNNEL_pdu ( int indent , const BCCMD_PREVIN_TUNNEL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PREVIN_TUNNEL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "message_num" , prim.get_message_num() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "message" , prim.get_message() );
    rv += policy->display_prim_end ( indent , "BCCMD_PREVIN_TUNNEL" );
    return rv;
}
a_string display_BCCMD_PS_pdu ( int indent , const BCCMD_PS_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_psmem( data , prim.get_len() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
    rv += policy->display_uint16 ( indent + 1 , "stores" , prim.get_stores() );
    rv += policy->display_uint16Array ( indent + 1 , "psmem" , data , prim.get_len() );
    rv += policy->display_prim_end ( indent , "BCCMD_PS" );
    return rv;
}
a_string display_BCCMD_CREATE_OPERATOR_C_pdu ( int indent , const BCCMD_CREATE_OPERATOR_C_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CREATE_OPERATOR_C" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "num_patches" , prim.get_num_patches() );
    rv += policy->display_uint16 ( indent + 1 , "skip_count" , prim.get_skip_count() );
    rv += policy->display_uint16 ( indent + 1 , "skip_flag" , prim.get_skip_flag() );
    rv += policy->display_prim_end ( indent , "BCCMD_CREATE_OPERATOR_C" );
    return rv;
}
a_string display_BCCMD_COASTER_DEL_SV_pdu ( int indent , const BCCMD_COASTER_DEL_SV_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COASTER_DEL_SV" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "sv_pairs1" , prim.get_sv_pairs1() );
    rv += policy->display_uint16 ( indent + 1 , "sv_pairs2" , prim.get_sv_pairs2() );
    rv += policy->display_uint16 ( indent + 1 , "sv_pairs3" , prim.get_sv_pairs3() );
    rv += policy->display_uint16 ( indent + 1 , "sv_pairs4" , prim.get_sv_pairs4() );
    rv += policy->display_prim_end ( indent , "BCCMD_COASTER_DEL_SV" );
    return rv;
}
a_string display_BCCMD_FIRMWARE_CHECK_MASK_pdu ( int indent , const BCCMD_FIRMWARE_CHECK_MASK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FIRMWARE_CHECK_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_FIRMWARE_CHECK_MASK" );
    return rv;
}
a_string display_BCCMD_PRESERVE_VALID_pdu ( int indent , const BCCMD_PRESERVE_VALID_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PRESERVE_VALID" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PRESERVE_VALID" );
    return rv;
}
a_string display_BCCMD_CREATE_OPERATOR_P_pdu ( int indent , const BCCMD_CREATE_OPERATOR_P_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CREATE_OPERATOR_P" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "len" , prim.get_len() );
 uint16 *data;
 data = new uint16[prim.get_len()];
 rv += policy->display_uint16Array ( indent + 1 , "patch" , data , prim.get_len());
 delete[] data;
    rv += policy->display_prim_end ( indent , "BCCMD_CREATE_OPERATOR_P" );
    return rv;
}
a_string display_BCCMD_CLKSW_CURRENT_CLOCKS_pdu ( int indent , const BCCMD_CLKSW_CURRENT_CLOCKS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CLKSW_CURRENT_CLOCKS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CLKSW_CURRENT_CLOCKS" );
    return rv;
}
a_string display_BCCMD_PIO32_pdu ( int indent , const BCCMD_PIO32_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO32" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "mask" , prim.get_mask() );
    rv += policy->display_uint32 ( indent + 1 , "bits" , prim.get_bits() );
    rv += policy->display_uint32 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO32" );
    return rv;
}
a_string display_BCCMD_STREAM_CONNECT_pdu ( int indent , const BCCMD_STREAM_CONNECT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STREAM_CONNECT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "source_sid" , prim.get_source_sid() );
    rv += policy->display_uint16 ( indent + 1 , "sink_sid" , prim.get_sink_sid() );
    rv += policy->display_prim_end ( indent , "BCCMD_STREAM_CONNECT" );
    return rv;
}
a_string display_BCCMD_HQ_SCRAPING_ENABLE_pdu ( int indent , const BCCMD_HQ_SCRAPING_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_HQ_SCRAPING_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_HQ_SCRAPING_ENABLE" );
    return rv;
}
a_string display_BCCMD_CLOCK_MODULATION_CONFIG_pdu ( int indent , const BCCMD_CLOCK_MODULATION_CONFIG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CLOCK_MODULATION_CONFIG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "amount" , prim.get_amount() );
    rv += policy->display_uint16 ( indent + 1 , "rate" , prim.get_rate() );
    rv += policy->display_uint16 ( indent + 1 , "wibbling" , prim.get_wibbling() );
    rv += policy->display_prim_end ( indent , "BCCMD_CLOCK_MODULATION_CONFIG" );
    return rv;
}
a_string display_BCCMD_GPS_STOP_pdu ( int indent , const BCCMD_GPS_STOP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_GPS_STOP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "BCCMD_GPS_STOP" );
    return rv;
}
a_string display_BCCMD_CRYPTKEYLEN_pdu ( int indent , const BCCMD_CRYPTKEYLEN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CRYPTKEYLEN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_uint16 ( indent + 1 , "keylen" , prim.get_keylen() );
    rv += policy->display_prim_end ( indent , "BCCMD_CRYPTKEYLEN" );
    return rv;
}
a_string display_BCCMD_PSCLRALLS_pdu ( int indent , const BCCMD_PSCLRALLS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSCLRALLS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSCLRALLS" );
    return rv;
}
a_string display_BCCMD_PCM_SLOTS_PER_FRAME_pdu ( int indent , const BCCMD_PCM_SLOTS_PER_FRAME_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PCM_SLOTS_PER_FRAME" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_interface" , prim.get_pcm_interface() );
    rv += policy->display_uint16 ( indent + 1 , "slots_per_frame" , prim.get_slots_per_frame() );
    rv += policy->display_prim_end ( indent , "BCCMD_PCM_SLOTS_PER_FRAME" );
    return rv;
}
a_string display_BCCMD_WARM_RESET_pdu ( int indent , const BCCMD_WARM_RESET_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_WARM_RESET" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_WARM_RESET" );
    return rv;
}
a_string display_BCCMD_FASTPIPE_DESTROY_pdu ( int indent , const BCCMD_FASTPIPE_DESTROY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FASTPIPE_DESTROY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pipe_id" , prim.get_pipe_id() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_FASTPIPE_DESTROY" );
    return rv;
}
a_string display_BCCMD_SYNC_CLOCK_pdu ( int indent , const BCCMD_SYNC_CLOCK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SYNC_CLOCK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_SYNC_CLOCK" );
    return rv;
}
a_string display_BCCMD_BLE_RADIO_TEST_pdu ( int indent , const BCCMD_BLE_RADIO_TEST_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BLE_RADIO_TEST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "command" , prim.get_command() );
    rv += policy->display_uint8 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_uint8 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint8 ( indent + 1 , "payload" , prim.get_payload() );
    rv += policy->display_prim_end ( indent , "BCCMD_BLE_RADIO_TEST" );
    return rv;
}
a_string display_BCCMD_I2C_TRANSFER_pdu ( int indent , const BCCMD_I2C_TRANSFER_PDU& prim , PDU_displayer * policy )
{
    uint8 tx_data[65536];
    prim.get_tx_data( tx_data , prim.get_tx_octets() );
    uint8 rx_data[65536];
    prim.get_rx_data( rx_data , prim.get_rx_octets() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_I2C_TRANSFER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "address" , prim.get_address() );
    rv += policy->display_uint16 ( indent + 1 , "tx_octets" , prim.get_tx_octets() );
    rv += policy->display_uint16 ( indent + 1 , "rx_octets" , prim.get_rx_octets() );
    rv += policy->display_bool ( indent + 1 , "restart" , prim.get_restart() );
    rv += policy->display_uint16 ( indent + 1 , "octets" , prim.get_octets() );
    rv += policy->display_uint8Array ( indent + 1 , "tx_data" , tx_data , prim.get_tx_octets() );
    rv += policy->display_uint8Array ( indent + 1 , "rx_data" , rx_data , prim.get_rx_octets() );
    rv += policy->display_prim_end ( indent , "BCCMD_I2C_TRANSFER" );
    return rv;
}
a_string display_BCCMD_OPERATOR_MESSAGE_pdu ( int indent , const BCCMD_OPERATOR_MESSAGE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_OPERATOR_MESSAGE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "opid" , prim.get_opid() );
 uint16 *data;
 data = new uint16[prim.get_arg_count()];
 rv += policy->display_uint16Array ( indent + 1 , "arguments" , data , prim.get_arg_count());
 delete[] data;
    rv += policy->display_prim_end ( indent , "BCCMD_OPERATOR_MESSAGE" );
    return rv;
}
a_string display_BCCMD_PSNEXT_pdu ( int indent , const BCCMD_PSNEXT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSNEXT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "stores" , prim.get_stores() );
    rv += policy->display_uint16 ( indent + 1 , "nextid" , prim.get_nextid() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSNEXT" );
    return rv;
}
a_string display_BCCMD_ENABLE_TX_pdu ( int indent , const BCCMD_ENABLE_TX_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ENABLE_TX" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_ENABLE_TX" );
    return rv;
}
a_string display_BCCMD_PSU_SMPS_ENABLE_pdu ( int indent , const BCCMD_PSU_SMPS_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PSU_SMPS_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PSU_SMPS_ENABLE" );
    return rv;
}
a_string display_BCCMD_UNLOCK_OTP_pdu ( int indent , const BCCMD_UNLOCK_OTP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_UNLOCK_OTP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_UNLOCK_OTP" );
    return rv;
}
a_string display_BCCMD_STOP_OPERATOR_pdu ( int indent , const BCCMD_STOP_OPERATOR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STOP_OPERATOR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "count" , prim.get_count() );
 uint16 *data;
 data = new uint16[prim.get_count()];
 rv += policy->display_uint16Array ( indent + 1 , "list" , data , prim.get_count());
 delete[] data;
    rv += policy->display_prim_end ( indent , "BCCMD_STOP_OPERATOR" );
    return rv;
}
a_string display_BCCMD_BABEL_SPI_GET_LINE_STATUS_pdu ( int indent , const BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BABEL_SPI_GET_LINE_STATUS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BABEL_SPI_GET_LINE_STATUS" );
    return rv;
}
a_string display_BCCMD_GPS_CONFIG_pdu ( int indent , const BCCMD_GPS_CONFIG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_GPS_CONFIG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_GPS_CONFIG" );
    return rv;
}
a_string display_BCCMD_BC3PSU_pdu ( int indent , const BCCMD_BC3PSU_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BC3PSU" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "function" , prim.get_function() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BC3PSU" );
    return rv;
}
a_string display_BCCMD_DEEP_SLEEP_PERIOD_pdu ( int indent , const BCCMD_DEEP_SLEEP_PERIOD_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DEEP_SLEEP_PERIOD" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_DEEP_SLEEP_PERIOD" );
    return rv;
}
a_string display_BCCMD_HOPPING_ON_pdu ( int indent , const BCCMD_HOPPING_ON_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_HOPPING_ON" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_HOPPING_ON" );
    return rv;
}
a_string display_BCCMD_GSM_RX_MODE_pdu ( int indent , const BCCMD_GSM_RX_MODE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_GSM_RX_MODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_GSM_RX_MODE" );
    return rv;
}
a_string display_BCCMD_PIO32_SET_PIN_FUNCTION_pdu ( int indent , const BCCMD_PIO32_SET_PIN_FUNCTION_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO32_SET_PIN_FUNCTION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pin_number" , prim.get_pin_number() );
    rv += policy->display_uint16 ( indent + 1 , "function" , prim.get_function() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO32_SET_PIN_FUNCTION" );
    return rv;
}
a_string display_BCCMD_RADIOTEST_INTERFACE_VERSION_pdu ( int indent , const BCCMD_RADIOTEST_INTERFACE_VERSION_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_RADIOTEST_INTERFACE_VERSION" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_RADIOTEST_INTERFACE_VERSION" );
    return rv;
}
a_string display_BCCMD_BOOTMODE_pdu ( int indent , const BCCMD_BOOTMODE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BOOTMODE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BOOTMODE" );
    return rv;
}
a_string display_BCCMD_DEFRAG_RESET_pdu ( int indent , const BCCMD_DEFRAG_RESET_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DEFRAG_RESET" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_DEFRAG_RESET" );
    return rv;
}
a_string display_BCCMD_CANCEL_PAGE_pdu ( int indent , const BCCMD_CANCEL_PAGE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CANCEL_PAGE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_CANCEL_PAGE" );
    return rv;
}
a_string display_BCCMD_MAP_SCO_AUDIO_pdu ( int indent , const BCCMD_MAP_SCO_AUDIO_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_MAP_SCO_AUDIO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "source_sid" , prim.get_source_sid() );
    rv += policy->display_uint16 ( indent + 1 , "sink_sid" , prim.get_sink_sid() );
    rv += policy->display_prim_end ( indent , "BCCMD_MAP_SCO_AUDIO" );
    return rv;
}
a_string display_BCCMD_NO_VARIABLE_pdu ( int indent , const BCCMD_NO_VARIABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_NO_VARIABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_NO_VARIABLE" );
    return rv;
}
a_string display_BCCMD_L2CAP_CRC_pdu ( int indent , const BCCMD_L2CAP_CRC_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_L2CAP_CRC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_bool ( indent + 1 , "tx_cid" , prim.get_tx_cid() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_bool ( indent + 1 , "enable" , prim.get_enable() );
    rv += policy->display_prim_end ( indent , "BCCMD_L2CAP_CRC" );
    return rv;
}
a_string display_BCCMD_ADC_READ_pdu ( int indent , const BCCMD_ADC_READ_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC_READ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC_READ" );
    return rv;
}
a_string display_BCCMD_AUX_DAC_pdu ( int indent , const BCCMD_AUX_DAC_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_AUX_DAC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_AUX_DAC" );
    return rv;
}
a_string display_BCCMD_PROVOKE_DELAYED_PANIC_pdu ( int indent , const BCCMD_PROVOKE_DELAYED_PANIC_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PROVOKE_DELAYED_PANIC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PROVOKE_DELAYED_PANIC" );
    return rv;
}
a_string display_BCCMD_BABEL_SPI_STOP_pdu ( int indent , const BCCMD_BABEL_SPI_STOP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BABEL_SPI_STOP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_BABEL_SPI_STOP" );
    return rv;
}
a_string display_BCCMD_SPI_LOCK_STAY_LOCKED_KEY_pdu ( int indent , const BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_SPI_LOCK_STAY_LOCKED_KEY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_SPI_LOCK_STAY_LOCKED_KEY" );
    return rv;
}
a_string display_BCCMD_INFORM_LINK_PROFILES_pdu ( int indent , const BCCMD_INFORM_LINK_PROFILES_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_INFORM_LINK_PROFILES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "profiles" , prim.get_profiles() );
    rv += policy->display_prim_end ( indent , "BCCMD_INFORM_LINK_PROFILES" );
    return rv;
}
a_string display_BCCMD_ADC10_pdu ( int indent , const BCCMD_ADC10_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC10" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC10" );
    return rv;
}
a_string display_BCCMD_ADC11_pdu ( int indent , const BCCMD_ADC11_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC11" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC11" );
    return rv;
}
a_string display_BCCMD_BABEL_SPI_DELAY_pdu ( int indent , const BCCMD_BABEL_SPI_DELAY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BABEL_SPI_DELAY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BABEL_SPI_DELAY" );
    return rv;
}
a_string display_BCCMD_ADC12_pdu ( int indent , const BCCMD_ADC12_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC12" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC12" );
    return rv;
}
a_string display_BCCMD_EGPS_PULSE_STOP_pdu ( int indent , const BCCMD_EGPS_PULSE_STOP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_EGPS_PULSE_STOP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "pio_stop" , prim.get_pio_stop() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "BCCMD_EGPS_PULSE_STOP" );
    return rv;
}
a_string display_BCCMD_ADC13_pdu ( int indent , const BCCMD_ADC13_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC13" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC13" );
    return rv;
}
a_string display_BCCMD_ADC14_pdu ( int indent , const BCCMD_ADC14_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC14" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC14" );
    return rv;
}
a_string display_BCCMD_ADC15_pdu ( int indent , const BCCMD_ADC15_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ADC15" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ADC15" );
    return rv;
}
a_string display_BCCMD_ENABLE_SCO_STREAMS_pdu ( int indent , const BCCMD_ENABLE_SCO_STREAMS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ENABLE_SCO_STREAMS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ENABLE_SCO_STREAMS" );
    return rv;
}
a_string display_BCCMD_COASTER_START_pdu ( int indent , const BCCMD_COASTER_START_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_COASTER_START" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "delay" , prim.get_delay() );
    rv += policy->display_prim_end ( indent , "BCCMD_COASTER_START" );
    return rv;
}
a_string display_BCCMD_LED0_ENABLE_pdu ( int indent , const BCCMD_LED0_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_LED0_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_LED0_ENABLE" );
    return rv;
}
a_string display_BCCMD_ENABLE_AFH_pdu ( int indent , const BCCMD_ENABLE_AFH_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ENABLE_AFH" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_bool ( indent + 1 , "enable" , prim.get_enable() );
    rv += policy->display_prim_end ( indent , "BCCMD_ENABLE_AFH" );
    return rv;
}
a_string display_BCCMD_CHIPREV_pdu ( int indent , const BCCMD_CHIPREV_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHIPREV" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHIPREV" );
    return rv;
}
a_string display_BCCMD_PIO_pdu ( int indent , const BCCMD_PIO_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO" );
    return rv;
}
a_string display_BCCMD_CHARGER_PSU_TRIM_pdu ( int indent , const BCCMD_CHARGER_PSU_TRIM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_CHARGER_PSU_TRIM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_CHARGER_PSU_TRIM" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U03_pdu ( int indent , const BCCMD_STIBBONS_U03_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U03" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U03" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U04_pdu ( int indent , const BCCMD_STIBBONS_U04_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U04" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U04" );
    return rv;
}
a_string display_BCCMD_BUILDID_pdu ( int indent , const BCCMD_BUILDID_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_BUILDID" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_BUILDID" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U05_pdu ( int indent , const BCCMD_STIBBONS_U05_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U05" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U05" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U06_pdu ( int indent , const BCCMD_STIBBONS_U06_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U06" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U06" );
    return rv;
}
a_string display_BCCMD_REMOVE_DOWNLOADED_CAPABILITY_pdu ( int indent , const BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_REMOVE_DOWNLOADED_CAPABILITY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_REMOVE_DOWNLOADED_CAPABILITY" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U07_pdu ( int indent , const BCCMD_STIBBONS_U07_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U07" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U07" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U08_pdu ( int indent , const BCCMD_STIBBONS_U08_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U08" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U08" );
    return rv;
}
a_string display_BCCMD_STIBBONS_U09_pdu ( int indent , const BCCMD_STIBBONS_U09_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_STIBBONS_U09" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_STIBBONS_U09" );
    return rv;
}
a_string display_BCCMD_PIO32_MAP_PINS_pdu ( int indent , const BCCMD_PIO32_MAP_PINS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PIO32_MAP_PINS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "mask" , prim.get_mask() );
    rv += policy->display_uint32 ( indent + 1 , "bits" , prim.get_bits() );
    rv += policy->display_uint32 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_PIO32_MAP_PINS" );
    return rv;
}
a_string display_BCCMD_PROVOKE_FAULT_pdu ( int indent , const BCCMD_PROVOKE_FAULT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PROVOKE_FAULT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PROVOKE_FAULT" );
    return rv;
}
a_string display_BCCMD_ANA_FTRIM_pdu ( int indent , const BCCMD_ANA_FTRIM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_ANA_FTRIM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_ANA_FTRIM" );
    return rv;
}
a_string display_BCCMD_FIRMWARE_CHECK_pdu ( int indent , const BCCMD_FIRMWARE_CHECK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FIRMWARE_CHECK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_FIRMWARE_CHECK" );
    return rv;
}
a_string display_BCCMD_INIT_BT_STACK_pdu ( int indent , const BCCMD_INIT_BT_STACK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_INIT_BT_STACK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_INIT_BT_STACK" );
    return rv;
}
a_string display_BCCMD_MAXCRYPTKEYLEN_pdu ( int indent , const BCCMD_MAXCRYPTKEYLEN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_MAXCRYPTKEYLEN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_MAXCRYPTKEYLEN" );
    return rv;
}
a_string display_BCCMD_E2_APP_DATA_pdu ( int indent , const BCCMD_E2_APP_DATA_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_data( data , prim.get_words() );
    a_string rv = policy->display_prim_start ( indent , "BCCMD_E2_APP_DATA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "offset" , prim.get_offset() );
    rv += policy->display_uint16 ( indent + 1 , "words" , prim.get_words() );
    rv += policy->display_uint16Array ( indent + 1 , "data" , data , prim.get_words() );
    rv += policy->display_prim_end ( indent , "BCCMD_E2_APP_DATA" );
    return rv;
}
a_string display_BCCMD_GPS_DSP_ENABLE_pdu ( int indent , const BCCMD_GPS_DSP_ENABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_GPS_DSP_ENABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_GPS_DSP_ENABLE" );
    return rv;
}
a_string display_BCCMD_KALEXTADDRDEBUG_pdu ( int indent , const BCCMD_KALEXTADDRDEBUG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_KALEXTADDRDEBUG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "function" , prim.get_function() );
    rv += policy->display_prim_end ( indent , "BCCMD_KALEXTADDRDEBUG" );
    return rv;
}
a_string display_BCCMD_PANIC_ARG_pdu ( int indent , const BCCMD_PANIC_ARG_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_PANIC_ARG" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "BCCMD_PANIC_ARG" );
    return rv;
}
a_string display_BCCMD_DISABLE_TX_pdu ( int indent , const BCCMD_DISABLE_TX_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_DISABLE_TX" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "BCCMD_DISABLE_TX" );
    return rv;
}
a_string display_BCCMD_FASTPIPE_RESIZE_pdu ( int indent , const BCCMD_FASTPIPE_RESIZE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "BCCMD_FASTPIPE_RESIZE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_int32 ( indent + 1 , "delta_controller" , prim.get_delta_controller() );
    rv += policy->display_uint32 ( indent + 1 , "limit_controller" , prim.get_limit_controller() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_prim_end ( indent , "BCCMD_FASTPIPE_RESIZE" );
    return rv;
}
a_string display_RADIOTEST_TXSTART_pdu ( int indent , const RADIOTEST_TXSTART_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_TXSTART" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_uint16 ( indent + 1 , "level" , prim.get_level() );
    rv += policy->display_int16 ( indent + 1 , "mod_freq" , prim.get_mod_freq() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_TXSTART" );
    return rv;
}
a_string display_RADIOTEST_CTS_RTS_LB_pdu ( int indent , const RADIOTEST_CTS_RTS_LB_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CTS_RTS_LB" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CTS_RTS_LB" );
    return rv;
}
a_string display_RADIOTEST_CONFIG_TX_IF_pdu ( int indent , const RADIOTEST_CONFIG_TX_IF_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CONFIG_TX_IF" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_int16 ( indent + 1 , "offset_half_mhz" , prim.get_offset_half_mhz() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CONFIG_TX_IF" );
    return rv;
}
a_string display_RADIOTEST_PCM_LB_pdu ( int indent , const RADIOTEST_PCM_LB_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_LB" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_mode" , prim.get_pcm_mode() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_LB" );
    return rv;
}
a_string display_RADIOTEST_CFG_SETTLE_pdu ( int indent , const RADIOTEST_CFG_SETTLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_SETTLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "radio_on_offset" , prim.get_radio_on_offset() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_SETTLE" );
    return rv;
}
a_string display_RADIOTEST_IF_RESP_pdu ( int indent , const RADIOTEST_IF_RESP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_IF_RESP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "n_samples" , prim.get_n_samples() );
    rv += policy->display_int16 ( indent + 1 , "lo_offset" , prim.get_lo_offset() );
    rv += policy->display_int16 ( indent + 1 , "hi_offset" , prim.get_hi_offset() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_IF_RESP" );
    return rv;
}
a_string display_RADIOTEST_PCM_EXT_LB_pdu ( int indent , const RADIOTEST_PCM_EXT_LB_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_EXT_LB" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_mode" , prim.get_pcm_mode() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_EXT_LB" );
    return rv;
}
a_string display_RADIOTEST_CFG_TX_RF_TRIM_pdu ( int indent , const RADIOTEST_CFG_TX_RF_TRIM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_TX_RF_TRIM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_int16 ( indent + 1 , "trim1" , prim.get_trim1() );
    rv += policy->display_int16 ( indent + 1 , "trim2" , prim.get_trim2() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_TX_RF_TRIM" );
    return rv;
}
a_string display_RADIOTEST_CODEC_STEREO_LB_pdu ( int indent , const RADIOTEST_CODEC_STEREO_LB_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CODEC_STEREO_LB" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "samp_rate" , prim.get_samp_rate() );
    rv += policy->display_uint16 ( indent + 1 , "reroute_optn" , prim.get_reroute_optn() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CODEC_STEREO_LB" );
    return rv;
}
a_string display_RADIOTEST_CFG_UAP_LAP_pdu ( int indent , const RADIOTEST_CFG_UAP_LAP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_UAP_LAP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "uap" , prim.get_uap() );
    rv += policy->display_uint32 ( indent + 1 , "lap" , prim.get_lap() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_UAP_LAP" );
    return rv;
}
a_string display_RADIOTEST_SETTLE_RPT_pdu ( int indent , const RADIOTEST_SETTLE_RPT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_SETTLE_RPT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "chan1" , prim.get_chan1() );
    rv += policy->display_uint16 ( indent + 1 , "chan2" , prim.get_chan2() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_SETTLE_RPT" );
    return rv;
}
a_string display_RADIOTEST_DEEP_SLEEP_pdu ( int indent , const RADIOTEST_DEEP_SLEEP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_DEEP_SLEEP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_DEEP_SLEEP" );
    return rv;
}
a_string display_RADIOTEST_PCM_EXT_LB_INTERFACE_pdu ( int indent , const RADIOTEST_PCM_EXT_LB_INTERFACE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_EXT_LB_INTERFACE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_mode" , prim.get_pcm_mode() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_interface" , prim.get_pcm_interface() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_EXT_LB_INTERFACE" );
    return rv;
}
a_string display_RADIOTEST_CFG_PKT_pdu ( int indent , const RADIOTEST_CFG_PKT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_PKT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_size" , prim.get_pkt_size() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_PKT" );
    return rv;
}
a_string display_RADIOTEST_CFG_TX_TRIM_pdu ( int indent , const RADIOTEST_CFG_TX_TRIM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_TX_TRIM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "am_addr" , prim.get_am_addr() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_TX_TRIM" );
    return rv;
}
a_string display_RADIOTEST_CFG_FREQ_MS_pdu ( int indent , const RADIOTEST_CFG_FREQ_MS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_FREQ_MS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "txrx_freq" , prim.get_txrx_freq() );
    rv += policy->display_uint16 ( indent + 1 , "lb_offs" , prim.get_lb_offs() );
    rv += policy->display_uint16 ( indent + 1 , "report_freq" , prim.get_report_freq() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_FREQ_MS" );
    return rv;
}
a_string display_RADIOTEST_RXDATA1_pdu ( int indent , const RADIOTEST_RXDATA1_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_RXDATA1" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_bool ( indent + 1 , "highside" , prim.get_highside() );
    rv += policy->display_uint16 ( indent + 1 , "attn" , prim.get_attn() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_RXDATA1" );
    return rv;
}
a_string display_RADIOTEST_RXDATA2_pdu ( int indent , const RADIOTEST_RXDATA2_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_RXDATA2" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "cc" , prim.get_cc() );
    rv += policy->display_bool ( indent + 1 , "highside" , prim.get_highside() );
    rv += policy->display_uint16 ( indent + 1 , "attn" , prim.get_attn() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_RXDATA2" );
    return rv;
}
a_string display_RADIOTEST_RADIO_STATUS_ARRAY_pdu ( int indent , const RADIOTEST_RADIO_STATUS_ARRAY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_RADIO_STATUS_ARRAY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_RADIO_STATUS_ARRAY" );
    return rv;
}
a_string display_RADIOTEST_DEEP_SLEEP_SELECT_pdu ( int indent , const RADIOTEST_DEEP_SLEEP_SELECT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_DEEP_SLEEP_SELECT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "pio_mask" , prim.get_pio_mask() );
    rv += policy->display_uint16 ( indent + 1 , "serial_mask" , prim.get_serial_mask() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_DEEP_SLEEP_SELECT" );
    return rv;
}
a_string display_RADIOTEST_CFG_IQ_TRIM_pdu ( int indent , const RADIOTEST_CFG_IQ_TRIM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_IQ_TRIM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "trim" , prim.get_trim() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_IQ_TRIM" );
    return rv;
}
a_string display_RADIOTEST_CFG_PIO_CHANNEL_MASK_pdu ( int indent , const RADIOTEST_CFG_PIO_CHANNEL_MASK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_PIO_CHANNEL_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    uint16 data[5];
	prim.get_channels( data );
    rv += policy->display_uint16Array ( indent + 1 , "channels" , data , 5 );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_PIO_CHANNEL_MASK" );
    return rv;
}
a_string display_RADIOTEST_CFG_ACC_ERRS_pdu ( int indent , const RADIOTEST_CFG_ACC_ERRS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_ACC_ERRS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "n_errs" , prim.get_n_errs() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_ACC_ERRS" );
    return rv;
}
a_string display_RADIOTEST_CFG_TXPOWER_pdu ( int indent , const RADIOTEST_CFG_TXPOWER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_TXPOWER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_int16 ( indent + 1 , "db" , prim.get_db() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_TXPOWER" );
    return rv;
}
a_string display_RADIOTEST_IF_IQ_MATCH_pdu ( int indent , const RADIOTEST_IF_IQ_MATCH_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_IF_IQ_MATCH" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_IF_IQ_MATCH" );
    return rv;
}
a_string display_RADIOTEST_CFG_FREQ_pdu ( int indent , const RADIOTEST_CFG_FREQ_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_FREQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "txrx_freq" , prim.get_txrx_freq() );
    rv += policy->display_uint16 ( indent + 1 , "lb_offs" , prim.get_lb_offs() );
    rv += policy->display_uint16 ( indent + 1 , "report_freq" , prim.get_report_freq() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_FREQ" );
    return rv;
}
a_string display_RADIOTEST_TXDATA1_pdu ( int indent , const RADIOTEST_TXDATA1_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_TXDATA1" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_uint16 ( indent + 1 , "level" , prim.get_level() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_TXDATA1" );
    return rv;
}
a_string display_RADIOTEST_CFG_LO_LVL_pdu ( int indent , const RADIOTEST_CFG_LO_LVL_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_LO_LVL" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lvl" , prim.get_lvl() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_LO_LVL" );
    return rv;
}
a_string display_RADIOTEST_TXDATA2_pdu ( int indent , const RADIOTEST_TXDATA2_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_TXDATA2" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "cc" , prim.get_cc() );
    rv += policy->display_uint16 ( indent + 1 , "level" , prim.get_level() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_TXDATA2" );
    return rv;
}
a_string display_RADIOTEST_PCM_TONE_INTERFACE_pdu ( int indent , const RADIOTEST_PCM_TONE_INTERFACE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_TONE_INTERFACE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    uint16 data[4];
	prim.get_params( data );
    rv += policy->display_uint16Array ( indent + 1 , "params" , data , 4 );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_TONE_INTERFACE" );
    return rv;
}
a_string display_RADIOTEST_RF_IQ_MATCH_pdu ( int indent , const RADIOTEST_RF_IQ_MATCH_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_RF_IQ_MATCH" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_RF_IQ_MATCH" );
    return rv;
}
a_string display_RADIOTEST_SETTLE_pdu ( int indent , const RADIOTEST_SETTLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_SETTLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "chan1" , prim.get_chan1() );
    rv += policy->display_uint16 ( indent + 1 , "chan2" , prim.get_chan2() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_SETTLE" );
    return rv;
}
a_string display_RADIOTEST_TXDATA3_pdu ( int indent , const RADIOTEST_TXDATA3_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_TXDATA3" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_uint16 ( indent + 1 , "level" , prim.get_level() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_TXDATA3" );
    return rv;
}
a_string display_RADIOTEST_TXDATA4_pdu ( int indent , const RADIOTEST_TXDATA4_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_TXDATA4" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_uint16 ( indent + 1 , "level" , prim.get_level() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_TXDATA4" );
    return rv;
}
a_string display_RADIOTEST_PCM_TONE_STEREO_pdu ( int indent , const RADIOTEST_PCM_TONE_STEREO_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_TONE_STEREO" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    uint16 data[4];
	prim.get_params( data );
    rv += policy->display_uint16Array ( indent + 1 , "params" , data , 4 );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_TONE_STEREO" );
    return rv;
}
a_string display_RADIOTEST_CFG_PIO_ENABLE_MASK_pdu ( int indent , const RADIOTEST_CFG_PIO_ENABLE_MASK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_PIO_ENABLE_MASK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "mask" , prim.get_mask() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_PIO_ENABLE_MASK" );
    return rv;
}
a_string display_RADIOTEST_PCM_TIMING_IN_pdu ( int indent , const RADIOTEST_PCM_TIMING_IN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_TIMING_IN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "pio_out" , prim.get_pio_out() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_in" , prim.get_pcm_in() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_TIMING_IN" );
    return rv;
}
a_string display_RADIOTEST_PCM_TONE_pdu ( int indent , const RADIOTEST_PCM_TONE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_TONE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "freq" , prim.get_freq() );
    rv += policy->display_uint16 ( indent + 1 , "ampl" , prim.get_ampl() );
    rv += policy->display_uint16 ( indent + 1 , "dc" , prim.get_dc() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_TONE" );
    return rv;
}
a_string display_RADIOTEST_RX_LOOP_BACK_pdu ( int indent , const RADIOTEST_RX_LOOP_BACK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_RX_LOOP_BACK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_uint16 ( indent + 1 , "level" , prim.get_level() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_RX_LOOP_BACK" );
    return rv;
}
a_string display_RADIOTEST_PCM_TIMING_IN_INTERFACE_pdu ( int indent , const RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_TIMING_IN_INTERFACE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "pio_out" , prim.get_pio_out() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_in" , prim.get_pcm_in() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_interface" , prim.get_pcm_interface() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_TIMING_IN_INTERFACE" );
    return rv;
}
a_string display_RADIOTEST_PCM_LB_INTERFACE_pdu ( int indent , const RADIOTEST_PCM_LB_INTERFACE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PCM_LB_INTERFACE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_mode" , prim.get_pcm_mode() );
    rv += policy->display_uint16 ( indent + 1 , "pcm_interface" , prim.get_pcm_interface() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PCM_LB_INTERFACE" );
    return rv;
}
a_string display_RADIOTEST_CFG_TX_COMP_pdu ( int indent , const RADIOTEST_CFG_TX_COMP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_TX_COMP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "tx_offset" , prim.get_tx_offset() );
    rv += policy->display_uint16 ( indent + 1 , "lo_offset" , prim.get_lo_offset() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_TX_COMP" );
    return rv;
}
a_string display_RADIOTEST_CFG_XTAL_FTRIM_pdu ( int indent , const RADIOTEST_CFG_XTAL_FTRIM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_XTAL_FTRIM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "xtal_ftrim" , prim.get_xtal_ftrim() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_XTAL_FTRIM" );
    return rv;
}
a_string display_RADIOTEST_RXSTART1_pdu ( int indent , const RADIOTEST_RXSTART1_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_RXSTART1" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_bool ( indent + 1 , "highside" , prim.get_highside() );
    rv += policy->display_uint16 ( indent + 1 , "attn" , prim.get_attn() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_RXSTART1" );
    return rv;
}
a_string display_RADIOTEST_RXSTART2_pdu ( int indent , const RADIOTEST_RXSTART2_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_RXSTART2" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_bool ( indent + 1 , "highside" , prim.get_highside() );
    rv += policy->display_uint16 ( indent + 1 , "attn" , prim.get_attn() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_RXSTART2" );
    return rv;
}
a_string display_RADIOTEST_RADIO_STATUS_pdu ( int indent , const RADIOTEST_RADIO_STATUS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_RADIO_STATUS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_RADIO_STATUS" );
    return rv;
}
a_string display_RADIOTEST_BUILD_LUT_pdu ( int indent , const RADIOTEST_BUILD_LUT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_BUILD_LUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_BUILD_LUT" );
    return rv;
}
a_string display_RADIOTEST_CFG_HOPPING_SEQUENCE_pdu ( int indent , const RADIOTEST_CFG_HOPPING_SEQUENCE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_HOPPING_SEQUENCE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    uint16 data[5];
	prim.get_channels( data );
    rv += policy->display_uint16Array ( indent + 1 , "channels" , data , 5 );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_HOPPING_SEQUENCE" );
    return rv;
}
a_string display_RADIOTEST_BER_LOOP_BACK_pdu ( int indent , const RADIOTEST_BER_LOOP_BACK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_BER_LOOP_BACK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_uint16 ( indent + 1 , "level" , prim.get_level() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_BER_LOOP_BACK" );
    return rv;
}
a_string display_RADIOTEST_BER1_pdu ( int indent , const RADIOTEST_BER1_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_BER1" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_bool ( indent + 1 , "highside" , prim.get_highside() );
    rv += policy->display_uint16 ( indent + 1 , "attn" , prim.get_attn() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_BER1" );
    return rv;
}
a_string display_RADIOTEST_BER2_pdu ( int indent , const RADIOTEST_BER2_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_BER2" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "cc" , prim.get_cc() );
    rv += policy->display_bool ( indent + 1 , "highside" , prim.get_highside() );
    rv += policy->display_uint16 ( indent + 1 , "attn" , prim.get_attn() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_BER2" );
    return rv;
}
a_string display_RADIOTEST_READ_LUT_pdu ( int indent , const RADIOTEST_READ_LUT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_READ_LUT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_READ_LUT" );
    return rv;
}
a_string display_RADIOTEST_VCOTRIM_pdu ( int indent , const RADIOTEST_VCOTRIM_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_VCOTRIM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "cc" , prim.get_cc() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_VCOTRIM" );
    return rv;
}
a_string display_RADIOTEST_PAUSE_pdu ( int indent , const RADIOTEST_PAUSE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_PAUSE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_PAUSE" );
    return rv;
}
a_string display_RADIOTEST_CFG_BIT_ERR_pdu ( int indent , const RADIOTEST_CFG_BIT_ERR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_BIT_ERR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint32 ( indent + 1 , "bits_count" , prim.get_bits_count() );
    rv += policy->display_bool ( indent + 1 , "reset" , prim.get_reset() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_BIT_ERR" );
    return rv;
}
a_string display_RADIOTEST_CFG_TX_PA_ATTEN_pdu ( int indent , const RADIOTEST_CFG_TX_PA_ATTEN_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_CFG_TX_PA_ATTEN" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "atten_value" , prim.get_atten_value() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_CFG_TX_PA_ATTEN" );
    return rv;
}
a_string display_RADIOTEST_LOOP_BACK_pdu ( int indent , const RADIOTEST_LOOP_BACK_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "RADIOTEST_LOOP_BACK" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "radiotest" , prim.get_radiotest() );
    rv += policy->display_uint16 ( indent + 1 , "lo_freq" , prim.get_lo_freq() );
    rv += policy->display_uint16 ( indent + 1 , "level" , prim.get_level() );
    rv += policy->display_prim_end ( indent , "RADIOTEST_LOOP_BACK" );
    return rv;
}
a_string display_HQ_STIBBONS_U02_pdu ( int indent , const HQ_STIBBONS_U02_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U02" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U02" );
    return rv;
}
a_string display_HQ_STIBBONS_U03_pdu ( int indent , const HQ_STIBBONS_U03_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U03" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U03" );
    return rv;
}
a_string display_HQ_STIBBONS_U04_pdu ( int indent , const HQ_STIBBONS_U04_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U04" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U04" );
    return rv;
}
a_string display_HQ_STIBBONS_U05_pdu ( int indent , const HQ_STIBBONS_U05_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U05" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U05" );
    return rv;
}
a_string display_HQ_STIBBONS_U06_pdu ( int indent , const HQ_STIBBONS_U06_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U06" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U06" );
    return rv;
}
a_string display_HQ_STIBBONS_U07_pdu ( int indent , const HQ_STIBBONS_U07_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U07" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U07" );
    return rv;
}
a_string display_HQ_STIBBONS_U08_pdu ( int indent , const HQ_STIBBONS_U08_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U08" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U08" );
    return rv;
}
a_string display_HQ_STIBBONS_U09_pdu ( int indent , const HQ_STIBBONS_U09_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U09" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U09" );
    return rv;
}
a_string display_HQ_STIBBONS_C01_pdu ( int indent , const HQ_STIBBONS_C01_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C01" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C01" );
    return rv;
}
a_string display_HQ_STIBBONS_C02_pdu ( int indent , const HQ_STIBBONS_C02_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C02" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C02" );
    return rv;
}
a_string display_HQ_ESCO_REQ_pdu ( int indent , const HQ_ESCO_REQ_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_ESCO_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "sco_handle" , prim.get_sco_handle() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_uint16 ( indent + 1 , "pt_s2m" , prim.get_pt_s2m() );
    rv += policy->display_uint16 ( indent + 1 , "pt_m2s" , prim.get_pt_m2s() );
    rv += policy->display_uint16 ( indent + 1 , "tesco" , prim.get_tesco() );
    rv += policy->display_uint16 ( indent + 1 , "wesco" , prim.get_wesco() );
    rv += policy->display_uint16 ( indent + 1 , "dsco" , prim.get_dsco() );
    rv += policy->display_prim_end ( indent , "HQ_ESCO_REQ" );
    return rv;
}
a_string display_HQ_STIBBONS_C03_pdu ( int indent , const HQ_STIBBONS_C03_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C03" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C03" );
    return rv;
}
a_string display_HQ_STIBBONS_C04_pdu ( int indent , const HQ_STIBBONS_C04_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C04" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C04" );
    return rv;
}
a_string display_HQ_STIBBONS_C05_pdu ( int indent , const HQ_STIBBONS_C05_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C05" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C05" );
    return rv;
}
a_string display_HQ_STIBBONS_C06_pdu ( int indent , const HQ_STIBBONS_C06_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C06" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C06" );
    return rv;
}
a_string display_HQ_STIBBONS_C07_pdu ( int indent , const HQ_STIBBONS_C07_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C07" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C07" );
    return rv;
}
a_string display_HQ_STIBBONS_C08_pdu ( int indent , const HQ_STIBBONS_C08_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C08" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C08" );
    return rv;
}
a_string display_HQ_STIBBONS_C09_pdu ( int indent , const HQ_STIBBONS_C09_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C09" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C09" );
    return rv;
}
a_string display_HQ_FM_RDS_DATA_pdu ( int indent , const HQ_FM_RDS_DATA_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_rds_data( data , prim.get_rds_data_len() * HQ_FM_RDS_DATA_PDU::words_per_block );
    a_string rv = policy->display_prim_start ( indent , "HQ_FM_RDS_DATA" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "rds_data_len" , prim.get_rds_data_len() );
    rv += policy->display_uint16Array ( indent + 1 , "rds_data" , data , HQ_FM_RDS_DATA_PDU::words_per_block * prim.get_rds_data_len() );
    rv += policy->display_prim_end ( indent , "HQ_FM_RDS_DATA" );
    return rv;
}
a_string display_HQ_SNIFF_REQ_pdu ( int indent , const HQ_SNIFF_REQ_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_SNIFF_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "t" , prim.get_t() );
    rv += policy->display_uint16 ( indent + 1 , "d" , prim.get_d() );
    rv += policy->display_uint16 ( indent + 1 , "attempts" , prim.get_attempts() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "HQ_SNIFF_REQ" );
    return rv;
}
a_string display_HQ_RSSI_pdu ( int indent , const HQ_RSSI_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_RSSI" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_RSSI" );
    return rv;
}
a_string display_HQ_BOOTED_pdu ( int indent , const HQ_BOOTED_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_BOOTED" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_BOOTED" );
    return rv;
}
a_string display_HQ_EGPS_TIME_STAMP_pdu ( int indent , const HQ_EGPS_TIME_STAMP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_EGPS_TIME_STAMP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "time" , prim.get_time() );
    rv += policy->display_uint8 ( indent + 1 , "time_fine" , prim.get_time_fine() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "HQ_EGPS_TIME_STAMP" );
    return rv;
}
a_string display_HQ_NO_VARIABLE_pdu ( int indent , const HQ_NO_VARIABLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_NO_VARIABLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_NO_VARIABLE" );
    return rv;
}
a_string display_HQ_STIBBONS_U10_pdu ( int indent , const HQ_STIBBONS_U10_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U10" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U10" );
    return rv;
}
a_string display_HQ_STIBBONS_U11_pdu ( int indent , const HQ_STIBBONS_U11_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U11" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U11" );
    return rv;
}
a_string display_HQ_BIT_ERR_pdu ( int indent , const HQ_BIT_ERR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_BIT_ERR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "index" , prim.get_index() );
    rv += policy->display_uint32 ( indent + 1 , "value_last" , prim.get_value_last() );
    rv += policy->display_uint32 ( indent + 1 , "value_tot" , prim.get_value_tot() );
    rv += policy->display_prim_end ( indent , "HQ_BIT_ERR" );
    return rv;
}
a_string display_HQ_STIBBONS_U12_pdu ( int indent , const HQ_STIBBONS_U12_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U12" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U12" );
    return rv;
}
a_string display_HQ_STIBBONS_U13_pdu ( int indent , const HQ_STIBBONS_U13_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U13" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U13" );
    return rv;
}
a_string display_HQ_GPS_STATUS_pdu ( int indent , const HQ_GPS_STATUS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_GPS_STATUS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "HQ_GPS_STATUS" );
    return rv;
}
a_string display_HQ_STIBBONS_U14_pdu ( int indent , const HQ_STIBBONS_U14_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U14" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U14" );
    return rv;
}
a_string display_HQ_STIBBONS_U15_pdu ( int indent , const HQ_STIBBONS_U15_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U15" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U15" );
    return rv;
}
a_string display_HQ_DELAYED_PANIC_pdu ( int indent , const HQ_DELAYED_PANIC_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_DELAYED_PANIC" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_DELAYED_PANIC" );
    return rv;
}
a_string display_HQ_STIBBONS_U16_pdu ( int indent , const HQ_STIBBONS_U16_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_U16" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_U16" );
    return rv;
}
a_string display_HQ_STIBBONS_C10_pdu ( int indent , const HQ_STIBBONS_C10_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C10" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C10" );
    return rv;
}
a_string display_HQ_PROTOCOL_ERROR_pdu ( int indent , const HQ_PROTOCOL_ERROR_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_PROTOCOL_ERROR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "layer" , prim.get_layer() );
    rv += policy->display_uint16 ( indent + 1 , "entity" , prim.get_entity() );
    rv += policy->display_uint16 ( indent + 1 , "error" , prim.get_error() );
    rv += policy->display_uint16 ( indent + 1 , "info0" , prim.get_info0() );
    rv += policy->display_uint16 ( indent + 1 , "info1" , prim.get_info1() );
    rv += policy->display_uint16 ( indent + 1 , "info2" , prim.get_info2() );
    rv += policy->display_prim_end ( indent , "HQ_PROTOCOL_ERROR" );
    return rv;
}
a_string display_HQ_STIBBONS_C11_pdu ( int indent , const HQ_STIBBONS_C11_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C11" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C11" );
    return rv;
}
a_string display_HQ_STIBBONS_C12_pdu ( int indent , const HQ_STIBBONS_C12_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C12" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C12" );
    return rv;
}
a_string display_HQ_STIBBONS_C13_pdu ( int indent , const HQ_STIBBONS_C13_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C13" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C13" );
    return rv;
}
a_string display_HQ_STIBBONS_C14_pdu ( int indent , const HQ_STIBBONS_C14_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C14" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C14" );
    return rv;
}
a_string display_HQ_SCO_STREAM_HANDLES_pdu ( int indent , const HQ_SCO_STREAM_HANDLES_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_SCO_STREAM_HANDLES" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "sco_handle" , prim.get_sco_handle() );
    rv += policy->display_uint16 ( indent + 1 , "source_id" , prim.get_source_id() );
    rv += policy->display_uint16 ( indent + 1 , "sink_id" , prim.get_sink_id() );
    rv += policy->display_prim_end ( indent , "HQ_SCO_STREAM_HANDLES" );
    return rv;
}
a_string display_HQ_STIBBONS_C15_pdu ( int indent , const HQ_STIBBONS_C15_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C15" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C15" );
    return rv;
}
a_string display_HQ_STIBBONS_C16_pdu ( int indent , const HQ_STIBBONS_C16_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_STIBBONS_C16" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "HQ_STIBBONS_C16" );
    return rv;
}
a_string display_HQ_ACCEPT_TDI_pdu ( int indent , const HQ_ACCEPT_TDI_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_ACCEPT_TDI" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "id" , prim.get_id() );
    rv += policy->display_uint16 ( indent + 1 , "t" , prim.get_t() );
    rv += policy->display_uint16 ( indent + 1 , "d" , prim.get_d() );
    rv += policy->display_uint16 ( indent + 1 , "attempts" , prim.get_attempts() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "event" , prim.get_event() );
    rv += policy->display_prim_end ( indent , "HQ_ACCEPT_TDI" );
    return rv;
}
a_string display_HQ_FILTER_RESP_pdu ( int indent , const HQ_FILTER_RESP_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_FILTER_RESP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "index" , prim.get_index() );
    rv += policy->display_uint16 ( indent + 1 , "freq" , prim.get_freq() );
    rv += policy->display_uint16 ( indent + 1 , "rssi" , prim.get_rssi() );
    rv += policy->display_prim_end ( indent , "HQ_FILTER_RESP" );
    return rv;
}
a_string display_HQ_ADC_RESULT_pdu ( int indent , const HQ_ADC_RESULT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_ADC_RESULT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_prim_end ( indent , "HQ_ADC_RESULT" );
    return rv;
}
a_string display_HQ_BLE_RADIO_TEST_pdu ( int indent , const HQ_BLE_RADIO_TEST_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_BLE_RADIO_TEST" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_BLE_RADIO_TEST" );
    return rv;
}
a_string display_HQ_RXPKTSTATS_pdu ( int indent , const HQ_RXPKTSTATS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_RXPKTSTATS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "n_pkts" , prim.get_n_pkts() );
    rv += policy->display_uint16 ( indent + 1 , "n_good_pkts" , prim.get_n_good_pkts() );
    rv += policy->display_uint16 ( indent + 1 , "n_correctable_pkts" , prim.get_n_correctable_pkts() );
    rv += policy->display_uint16 ( indent + 1 , "rssi" , prim.get_rssi() );
    rv += policy->display_bool ( indent + 1 , "rssi_valid" , prim.get_rssi_valid() );
    rv += policy->display_prim_end ( indent , "HQ_RXPKTSTATS" );
    return rv;
}
a_string display_HQ_MESSAGE_FROM_OPERATOR_pdu ( int indent , const HQ_MESSAGE_FROM_OPERATOR_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_message( data , prim.get_msglen() );
    a_string rv = policy->display_prim_start ( indent , "HQ_MESSAGE_FROM_OPERATOR" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "opid" , prim.get_opid() );
    rv += policy->display_uint16Array ( indent + 1 , "message" , data , prim.get_msglen() );
    rv += policy->display_prim_end ( indent , "HQ_MESSAGE_FROM_OPERATOR" );
    return rv;
}
a_string display_HQ_BER_TRIGGER_pdu ( int indent , const HQ_BER_TRIGGER_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_BER_TRIGGER" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "hci_handle" , prim.get_hci_handle() );
    rv += policy->display_uint16 ( indent + 1 , "avg_ber" , prim.get_avg_ber() );
    rv += policy->display_uint16 ( indent + 1 , "raw_ber" , prim.get_raw_ber() );
    rv += policy->display_uint16 ( indent + 1 , "ber_threshold" , prim.get_ber_threshold() );
    rv += policy->display_prim_end ( indent , "HQ_BER_TRIGGER" );
    return rv;
}
a_string display_HQ_DRAIN_CALIBRATE_pdu ( int indent , const HQ_DRAIN_CALIBRATE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_DRAIN_CALIBRATE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "awake_time" , prim.get_awake_time() );
    rv += policy->display_uint32 ( indent + 1 , "sleep_time" , prim.get_sleep_time() );
    rv += policy->display_uint32 ( indent + 1 , "half_slots" , prim.get_half_slots() );
    rv += policy->display_uint32 ( indent + 1 , "half_slots_pa" , prim.get_half_slots_pa() );
    rv += policy->display_uint32 ( indent + 1 , "fm_radio" , prim.get_fm_radio() );
    rv += policy->display_uint32 ( indent + 1 , "fm_tx_radio" , prim.get_fm_tx_radio() );
    rv += policy->display_uint32 ( indent + 1 , "fm_lo" , prim.get_fm_lo() );
    rv += policy->display_prim_end ( indent , "HQ_DRAIN_CALIBRATE" );
    return rv;
}
a_string display_HQ_RADIO_STATUS_ARRAY_pdu ( int indent , const HQ_RADIO_STATUS_ARRAY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_RADIO_STATUS_ARRAY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "index" , prim.get_index() );
    rv += policy->display_uint16 ( indent + 1 , "value" , prim.get_value() );
    rv += policy->display_prim_end ( indent , "HQ_RADIO_STATUS_ARRAY" );
    return rv;
}
a_string display_HQ_SYNTH_SETTLE_pdu ( int indent , const HQ_SYNTH_SETTLE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_SYNTH_SETTLE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "index" , prim.get_index() );
    rv += policy->display_uint16 ( indent + 1 , "voltage" , prim.get_voltage() );
    rv += policy->display_prim_end ( indent , "HQ_SYNTH_SETTLE" );
    return rv;
}
a_string display_HQ_DSPMANAGER_DEBUG_INFO_B_pdu ( int indent , const HQ_DSPMANAGER_DEBUG_INFO_B_PDU& prim , PDU_displayer * policy )
{
    uint16 data[65536];
    prim.get_msg( data , prim.get_msglen() );
    a_string rv = policy->display_prim_start ( indent , "HQ_DSPMANAGER_DEBUG_INFO_B" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "time_us" , prim.get_time_us() );
    rv += policy->display_uint16 ( indent + 1 , "msgid" , prim.get_msgid() );
    rv += policy->display_uint16 ( indent + 1 , "msglen" , prim.get_msglen() );
    rv += policy->display_uint16Array ( indent + 1 , "msg" , data , prim.get_msglen() );
    rv += policy->display_prim_end ( indent , "HQ_DSPMANAGER_DEBUG_INFO_B" );
    return rv;
}
a_string display_HQ_FM_EVENT_pdu ( int indent , const HQ_FM_EVENT_PDU& prim , PDU_displayer * policy )
{
    uint16 data[6];
    prim.get_reg_vals( data );
    a_string rv = policy->display_prim_start ( indent , "HQ_FM_EVENT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16Array ( indent + 1 , "reg_vals" , data , 6 );
    rv += policy->display_prim_end ( indent , "HQ_FM_EVENT" );
    return rv;
}
a_string display_HQ_FMTX_EVENT_pdu ( int indent , const HQ_FMTX_EVENT_PDU& prim , PDU_displayer * policy )
{
    uint16 data[6];
    prim.get_reg_vals( data );
    a_string rv = policy->display_prim_start ( indent , "HQ_FMTX_EVENT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16Array ( indent + 1 , "reg_vals" , data , 6 );
    rv += policy->display_prim_end ( indent , "HQ_FMTX_EVENT" );
    return rv;
}
a_string display_HQ_FAULT_pdu ( int indent , const HQ_FAULT_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_FAULT" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "f" , prim.get_f() );
    rv += policy->display_uint32 ( indent + 1 , "t" , prim.get_t() );
    rv += policy->display_uint16 ( indent + 1 , "n" , prim.get_n() );
    rv += policy->display_prim_end ( indent , "HQ_FAULT" );
    return rv;
}
a_string display_HQ_LUT_ENTRY_pdu ( int indent , const HQ_LUT_ENTRY_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_LUT_ENTRY" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "index" , prim.get_index() );
    rv += policy->display_uint16 ( indent + 1 , "trim" , prim.get_trim() );
    rv += policy->display_prim_end ( indent , "HQ_LUT_ENTRY" );
    return rv;
}
a_string display_HQ_COEX_UART_MESSAGE_pdu ( int indent , const HQ_COEX_UART_MESSAGE_PDU& prim , PDU_displayer * policy )
{
    uint16 data[8];
    prim.get_info( data );
    a_string rv = policy->display_prim_start ( indent , "HQ_COEX_UART_MESSAGE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16Array ( indent + 1 , "info" , data , 8);
    rv += policy->display_prim_end ( indent , "HQ_COEX_UART_MESSAGE" );
    return rv;
}
a_string display_HQ_IQ_MATCH_pdu ( int indent , const HQ_IQ_MATCH_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_IQ_MATCH" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "index" , prim.get_index() );
    rv += policy->display_uint16 ( indent + 1 , "trim" , prim.get_trim() );
    rv += policy->display_uint16 ( indent + 1 , "rssi_chan" , prim.get_rssi_chan() );
    rv += policy->display_uint16 ( indent + 1 , "rssi_image" , prim.get_rssi_image() );
    rv += policy->display_prim_end ( indent , "HQ_IQ_MATCH" );
    return rv;
}
a_string display_HQ_RADIO_STATUS_pdu ( int indent , const HQ_RADIO_STATUS_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_RADIO_STATUS" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "tx_lvl" , prim.get_tx_lvl() );
    rv += policy->display_uint16 ( indent + 1 , "tx_ext_lvl" , prim.get_tx_ext_lvl() );
    rv += policy->display_uint16 ( indent + 1 , "rx_lvl" , prim.get_rx_lvl() );
    rv += policy->display_uint16 ( indent + 1 , "lo_lvl" , prim.get_lo_lvl() );
    rv += policy->display_uint16 ( indent + 1 , "iq_trim" , prim.get_iq_trim() );
    rv += policy->display_uint16 ( indent + 1 , "sir" , prim.get_sir() );
    rv += policy->display_uint16 ( indent + 1 , "rx_atten" , prim.get_rx_atten() );
    rv += policy->display_prim_end ( indent , "HQ_RADIO_STATUS" );
    return rv;
}
a_string display_HQ_CAPABILITY_DOWNLOAD_COMPLETE_pdu ( int indent , const HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "HQ_CAPABILITY_DOWNLOAD_COMPLETE" ) ;
    rv += policy->display_uint16 ( indent + 1 , "req_type" , prim.get_req_type() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_uint16 ( indent + 1 , "seq_no" , prim.get_seq_no() );
    rv += policy->display_uint16 ( indent + 1 , "varid" , prim.get_varid() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "data" , prim.get_data() );
    rv += policy->display_prim_end ( indent , "HQ_CAPABILITY_DOWNLOAD_COMPLETE" );
    return rv;
}
a_string display_DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_EVENT_MASK_CFM_pdu ( int indent , const DM_HCI_ULP_SET_EVENT_MASK_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_EVENT_MASK_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_EVENT_MASK_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_STORED_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    PDU_displayer::lb_element lb_array[16]; // plenty (256/22 = 11).
    uint8 key_count = prim.get_number_keys();
    for ( int i = 0 ; i < key_count ; ++i )
        prim.get_link_key_bd_addr ( i , lb_array[i].bd_addr , lb_array[i].key );
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_STORED_LINK_KEY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "number_keys" , prim.get_number_keys() );
    rv += policy->display_link_key_bd_addrArray ( indent + 1 , "link_key_bd_addr" , lb_array , key_count );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_STORED_LINK_KEY_REQ" );
    return rv;
}
a_string display_DM_HCI_SWITCH_ROLE_REQ_pdu ( int indent , const DM_HCI_SWITCH_ROLE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SWITCH_ROLE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "role" , prim.get_role() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SWITCH_ROLE_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_CLASS_OF_DEVICE_REQ_pdu ( int indent , const DM_HCI_WRITE_CLASS_OF_DEVICE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_CLASS_OF_DEVICE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_CLASS_OF_DEVICE_REQ" );
    return rv;
}
a_string display_DM_SYNC_RENEGOTIATE_IND_pdu ( int indent , const DM_SYNC_RENEGOTIATE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_RENEGOTIATE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "tx_interval" , prim.get_tx_interval() );
    rv += policy->display_uint8 ( indent + 1 , "wesco" , prim.get_wesco() );
    rv += policy->display_uint16 ( indent + 1 , "rx_packet_length" , prim.get_rx_packet_length() );
    rv += policy->display_uint16 ( indent + 1 , "tx_packet_length" , prim.get_tx_packet_length() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_RENEGOTIATE_IND" );
    return rv;
}
a_string display_DM_HCI_READ_LOCAL_VER_INFO_CFM_pdu ( int indent , const DM_HCI_READ_LOCAL_VER_INFO_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LOCAL_VER_INFO_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "hci_version" , prim.get_hci_version() );
    rv += policy->display_uint16 ( indent + 1 , "hci_revision" , prim.get_hci_revision() );
    rv += policy->display_uint8 ( indent + 1 , "lmp_version" , prim.get_lmp_version() );
    rv += policy->display_uint16 ( indent + 1 , "manuf_name" , prim.get_manuf_name() );
    rv += policy->display_uint16 ( indent + 1 , "lmp_subversion" , prim.get_lmp_subversion() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LOCAL_VER_INFO_CFM" );
    return rv;
}
a_string display_DM_AMPM_REGISTER_CFM_pdu ( int indent , const DM_AMPM_REGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_REGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_REGISTER_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_AFH_CHANNEL_MAP_REQ_pdu ( int indent , const DM_HCI_READ_AFH_CHANNEL_MAP_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_AFH_CHANNEL_MAP_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_AFH_CHANNEL_MAP_REQ" );
    return rv;
}
a_string display_DM_SM_READ_LOCAL_OOB_DATA_REQ_pdu ( int indent , const DM_SM_READ_LOCAL_OOB_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_READ_LOCAL_OOB_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint8 ( indent + 1 , "unused" , prim.get_unused() );
    rv += policy->display_prim_end ( indent , "DM_SM_READ_LOCAL_OOB_DATA_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_pdu ( int indent , const DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8Array ( indent + 1 , "channel_map" , prim.get_channel_map().get_ptr() , 5 );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_STORED_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_WRITE_STORED_LINK_KEY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_STORED_LINK_KEY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "num_keys_written" , prim.get_num_keys_written() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_STORED_LINK_KEY_CFM" );
    return rv;
}
a_string display_DM_ACL_CLOSE_REQ_pdu ( int indent , const DM_ACL_CLOSE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_ACL_CLOSE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "DM_ACL_CLOSE_REQ" );
    return rv;
}
a_string display_DM_HCI_SWITCH_ROLE_CFM_pdu ( int indent , const DM_HCI_SWITCH_ROLE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SWITCH_ROLE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "role" , prim.get_role() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SWITCH_ROLE_CFM" );
    return rv;
}
a_string display_DM_WRITE_CACHED_CLOCK_OFFSET_REQ_pdu ( int indent , const DM_WRITE_CACHED_CLOCK_OFFSET_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_WRITE_CACHED_CLOCK_OFFSET_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "clock_offset" , prim.get_clock_offset() );
    rv += policy->display_prim_end ( indent , "DM_WRITE_CACHED_CLOCK_OFFSET_REQ" );
    return rv;
}
a_string display_DM_HCI_SET_EVENT_FILTER_REQ_pdu ( int indent , const DM_HCI_SET_EVENT_FILTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SET_EVENT_FILTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += display_event_filter ( indent + 1 , prim , policy );
    rv += policy->display_prim_end ( indent , "DM_HCI_SET_EVENT_FILTER_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "FlushTimeout" , prim.get_FlushTimeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM" );
    return rv;
}
a_string display_DM_SM_USER_PASSKEY_REQUEST_RSP_pdu ( int indent , const DM_SM_USER_PASSKEY_REQUEST_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_USER_PASSKEY_REQUEST_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint32 ( indent + 1 , "numeric_value" , prim.get_numeric_value() );
    rv += policy->display_prim_end ( indent , "DM_SM_USER_PASSKEY_REQUEST_RSP" );
    return rv;
}
a_string display_DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_CLASS_OF_DEVICE_CFM_pdu ( int indent , const DM_HCI_WRITE_CLASS_OF_DEVICE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_CLASS_OF_DEVICE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_CLASS_OF_DEVICE_CFM" );
    return rv;
}
a_string display_DM_SM_INIT_REQ_pdu ( int indent , const DM_SM_INIT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_INIT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "options" , prim.get_options() );
    rv += policy->display_uint8 ( indent + 1 , "security_mode" , prim.get_security_mode() );
    rv += policy->display_uint16 ( indent + 1 , "security_level_default" , prim.get_security_level_default() );
    rv += policy->display_uint16 ( indent + 1 , "config" , prim.get_config() );
    rv += policy->display_uint16 ( indent + 1 , "write_auth_enable" , prim.get_write_auth_enable() );
    rv += policy->display_uint8 ( indent + 1 , "mode3_enc" , prim.get_mode3_enc() );
    rv += policy->display_SMKeyState ( indent + 1 , "sm_key_state" , prim.get_sm_key_state() );
    rv += policy->display_uint16 ( indent + 1 , "sm_div_state" , prim.get_sm_div_state() );
    rv += policy->display_uint32 ( indent + 1 , "sm_sign_counter" , prim.get_sm_sign_counter() );
    rv += policy->display_prim_end ( indent , "DM_SM_INIT_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ_pdu ( int indent , const DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "address_type" , prim.get_address_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "address" , prim.get_address() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ" );
    return rv;
}
a_string display_DM_SM_BONDING_CANCEL_REQ_pdu ( int indent , const DM_SM_BONDING_CANCEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_BONDING_CANCEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_SM_BONDING_CANCEL_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_VOICE_SETTING_REQ_pdu ( int indent , const DM_HCI_WRITE_VOICE_SETTING_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_VOICE_SETTING_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "voice_setting" , prim.get_voice_setting() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_VOICE_SETTING_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "pagescan_interval" , prim.get_pagescan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "pagescan_window" , prim.get_pagescan_window() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ" );
    return rv;
}
a_string display_DM_SM_USER_PASSKEY_REQUEST_IND_pdu ( int indent , const DM_SM_USER_PASSKEY_REQUEST_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_USER_PASSKEY_REQUEST_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_SM_USER_PASSKEY_REQUEST_IND" );
    return rv;
}
a_string display_DM_SM_READ_LOCAL_OOB_DATA_CFM_pdu ( int indent , const DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_READ_LOCAL_OOB_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    {
        size_t n = 16;

        if (prim.get_oob_hash_c().get_data() == 0)
            n = 0;

        rv += policy->display_uint8Array ( indent + 1 , "oob_hash_c" , prim.get_oob_hash_c().get_data(), n );
    }
    {
        size_t n = 16;

        if (prim.get_oob_rand_r().get_data() == 0)
            n = 0;

        rv += policy->display_uint8Array ( indent + 1 , "oob_rand_r" , prim.get_oob_rand_r().get_data(), n );
    }
    rv += policy->display_prim_end ( indent , "DM_SM_READ_LOCAL_OOB_DATA_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_AFH_CHANNEL_MAP_CFM_pdu ( int indent , const DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_AFH_CHANNEL_MAP_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_uint8Array ( indent + 1 , "map" , prim.get_map().get_ptr() , 10 );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_AFH_CHANNEL_MAP_CFM" );
    return rv;
}
a_string display_DM_SM_ACCESS_IND_pdu ( int indent , const DM_SM_ACCESS_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_ACCESS_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_bool ( indent + 1 , "incoming" , prim.get_incoming() );
    rv += policy->display_uint32 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SM_ACCESS_IND" );
    return rv;
}
a_string display_DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_pdu ( int indent , const DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string results;
    char str[32] = "inquiry_result_";
    for ( int i = 0 ; i < prim.get_num_responses() ; ++i )
    {
        sprintf ( str+15 , "%d" , i );
        results += policy->display_InquiryResultWithRSSI ( indent + 1 , str , prim.get_result ( i ) );
    }
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += results;
    rv += policy->display_prim_end ( indent , "DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND" );
    return rv;
}
a_string display_DM_HCI_QOS_SETUP_REQ_pdu ( int indent , const DM_HCI_QOS_SETUP_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_QOS_SETUP_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "service_type" , prim.get_service_type() );
    rv += policy->display_uint32 ( indent + 1 , "token_rate" , prim.get_token_rate() );
    rv += policy->display_uint32 ( indent + 1 , "peak_bandwidth" , prim.get_peak_bandwidth() );
    rv += policy->display_uint32 ( indent + 1 , "latency" , prim.get_latency() );
    rv += policy->display_uint32 ( indent + 1 , "delay_variation" , prim.get_delay_variation() );
    rv += policy->display_prim_end ( indent , "DM_HCI_QOS_SETUP_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM_pdu ( int indent , const DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM" );
    return rv;
}
a_string display_DM_WRITE_CACHED_CLOCK_OFFSET_CFM_pdu ( int indent , const DM_WRITE_CACHED_CLOCK_OFFSET_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_WRITE_CACHED_CLOCK_OFFSET_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_WRITE_CACHED_CLOCK_OFFSET_CFM" );
    return rv;
}
a_string display_DM_HCI_SET_EVENT_FILTER_CFM_pdu ( int indent , const DM_HCI_SET_EVENT_FILTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SET_EVENT_FILTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SET_EVENT_FILTER_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ_pdu ( int indent , const DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "class_mode" , prim.get_class_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ" );
    return rv;
}
a_string display_DM_SM_INIT_CFM_pdu ( int indent , const DM_SM_INIT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_INIT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "security_mode" , prim.get_security_mode() );
    rv += policy->display_uint16 ( indent + 1 , "security_level_default" , prim.get_security_level_default() );
    rv += policy->display_uint16 ( indent + 1 , "config" , prim.get_config() );
    rv += policy->display_uint16 ( indent + 1 , "write_auth_enable" , prim.get_write_auth_enable() );
    rv += policy->display_uint8 ( indent + 1 , "mode3_enc" , prim.get_mode3_enc() );
    rv += policy->display_uint16 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_SMKeyState ( indent + 1 , "sm_key_state" , prim.get_sm_key_state() );
    rv += policy->display_uint16 ( indent + 1 , "sm_div_state" , prim.get_sm_div_state() );
    rv += policy->display_uint32 ( indent + 1 , "sm_sign_counter" , prim.get_sm_sign_counter() );
    rv += policy->display_prim_end ( indent , "DM_SM_INIT_CFM" );
    return rv;
}
a_string display_DM_HCI_ENABLE_DUT_MODE_REQ_pdu ( int indent , const DM_HCI_ENABLE_DUT_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ENABLE_DUT_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ENABLE_DUT_MODE_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM_pdu ( int indent , const DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ_pdu ( int indent , const DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_TX_POWER_LEVEL_REQ_pdu ( int indent , const DM_HCI_READ_TX_POWER_LEVEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_TX_POWER_LEVEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_TX_POWER_LEVEL_REQ" );
    return rv;
}
a_string display_DM_SM_LINK_KEY_IND_pdu ( int indent , const DM_SM_LINK_KEY_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_LINK_KEY_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "key_type" , prim.get_key_type() );
    {
        size_t n = 0;

        if (prim.get_key().get_data() != 0)
            n = 16;

        rv += policy->display_uint8Array ( indent + 1 , "key" , prim.get_key().get_data() , n );
    }
    rv += policy->display_prim_end ( indent , "DM_SM_LINK_KEY_IND" );
    return rv;
}
a_string display_DM_HCI_GET_LINK_QUALITY_REQ_pdu ( int indent , const DM_HCI_GET_LINK_QUALITY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_GET_LINK_QUALITY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_GET_LINK_QUALITY_REQ" );
    return rv;
}
a_string display_DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ_pdu ( int indent , const DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_DM_SM_PERMANENT_ADDRESS_T ( indent + 1 , "set_permanent_address_type" , prim.get_set_permanent_address_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "static_addrt" , prim.get_static_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "privacy" , prim.get_privacy() );
    rv += policy->display_prim_end ( indent , "DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_VOICE_SETTING_CFM_pdu ( int indent , const DM_HCI_WRITE_VOICE_SETTING_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_VOICE_SETTING_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_VOICE_SETTING_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM" );
    return rv;
}
a_string display_DM_HCI_INQUIRY_REQ_pdu ( int indent , const DM_HCI_INQUIRY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_INQUIRY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint24 ( indent + 1 , "lap" , prim.get_lap() );
    rv += policy->display_uint8 ( indent + 1 , "inquiry_length" , prim.get_inquiry_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += policy->display_prim_end ( indent , "DM_HCI_INQUIRY_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_TRANSMITTER_TEST_REQ_pdu ( int indent , const DM_HCI_ULP_TRANSMITTER_TEST_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_TRANSMITTER_TEST_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "tx_channel" , prim.get_tx_channel() );
    rv += policy->display_uint8 ( indent + 1 , "length_test_data" , prim.get_length_test_data() );
    rv += policy->display_uint8 ( indent + 1 , "packet_payload" , prim.get_packet_payload() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_TRANSMITTER_TEST_REQ" );
    return rv;
}
a_string display_DM_HCI_QOS_SETUP_CFM_pdu ( int indent , const DM_HCI_QOS_SETUP_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_QOS_SETUP_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "service_type" , prim.get_service_type() );
    rv += policy->display_uint32 ( indent + 1 , "token_rate" , prim.get_token_rate() );
    rv += policy->display_uint32 ( indent + 1 , "peak_bandwidth" , prim.get_peak_bandwidth() );
    rv += policy->display_uint32 ( indent + 1 , "latency" , prim.get_latency() );
    rv += policy->display_uint32 ( indent + 1 , "delay_variation" , prim.get_delay_variation() );
    rv += policy->display_prim_end ( indent , "DM_HCI_QOS_SETUP_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM_pdu ( int indent , const DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM" );
    return rv;
}
a_string display_DM_HCI_ENABLE_DUT_MODE_CFM_pdu ( int indent , const DM_HCI_ENABLE_DUT_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ENABLE_DUT_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ENABLE_DUT_MODE_CFM" );
    return rv;
}
a_string display_DM_LP_WRITE_ROLESWITCH_POLICY_REQ_pdu ( int indent , const DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_LP_WRITE_ROLESWITCH_POLICY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "version" , prim.get_version() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_text (indent+1, "rs_table =\n")
        + policy->display_text (indent+2, "       Slv    Mst    USMst  All    RS_IN  NORS_OUT\n");
    for ( int index = 0 ; index != prim.get_length() ; ++index )
    {
        char str[60];

        sprintf (str, "%3d)   %1d      %1d      %1d      %1d      %1d      %1d\n" , index, prim.get_slaves(index), prim.get_masters(index), prim.get_unsniffed_masters(index), prim.get_connections(index), prim.get_roleswitch_incoming(index), prim.get_forbid_roleswitch_outgoing(index) );

        rv += policy->display_text (indent+2, str );
    }
    rv += policy->display_prim_end ( indent , "DM_LP_WRITE_ROLESWITCH_POLICY_REQ" );
    return rv;
}
a_string display_DM_SM_AUTHORISE_RSP_pdu ( int indent , const DM_SM_AUTHORISE_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_AUTHORISE_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_bool ( indent + 1 , "incoming" , prim.get_incoming() );
    rv += policy->display_uint16 ( indent + 1 , "authorisation" , prim.get_authorisation() );
    rv += policy->display_prim_end ( indent , "DM_SM_AUTHORISE_RSP" );
    return rv;
}
a_string display_DM_HCI_ULP_TEST_END_REQ_pdu ( int indent , const DM_HCI_ULP_TEST_END_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_TEST_END_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_TEST_END_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM_pdu ( int indent , const DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "class_mode" , prim.get_class_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_TX_POWER_LEVEL_CFM_pdu ( int indent , const DM_HCI_READ_TX_POWER_LEVEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_TX_POWER_LEVEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_int8 ( indent + 1 , "pwr_level" , prim.get_pwr_level() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_TX_POWER_LEVEL_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_CHANNEL_MAP_REQ_pdu ( int indent , const DM_HCI_ULP_READ_CHANNEL_MAP_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_CHANNEL_MAP_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_CHANNEL_MAP_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ_pdu ( int indent , const DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ" );
    return rv;
}
a_string display_DM_HCI_GET_LINK_QUALITY_CFM_pdu ( int indent , const DM_HCI_GET_LINK_QUALITY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_GET_LINK_QUALITY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "link_quality" , prim.get_link_quality() );
    rv += policy->display_prim_end ( indent , "DM_HCI_GET_LINK_QUALITY_CFM" );
    return rv;
}
a_string display_DM_HCI_FLOW_SPEC_REQ_pdu ( int indent , const DM_HCI_FLOW_SPEC_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_FLOW_SPEC_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "flow_direction" , prim.get_flow_direction() );
    rv += policy->display_uint8 ( indent + 1 , "service_type" , prim.get_service_type() );
    rv += policy->display_uint32 ( indent + 1 , "token_rate" , prim.get_token_rate() );
    rv += policy->display_uint32 ( indent + 1 , "token_bucket_size" , prim.get_token_bucket_size() );
    rv += policy->display_uint32 ( indent + 1 , "peak_bandwidth" , prim.get_peak_bandwidth() );
    rv += policy->display_uint32 ( indent + 1 , "access_latency" , prim.get_access_latency() );
    rv += policy->display_prim_end ( indent , "DM_HCI_FLOW_SPEC_REQ" );
    return rv;
}
a_string display_DM_SM_BONDING_REQ_pdu ( int indent , const DM_SM_BONDING_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_BONDING_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_SM_BONDING_REQ" );
    return rv;
}
a_string display_DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM_pdu ( int indent , const DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "permanent_address_type" , prim.get_permanent_address_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "static_addrt" , prim.get_static_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "privacy" , prim.get_privacy() );
    rv += policy->display_prim_end ( indent , "DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM" );
    return rv;
}
a_string display_DM_HCI_INQUIRY_CFM_pdu ( int indent , const DM_HCI_INQUIRY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_INQUIRY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_INQUIRY_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_TRANSMITTER_TEST_CFM_pdu ( int indent , const DM_HCI_ULP_TRANSMITTER_TEST_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_TRANSMITTER_TEST_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_TRANSMITTER_TEST_CFM" );
    return rv;
}
a_string display_DM_SM_LINK_KEY_REQUEST_RSP_pdu ( int indent , const DM_SM_LINK_KEY_REQUEST_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_LINK_KEY_REQUEST_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "key_type" , prim.get_key_type() );
    {
        size_t n = 0;

        if (prim.get_key().get_data() != 0)
            n = 16;

        rv += policy->display_uint8Array ( indent + 1 , "key" , prim.get_key().get_data() , n );
    }
    rv += policy->display_prim_end ( indent , "DM_SM_LINK_KEY_REQUEST_RSP" );
    return rv;
}
a_string display_DM_HCI_ULP_ADVERTISING_REPORT_IND_pdu ( int indent , const DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_ADVERTISING_REPORT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "num_reports" , prim.get_num_reports() );
    rv += policy->display_uint8 ( indent + 1 , "event_type" , prim.get_event_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "current_addrt" , prim.get_current_addrt() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "permanent_addrt" , prim.get_permanent_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "length_data" , prim.get_length_data() );
    if (prim.get_length_data() == 0)
        rv += policy->display_text ( indent + 1 , "data = NULL\n" );
    else
    {
        uint8 data[31];
        prim.get_data(data);
        rv += policy->display_uint8Array ( indent + 1 , "data" , data, prim.get_length_data()) ;
    }
    rv += policy->display_int8 ( indent + 1 , "rssi" , prim.get_rssi() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_ADVERTISING_REPORT_IND" );
    return rv;
}
a_string display_DM_AMPM_CONNECT_RSP_pdu ( int indent , const DM_AMPM_CONNECT_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_CONNECT_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_uint16 ( indent + 1 , "remote_amp_id" , prim.get_remote_amp_id() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_CONNECT_RSP" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ_pdu ( int indent , const DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGESCAN_MODE_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGESCAN_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGESCAN_MODE_REQ" );
    return rv;
}
a_string display_DM_SM_AUTHORISE_IND_pdu ( int indent , const DM_SM_AUTHORISE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_AUTHORISE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_bool ( indent + 1 , "incoming" , prim.get_incoming() );
    rv += policy->display_prim_end ( indent , "DM_SM_AUTHORISE_IND" );
    return rv;
}
a_string display_DM_HCI_READ_NUM_SUPPORTED_IAC_REQ_pdu ( int indent , const DM_HCI_READ_NUM_SUPPORTED_IAC_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_NUM_SUPPORTED_IAC_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_NUM_SUPPORTED_IAC_REQ" );
    return rv;
}
a_string display_DM_LP_WRITE_ROLESWITCH_POLICY_CFM_pdu ( int indent , const DM_LP_WRITE_ROLESWITCH_POLICY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_LP_WRITE_ROLESWITCH_POLICY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_LP_WRITE_ROLESWITCH_POLICY_CFM" );
    return rv;
}
a_string display_DM_SM_LINK_KEY_REQUEST_IND_pdu ( int indent , const DM_SM_LINK_KEY_REQUEST_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_LINK_KEY_REQUEST_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_bool ( indent + 1 , "authenticated" , prim.get_authenticated() );
    rv += policy->display_bool ( indent + 1 , "initiated_outgoing" , prim.get_initiated_outgoing() );
    rv += policy->display_uint16 ( indent + 1 , "rhsf" , prim.get_rhsf() );
    rv += policy->display_prim_end ( indent , "DM_SM_LINK_KEY_REQUEST_IND" );
    return rv;
}
a_string display_DM_AMPM_CONNECT_IND_pdu ( int indent , const DM_AMPM_CONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_CONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_uint16 ( indent + 1 , "remote_amp_id" , prim.get_remote_amp_id() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_CONNECT_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_TEST_END_CFM_pdu ( int indent , const DM_HCI_ULP_TEST_END_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_TEST_END_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "number_of_packets" , prim.get_number_of_packets() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_TEST_END_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_CHANNEL_MAP_CFM_pdu ( int indent , const DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_CHANNEL_MAP_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8Array ( indent + 1 , "ulp_channel_map" , prim.get_ulp_channel_map().get_ptr() , 5 );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_CHANNEL_MAP_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM_pdu ( int indent , const DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "default_lps" , prim.get_default_lps() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM" );
    return rv;
}
a_string display_DM_HCI_EXIT_SNIFF_MODE_REQ_pdu ( int indent , const DM_HCI_EXIT_SNIFF_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_EXIT_SNIFF_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_EXIT_SNIFF_MODE_REQ" );
    return rv;
}
a_string display_DM_SM_BONDING_CFM_pdu ( int indent , const DM_SM_BONDING_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_BONDING_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SM_BONDING_CFM" );
    return rv;
}
a_string display_DM_HCI_FLOW_SPEC_CFM_pdu ( int indent , const DM_HCI_FLOW_SPEC_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_FLOW_SPEC_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint8 ( indent + 1 , "flow_direction" , prim.get_flow_direction() );
    rv += policy->display_uint8 ( indent + 1 , "service_type" , prim.get_service_type() );
    rv += policy->display_uint32 ( indent + 1 , "token_rate" , prim.get_token_rate() );
    rv += policy->display_uint32 ( indent + 1 , "token_bucket_size" , prim.get_token_bucket_size() );
    rv += policy->display_uint32 ( indent + 1 , "peak_bandwidth" , prim.get_peak_bandwidth() );
    rv += policy->display_uint32 ( indent + 1 , "access_latency" , prim.get_access_latency() );
    rv += policy->display_prim_end ( indent , "DM_HCI_FLOW_SPEC_CFM" );
    return rv;
}
a_string display_DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ_pdu ( int indent , const DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint8 ( indent + 1 , "unused" , prim.get_unused() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "notification_type" , prim.get_notification_type() );
    rv += policy->display_prim_end ( indent , "DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ" );
    return rv;
}
a_string display_DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ_pdu ( int indent , const DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_prim_end ( indent , "DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ" );
    return rv;
}
a_string display_DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ_pdu ( int indent , const DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ_pdu ( int indent , const DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "default_lps" , prim.get_default_lps() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_pdu ( int indent , const DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8Array ( indent + 1 , "feature_set" , prim.get_feature_set().get_ptr() , 8 );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGESCAN_MODE_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGESCAN_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGESCAN_MODE_CFM" );
    return rv;
}
a_string display_DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP_pdu ( int indent , const DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP" );
    return rv;
}
a_string display_DM_AMPM_READ_DATA_BLOCK_SIZE_RSP_pdu ( int indent , const DM_AMPM_READ_DATA_BLOCK_SIZE_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_READ_DATA_BLOCK_SIZE_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_bool ( indent + 1 , "fragmentable" , prim.get_fragmentable() );
    rv += policy->display_uint16 ( indent + 1 , "max_pdu_length" , prim.get_max_pdu_length() );
    rv += policy->display_uint16 ( indent + 1 , "max_acl_data_packet_length" , prim.get_max_acl_data_packet_length() );
    rv += policy->display_uint16 ( indent + 1 , "data_block_length" , prim.get_data_block_length() );
    rv += policy->display_uint16 ( indent + 1 , "total_num_data_blocks" , prim.get_total_num_data_blocks() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_READ_DATA_BLOCK_SIZE_RSP" );
    return rv;
}
a_string display_DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "activity" , prim.get_activity() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ" );
    return rv;
}
a_string display_DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_pdu ( int indent , const DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8Array ( indent + 1 , "host_features" , prim.get_host_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND" );
    return rv;
}
a_string display_DM_SYNC_CONNECT_COMPLETE_IND_pdu ( int indent , const DM_SYNC_CONNECT_COMPLETE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_CONNECT_COMPLETE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "link_type" , prim.get_link_type() );
    rv += policy->display_uint8 ( indent + 1 , "tx_interval" , prim.get_tx_interval() );
    rv += policy->display_uint8 ( indent + 1 , "wesco" , prim.get_wesco() );
    rv += policy->display_uint16 ( indent + 1 , "rx_packet_length" , prim.get_rx_packet_length() );
    rv += policy->display_uint16 ( indent + 1 , "tx_packet_length" , prim.get_tx_packet_length() );
    rv += policy->display_uint8 ( indent + 1 , "air_mode" , prim.get_air_mode() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_CONNECT_COMPLETE_IND" );
    return rv;
}
a_string display_DM_HCI_READ_NUM_SUPPORTED_IAC_CFM_pdu ( int indent , const DM_HCI_READ_NUM_SUPPORTED_IAC_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_NUM_SUPPORTED_IAC_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "num" , prim.get_num() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_NUM_SUPPORTED_IAC_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "inqscan_interval" , prim.get_inqscan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "inqscan_window" , prim.get_inqscan_window() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ" );
    return rv;
}
a_string display_DM_AM_REGISTER_WRONG_API_REQ_pdu ( int indent , const DM_AM_REGISTER_WRONG_API_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AM_REGISTER_WRONG_API_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "DM_AM_REGISTER_WRONG_API_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_COUNTRY_CODE_REQ_pdu ( int indent , const DM_HCI_READ_COUNTRY_CODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_COUNTRY_CODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_COUNTRY_CODE_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_pdu ( int indent , const DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_PDU& prim , PDU_displayer * policy )
{
    uint24 iac_laps[96]; // plenty (256/3 = 85).
    for ( int i = 0 ; i < prim.get_num_current_iac() ; ++i )
        iac_laps[i] = prim.get_iac_lap (i);
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_CURRENT_IAC_LAP_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_current_iac" , prim.get_num_current_iac() );
    rv += policy->display_uint24Array ( indent + 1 , "iac_lap" , iac_laps , prim.get_num_current_iac() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_CURRENT_IAC_LAP_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_BD_ADDR_REQ_pdu ( int indent , const DM_HCI_READ_BD_ADDR_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_BD_ADDR_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_BD_ADDR_REQ" );
    return rv;
}
a_string display_DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM_pdu ( int indent , const DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_SUPPORTED_STATES_REQ_pdu ( int indent , const DM_HCI_ULP_READ_SUPPORTED_STATES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_SUPPORTED_STATES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_SUPPORTED_STATES_REQ" );
    return rv;
}
a_string display_DM_AMPM_READ_DATA_BLOCK_SIZE_IND_pdu ( int indent , const DM_AMPM_READ_DATA_BLOCK_SIZE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_READ_DATA_BLOCK_SIZE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_READ_DATA_BLOCK_SIZE_IND" );
    return rv;
}
a_string display_DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM_pdu ( int indent , const DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM_pdu ( int indent , const DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM" );
    return rv;
}
a_string display_DM_SYNC_CONNECT_RSP_pdu ( int indent , const DM_SYNC_CONNECT_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_CONNECT_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "response" , prim.get_response() );
    rv += policy->display_uint16 ( indent + 1 , "max_latency" , prim.get_max_latency() );
    rv += policy->display_uint16 ( indent + 1 , "retx_effort" , prim.get_retx_effort() );
    rv += policy->display_uint16 ( indent + 1 , "packet_type" , prim.get_packet_type() );
    rv += policy->display_uint16 ( indent + 1 , "voice_settings" , prim.get_voice_settings() );
    rv += policy->display_uint32 ( indent + 1 , "tx_bdw" , prim.get_tx_bdw() );
    rv += policy->display_uint32 ( indent + 1 , "rx_bdw" , prim.get_rx_bdw() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_CONNECT_RSP" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ_pdu ( int indent , const DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "random_address" , prim.get_random_address() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ" );
    return rv;
}
a_string display_DM_SM_ADD_DEVICE_REQ_pdu ( int indent , const DM_SM_ADD_DEVICE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_ADD_DEVICE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "privacy" , prim.get_privacy() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "reconnection_bd_addr" , prim.get_reconnection_bd_addr() );
    rv += policy->display_DM_SM_TRUST_T ( indent + 1 , "trust" , prim.get_trust() );
    rv += policy->display_uint16 ( indent + 1 , "security_requirements" , prim.get_security_requirements() );
    rv += policy->display_uint16 ( indent + 1 , "encryption_key_size" , prim.get_encryption_key_size() );
    rv += policy->display_uint16 ( indent + 1 , "present" , prim.get_present() );
    {
        DM_SM_RFCLI_UKEY_T u[DM_SM_MAX_NUM_KEYS];
        prim.get_u(u);
        rv += policy->display_DM_SM_UKEY_T_array ( indent + 1 , "u" , prim.get_present(), u);
    }
    rv += policy->display_prim_end ( indent , "DM_SM_ADD_DEVICE_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_PIN_TYPE_REQ_pdu ( int indent , const DM_HCI_WRITE_PIN_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PIN_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "pin_type" , prim.get_pin_type() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PIN_TYPE_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM" );
    return rv;
}
a_string display_DM_SYNC_CONNECT_IND_pdu ( int indent , const DM_SYNC_CONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_CONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "link_type" , prim.get_link_type() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_CONNECT_IND" );
    return rv;
}
a_string display_DM_AM_REGISTER_WRONG_API_CFM_pdu ( int indent , const DM_AM_REGISTER_WRONG_API_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AM_REGISTER_WRONG_API_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "DM_AM_REGISTER_WRONG_API_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_COUNTRY_CODE_CFM_pdu ( int indent , const DM_HCI_READ_COUNTRY_CODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_COUNTRY_CODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "country_code" , prim.get_country_code() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_COUNTRY_CODE_CFM" );
    return rv;
}
a_string display_DM_HCI_REMOTE_NAME_REQUEST_REQ_pdu ( int indent , const DM_HCI_REMOTE_NAME_REQUEST_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_REMOTE_NAME_REQUEST_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_rep_mode" , prim.get_page_scan_rep_mode() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_mode" , prim.get_page_scan_mode() );
    rv += policy->display_uint16 ( indent + 1 , "clock_offset" , prim.get_clock_offset() );
    rv += policy->display_prim_end ( indent , "DM_HCI_REMOTE_NAME_REQUEST_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_CURRENT_IAC_LAP_CFM_pdu ( int indent , const DM_HCI_WRITE_CURRENT_IAC_LAP_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_CURRENT_IAC_LAP_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_CURRENT_IAC_LAP_CFM" );
    return rv;
}
a_string display_DM_HCI_REFRESH_ENCRYPTION_KEY_IND_pdu ( int indent , const DM_HCI_REFRESH_ENCRYPTION_KEY_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_REFRESH_ENCRYPTION_KEY_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_HCI_REFRESH_ENCRYPTION_KEY_IND" );
    return rv;
}
a_string display_DM_HCI_READ_BD_ADDR_CFM_pdu ( int indent , const DM_HCI_READ_BD_ADDR_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_BD_ADDR_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_BD_ADDR_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_pdu ( int indent , const DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_SUPPORTED_STATES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8Array ( indent + 1 , "supported_states" , prim.get_supported_states().get_ptr() , 8 );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_SUPPORTED_STATES_CFM" );
    return rv;
}
a_string display_DM_AMPM_CONN_CHANNEL_RSP_pdu ( int indent , const DM_AMPM_CONN_CHANNEL_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_CONN_CHANNEL_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_uint8 ( indent + 1 , "physical_link_id" , prim.get_physical_link_id() );
    rv += policy->display_uint16 ( indent + 1 , "logical_link_id" , prim.get_logical_link_id() );
    rv += policy->display_uint16 ( indent + 1 , "hci_data_queue" , prim.get_hci_data_queue() );
    rv += policy->display_uint8 ( indent + 1 , "fs_identifier" , prim.get_fs_identifier() );
    rv += policy->display_uint8 ( indent + 1 , "fs_service_type" , prim.get_fs_service_type() );
    rv += policy->display_uint16 ( indent + 1 , "fs_max_sdu" , prim.get_fs_max_sdu() );
    rv += policy->display_uint32 ( indent + 1 , "fs_interarrival" , prim.get_fs_interarrival() );
    rv += policy->display_uint32 ( indent + 1 , "fs_latency" , prim.get_fs_latency() );
    rv += policy->display_uint32 ( indent + 1 , "fs_flush_to" , prim.get_fs_flush_to() );
    rv += policy->display_uint8 ( indent + 1 , "rx_fs_identifier" , prim.get_rx_fs_identifier() );
    rv += policy->display_uint8 ( indent + 1 , "rx_fs_service_type" , prim.get_rx_fs_service_type() );
    rv += policy->display_uint16 ( indent + 1 , "rx_fs_max_sdu" , prim.get_rx_fs_max_sdu() );
    rv += policy->display_uint32 ( indent + 1 , "rx_fs_interarrival" , prim.get_rx_fs_interarrival() );
    rv += policy->display_uint32 ( indent + 1 , "rx_fs_latency" , prim.get_rx_fs_latency() );
    rv += policy->display_uint32 ( indent + 1 , "rx_fs_flush_to" , prim.get_rx_fs_flush_to() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_CONN_CHANNEL_RSP" );
    return rv;
}
a_string display_DM_HCI_CHANGE_CONN_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_CHANGE_CONN_LINK_KEY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CHANGE_CONN_LINK_KEY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CHANGE_CONN_LINK_KEY_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM_pdu ( int indent , const DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_PAGE_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_READ_PAGE_TIMEOUT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGE_TIMEOUT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGE_TIMEOUT_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_RSSI_REQ_pdu ( int indent , const DM_HCI_READ_RSSI_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_RSSI_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_RSSI_REQ" );
    return rv;
}
a_string display_DM_SM_ADD_DEVICE_CFM_pdu ( int indent , const DM_SM_ADD_DEVICE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_ADD_DEVICE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SM_ADD_DEVICE_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_PIN_TYPE_CFM_pdu ( int indent , const DM_HCI_WRITE_PIN_TYPE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PIN_TYPE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PIN_TYPE_CFM" );
    return rv;
}
a_string display_DM_HCI_INQUIRY_RESULT_IND_pdu ( int indent , const DM_HCI_INQUIRY_RESULT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string results;
    char str[32] = "inquiry_result_";
    for ( int i = 0 ; i < prim.get_num_responses() ; ++i )
    {
        sprintf ( str+15 , "%d" , i );
        results += policy->display_InquiryResult ( indent + 1 , str , prim.get_result ( i ) );
    }
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_INQUIRY_RESULT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += results;
    rv += policy->display_prim_end ( indent , "DM_HCI_INQUIRY_RESULT_IND" );
    return rv;
}
a_string display_DM_LP_WRITE_POWERSTATES_REQ_pdu ( int indent , const DM_LP_WRITE_POWERSTATES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_LP_WRITE_POWERSTATES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "num_states" , prim.get_num_states() );
    for ( int index = 0 ; index != prim.get_num_states() ; index ++ )
	{
        char str[32];
		sprintf (str, "power_state_%d" , index );
        rv += policy->display_lp_powerstate( indent + 1, str, prim.get_states(index) );
	}
    rv += policy->display_prim_end ( indent , "DM_LP_WRITE_POWERSTATES_REQ" );
    return rv;
}
a_string display_DM_AMPM_CONN_CHANNEL_IND_pdu ( int indent , const DM_AMPM_CONN_CHANNEL_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_CONN_CHANNEL_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_uint8 ( indent + 1 , "fs_identifier" , prim.get_fs_identifier() );
    rv += policy->display_uint8 ( indent + 1 , "fs_service_type" , prim.get_fs_service_type() );
    rv += policy->display_uint16 ( indent + 1 , "fs_max_sdu" , prim.get_fs_max_sdu() );
    rv += policy->display_uint32 ( indent + 1 , "fs_interarrival" , prim.get_fs_interarrival() );
    rv += policy->display_uint32 ( indent + 1 , "fs_latency" , prim.get_fs_latency() );
    rv += policy->display_uint32 ( indent + 1 , "fs_flush_to" , prim.get_fs_flush_to() );
    rv += policy->display_uint8 ( indent + 1 , "rx_fs_identifier" , prim.get_rx_fs_identifier() );
    rv += policy->display_uint8 ( indent + 1 , "rx_fs_service_type" , prim.get_rx_fs_service_type() );
    rv += policy->display_uint16 ( indent + 1 , "rx_fs_max_sdu" , prim.get_rx_fs_max_sdu() );
    rv += policy->display_uint32 ( indent + 1 , "rx_fs_interarrival" , prim.get_rx_fs_interarrival() );
    rv += policy->display_uint32 ( indent + 1 , "rx_fs_latency" , prim.get_rx_fs_latency() );
    rv += policy->display_uint32 ( indent + 1 , "rx_fs_flush_to" , prim.get_rx_fs_flush_to() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_CONN_CHANNEL_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "scan_type" , prim.get_scan_type() );
    rv += policy->display_uint16 ( indent + 1 , "scan_interval" , prim.get_scan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "scan_window" , prim.get_scan_window() );
    rv += policy->display_uint8 ( indent + 1 , "own_address_type" , prim.get_own_address_type() );
    rv += policy->display_uint8 ( indent + 1 , "scanning_filter_policy" , prim.get_scanning_filter_policy() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ" );
    return rv;
}
a_string display_DM_HCI_CHANGE_CONN_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_CHANGE_CONN_LINK_KEY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CHANGE_CONN_LINK_KEY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CHANGE_CONN_LINK_KEY_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_ENCRYPT_REQ_pdu ( int indent , const DM_HCI_ULP_ENCRYPT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_ENCRYPT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8Array ( indent + 1 , "aes_key" , prim.get_aes_key().get_str(), 16 );
    rv += policy->display_uint8Array ( indent + 1 , "plaintext_data" , prim.get_plaintext_data().get_str(), 16 );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_ENCRYPT_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_PAGE_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_READ_PAGE_TIMEOUT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGE_TIMEOUT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "page_timeout" , prim.get_page_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGE_TIMEOUT_CFM" );
    return rv;
}
a_string display_DM_SM_SECURITY_IND_pdu ( int indent , const DM_SM_SECURITY_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_SECURITY_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "connection_flags" , prim.get_connection_flags() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "security_requirements" , prim.get_security_requirements() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SM_SECURITY_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ_pdu ( int indent , const DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ" );
    return rv;
}
a_string display_DM_AMPM_REMOTE_FEATURES_IND_pdu ( int indent , const DM_AMPM_REMOTE_FEATURES_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_REMOTE_FEATURES_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_REMOTE_FEATURES_IND" );
    return rv;
}
a_string display_DM_HCI_READ_CLOCK_OFFSET_REQ_pdu ( int indent , const DM_HCI_READ_CLOCK_OFFSET_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CLOCK_OFFSET_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CLOCK_OFFSET_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_RSSI_CFM_pdu ( int indent , const DM_HCI_READ_RSSI_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_RSSI_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_int8 ( indent + 1 , "rssi" , prim.get_rssi() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_RSSI_CFM" );
    return rv;
}
a_string display_DM_LP_WRITE_POWERSTATES_CFM_pdu ( int indent , const DM_LP_WRITE_POWERSTATES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_LP_WRITE_POWERSTATES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "result" , prim.get_result() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_LP_WRITE_POWERSTATES_CFM" );
    return rv;
}
a_string display_DM_HCI_CREATE_NEW_UNIT_KEY_REQ_pdu ( int indent , const DM_HCI_CREATE_NEW_UNIT_KEY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CREATE_NEW_UNIT_KEY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CREATE_NEW_UNIT_KEY_REQ" );
    return rv;
}
a_string display_DM_HCI_HOLD_MODE_REQ_pdu ( int indent , const DM_HCI_HOLD_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_HOLD_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "max_interval" , prim.get_max_interval() );
    rv += policy->display_uint16 ( indent + 1 , "min_interval" , prim.get_min_interval() );
    rv += policy->display_prim_end ( indent , "DM_HCI_HOLD_MODE_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGE_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGE_TIMEOUT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGE_TIMEOUT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "page_timeout" , prim.get_page_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGE_TIMEOUT_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_CLEAR_WHITE_LIST_REQ_pdu ( int indent , const DM_HCI_ULP_CLEAR_WHITE_LIST_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_CLEAR_WHITE_LIST_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_CLEAR_WHITE_LIST_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LOCAL_NAME_REQ_pdu ( int indent , const DM_HCI_READ_LOCAL_NAME_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LOCAL_NAME_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LOCAL_NAME_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "activity" , prim.get_activity() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM" );
    return rv;
}
a_string display_DM_HCI_CONN_PACKET_TYPE_CHANGED_IND_pdu ( int indent , const DM_HCI_CONN_PACKET_TYPE_CHANGED_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CONN_PACKET_TYPE_CHANGED_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CONN_PACKET_TYPE_CHANGED_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_ENCRYPT_CFM_pdu ( int indent , const DM_HCI_ULP_ENCRYPT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_ENCRYPT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8Array ( indent + 1 , "encrypted_data" , prim.get_encrypted_data().get_ptr(), 16 );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_ENCRYPT_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_NUM_BCAST_RETXS_REQ_pdu ( int indent , const DM_HCI_READ_NUM_BCAST_RETXS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_NUM_BCAST_RETXS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_NUM_BCAST_RETXS_REQ" );
    return rv;
}
a_string display_DM_ACL_OPENED_IND_pdu ( int indent , const DM_ACL_OPENED_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_ACL_OPENED_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval" , prim.get_conn_interval() );
    rv += policy->display_uint16 ( indent + 1 , "conn_latency" , prim.get_conn_latency() );
    rv += policy->display_uint16 ( indent + 1 , "supervision_timeout" , prim.get_supervision_timeout() );
    rv += policy->display_uint8 ( indent + 1 , "clock_accuracy" , prim.get_clock_accuracy() );
    rv += policy->display_prim_end ( indent , "DM_ACL_OPENED_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM_pdu ( int indent , const DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "white_list_size" , prim.get_white_list_size() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_CLOCK_OFFSET_CFM_pdu ( int indent , const DM_HCI_READ_CLOCK_OFFSET_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CLOCK_OFFSET_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "clock_offset" , prim.get_clock_offset() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CLOCK_OFFSET_CFM" );
    return rv;
}
a_string display_DM_AMPM_SIMPLE_PAIRING_ENABLED_IND_pdu ( int indent , const DM_AMPM_SIMPLE_PAIRING_ENABLED_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_SIMPLE_PAIRING_ENABLED_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_SIMPLE_PAIRING_ENABLED_IND" );
    return rv;
}
a_string display_DM_SYNC_RENEGOTIATE_REQ_pdu ( int indent , const DM_SYNC_RENEGOTIATE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_RENEGOTIATE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    DMSyncConfig config = prim.get_config();

    rv += policy->display_prim_start (indent + 1, "u:" )
        + policy->display_uint16 ( indent + 2 , "max_latency", config.max_latency() )
        + policy->display_uint16 ( indent + 2 , "retx_effort", config.retx_effort() )
        + policy->display_uint16 ( indent + 2 , "packet_type", config.packet_type() )
        + policy->display_uint16 ( indent + 2 , "voice_settings", config.voice_settings() )
        + policy->display_uint32 ( indent + 2 , "tx_bdw", config.tx_bdw() )
        + policy->display_uint32 ( indent + 2 , "rx_bdw", config.rx_bdw() )
        + policy->display_prim_end (0, "");
    rv += policy->display_prim_end ( indent , "DM_SYNC_RENEGOTIATE_REQ" );
    return rv;
}
a_string display_DM_HCI_CHANGE_CONN_PKT_TYPE_REQ_pdu ( int indent , const DM_HCI_CHANGE_CONN_PKT_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CHANGE_CONN_PKT_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint16 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CHANGE_CONN_PKT_TYPE_REQ" );
    return rv;
}
a_string display_DM_HCI_CREATE_NEW_UNIT_KEY_CFM_pdu ( int indent , const DM_HCI_CREATE_NEW_UNIT_KEY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CREATE_NEW_UNIT_KEY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CREATE_NEW_UNIT_KEY_CFM" );
    return rv;
}
a_string display_DM_ACL_CLOSED_IND_pdu ( int indent , const DM_ACL_CLOSED_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_ACL_CLOSED_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_ACL_CLOSED_IND" );
    return rv;
}
a_string display_DM_WRITE_CACHED_PAGE_MODE_REQ_pdu ( int indent , const DM_WRITE_CACHED_PAGE_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_WRITE_CACHED_PAGE_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_mode" , prim.get_page_scan_mode() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_rep_mode" , prim.get_page_scan_rep_mode() );
    rv += policy->display_prim_end ( indent , "DM_WRITE_CACHED_PAGE_MODE_REQ" );
    return rv;
}
a_string display_DM_SM_KEYPRESS_NOTIFICATION_IND_pdu ( int indent , const DM_SM_KEYPRESS_NOTIFICATION_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_KEYPRESS_NOTIFICATION_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "notification_type" , prim.get_notification_type() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_SM_KEYPRESS_NOTIFICATION_IND" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGE_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_WRITE_PAGE_TIMEOUT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGE_TIMEOUT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGE_TIMEOUT_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "scan_response_data_len" , prim.get_scan_response_data_len() );
    if (prim.get_scan_response_data_len() == 0)
        rv += policy->display_text ( indent + 1 , "scan_response_data = NULL\n" );
    else
    {
        uint8 data[31];
        prim.get_scan_response_data(data);
        rv += policy->display_uint8Array ( indent + 1 , "scan_response_data" , data, prim.get_scan_response_data_len()) ;
    }
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_CLEAR_WHITE_LIST_CFM_pdu ( int indent , const DM_HCI_ULP_CLEAR_WHITE_LIST_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_CLEAR_WHITE_LIST_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_CLEAR_WHITE_LIST_CFM" );
    return rv;
}
a_string display_DM_SET_BLE_CONNECTION_PARAMETERS_REQ_pdu ( int indent , const DM_SET_BLE_CONNECTION_PARAMETERS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SET_BLE_CONNECTION_PARAMETERS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "scan_interval" , prim.get_scan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "scan_window" , prim.get_scan_window() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval_min" , prim.get_conn_interval_min() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval_max" , prim.get_conn_interval_max() );
    rv += policy->display_uint16 ( indent + 1 , "conn_latency" , prim.get_conn_latency() );
    rv += policy->display_uint16 ( indent + 1 , "supervision_timeout" , prim.get_supervision_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "conn_attempt_timeout" , prim.get_conn_attempt_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "adv_interval_min" , prim.get_adv_interval_min() );
    rv += policy->display_uint16 ( indent + 1 , "adv_interval_max" , prim.get_adv_interval_max() );
    rv += policy->display_uint16 ( indent + 1 , "conn_latency_max" , prim.get_conn_latency_max() );
    rv += policy->display_uint16 ( indent + 1 , "supervision_timeout_min" , prim.get_supervision_timeout_min() );
    rv += policy->display_uint16 ( indent + 1 , "supervision_timeout_max" , prim.get_supervision_timeout_max() );
    rv += policy->display_prim_end ( indent , "DM_SET_BLE_CONNECTION_PARAMETERS_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LOCAL_NAME_CFM_pdu ( int indent , const DM_HCI_READ_LOCAL_NAME_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LOCAL_NAME_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_name ( indent + 1 , "name_part" , prim.get_name_part().get_str() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LOCAL_NAME_CFM" );
    return rv;
}
a_string display_DM_SYNC_DISCONNECT_IND_pdu ( int indent , const DM_SYNC_DISCONNECT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_DISCONNECT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_DISCONNECT_IND" );
    return rv;
}
a_string display_DM_SM_REGISTER_REQ_pdu ( int indent , const DM_SM_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_bool ( indent + 1 , "outgoing_ok" , prim.get_outgoing_ok() );
    rv += policy->display_uint16 ( indent + 1 , "security_level" , prim.get_security_level() );
    rv += policy->display_prim_end ( indent , "DM_SM_REGISTER_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_SCAN_ENABLE_REQ_pdu ( int indent , const DM_HCI_READ_SCAN_ENABLE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_SCAN_ENABLE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_SCAN_ENABLE_REQ" );
    return rv;
}
a_string display_DM_HCI_SNIFF_SUB_RATING_IND_pdu ( int indent , const DM_HCI_SNIFF_SUB_RATING_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SNIFF_SUB_RATING_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "transmit_latency" , prim.get_transmit_latency() );
    rv += policy->display_uint16 ( indent + 1 , "receive_latency" , prim.get_receive_latency() );
    rv += policy->display_uint16 ( indent + 1 , "remote_timeout" , prim.get_remote_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "local_timeout" , prim.get_local_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SNIFF_SUB_RATING_IND" );
    return rv;
}
a_string display_DM_HCI_READ_NUM_BCAST_RETXS_CFM_pdu ( int indent , const DM_HCI_READ_NUM_BCAST_RETXS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_NUM_BCAST_RETXS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "num" , prim.get_num() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_NUM_BCAST_RETXS_CFM" );
    return rv;
}
a_string display_DM_SYNC_RENEGOTIATE_CFM_pdu ( int indent , const DM_SYNC_RENEGOTIATE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_RENEGOTIATE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "tx_interval" , prim.get_tx_interval() );
    rv += policy->display_uint8 ( indent + 1 , "wesco" , prim.get_wesco() );
    rv += policy->display_uint16 ( indent + 1 , "rx_packet_length" , prim.get_rx_packet_length() );
    rv += policy->display_uint16 ( indent + 1 , "tx_packet_length" , prim.get_tx_packet_length() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_RENEGOTIATE_CFM" );
    return rv;
}
a_string display_DM_HCI_ENHANCED_FLUSH_REQ_pdu ( int indent , const DM_HCI_ENHANCED_FLUSH_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ENHANCED_FLUSH_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "pkt_type" , prim.get_pkt_type() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ENHANCED_FLUSH_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND_pdu ( int indent , const DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval" , prim.get_conn_interval() );
    rv += policy->display_uint16 ( indent + 1 , "conn_latency" , prim.get_conn_latency() );
    rv += policy->display_uint16 ( indent + 1 , "supervision_timeout" , prim.get_supervision_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND" );
    return rv;
}
a_string display_DM_WRITE_CACHED_PAGE_MODE_CFM_pdu ( int indent , const DM_WRITE_CACHED_PAGE_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_WRITE_CACHED_PAGE_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_WRITE_CACHED_PAGE_MODE_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM" );
    return rv;
}
a_string display_DM_SM_ACCESS_REQ_pdu ( int indent , const DM_SM_ACCESS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_ACCESS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_bool ( indent + 1 , "incoming" , prim.get_incoming() );
    rv += policy->display_uint32 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_prim_end ( indent , "DM_SM_ACCESS_REQ" );
    return rv;
}
a_string display_DM_SET_BLE_CONNECTION_PARAMETERS_CFM_pdu ( int indent , const DM_SET_BLE_CONNECTION_PARAMETERS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SET_BLE_CONNECTION_PARAMETERS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SET_BLE_CONNECTION_PARAMETERS_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ_pdu ( int indent , const DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "link_policy_settings" , prim.get_link_policy_settings() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ" );
    return rv;
}
a_string display_DM_SM_REGISTER_CFM_pdu ( int indent , const DM_SM_REGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_REGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_bool ( indent + 1 , "outgoing_ok" , prim.get_outgoing_ok() );
    rv += policy->display_uint16 ( indent + 1 , "security_level" , prim.get_security_level() );
    rv += policy->display_prim_end ( indent , "DM_SM_REGISTER_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_SCAN_ENABLE_CFM_pdu ( int indent , const DM_HCI_READ_SCAN_ENABLE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_SCAN_ENABLE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "scan_enable" , prim.get_scan_enable() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_SCAN_ENABLE_CFM" );
    return rv;
}
a_string display_DM_HCI_LINK_SUPERV_TIMEOUT_IND_pdu ( int indent , const DM_HCI_LINK_SUPERV_TIMEOUT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_LINK_SUPERV_TIMEOUT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_LINK_SUPERV_TIMEOUT_IND" );
    return rv;
}
a_string display_DM_HCI_READ_REMOTE_VER_INFO_REQ_pdu ( int indent , const DM_HCI_READ_REMOTE_VER_INFO_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_REMOTE_VER_INFO_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_REMOTE_VER_INFO_REQ" );
    return rv;
}
a_string display_DM_HCI_ENHANCED_FLUSH_CFM_pdu ( int indent , const DM_HCI_ENHANCED_FLUSH_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ENHANCED_FLUSH_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ENHANCED_FLUSH_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_INQUIRY_MODE_REQ_pdu ( int indent , const DM_HCI_READ_INQUIRY_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_INQUIRY_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_INQUIRY_MODE_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ_pdu ( int indent , const DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "address_type" , prim.get_address_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "address" , prim.get_address() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ" );
    return rv;
}
a_string display_DM_AMPM_DISCONNECT_CHANNEL_RSP_pdu ( int indent , const DM_AMPM_DISCONNECT_CHANNEL_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_DISCONNECT_CHANNEL_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_DISCONNECT_CHANNEL_RSP" );
    return rv;
}
a_string display_DM_SM_ACCESS_CFM_pdu ( int indent , const DM_SM_ACCESS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_ACCESS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_bool ( indent + 1 , "incoming" , prim.get_incoming() );
    rv += policy->display_uint32 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SM_ACCESS_CFM" );
    return rv;
}
a_string display_DM_SM_READ_DEVICE_REQ_pdu ( int indent , const DM_SM_READ_DEVICE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_READ_DEVICE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_READ_DEVICE_REQ" );
    return rv;
}
a_string display_DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ_pdu ( int indent , const DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "operation" , prim.get_operation() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_RECEIVER_TEST_REQ_pdu ( int indent , const DM_HCI_ULP_RECEIVER_TEST_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_RECEIVER_TEST_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "rx_channel" , prim.get_rx_channel() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_RECEIVER_TEST_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM_pdu ( int indent , const DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM" );
    return rv;
}
a_string display_DM_AMPM_DISCONNECT_CHANNEL_IND_pdu ( int indent , const DM_AMPM_DISCONNECT_CHANNEL_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_DISCONNECT_CHANNEL_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "cid" , prim.get_cid() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_DISCONNECT_CHANNEL_IND" );
    return rv;
}
a_string display_DM_HCI_READ_REMOTE_VER_INFO_CFM_pdu ( int indent , const DM_HCI_READ_REMOTE_VER_INFO_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_REMOTE_VER_INFO_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "LMP_version" , prim.get_LMP_version() );
    rv += policy->display_uint16 ( indent + 1 , "manufacturer_name" , prim.get_manufacturer_name() );
    rv += policy->display_uint16 ( indent + 1 , "LMP_subversion" , prim.get_LMP_subversion() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_REMOTE_VER_INFO_CFM" );
    return rv;
}
a_string display_DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ_pdu ( int indent , const DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ" );
    return rv;
}
a_string display_DM_HCI_DELETE_STORED_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_DELETE_STORED_LINK_KEY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_DELETE_STORED_LINK_KEY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "flag" , prim.get_flag() );
    rv += policy->display_prim_end ( indent , "DM_HCI_DELETE_STORED_LINK_KEY_REQ" );
    return rv;
}
a_string display_DM_SM_IO_CAPABILITY_RESPONSE_IND_pdu ( int indent , const DM_SM_IO_CAPABILITY_RESPONSE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_IO_CAPABILITY_RESPONSE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "io_capability" , prim.get_io_capability() );
    rv += policy->display_uint8 ( indent + 1 , "oob_data_present" , prim.get_oob_data_present() );
    rv += policy->display_uint8 ( indent + 1 , "authentication_requirements" , prim.get_authentication_requirements() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "key_distribution" , prim.get_key_distribution() );
    rv += policy->display_prim_end ( indent , "DM_SM_IO_CAPABILITY_RESPONSE_IND" );
    return rv;
}
a_string display_DM_SM_IO_CAPABILITY_REQUEST_RSP_pdu ( int indent , const DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_IO_CAPABILITY_REQUEST_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "io_capability" , prim.get_io_capability() );
    rv += policy->display_uint8 ( indent + 1 , "oob_data_present" , prim.get_oob_data_present() );
    rv += policy->display_uint8 ( indent + 1 , "authentication_requirements" , prim.get_authentication_requirements() );
    {
        size_t n = 16;

        if (prim.get_oob_hash_c().get_data() == 0)
            n = 0;

        rv += policy->display_uint8Array ( indent + 1 , "oob_hash_c" , prim.get_oob_hash_c().get_data(), n );
    }
    {
        size_t n = 16;

        if (prim.get_oob_rand_r().get_data() == 0)
            n = 0;

        rv += policy->display_uint8Array ( indent + 1 , "oob_rand_r" , prim.get_oob_rand_r().get_data(), n );
    }
    rv += policy->display_uint16 ( indent + 1 , "key_distribution" , prim.get_key_distribution() );
    rv += policy->display_prim_end ( indent , "DM_SM_IO_CAPABILITY_REQUEST_RSP" );
    return rv;
}
a_string display_DM_HCI_READ_INQUIRY_MODE_CFM_pdu ( int indent , const DM_HCI_READ_INQUIRY_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_INQUIRY_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_INQUIRY_MODE_CFM" );
    return rv;
}
a_string display_DM_SM_REMOVE_DEVICE_REQ_pdu ( int indent , const DM_SM_REMOVE_DEVICE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_REMOVE_DEVICE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_REMOVE_DEVICE_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM_pdu ( int indent , const DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM" );
    return rv;
}
a_string display_DM_AMPM_DISCONNECT_REQ_pdu ( int indent , const DM_AMPM_DISCONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_DISCONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_uint8 ( indent + 1 , "active_links" , prim.get_active_links() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_DISCONNECT_REQ" );
    return rv;
}
a_string display_DM_SM_READ_DEVICE_CFM_pdu ( int indent , const DM_SM_READ_DEVICE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_READ_DEVICE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_DM_SM_TRUST_T ( indent + 1 , "trust" , prim.get_trust() );
    rv += policy->display_uint16 ( indent + 1 , "security_requirements" , prim.get_security_requirements() );
    rv += policy->display_uint16 ( indent + 1 , "encryption_key_size" , prim.get_encryption_key_size() );
    rv += policy->display_uint16 ( indent + 1 , "present" , prim.get_present() );
    {
        DM_SM_RFCLI_UKEY_T u[DM_SM_MAX_NUM_KEYS];
        prim.get_u(u);
        rv += policy->display_DM_SM_UKEY_T_array ( indent + 1 , "u" , prim.get_present(), u);
    }
    rv += policy->display_prim_end ( indent , "DM_SM_READ_DEVICE_CFM" );
    return rv;
}
a_string display_DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM_pdu ( int indent , const DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_RECEIVER_TEST_CFM_pdu ( int indent , const DM_HCI_ULP_RECEIVER_TEST_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_RECEIVER_TEST_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_RECEIVER_TEST_CFM" );
    return rv;
}
a_string display_DM_HCI_SET_EVENT_MASK_REQ_pdu ( int indent , const DM_HCI_SET_EVENT_MASK_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SET_EVENT_MASK_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_DMHCIEventMask ( indent + 1 , "event_mask" , prim.get_event_mask() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SET_EVENT_MASK_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LOCAL_EXT_FEATURES_REQ_pdu ( int indent , const DM_HCI_READ_LOCAL_EXT_FEATURES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LOCAL_EXT_FEATURES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "page_num" , prim.get_page_num() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LOCAL_EXT_FEATURES_REQ" );
    return rv;
}
a_string display_DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ_pdu ( int indent , const DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ" );
    return rv;
}
a_string display_DM_SM_IO_CAPABILITY_REQUEST_IND_pdu ( int indent , const DM_SM_IO_CAPABILITY_REQUEST_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_IO_CAPABILITY_REQUEST_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_SM_IO_CAPABILITY_REQUEST_IND" );
    return rv;
}
a_string display_DM_HCI_WRITE_INQUIRY_MODE_REQ_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_INQUIRY_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_INQUIRY_MODE_REQ" );
    return rv;
}
a_string display_DM_SM_KEY_REQUEST_RSP_pdu ( int indent , const DM_SM_KEY_REQUEST_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_KEY_REQUEST_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "security_requirements" , prim.get_security_requirements() );
    rv += policy->display_DM_SM_KEY_TYPE_T ( indent + 1 , "key_type" , prim.get_key_type() );
    {
        DM_SM_RFCLI_UKEY_T u;
        prim.get_key(&u);
        rv += policy->display_DM_SM_UKEY_T ( indent + 1 , "key" , prim.get_key_type(), u);
    }
    rv += policy->display_prim_end ( indent , "DM_SM_KEY_REQUEST_RSP" );
    return rv;
}
a_string display_DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM_pdu ( int indent , const DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM" );
    return rv;
}
a_string display_DM_HCI_DELETE_STORED_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_DELETE_STORED_LINK_KEY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_DELETE_STORED_LINK_KEY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "num_keys_deleted" , prim.get_num_keys_deleted() );
    rv += policy->display_prim_end ( indent , "DM_HCI_DELETE_STORED_LINK_KEY_CFM" );
    return rv;
}
a_string display_DM_SM_USER_PASSKEY_NOTIFICATION_IND_pdu ( int indent , const DM_SM_USER_PASSKEY_NOTIFICATION_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_USER_PASSKEY_NOTIFICATION_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint32 ( indent + 1 , "passkey" , prim.get_passkey() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_SM_USER_PASSKEY_NOTIFICATION_IND" );
    return rv;
}
a_string display_DM_SET_BT_VERSION_REQ_pdu ( int indent , const DM_SET_BT_VERSION_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SET_BT_VERSION_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint8 ( indent + 1 , "version" , prim.get_version() );
    rv += policy->display_prim_end ( indent , "DM_SET_BT_VERSION_REQ" );
    return rv;
}
a_string display_DM_HCI_RETURN_LINK_KEYS_IND_pdu ( int indent , const DM_HCI_RETURN_LINK_KEYS_IND_T_PDU& prim , PDU_displayer * policy )
{
    PDU_displayer::lb_element lb_array[16]; // plenty (256/22 = 11).
    uint8 key_count = prim.get_num_keys();
    for ( int i = 0 ; i < key_count ; ++i )
        prim.get_link_key_bd_addr ( i , lb_array[i].bd_addr , lb_array[i].key );
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_RETURN_LINK_KEYS_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "num_keys" , prim.get_num_keys() );
    rv += policy->display_link_key_bd_addrArray ( indent + 1 , "link_key_bd_addr" , lb_array , key_count );
    rv += policy->display_prim_end ( indent , "DM_HCI_RETURN_LINK_KEYS_IND" );
    return rv;
}
a_string display_DM_SM_ENCRYPTION_CHANGE_IND_pdu ( int indent , const DM_SM_ENCRYPTION_CHANGE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_ENCRYPTION_CHANGE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_bool ( indent + 1 , "encrypted" , prim.get_encrypted() );
    rv += policy->display_prim_end ( indent , "DM_SM_ENCRYPTION_CHANGE_IND" );
    return rv;
}
a_string display_DM_AMPM_VERIFY_PHYSICAL_LINK_RSP_pdu ( int indent , const DM_AMPM_VERIFY_PHYSICAL_LINK_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_VERIFY_PHYSICAL_LINK_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_bool ( indent + 1 , "exists" , prim.get_exists() );
    rv += policy->display_uint32 ( indent + 1 , "link_supervision_timeout" , prim.get_link_supervision_timeout() );
    rv += policy->display_uint32 ( indent + 1 , "best_effort_flush_timeout" , prim.get_best_effort_flush_timeout() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_VERIFY_PHYSICAL_LINK_RSP" );
    return rv;
}
a_string display_DM_SM_UNREGISTER_REQ_pdu ( int indent , const DM_SM_UNREGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_UNREGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_prim_end ( indent , "DM_SM_UNREGISTER_REQ" );
    return rv;
}
a_string display_DM_HCI_EXTENDED_INQUIRY_RESULT_IND_pdu ( int indent , const DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_EXTENDED_INQUIRY_RESULT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_rep_mode" , prim.get_page_scan_rep_mode() );
    rv += policy->display_uint8 ( indent + 1 , "page_scan_period_mode" , prim.get_page_scan_period_mode() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_uint16 ( indent + 1 , "clock_offset" , prim.get_clock_offset() );
    rv += policy->display_int8 ( indent + 1 , "rssi" , prim.get_rssi() );
    rv += policy->display_uint8Array( indent + 1 , "eir_data_part" , prim.get_eir_data_part().get_data() , prim.get_eir_data_part().get_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_EXTENDED_INQUIRY_RESULT_IND" );
    return rv;
}
a_string display_DM_SM_REMOVE_DEVICE_CFM_pdu ( int indent , const DM_SM_REMOVE_DEVICE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_REMOVE_DEVICE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SM_REMOVE_DEVICE_CFM" );
    return rv;
}
a_string display_DM_SM_CSRK_COUNTER_CHANGE_IND_pdu ( int indent , const DM_SM_CSRK_COUNTER_CHANGE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_CSRK_COUNTER_CHANGE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_bool ( indent + 1 , "local_csrk" , prim.get_local_csrk() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint32 ( indent + 1 , "counter" , prim.get_counter() );
    rv += policy->display_prim_end ( indent , "DM_SM_CSRK_COUNTER_CHANGE_IND" );
    return rv;
}
a_string display_DM_HCI_SNIFF_SUB_RATE_REQ_pdu ( int indent , const DM_HCI_SNIFF_SUB_RATE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SNIFF_SUB_RATE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "max_remote_latency" , prim.get_max_remote_latency() );
    rv += policy->display_uint16 ( indent + 1 , "min_remote_timeout" , prim.get_min_remote_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "min_local_timeout" , prim.get_min_local_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SNIFF_SUB_RATE_REQ" );
    return rv;
}
a_string display_DM_SM_KEY_REQUEST_IND_pdu ( int indent , const DM_SM_KEY_REQUEST_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_KEY_REQUEST_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "security_requirements" , prim.get_security_requirements() );
    rv += policy->display_DM_SM_KEY_TYPE_T ( indent + 1 , "key_type" , prim.get_key_type() );
    rv += policy->display_prim_end ( indent , "DM_SM_KEY_REQUEST_IND" );
    return rv;
}
a_string display_DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_pdu ( int indent , const DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LOCAL_EXT_FEATURES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "page_num" , prim.get_page_num() );
    rv += policy->display_uint8 ( indent + 1 , "max_page_num" , prim.get_max_page_num() );
    rv += policy->display_uint8Array ( indent + 1 , "lmp_ext_features" , prim.get_lmp_ext_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LOCAL_EXT_FEATURES_CFM" );
    return rv;
}
a_string display_DM_HCI_SET_EVENT_MASK_CFM_pdu ( int indent , const DM_HCI_SET_EVENT_MASK_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SET_EVENT_MASK_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SET_EVENT_MASK_CFM" );
    return rv;
}
a_string display_DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM_pdu ( int indent , const DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM" );
    return rv;
}
a_string display_DM_AMPM_READ_BD_ADDR_REQ_pdu ( int indent , const DM_AMPM_READ_BD_ADDR_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_READ_BD_ADDR_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_READ_BD_ADDR_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_INQUIRY_MODE_CFM_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_INQUIRY_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_INQUIRY_MODE_CFM" );
    return rv;
}
a_string display_DM_AMPM_VERIFY_PHYSICAL_LINK_IND_pdu ( int indent , const DM_AMPM_VERIFY_PHYSICAL_LINK_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_VERIFY_PHYSICAL_LINK_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "identifier" , prim.get_identifier() );
    rv += policy->display_uint16 ( indent + 1 , "local_amp_id" , prim.get_local_amp_id() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_VERIFY_PHYSICAL_LINK_IND" );
    return rv;
}
a_string display_DM_HCI_PERIODIC_INQUIRY_MODE_REQ_pdu ( int indent , const DM_HCI_PERIODIC_INQUIRY_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_PERIODIC_INQUIRY_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "max_period_length" , prim.get_max_period_length() );
    rv += policy->display_uint16 ( indent + 1 , "min_period_length" , prim.get_min_period_length() );
    rv += policy->display_uint24 ( indent + 1 , "lap" , prim.get_lap() );
    rv += policy->display_uint8 ( indent + 1 , "inquiry_length" , prim.get_inquiry_length() );
    rv += policy->display_uint8 ( indent + 1 , "num_responses" , prim.get_num_responses() );
    rv += policy->display_prim_end ( indent , "DM_HCI_PERIODIC_INQUIRY_MODE_REQ" );
    return rv;
}
a_string display_DM_HCI_CHANGE_LOCAL_NAME_REQ_pdu ( int indent , const DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CHANGE_LOCAL_NAME_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_name ( indent + 1 , "name_part" , prim.get_name_part().get_str() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CHANGE_LOCAL_NAME_REQ" );
    return rv;
}
a_string display_DM_SM_SIMPLE_PAIRING_COMPLETE_IND_pdu ( int indent , const DM_SM_SIMPLE_PAIRING_COMPLETE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_SIMPLE_PAIRING_COMPLETE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_SM_SIMPLE_PAIRING_COMPLETE_IND" );
    return rv;
}
a_string display_DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ_pdu ( int indent , const DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_STORED_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_READ_STORED_LINK_KEY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_STORED_LINK_KEY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "read_all" , prim.get_read_all() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_STORED_LINK_KEY_REQ" );
    return rv;
}
a_string display_DM_AM_REGISTER_REQ_pdu ( int indent , const DM_AM_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AM_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_AM_REGISTER_REQ" );
    return rv;
}
a_string display_DM_SET_BT_VERSION_CFM_pdu ( int indent , const DM_SET_BT_VERSION_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SET_BT_VERSION_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "version" , prim.get_version() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SET_BT_VERSION_CFM" );
    return rv;
}
a_string display_DM_SM_UNREGISTER_CFM_pdu ( int indent , const DM_SM_UNREGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_UNREGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_prim_end ( indent , "DM_SM_UNREGISTER_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_CLASS_OF_DEVICE_REQ_pdu ( int indent , const DM_HCI_READ_CLASS_OF_DEVICE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CLASS_OF_DEVICE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CLASS_OF_DEVICE_REQ" );
    return rv;
}
a_string display_DM_SYNC_UNREGISTER_REQ_pdu ( int indent , const DM_SYNC_UNREGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_UNREGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_UNREGISTER_REQ" );
    return rv;
}
a_string display_DM_HCI_SNIFF_SUB_RATE_CFM_pdu ( int indent , const DM_HCI_SNIFF_SUB_RATE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SNIFF_SUB_RATE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SNIFF_SUB_RATE_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ_pdu ( int indent , const DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ" );
    return rv;
}
a_string display_DM_AMPM_READ_BD_ADDR_CFM_pdu ( int indent , const DM_AMPM_READ_BD_ADDR_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_READ_BD_ADDR_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_READ_BD_ADDR_CFM" );
    return rv;
}
a_string display_DM_ACL_OPEN_REQ_pdu ( int indent , const DM_ACL_OPEN_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_ACL_OPEN_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_ACL_OPEN_REQ" );
    return rv;
}
a_string display_DM_HCI_CREATE_CONNECTION_CANCEL_REQ_pdu ( int indent , const DM_HCI_CREATE_CONNECTION_CANCEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CREATE_CONNECTION_CANCEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CREATE_CONNECTION_CANCEL_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_RAND_REQ_pdu ( int indent , const DM_HCI_ULP_RAND_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_RAND_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_RAND_REQ" );
    return rv;
}
a_string display_DM_CLEAR_PARAM_CACHE_REQ_pdu ( int indent , const DM_CLEAR_PARAM_CACHE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_CLEAR_PARAM_CACHE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_CLEAR_PARAM_CACHE_REQ" );
    return rv;
}
a_string display_DM_HCI_PERIODIC_INQUIRY_MODE_CFM_pdu ( int indent , const DM_HCI_PERIODIC_INQUIRY_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_PERIODIC_INQUIRY_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_PERIODIC_INQUIRY_MODE_CFM" );
    return rv;
}
a_string display_DM_HCI_REMOTE_NAME_CFM_pdu ( int indent , const DM_HCI_REMOTE_NAME_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_REMOTE_NAME_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_name ( indent + 1 , "name_part" , prim.get_name_part().get_str() );
    rv += policy->display_prim_end ( indent , "DM_HCI_REMOTE_NAME_CFM" );
    return rv;
}
a_string display_DM_HCI_CHANGE_LOCAL_NAME_CFM_pdu ( int indent , const DM_HCI_CHANGE_LOCAL_NAME_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CHANGE_LOCAL_NAME_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CHANGE_LOCAL_NAME_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ_pdu ( int indent , const DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ" );
    return rv;
}
a_string display_DM_SYNC_CONNECT_REQ_pdu ( int indent , const DM_SYNC_CONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_CONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    DMSyncConfig config = prim.get_config();

    rv += policy->display_prim_start (indent + 1, "u:" )
        + policy->display_uint16 ( indent + 2 , "max_latency", config.max_latency() )
        + policy->display_uint16 ( indent + 2 , "retx_effort", config.retx_effort() )
        + policy->display_uint16 ( indent + 2 , "packet_type", config.packet_type() )
        + policy->display_uint16 ( indent + 2 , "voice_settings", config.voice_settings() )
        + policy->display_uint32 ( indent + 2 , "tx_bdw", config.tx_bdw() )
        + policy->display_uint32 ( indent + 2 , "rx_bdw", config.rx_bdw() )
        + policy->display_prim_end (0, "");
    rv += policy->display_prim_end ( indent , "DM_SYNC_CONNECT_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_pdu ( int indent , const DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8Array ( indent + 1 , "features" , prim.get_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_STORED_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_READ_STORED_LINK_KEY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_STORED_LINK_KEY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "max_num_keys" , prim.get_max_num_keys() );
    rv += policy->display_uint16 ( indent + 1 , "num_keys_read" , prim.get_num_keys_read() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_STORED_LINK_KEY_CFM" );
    return rv;
}
a_string display_DM_HCI_REFRESH_ENCRYPTION_KEY_REQ_pdu ( int indent , const DM_HCI_REFRESH_ENCRYPTION_KEY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_REFRESH_ENCRYPTION_KEY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_HCI_REFRESH_ENCRYPTION_KEY_REQ" );
    return rv;
}
a_string display_DM_AM_REGISTER_CFM_pdu ( int indent , const DM_AM_REGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AM_REGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "version" , prim.get_version() );
    rv += policy->display_uint16 ( indent + 1 , "patch_level" , prim.get_patch_level() );
    rv += policy->display_prim_end ( indent , "DM_AM_REGISTER_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_SCAN_ENABLE_REQ_pdu ( int indent , const DM_HCI_WRITE_SCAN_ENABLE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_SCAN_ENABLE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "scan_enable" , prim.get_scan_enable() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_SCAN_ENABLE_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "adv_interval_min" , prim.get_adv_interval_min() );
    rv += policy->display_uint16 ( indent + 1 , "adv_interval_max" , prim.get_adv_interval_max() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_type" , prim.get_advertising_type() );
    rv += policy->display_uint8 ( indent + 1 , "own_address_type" , prim.get_own_address_type() );
    rv += policy->display_uint8 ( indent + 1 , "direct_address_type" , prim.get_direct_address_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "direct_address" , prim.get_direct_address() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_channel_map" , prim.get_advertising_channel_map() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_filter_policy" , prim.get_advertising_filter_policy() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_CLASS_OF_DEVICE_CFM_pdu ( int indent , const DM_HCI_READ_CLASS_OF_DEVICE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CLASS_OF_DEVICE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint32 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CLASS_OF_DEVICE_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_int8 ( indent + 1 , "tx_power" , prim.get_tx_power() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ" );
    return rv;
}
a_string display_DM_SYNC_UNREGISTER_CFM_pdu ( int indent , const DM_SYNC_UNREGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_UNREGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_UNREGISTER_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM_pdu ( int indent , const DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_int8 ( indent + 1 , "tx_power" , prim.get_tx_power() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM" );
    return rv;
}
a_string display_DM_ACL_OPEN_CFM_pdu ( int indent , const DM_ACL_OPEN_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_ACL_OPEN_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_bool ( indent + 1 , "success" , prim.get_success() );
    rv += policy->display_prim_end ( indent , "DM_ACL_OPEN_CFM" );
    return rv;
}
a_string display_DM_HCI_CREATE_CONNECTION_CANCEL_CFM_pdu ( int indent , const DM_HCI_CREATE_CONNECTION_CANCEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_CREATE_CONNECTION_CANCEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_CREATE_CONNECTION_CANCEL_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_PIN_TYPE_REQ_pdu ( int indent , const DM_HCI_READ_PIN_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PIN_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PIN_TYPE_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_RAND_CFM_pdu ( int indent , const DM_HCI_ULP_RAND_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_RAND_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8Array ( indent + 1 , "random_number" , prim.get_random_number().get_ptr() , 16 );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_RAND_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_VOICE_SETTING_REQ_pdu ( int indent , const DM_HCI_READ_VOICE_SETTING_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_VOICE_SETTING_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_VOICE_SETTING_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ_pdu ( int indent , const DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ" );
    return rv;
}
a_string display_DM_CLEAR_PARAM_CACHE_CFM_pdu ( int indent , const DM_CLEAR_PARAM_CACHE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_CLEAR_PARAM_CACHE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_CLEAR_PARAM_CACHE_CFM" );
    return rv;
}
a_string display_DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_pdu ( int indent , const DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SET_AFH_CHANNEL_CLASS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8Array ( indent + 1 , "map" , prim.get_map().get_ptr() , 10 );
    rv += policy->display_prim_end ( indent , "DM_HCI_SET_AFH_CHANNEL_CLASS_REQ" );
    return rv;
}
a_string display_DM_HCI_INQUIRY_CANCEL_REQ_pdu ( int indent , const DM_HCI_INQUIRY_CANCEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_INQUIRY_CANCEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_INQUIRY_CANCEL_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_pdu ( int indent , const DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_pdu ( int indent , const DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8Array ( indent + 1 , "lmp_supp_features" , prim.get_lmp_supp_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM" );
    return rv;
}
a_string display_DM_SYNC_CONNECT_CFM_pdu ( int indent , const DM_SYNC_CONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_CONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "link_type" , prim.get_link_type() );
    rv += policy->display_uint8 ( indent + 1 , "tx_interval" , prim.get_tx_interval() );
    rv += policy->display_uint8 ( indent + 1 , "wesco" , prim.get_wesco() );
    rv += policy->display_uint16 ( indent + 1 , "rx_packet_length" , prim.get_rx_packet_length() );
    rv += policy->display_uint16 ( indent + 1 , "tx_packet_length" , prim.get_tx_packet_length() );
    rv += policy->display_uint8 ( indent + 1 , "air_mode" , prim.get_air_mode() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_CONNECT_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "inqscan_interval" , prim.get_inqscan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "inqscan_window" , prim.get_inqscan_window() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM" );
    return rv;
}
a_string display_DM_SM_PIN_REQUEST_RSP_pdu ( int indent , const DM_SM_PIN_REQUEST_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_PIN_REQUEST_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "pin_length" , prim.get_pin_length() );
    rv += policy->display_uint8Array ( indent + 1 , "pin" , prim.get_pin().get_data() , prim.get_pin().get_length() );
    rv += policy->display_prim_end ( indent , "DM_SM_PIN_REQUEST_RSP" );
    return rv;
}
a_string display_DM_HCI_WRITE_SCAN_ENABLE_CFM_pdu ( int indent , const DM_HCI_WRITE_SCAN_ENABLE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_SCAN_ENABLE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_SCAN_ENABLE_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM_pdu ( int indent , const DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ_pdu ( int indent , const DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ" );
    return rv;
}
a_string display_DM_HCI_FLUSH_REQ_pdu ( int indent , const DM_HCI_FLUSH_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_FLUSH_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_FLUSH_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_PIN_TYPE_CFM_pdu ( int indent , const DM_HCI_READ_PIN_TYPE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PIN_TYPE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "pin_type" , prim.get_pin_type() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PIN_TYPE_CFM" );
    return rv;
}
a_string display_DM_SM_SECURITY_REQ_pdu ( int indent , const DM_SM_SECURITY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_SECURITY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "connection_flags" , prim.get_connection_flags() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "security_requirements" , prim.get_security_requirements() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SM_SECURITY_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_VOICE_SETTING_CFM_pdu ( int indent , const DM_HCI_READ_VOICE_SETTING_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_VOICE_SETTING_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "voice_setting" , prim.get_voice_setting() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_VOICE_SETTING_CFM" );
    return rv;
}
a_string display_DM_SM_PIN_REQUEST_IND_pdu ( int indent , const DM_SM_PIN_REQUEST_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_PIN_REQUEST_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_bool ( indent + 1 , "initiator" , prim.get_initiator() );
    rv += policy->display_prim_end ( indent , "DM_SM_PIN_REQUEST_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_ADVERTISING_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_data_len" , prim.get_advertising_data_len() );
    if (prim.get_advertising_data_len() == 0)
        rv += policy->display_text ( indent + 1 , "advertising_data = NULL\n" );
    else
    {
        uint8 data[31];
        prim.get_advertising_data(data);
        rv += policy->display_uint8Array ( indent + 1 , "advertising_data" , data, prim.get_advertising_data_len()) ;
    }
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_ADVERTISING_DATA_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM_pdu ( int indent , const DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM" );
    return rv;
}
a_string display_DM_SM_KEYS_IND_pdu ( int indent , const DM_SM_KEYS_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_KEYS_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "security_requirements" , prim.get_security_requirements() );
    rv += policy->display_uint16 ( indent + 1 , "encryption_key_size" , prim.get_encryption_key_size() );
    rv += policy->display_uint16 ( indent + 1 , "present" , prim.get_present() );
    {
        DM_SM_RFCLI_UKEY_T u[DM_SM_MAX_NUM_KEYS];
        prim.get_u(u);
        rv += policy->display_DM_SM_UKEY_T_array ( indent + 1 , "u" , prim.get_present(), u);
    }
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "id_addrt" , prim.get_id_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_KEYS_IND" );
    return rv;
}
a_string display_DM_HCI_SET_AFH_CHANNEL_CLASS_CFM_pdu ( int indent , const DM_HCI_SET_AFH_CHANNEL_CLASS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SET_AFH_CHANNEL_CLASS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SET_AFH_CHANNEL_CLASS_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_pdu ( int indent , const DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "fec_required" , prim.get_fec_required() );
    rv += policy->display_uint8Array( indent + 1 , "eir_data_part" , prim.get_eir_data_part().get_data() , prim.get_eir_data_part().get_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM" );
    return rv;
}
a_string display_DM_HCI_INQUIRY_CANCEL_CFM_pdu ( int indent , const DM_HCI_INQUIRY_CANCEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_INQUIRY_CANCEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_INQUIRY_CANCEL_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ_pdu ( int indent , const DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ" );
    return rv;
}
a_string display_DM_SM_ENCRYPT_REQ_pdu ( int indent , const DM_SM_ENCRYPT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_ENCRYPT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_bool ( indent + 1 , "encrypt" , prim.get_encrypt() );
    rv += policy->display_prim_end ( indent , "DM_SM_ENCRYPT_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_NUM_BCAST_RETXS_REQ_pdu ( int indent , const DM_HCI_WRITE_NUM_BCAST_RETXS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_NUM_BCAST_RETXS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "num" , prim.get_num() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_NUM_BCAST_RETXS_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ_pdu ( int indent , const DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ" );
    return rv;
}
a_string display_DM_SM_USER_CONFIRMATION_REQUEST_RSP_pdu ( int indent , const DM_SM_USER_CONFIRMATION_REQUEST_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_USER_CONFIRMATION_REQUEST_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_USER_CONFIRMATION_REQUEST_RSP" );
    return rv;
}
a_string display_DM_BLUESTACK_STATE_TRANSITION_EXIT_IND_pdu ( int indent , const DM_BLUESTACK_STATE_TRANSITION_EXIT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_BLUESTACK_STATE_TRANSITION_EXIT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "state_machine" , prim.get_state_machine() );
    rv += policy->display_uint32 ( indent + 1 , "event" , prim.get_event() );
    rv += policy->display_prim_end ( indent , "DM_BLUESTACK_STATE_TRANSITION_EXIT_IND" );
    return rv;
}
a_string display_DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM_pdu ( int indent , const DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_REMOTE_EXT_FEATURES_REQ_pdu ( int indent , const DM_HCI_READ_REMOTE_EXT_FEATURES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_REMOTE_EXT_FEATURES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_num" , prim.get_page_num() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_REMOTE_EXT_FEATURES_REQ" );
    return rv;
}
a_string display_DM_SM_USER_PASSKEY_REQUEST_NEG_RSP_pdu ( int indent , const DM_SM_USER_PASSKEY_REQUEST_NEG_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_USER_PASSKEY_REQUEST_NEG_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_USER_PASSKEY_REQUEST_NEG_RSP" );
    return rv;
}
a_string display_DM_SET_DEFAULT_LINK_POLICY_REQ_pdu ( int indent , const DM_SET_DEFAULT_LINK_POLICY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SET_DEFAULT_LINK_POLICY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "link_policy_settings_in" , prim.get_link_policy_settings_in() );
    rv += policy->display_uint16 ( indent + 1 , "link_policy_settings_out" , prim.get_link_policy_settings_out() );
    rv += policy->display_prim_end ( indent , "DM_SET_DEFAULT_LINK_POLICY_REQ" );
    return rv;
}
a_string display_DM_SM_UNREGISTER_OUTGOING_REQ_pdu ( int indent , const DM_SM_UNREGISTER_OUTGOING_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_UNREGISTER_OUTGOING_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_UNREGISTER_OUTGOING_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LMP_HANDLE_REQ_pdu ( int indent , const DM_HCI_READ_LMP_HANDLE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LMP_HANDLE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LMP_HANDLE_REQ" );
    return rv;
}
a_string display_DM_HCI_FLUSH_CFM_pdu ( int indent , const DM_HCI_FLUSH_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_FLUSH_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_FLUSH_CFM" );
    return rv;
}
a_string display_DM_AMPM_LINK_KEY_NOTIFICATION_IND_pdu ( int indent , const DM_AMPM_LINK_KEY_NOTIFICATION_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_LINK_KEY_NOTIFICATION_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "key_type" , prim.get_key_type() );
    {
        size_t n = 0;

        if (prim.get_key().get_data() != 0)
            n = 16;

        rv += policy->display_uint8Array ( indent + 1 , "key" , prim.get_key().get_data() , n );
    }
    rv += policy->display_prim_end ( indent , "DM_AMPM_LINK_KEY_NOTIFICATION_IND" );
    return rv;
}
a_string display_DM_SM_SECURITY_CFM_pdu ( int indent , const DM_SM_SECURITY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_SECURITY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "connection_flags" , prim.get_connection_flags() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "security_requirements" , prim.get_security_requirements() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_SM_SECURITY_CFM" );
    return rv;
}
a_string display_DM_SM_USER_CONFIRMATION_REQUEST_IND_pdu ( int indent , const DM_SM_USER_CONFIRMATION_REQUEST_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_USER_CONFIRMATION_REQUEST_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint24 ( indent + 1 , "dev_class" , prim.get_dev_class() );
    rv += policy->display_uint32 ( indent + 1 , "numeric_value" , prim.get_numeric_value() );
    rv += policy->display_uint8 ( indent + 1 , "io_cap_local" , prim.get_io_cap_local() );
    rv += policy->display_uint8 ( indent + 1 , "io_cap_remote" , prim.get_io_cap_remote() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_prim_end ( indent , "DM_SM_USER_CONFIRMATION_REQUEST_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_ADVERTISING_DATA_CFM_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISING_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_ADVERTISING_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_ADVERTISING_DATA_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM_pdu ( int indent , const DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_PAGESCAN_MODE_REQ_pdu ( int indent , const DM_HCI_READ_PAGESCAN_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGESCAN_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGESCAN_MODE_REQ" );
    return rv;
}
a_string display_DM_SM_ENCRYPT_CFM_pdu ( int indent , const DM_SM_ENCRYPT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_ENCRYPT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_bool ( indent + 1 , "success" , prim.get_success() );
    rv += policy->display_bool ( indent + 1 , "encrypted" , prim.get_encrypted() );
    rv += policy->display_prim_end ( indent , "DM_SM_ENCRYPT_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_NUM_BCAST_RETXS_CFM_pdu ( int indent , const DM_HCI_WRITE_NUM_BCAST_RETXS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_NUM_BCAST_RETXS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_NUM_BCAST_RETXS_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM_pdu ( int indent , const DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "conn_accept_timeout" , prim.get_conn_accept_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ" );
    return rv;
}
a_string display_DM_SM_AUTHENTICATE_REQ_pdu ( int indent , const DM_SM_AUTHENTICATE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_AUTHENTICATE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_SM_AUTHENTICATE_REQ" );
    return rv;
}
a_string display_DM_SM_REGISTER_OUTGOING_REQ_pdu ( int indent , const DM_SM_REGISTER_OUTGOING_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_REGISTER_OUTGOING_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "security_level" , prim.get_security_level() );
    rv += policy->display_prim_end ( indent , "DM_SM_REGISTER_OUTGOING_REQ" );
    return rv;
}
a_string display_DM_HCI_EXIT_PARK_MODE_REQ_pdu ( int indent , const DM_HCI_EXIT_PARK_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_EXIT_PARK_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_EXIT_PARK_MODE_REQ" );
    return rv;
}
a_string display_DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND_pdu ( int indent , const DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "state_machine" , prim.get_state_machine() );
    rv += policy->display_uint32 ( indent + 1 , "event" , prim.get_event() );
    rv += policy->display_uint32 ( indent + 1 , "old_state" , prim.get_old_state() );
    rv += policy->display_uint32 ( indent + 1 , "new_state" , prim.get_new_state() );
    rv += policy->display_uint32 ( indent + 1 , "action" , prim.get_action() );
    rv += policy->display_prim_end ( indent , "DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ_pdu ( int indent , const DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_pdu ( int indent , const DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_REMOTE_EXT_FEATURES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "page_num" , prim.get_page_num() );
    rv += policy->display_uint8 ( indent + 1 , "max_page_num" , prim.get_max_page_num() );
    rv += policy->display_uint8Array ( indent + 1 , "lmp_ext_features" , prim.get_lmp_ext_features().get_data() , 8 );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_REMOTE_EXT_FEATURES_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ" );
    return rv;
}
a_string display_DM_SYNC_DISCONNECT_REQ_pdu ( int indent , const DM_SYNC_DISCONNECT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_DISCONNECT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_DISCONNECT_REQ" );
    return rv;
}
a_string display_DM_SM_UNREGISTER_OUTGOING_CFM_pdu ( int indent , const DM_SM_UNREGISTER_OUTGOING_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_UNREGISTER_OUTGOING_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_SM_UNREGISTER_OUTGOING_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ_pdu ( int indent , const DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LMP_HANDLE_CFM_pdu ( int indent , const DM_HCI_READ_LMP_HANDLE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LMP_HANDLE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "lmp_handle" , prim.get_lmp_handle() );
    rv += policy->display_uint32 ( indent + 1 , "reserved" , prim.get_reserved() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LMP_HANDLE_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_pdu ( int indent , const DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "fec_required" , prim.get_fec_required() );
    rv += policy->display_uint8Array( indent + 1 , "eir_data_part" , prim.get_eir_data_part().get_data() , prim.get_eir_data_part().get_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ" );
    return rv;
}
a_string display_DM_HCI_MASTER_LINK_KEY_REQ_pdu ( int indent , const DM_HCI_MASTER_LINK_KEY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_MASTER_LINK_KEY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "link_key_type" , prim.get_link_key_type() );
    rv += policy->display_prim_end ( indent , "DM_HCI_MASTER_LINK_KEY_REQ" );
    return rv;
}
a_string display_DM_BAD_MESSAGE_IND_pdu ( int indent , const DM_BAD_MESSAGE_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_BAD_MESSAGE_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_uint8 ( indent + 1 , "protocol" , prim.get_protocol() );
    rv += policy->display_uint16 ( indent + 1 , "request_type" , prim.get_request_type() );
    rv += policy->display_uint16 ( indent + 1 , "message_length" , prim.get_message_length() );
    rv += policy->display_uint16Array ( indent + 1, "message" , prim.get_message() , prim.get_message_length() );
    rv += policy->display_prim_end ( indent , "DM_BAD_MESSAGE_IND" );
    return rv;
}
a_string display_DM_HCI_READ_CLOCK_REQ_pdu ( int indent , const DM_HCI_READ_CLOCK_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CLOCK_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "which_clock" , prim.get_which_clock() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CLOCK_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_PAGESCAN_ACTIVITY_REQ_pdu ( int indent , const DM_HCI_READ_PAGESCAN_ACTIVITY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGESCAN_ACTIVITY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGESCAN_ACTIVITY_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ_pdu ( int indent , const DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_PAGESCAN_MODE_CFM_pdu ( int indent , const DM_HCI_READ_PAGESCAN_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGESCAN_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGESCAN_MODE_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_PAGE_SCAN_TYPE_REQ_pdu ( int indent , const DM_HCI_READ_PAGE_SCAN_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGE_SCAN_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGE_SCAN_TYPE_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM" );
    return rv;
}
a_string display_DM_SM_AUTHENTICATE_CFM_pdu ( int indent , const DM_SM_AUTHENTICATE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_AUTHENTICATE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_bool ( indent + 1 , "success" , prim.get_success() );
    rv += policy->display_prim_end ( indent , "DM_SM_AUTHENTICATE_CFM" );
    return rv;
}
a_string display_DM_SM_REGISTER_OUTGOING_CFM_pdu ( int indent , const DM_SM_REGISTER_OUTGOING_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_REGISTER_OUTGOING_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "context" , prim.get_context() );
    rv += policy->display_uint16 ( indent + 1 , "protocol_id" , prim.get_protocol_id() );
    rv += policy->display_uint16 ( indent + 1 , "channel" , prim.get_channel() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "security_level" , prim.get_security_level() );
    rv += policy->display_prim_end ( indent , "DM_SM_REGISTER_OUTGOING_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_ENC_MODE_REQ_pdu ( int indent , const DM_HCI_READ_ENC_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_ENC_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_ENC_MODE_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_SCAN_ENABLE_REQ_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_ENABLE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_SCAN_ENABLE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "scan_enable" , prim.get_scan_enable() );
    rv += policy->display_uint8 ( indent + 1 , "filter_duplicates" , prim.get_filter_duplicates() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_SCAN_ENABLE_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_pdu ( int indent , const DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8Array ( indent + 1 , "feature_set" , prim.get_feature_set().get_ptr() , 8 );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "conn_accept_timeout" , prim.get_conn_accept_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM" );
    return rv;
}
a_string display_DM_SYNC_DISCONNECT_CFM_pdu ( int indent , const DM_SYNC_DISCONNECT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_DISCONNECT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_DISCONNECT_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM_pdu ( int indent , const DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "key_size" , prim.get_key_size() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_FAILED_CONTACT_COUNT_REQ_pdu ( int indent , const DM_HCI_READ_FAILED_CONTACT_COUNT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_FAILED_CONTACT_COUNT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_FAILED_CONTACT_COUNT_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_pdu ( int indent , const DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM" );
    return rv;
}
a_string display_DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ_pdu ( int indent , const DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "connection_handle" , prim.get_connection_handle() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval_min" , prim.get_conn_interval_min() );
    rv += policy->display_uint16 ( indent + 1 , "conn_interval_max" , prim.get_conn_interval_max() );
    rv += policy->display_uint16 ( indent + 1 , "conn_latency" , prim.get_conn_latency() );
    rv += policy->display_uint16 ( indent + 1 , "supervision_timeout" , prim.get_supervision_timeout() );
    rv += policy->display_uint16 ( indent + 1 , "minimum_ce_length" , prim.get_minimum_ce_length() );
    rv += policy->display_uint16 ( indent + 1 , "maximum_ce_length" , prim.get_maximum_ce_length() );
    rv += policy->display_prim_end ( indent , "DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_CLOCK_CFM_pdu ( int indent , const DM_HCI_READ_CLOCK_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CLOCK_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint32 ( indent + 1 , "clock" , prim.get_clock() );
    rv += policy->display_uint16 ( indent + 1 , "accuracy" , prim.get_accuracy() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CLOCK_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_CURRENT_IAC_LAP_REQ_pdu ( int indent , const DM_HCI_READ_CURRENT_IAC_LAP_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CURRENT_IAC_LAP_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CURRENT_IAC_LAP_REQ" );
    return rv;
}
a_string display_DM_HCI_MASTER_LINK_KEY_CFM_pdu ( int indent , const DM_HCI_MASTER_LINK_KEY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_MASTER_LINK_KEY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "key_flag" , prim.get_key_flag() );
    rv += policy->display_prim_end ( indent , "DM_HCI_MASTER_LINK_KEY_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_PAGESCAN_ACTIVITY_CFM_pdu ( int indent , const DM_HCI_READ_PAGESCAN_ACTIVITY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGESCAN_ACTIVITY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint16 ( indent + 1 , "pagescan_interval" , prim.get_pagescan_interval() );
    rv += policy->display_uint16 ( indent + 1 , "pagescan_window" , prim.get_pagescan_window() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGESCAN_ACTIVITY_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM_pdu ( int indent , const DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_int8 ( indent + 1 , "tx_power" , prim.get_tx_power() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ_pdu ( int indent , const DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_PAGE_SCAN_TYPE_CFM_pdu ( int indent , const DM_HCI_READ_PAGE_SCAN_TYPE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_PAGE_SCAN_TYPE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_PAGE_SCAN_TYPE_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_AUTH_ENABLE_REQ_pdu ( int indent , const DM_HCI_READ_AUTH_ENABLE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_AUTH_ENABLE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_AUTH_ENABLE_REQ" );
    return rv;
}
a_string display_DM_SYNC_REGISTER_REQ_pdu ( int indent , const DM_SYNC_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_uint16 ( indent + 1 , "flags" , prim.get_flags() );
    rv += policy->display_uint16 ( indent + 1 , "buffer_size_sink" , prim.get_buffer_size_sink() );
    rv += policy->display_uint16 ( indent + 1 , "buffer_size_source" , prim.get_buffer_size_source() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_REGISTER_REQ" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "advertising_enable" , prim.get_advertising_enable() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_ENC_MODE_CFM_pdu ( int indent , const DM_HCI_READ_ENC_MODE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_ENC_MODE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_ENC_MODE_CFM" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_SCAN_ENABLE_CFM_pdu ( int indent , const DM_HCI_ULP_SET_SCAN_ENABLE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_SCAN_ENABLE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_SCAN_ENABLE_CFM" );
    return rv;
}
a_string display_DM_HCI_SNIFF_MODE_REQ_pdu ( int indent , const DM_HCI_SNIFF_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_SNIFF_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "max_interval" , prim.get_max_interval() );
    rv += policy->display_uint16 ( indent + 1 , "min_interval" , prim.get_min_interval() );
    rv += policy->display_uint16 ( indent + 1 , "attempt" , prim.get_attempt() );
    rv += policy->display_uint16 ( indent + 1 , "timeout" , prim.get_timeout() );
    rv += policy->display_prim_end ( indent , "DM_HCI_SNIFF_MODE_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_FAILED_CONTACT_COUNT_CFM_pdu ( int indent , const DM_HCI_READ_FAILED_CONTACT_COUNT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_FAILED_CONTACT_COUNT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "failed_contact_count" , prim.get_failed_contact_count() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_FAILED_CONTACT_COUNT_CFM" );
    return rv;
}
a_string display_DM_HCI_ROLE_DISCOVERY_REQ_pdu ( int indent , const DM_HCI_ROLE_DISCOVERY_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ROLE_DISCOVERY_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ROLE_DISCOVERY_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LINK_POLICY_SETTINGS_REQ_pdu ( int indent , const DM_HCI_READ_LINK_POLICY_SETTINGS_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LINK_POLICY_SETTINGS_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LINK_POLICY_SETTINGS_REQ" );
    return rv;
}
a_string display_DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM_pdu ( int indent , const DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_prim_end ( indent , "DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM" );
    return rv;
}
a_string display_DM_HCI_RESET_REQ_pdu ( int indent , const DM_HCI_RESET_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_RESET_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_RESET_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_CURRENT_IAC_LAP_CFM_pdu ( int indent , const DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU& prim , PDU_displayer * policy )
{
    uint24 iac_laps[96]; // plenty (256/3 = 85).
    for ( int i = 0 ; i < prim.get_num_current_iac() ; ++i )
        iac_laps[i] = prim.get_iac_lap (i);
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_CURRENT_IAC_LAP_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "num_current_iac" , prim.get_num_current_iac() );
    rv += policy->display_uint24Array ( indent + 1 , "iac_lap" , iac_laps , prim.get_num_current_iac() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_CURRENT_IAC_LAP_CFM" );
    return rv;
}
a_string display_DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM_pdu ( int indent , const DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_AUTH_ENABLE_CFM_pdu ( int indent , const DM_HCI_READ_AUTH_ENABLE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_AUTH_ENABLE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_uint8 ( indent + 1 , "auth_enable" , prim.get_auth_enable() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_AUTH_ENABLE_CFM" );
    return rv;
}
a_string display_DM_SYNC_REGISTER_CFM_pdu ( int indent , const DM_SYNC_REGISTER_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SYNC_REGISTER_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint16 ( indent + 1 , "pv_cbarg" , prim.get_pv_cbarg() );
    rv += policy->display_prim_end ( indent , "DM_SYNC_REGISTER_CFM" );
    return rv;
}
a_string display_DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP_pdu ( int indent , const DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_BluetoothDeviceAddressWithType ( indent + 1 , "addrt" , prim.get_addrt() );
    rv += policy->display_uint8 ( indent + 1 , "reason" , prim.get_reason() );
    rv += policy->display_prim_end ( indent , "DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM_pdu ( int indent , const DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM" );
    return rv;
}
a_string display_DM_HCI_MODE_CHANGE_EVENT_IND_pdu ( int indent , const DM_HCI_MODE_CHANGE_EVENT_IND_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_MODE_CHANGE_EVENT_IND" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_uint16 ( indent + 1 , "length" , prim.get_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_MODE_CHANGE_EVENT_IND" );
    return rv;
}
a_string display_DM_HCI_ULP_SET_EVENT_MASK_REQ_pdu ( int indent , const DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ULP_SET_EVENT_MASK_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_ULPEventMask ( indent + 1 , "ulp_event_mask" , prim.get_ulp_event_mask() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ULP_SET_EVENT_MASK_REQ" );
    return rv;
}
a_string display_DM_HCI_READ_LINK_POLICY_SETTINGS_CFM_pdu ( int indent , const DM_HCI_READ_LINK_POLICY_SETTINGS_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LINK_POLICY_SETTINGS_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "link_policy" , prim.get_link_policy() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LINK_POLICY_SETTINGS_CFM" );
    return rv;
}
a_string display_DM_HCI_ROLE_DISCOVERY_CFM_pdu ( int indent , const DM_HCI_ROLE_DISCOVERY_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_ROLE_DISCOVERY_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint8 ( indent + 1 , "role" , prim.get_role() );
    rv += policy->display_prim_end ( indent , "DM_HCI_ROLE_DISCOVERY_CFM" );
    return rv;
}
a_string display_DM_HCI_PARK_MODE_REQ_pdu ( int indent , const DM_HCI_PARK_MODE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_PARK_MODE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint16 ( indent + 1 , "handle" , prim.get_handle() );
    rv += policy->display_BluetoothDeviceAddress ( indent + 1 , "bd_addr" , prim.get_bd_addr() );
    rv += policy->display_uint16 ( indent + 1 , "max_interval" , prim.get_max_interval() );
    rv += policy->display_uint16 ( indent + 1 , "min_interval" , prim.get_min_interval() );
    rv += policy->display_prim_end ( indent , "DM_HCI_PARK_MODE_REQ" );
    return rv;
}
a_string display_DM_HCI_RESET_CFM_pdu ( int indent , const DM_HCI_RESET_CFM_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_RESET_CFM" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_uint8 ( indent + 1 , "status" , prim.get_status() );
    rv += policy->display_prim_end ( indent , "DM_HCI_RESET_CFM" );
    return rv;
}
a_string display_DM_HCI_READ_LOCAL_VER_INFO_REQ_pdu ( int indent , const DM_HCI_READ_LOCAL_VER_INFO_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_READ_LOCAL_VER_INFO_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_prim_end ( indent , "DM_HCI_READ_LOCAL_VER_INFO_REQ" );
    return rv;
}
a_string display_DM_AMPM_REGISTER_REQ_pdu ( int indent , const DM_AMPM_REGISTER_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_AMPM_REGISTER_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "type" , prim.get_type() );
    rv += policy->display_uint16 ( indent + 1 , "phandle" , prim.get_phandle() );
    rv += policy->display_prim_end ( indent , "DM_AMPM_REGISTER_REQ" );
    return rv;
}
a_string display_DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ_pdu ( int indent , const DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ_T_PDU& prim , PDU_displayer * policy )
{
    a_string rv = policy->display_prim_start ( indent , "DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ" ) ;
    rv += policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() );
    rv += policy->display_uint8 ( indent + 1 , "cmd_parameter_length" , prim.get_cmd_parameter_length() );
    rv += policy->display_uint8 ( indent + 1 , "mode" , prim.get_mode() );
    rv += policy->display_prim_end ( indent , "DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ" );
    return rv;
}
#endif//USE_DISPLAY_PDU
////////////////////////////////////////////////////////////////////////////////
//  End of code autogenerated
//  from devHost/HCIPacker/Autogen/templates/display_prim.tpl
//  by devTools/bin/pdu/gencode.pl
////////////////////////////////////////////////////////////////////////////////
#ifdef USE_DISPLAY_PDU
//  Autogenerated
//  from devHost/HCIPacker/Autogen/templates/display_switch.tpl
//  by devTools/bin/pdu/gencode.pl

#include "gen_display_pdu.h"

typedef HCICommandPDU CMD_PDU;
typedef HCIEventPDU EVT_PDU;
typedef HCICommandCompletePDU CMD_CMPLT_PDU;
typedef BCCMD_RADIOTEST_PDU RADIOTEST_PDU;

a_string display_cmd_cmplt_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( CMD_CMPLT_PDU ( pdu ).get_op_code() )
    {
    case HCI_ULP_READ_CHANNEL_MAP:
        return display_HCI_ULP_READ_CHANNEL_MAP_pdu ( indent , HCI_ULP_READ_CHANNEL_MAP_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY:
        return display_HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_pdu ( indent , HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_SCO_FLOW_CON_ENABLE:
        return display_HCI_READ_SCO_FLOW_CON_ENABLE_pdu ( indent , HCI_READ_SCO_FLOW_CON_ENABLE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_INQUIRY_MODE:
        return display_HCI_READ_INQUIRY_MODE_pdu ( indent , HCI_READ_INQUIRY_MODE_RET_T_PDU ( pdu ) , policy );
    case HCI_GET_LINK_QUALITY:
        return display_HCI_GET_LINK_QUALITY_pdu ( indent , HCI_GET_LINK_QUALITY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_HOLD_MODE_ACTIVITY:
        return display_HCI_READ_HOLD_MODE_ACTIVITY_pdu ( indent , HCI_READ_HOLD_MODE_ACTIVITY_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER:
        return display_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_pdu ( indent , HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_ALIAS_AUTH_ENABLE:
        return display_HCI_READ_ALIAS_AUTH_ENABLE_pdu ( indent , HCI_READ_ALIAS_AUTH_ENABLE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_INQUIRYSCAN_ACTIVITY:
        return display_HCI_READ_INQUIRYSCAN_ACTIVITY_pdu ( indent , HCI_READ_INQUIRYSCAN_ACTIVITY_RET_T_PDU ( pdu ) , policy );
    case HCI_RESET_FAILED_CONTACT_COUNT:
        return display_HCI_RESET_FAILED_CONTACT_COUNT_pdu ( indent , HCI_RESET_FAILED_CONTACT_COUNT_RET_T_PDU ( pdu ) , policy );
    case HCI_USER_PASSKEY_REQUEST_REPLY:
        return display_HCI_USER_PASSKEY_REQUEST_REPLY_pdu ( indent , HCI_USER_PASSKEY_REQUEST_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_LINK_KEY_REQ_REPLY:
        return display_HCI_LINK_KEY_REQ_REPLY_pdu ( indent , HCI_LINK_KEY_REQ_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_CLOCK:
        return display_HCI_READ_CLOCK_pdu ( indent , HCI_READ_CLOCK_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LMP_HANDLE:
        return display_HCI_READ_LMP_HANDLE_pdu ( indent , HCI_READ_LMP_HANDLE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGE_SCAN_TYPE:
        return display_HCI_READ_PAGE_SCAN_TYPE_pdu ( indent , HCI_READ_PAGE_SCAN_TYPE_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES:
        return display_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_pdu ( indent , HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_RET_T_PDU ( pdu ) , policy );
    case HCI_LINK_KEY_REQ_NEG_REPLY:
        return display_HCI_LINK_KEY_REQ_NEG_REPLY_pdu ( indent , HCI_LINK_KEY_REQ_NEG_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_PIN_CODE_REQ_NEG_REPLY:
        return display_HCI_PIN_CODE_REQ_NEG_REPLY_pdu ( indent , HCI_PIN_CODE_REQ_NEG_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGESCAN_PERIOD_MODE:
        return display_HCI_READ_PAGESCAN_PERIOD_MODE_pdu ( indent , HCI_READ_PAGESCAN_PERIOD_MODE_RET_T_PDU ( pdu ) , policy );
    case HCI_ROLE_DISCOVERY:
        return display_HCI_ROLE_DISCOVERY_pdu ( indent , HCI_ROLE_DISCOVERY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_CONN_ACCEPT_TIMEOUT:
        return display_HCI_READ_CONN_ACCEPT_TIMEOUT_pdu ( indent , HCI_READ_CONN_ACCEPT_TIMEOUT_RET_T_PDU ( pdu ) , policy );
    case HCI_REMOTE_NAME_REQ_CANCEL:
        return display_HCI_REMOTE_NAME_REQ_CANCEL_pdu ( indent , HCI_REMOTE_NAME_REQ_CANCEL_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_ENCRYPTION_KEY_SIZE:
        return display_HCI_READ_ENCRYPTION_KEY_SIZE_pdu ( indent , HCI_READ_ENCRYPTION_KEY_SIZE_RET_T_PDU ( pdu ) , policy );
    case HCI_DELETE_STORED_LINK_KEY:
        return display_HCI_DELETE_STORED_LINK_KEY_pdu ( indent , HCI_DELETE_STORED_LINK_KEY_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_TEST_END:
        return display_HCI_ULP_TEST_END_pdu ( indent , HCI_ULP_TEST_END_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_WHITE_LIST_SIZE:
        return display_HCI_ULP_READ_WHITE_LIST_SIZE_pdu ( indent , HCI_ULP_READ_WHITE_LIST_SIZE_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_SUPPORTED_STATES:
        return display_HCI_ULP_READ_SUPPORTED_STATES_pdu ( indent , HCI_ULP_READ_SUPPORTED_STATES_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_ENH_TX_POWER_LEVEL:
        return display_HCI_READ_ENH_TX_POWER_LEVEL_pdu ( indent , HCI_READ_ENH_TX_POWER_LEVEL_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LOOPBACK_MODE:
        return display_HCI_READ_LOOPBACK_MODE_pdu ( indent , HCI_READ_LOOPBACK_MODE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_BUFFER_SIZE:
        return display_HCI_READ_BUFFER_SIZE_pdu ( indent , HCI_READ_BUFFER_SIZE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LE_HOST_SUPPORT:
        return display_HCI_READ_LE_HOST_SUPPORT_pdu ( indent , HCI_READ_LE_HOST_SUPPORT_RET_T_PDU ( pdu ) , policy );
    case HCI_WRITE_AUTO_FLUSH_TIMEOUT:
        return display_HCI_WRITE_AUTO_FLUSH_TIMEOUT_pdu ( indent , HCI_WRITE_AUTO_FLUSH_TIMEOUT_RET_T_PDU ( pdu ) , policy );
    case HCI_IO_CAPABILITY_RESPONSE:
        return display_HCI_IO_CAPABILITY_RESPONSE_pdu ( indent , HCI_IO_CAPABILITY_RESPONSE_RET_T_PDU ( pdu ) , policy );
    case HCI_PRIVATE_PAIRING_REQ_NEG_REPLY:
        return display_HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_pdu ( indent , HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_ALIAS_ADDRESS_REQ_REPLY:
        return display_HCI_ALIAS_ADDRESS_REQ_REPLY_pdu ( indent , HCI_ALIAS_ADDRESS_REQ_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_AUTO_FLUSH_TIMEOUT:
        return display_HCI_READ_AUTO_FLUSH_TIMEOUT_pdu ( indent , HCI_READ_AUTO_FLUSH_TIMEOUT_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_NAME:
        return display_HCI_READ_LOCAL_NAME_pdu ( indent , HCI_READ_LOCAL_NAME_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_RAND:
        return display_HCI_ULP_RAND_pdu ( indent , HCI_ULP_RAND_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA:
        return display_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( indent , HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_RET_T_PDU ( pdu ) , policy );
    case HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY:
        return display_HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_pdu ( indent , HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_ENCRYPT:
        return display_HCI_ULP_ENCRYPT_pdu ( indent , HCI_ULP_ENCRYPT_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_SIMPLE_PAIRING_MODE:
        return display_HCI_READ_SIMPLE_PAIRING_MODE_pdu ( indent , HCI_READ_SIMPLE_PAIRING_MODE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_BD_ADDR:
        return display_HCI_READ_BD_ADDR_pdu ( indent , HCI_READ_BD_ADDR_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_VER_INFO:
        return display_HCI_READ_LOCAL_VER_INFO_pdu ( indent , HCI_READ_LOCAL_VER_INFO_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_CURRENT_IAC_LAP:
        return display_HCI_READ_CURRENT_IAC_LAP_pdu ( indent , HCI_READ_CURRENT_IAC_LAP_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_EXT_FEATURES:
        return display_HCI_READ_LOCAL_EXT_FEATURES_pdu ( indent , HCI_READ_LOCAL_EXT_FEATURES_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_NUM_BCAST_RETXS:
        return display_HCI_READ_NUM_BCAST_RETXS_pdu ( indent , HCI_READ_NUM_BCAST_RETXS_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL:
        return display_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_pdu ( indent , HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_NUM_SUPPORTED_IAC:
        return display_HCI_READ_NUM_SUPPORTED_IAC_pdu ( indent , HCI_READ_NUM_SUPPORTED_IAC_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_COUNTRY_CODE:
        return display_HCI_READ_COUNTRY_CODE_pdu ( indent , HCI_READ_COUNTRY_CODE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_FAILED_CONTACT_COUNT:
        return display_HCI_READ_FAILED_CONTACT_COUNT_pdu ( indent , HCI_READ_FAILED_CONTACT_COUNT_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_PIN_TYPE:
        return display_HCI_READ_PIN_TYPE_pdu ( indent , HCI_READ_PIN_TYPE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_OOB_DATA:
        return display_HCI_READ_LOCAL_OOB_DATA_pdu ( indent , HCI_READ_LOCAL_OOB_DATA_RET_T_PDU ( pdu ) , policy );
    case HCI_SNIFF_SUB_RATE:
        return display_HCI_SNIFF_SUB_RATE_pdu ( indent , HCI_SNIFF_SUB_RATE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_AUTH_ENABLE:
        return display_HCI_READ_AUTH_ENABLE_pdu ( indent , HCI_READ_AUTH_ENABLE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LINK_POLICY_SETTINGS:
        return display_HCI_READ_LINK_POLICY_SETTINGS_pdu ( indent , HCI_READ_LINK_POLICY_SETTINGS_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_INQUIRY_SCAN_TYPE:
        return display_HCI_READ_INQUIRY_SCAN_TYPE_pdu ( indent , HCI_READ_INQUIRY_SCAN_TYPE_RET_T_PDU ( pdu ) , policy );
    case HCI_SEND_KEYPRESS_NOTIFICATION:
        return display_HCI_SEND_KEYPRESS_NOTIFICATION_pdu ( indent , HCI_SEND_KEYPRESS_NOTIFICATION_RET_T_PDU ( pdu ) , policy );
    case HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY:
        return display_HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_pdu ( indent , HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGE_TIMEOUT:
        return display_HCI_READ_PAGE_TIMEOUT_pdu ( indent , HCI_READ_PAGE_TIMEOUT_RET_T_PDU ( pdu ) , policy );
    case HCI_IO_CAPABILITY_REQUEST_NEG_REPLY:
        return display_HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_pdu ( indent , HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_BUFFER_SIZE:
        return display_HCI_ULP_READ_BUFFER_SIZE_pdu ( indent , HCI_ULP_READ_BUFFER_SIZE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_VOICE_SETTING:
        return display_HCI_READ_VOICE_SETTING_pdu ( indent , HCI_READ_VOICE_SETTING_RET_T_PDU ( pdu ) , policy );
    case HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY:
        return display_HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_pdu ( indent , HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_SCAN_ENABLE:
        return display_HCI_READ_SCAN_ENABLE_pdu ( indent , HCI_READ_SCAN_ENABLE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_TX_POWER_LEVEL:
        return display_HCI_READ_TX_POWER_LEVEL_pdu ( indent , HCI_READ_TX_POWER_LEVEL_RET_T_PDU ( pdu ) , policy );
    case HCI_ALIAS_ADDRESS_REQ_NEG_REPLY:
        return display_HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_pdu ( indent , HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LINK_SUPERV_TIMEOUT:
        return display_HCI_READ_LINK_SUPERV_TIMEOUT_pdu ( indent , HCI_READ_LINK_SUPERV_TIMEOUT_RET_T_PDU ( pdu ) , policy );
    case HCI_PRIVATE_PAIRING_REQ_REPLY:
        return display_HCI_PRIVATE_PAIRING_REQ_REPLY_pdu ( indent , HCI_PRIVATE_PAIRING_REQ_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_PIN_CODE_REQ_REPLY:
        return display_HCI_PIN_CODE_REQ_REPLY_pdu ( indent , HCI_PIN_CODE_REQ_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_USER_CONFIRMATION_REQUEST_REPLY:
        return display_HCI_USER_CONFIRMATION_REQUEST_REPLY_pdu ( indent , HCI_USER_CONFIRMATION_REQUEST_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_AFH_CHANNEL_MAP:
        return display_HCI_READ_AFH_CHANNEL_MAP_pdu ( indent , HCI_READ_AFH_CHANNEL_MAP_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_AFH_CHANNEL_CLASS_M:
        return display_HCI_READ_AFH_CHANNEL_CLASS_M_pdu ( indent , HCI_READ_AFH_CHANNEL_CLASS_M_RET_T_PDU ( pdu ) , policy );
    case HCI_GENERATED_ALIAS:
        return display_HCI_GENERATED_ALIAS_pdu ( indent , HCI_GENERATED_ALIAS_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGESCAN_ACTIVITY:
        return display_HCI_READ_PAGESCAN_ACTIVITY_pdu ( indent , HCI_READ_PAGESCAN_ACTIVITY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_DEFAULT_LINK_POLICY_SETTINGS:
        return display_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_pdu ( indent , HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_SUPP_COMMANDS:
        return display_HCI_READ_LOCAL_SUPP_COMMANDS_pdu ( indent , HCI_READ_LOCAL_SUPP_COMMANDS_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGESCAN_MODE:
        return display_HCI_READ_PAGESCAN_MODE_pdu ( indent , HCI_READ_PAGESCAN_MODE_RET_T_PDU ( pdu ) , policy );
    case HCI_USER_PASSKEY_REQUEST_NEG_REPLY:
        return display_HCI_USER_PASSKEY_REQUEST_NEG_REPLY_pdu ( indent , HCI_USER_PASSKEY_REQUEST_NEG_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_CREATE_CONNECTION_CANCEL:
        return display_HCI_CREATE_CONNECTION_CANCEL_pdu ( indent , HCI_CREATE_CONNECTION_CANCEL_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_ENC_MODE:
        return display_HCI_READ_ENC_MODE_pdu ( indent , HCI_READ_ENC_MODE_RET_T_PDU ( pdu ) , policy );
    case HCI_REMOTE_OOB_DATA_REQUEST_REPLY:
        return display_HCI_REMOTE_OOB_DATA_REQUEST_REPLY_pdu ( indent , HCI_REMOTE_OOB_DATA_REQUEST_REPLY_RET_T_PDU ( pdu ) , policy );
    case HCI_WRITE_LINK_SUPERV_TIMEOUT:
        return display_HCI_WRITE_LINK_SUPERV_TIMEOUT_pdu ( indent , HCI_WRITE_LINK_SUPERV_TIMEOUT_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_ANON_ADDR_CHANGE_PARAMS:
        return display_HCI_READ_ANON_ADDR_CHANGE_PARAMS_pdu ( indent , HCI_READ_ANON_ADDR_CHANGE_PARAMS_RET_T_PDU ( pdu ) , policy );
    case HCI_FLUSH:
        return display_HCI_FLUSH_pdu ( indent , HCI_FLUSH_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_SUPP_FEATURES:
        return display_HCI_READ_LOCAL_SUPP_FEATURES_pdu ( indent , HCI_READ_LOCAL_SUPP_FEATURES_RET_T_PDU ( pdu ) , policy );
    case HCI_WRITE_STORED_LINK_KEY:
        return display_HCI_WRITE_STORED_LINK_KEY_pdu ( indent , HCI_WRITE_STORED_LINK_KEY_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_RSSI:
        return display_HCI_READ_RSSI_pdu ( indent , HCI_READ_RSSI_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_STORED_LINK_KEY:
        return display_HCI_READ_STORED_LINK_KEY_pdu ( indent , HCI_READ_STORED_LINK_KEY_RET_T_PDU ( pdu ) , policy );
    case HCI_WRITE_LINK_POLICY_SETTINGS:
        return display_HCI_WRITE_LINK_POLICY_SETTINGS_pdu ( indent , HCI_WRITE_LINK_POLICY_SETTINGS_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_ANON_MODE:
        return display_HCI_READ_ANON_MODE_pdu ( indent , HCI_READ_ANON_MODE_RET_T_PDU ( pdu ) , policy );
    case HCI_READ_CLASS_OF_DEVICE:
        return display_HCI_READ_CLASS_OF_DEVICE_pdu ( indent , HCI_READ_CLASS_OF_DEVICE_RET_T_PDU ( pdu ) , policy );
    default:
        //  pdu doesn't have any data with it.
		{
		HCICommandCompletePDU prim(pdu);
        return policy->display_prim_start ( indent , "HCI_COMMAND_COMPLETE" )
		     + policy->display_uint8 ( indent + 1 , "event_code" , prim.get_event_code() )
		     + policy->display_uint8 ( indent + 1 , "parameter_length" , prim.get_parameter_length() )
		     + policy->display_uint8 ( indent + 1 , "status" , prim.get_status() )
             + policy->display_uint8 ( indent + 1 , "num_hci_command_packets" , prim.get_num_hci_command_pkts() )
             + policy->display_uint16 ( indent + 1 , "op_code" , prim.get_op_code() ) 
			 + policy->display_prim_end ( indent , "HCI_COMMAND_COMPLETE" );
		}
    }
}

a_string display_cmd_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( CMD_PDU ( pdu ).get_op_code() )
    {
    case HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL:
        return display_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_pdu ( indent , HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_T_PDU ( pdu ) , policy );
    case HCI_READ_LMP_HANDLE:
        return display_HCI_READ_LMP_HANDLE_pdu ( indent , HCI_READ_LMP_HANDLE_T_PDU ( pdu ) , policy );
    case HCI_REJECT_SYNCHRONOUS_CONN_REQ:
        return display_HCI_REJECT_SYNCHRONOUS_CONN_REQ_pdu ( indent , HCI_REJECT_SYNCHRONOUS_CONN_REQ_T_PDU ( pdu ) , policy );
    case HCI_ADD_SCO_CONNECTION:
        return display_HCI_ADD_SCO_CONNECTION_pdu ( indent , HCI_ADD_SCO_CONNECTION_T_PDU ( pdu ) , policy );
    case HCI_WRITE_ANON_MODE:
        return display_HCI_WRITE_ANON_MODE_pdu ( indent , HCI_WRITE_ANON_MODE_T_PDU ( pdu ) , policy );
    case HCI_SEND_KEYPRESS_NOTIFICATION:
        return display_HCI_SEND_KEYPRESS_NOTIFICATION_pdu ( indent , HCI_SEND_KEYPRESS_NOTIFICATION_T_PDU ( pdu ) , policy );
    case HCI_CHANGE_CONN_LINK_KEY:
        return display_HCI_CHANGE_CONN_LINK_KEY_pdu ( indent , HCI_CHANGE_CONN_LINK_KEY_T_PDU ( pdu ) , policy );
    case HCI_ALIAS_ADDRESS_REQ_NEG_REPLY:
        return display_HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_pdu ( indent , HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_AUTO_FLUSH_TIMEOUT:
        return display_HCI_WRITE_AUTO_FLUSH_TIMEOUT_pdu ( indent , HCI_WRITE_AUTO_FLUSH_TIMEOUT_T_PDU ( pdu ) , policy );
    case HCI_WRITE_SCO_FLOW_CON_ENABLE:
        return display_HCI_WRITE_SCO_FLOW_CON_ENABLE_pdu ( indent , HCI_WRITE_SCO_FLOW_CON_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_ULP_CREATE_CONNECTION_CANCEL:
        return display_HCI_ULP_CREATE_CONNECTION_CANCEL_pdu ( indent , HCI_ULP_CREATE_CONNECTION_CANCEL_T_PDU ( pdu ) , policy );
    case HCI_READ_NUM_SUPPORTED_IAC:
        return display_HCI_READ_NUM_SUPPORTED_IAC_pdu ( indent , HCI_READ_NUM_SUPPORTED_IAC_T_PDU ( pdu ) , policy );
    case HCI_WRITE_AUTH_ENABLE:
        return display_HCI_WRITE_AUTH_ENABLE_pdu ( indent , HCI_WRITE_AUTH_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_READ_LINK_POLICY_SETTINGS:
        return display_HCI_READ_LINK_POLICY_SETTINGS_pdu ( indent , HCI_READ_LINK_POLICY_SETTINGS_T_PDU ( pdu ) , policy );
    case HCI_READ_SCO_FLOW_CON_ENABLE:
        return display_HCI_READ_SCO_FLOW_CON_ENABLE_pdu ( indent , HCI_READ_SCO_FLOW_CON_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_ULP_CLEAR_WHITE_LIST:
        return display_HCI_ULP_CLEAR_WHITE_LIST_pdu ( indent , HCI_ULP_CLEAR_WHITE_LIST_T_PDU ( pdu ) , policy );
    case HCI_READ_STORED_LINK_KEY:
        return display_HCI_READ_STORED_LINK_KEY_pdu ( indent , HCI_READ_STORED_LINK_KEY_T_PDU ( pdu ) , policy );
    case HCI_SWITCH_ROLE:
        return display_HCI_SWITCH_ROLE_pdu ( indent , HCI_SWITCH_ROLE_T_PDU ( pdu ) , policy );
    case HCI_INQUIRY:
        return display_HCI_INQUIRY_pdu ( indent , HCI_INQUIRY_T_PDU ( pdu ) , policy );
    case HCI_READ_REMOTE_EXT_FEATURES:
        return display_HCI_READ_REMOTE_EXT_FEATURES_pdu ( indent , HCI_READ_REMOTE_EXT_FEATURES_T_PDU ( pdu ) , policy );
    case HCI_ULP_TRANSMITTER_TEST:
        return display_HCI_ULP_TRANSMITTER_TEST_pdu ( indent , HCI_ULP_TRANSMITTER_TEST_T_PDU ( pdu ) , policy );
    case HCI_WRITE_INQUIRY_SCAN_TYPE:
        return display_HCI_WRITE_INQUIRY_SCAN_TYPE_pdu ( indent , HCI_WRITE_INQUIRY_SCAN_TYPE_T_PDU ( pdu ) , policy );
    case HCI_RESET:
        return display_HCI_RESET_pdu ( indent , HCI_RESET_T_PDU ( pdu ) , policy );
    case HCI_ULP_RAND:
        return display_HCI_ULP_RAND_pdu ( indent , HCI_ULP_RAND_T_PDU ( pdu ) , policy );
    case HCI_REFRESH_ENCRYPTION_KEY:
        return display_HCI_REFRESH_ENCRYPTION_KEY_pdu ( indent , HCI_REFRESH_ENCRYPTION_KEY_T_PDU ( pdu ) , policy );
    case HCI_EXCHANGE_FIXED_INFO:
        return display_HCI_EXCHANGE_FIXED_INFO_pdu ( indent , HCI_EXCHANGE_FIXED_INFO_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER:
        return display_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_pdu ( indent , HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_T_PDU ( pdu ) , policy );
    case HCI_SETUP_SYNCHRONOUS_CONN:
        return display_HCI_SETUP_SYNCHRONOUS_CONN_pdu ( indent , HCI_SETUP_SYNCHRONOUS_CONN_T_PDU ( pdu ) , policy );
    case HCI_READ_INQUIRY_SCAN_TYPE:
        return display_HCI_READ_INQUIRY_SCAN_TYPE_pdu ( indent , HCI_READ_INQUIRY_SCAN_TYPE_T_PDU ( pdu ) , policy );
    case HCI_FLUSH:
        return display_HCI_FLUSH_pdu ( indent , HCI_FLUSH_T_PDU ( pdu ) , policy );
    case HCI_ULP_START_ENCRYPTION:
        return display_HCI_ULP_START_ENCRYPTION_pdu ( indent , HCI_ULP_START_ENCRYPTION_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_WHITE_LIST_SIZE:
        return display_HCI_ULP_READ_WHITE_LIST_SIZE_pdu ( indent , HCI_ULP_READ_WHITE_LIST_SIZE_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_SCAN_ENABLE:
        return display_HCI_ULP_SET_SCAN_ENABLE_pdu ( indent , HCI_ULP_SET_SCAN_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_SET_AFH_CHANNEL_CLASS:
        return display_HCI_SET_AFH_CHANNEL_CLASS_pdu ( indent , HCI_SET_AFH_CHANNEL_CLASS_T_PDU ( pdu ) , policy );
    case HCI_IO_CAPABILITY_RESPONSE:
        return display_HCI_IO_CAPABILITY_RESPONSE_pdu ( indent , HCI_IO_CAPABILITY_RESPONSE_T_PDU ( pdu ) , policy );
    case HCI_SET_CONN_ENCRYPTION:
        return display_HCI_SET_CONN_ENCRYPTION_pdu ( indent , HCI_SET_CONN_ENCRYPTION_T_PDU ( pdu ) , policy );
    case HCI_READ_PIN_TYPE:
        return display_HCI_READ_PIN_TYPE_pdu ( indent , HCI_READ_PIN_TYPE_T_PDU ( pdu ) , policy );
    case HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY:
        return display_HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_pdu ( indent , HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_T_PDU ( pdu ) , policy );
    case HCI_ULP_TEST_END:
        return display_HCI_ULP_TEST_END_pdu ( indent , HCI_ULP_TEST_END_T_PDU ( pdu ) , policy );
    case HCI_HOST_NUM_COMPLETED_PACKETS:
        return display_HCI_HOST_NUM_COMPLETED_PACKETS_pdu ( indent , HCI_HOST_NUM_COMPLETED_PACKETS_T_PDU ( pdu ) , policy );
    case HCI_READ_REMOTE_SUPP_FEATURES:
        return display_HCI_READ_REMOTE_SUPP_FEATURES_pdu ( indent , HCI_READ_REMOTE_SUPP_FEATURES_T_PDU ( pdu ) , policy );
    case HCI_READ_REMOTE_VER_INFO:
        return display_HCI_READ_REMOTE_VER_INFO_pdu ( indent , HCI_READ_REMOTE_VER_INFO_T_PDU ( pdu ) , policy );
    case HCI_HOST_BUFFER_SIZE:
        return display_HCI_HOST_BUFFER_SIZE_pdu ( indent , HCI_HOST_BUFFER_SIZE_T_PDU ( pdu ) , policy );
    case HCI_ALIAS_ADDRESS_REQ_REPLY:
        return display_HCI_ALIAS_ADDRESS_REQ_REPLY_pdu ( indent , HCI_ALIAS_ADDRESS_REQ_REPLY_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGESCAN_MODE:
        return display_HCI_READ_PAGESCAN_MODE_pdu ( indent , HCI_READ_PAGESCAN_MODE_T_PDU ( pdu ) , policy );
    case HCI_WRITE_SIMPLE_PAIRING_MODE:
        return display_HCI_WRITE_SIMPLE_PAIRING_MODE_pdu ( indent , HCI_WRITE_SIMPLE_PAIRING_MODE_T_PDU ( pdu ) , policy );
    case HCI_ULP_CONNECTION_UPDATE:
        return display_HCI_ULP_CONNECTION_UPDATE_pdu ( indent , HCI_ULP_CONNECTION_UPDATE_T_PDU ( pdu ) , policy );
    case HCI_READ_CLOCK:
        return display_HCI_READ_CLOCK_pdu ( indent , HCI_READ_CLOCK_T_PDU ( pdu ) , policy );
    case HCI_ENHANCED_FLUSH:
        return display_HCI_ENHANCED_FLUSH_pdu ( indent , HCI_ENHANCED_FLUSH_T_PDU ( pdu ) , policy );
    case HCI_READ_DEFAULT_LINK_POLICY_SETTINGS:
        return display_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_pdu ( indent , HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_T_PDU ( pdu ) , policy );
    case HCI_PERIODIC_INQUIRY_MODE:
        return display_HCI_PERIODIC_INQUIRY_MODE_pdu ( indent , HCI_PERIODIC_INQUIRY_MODE_T_PDU ( pdu ) , policy );
    case HCI_MNFR_EXTENSION:
        return display_HCI_MNFR_EXTENSION_pdu ( indent , HCI_MNFR_EXTENSION_T_PDU ( pdu ) , policy );
    case HCI_ROLE_DISCOVERY:
        return display_HCI_ROLE_DISCOVERY_pdu ( indent , HCI_ROLE_DISCOVERY_T_PDU ( pdu ) , policy );
    case HCI_SET_EVENT_FILTER:
        return display_HCI_SET_EVENT_FILTER_pdu ( indent , HCI_SET_EVENT_FILTER_T_PDU ( pdu ) , policy );
    case HCI_PRIVATE_PAIRING_REQ_REPLY:
        return display_HCI_PRIVATE_PAIRING_REQ_REPLY_pdu ( indent , HCI_PRIVATE_PAIRING_REQ_REPLY_T_PDU ( pdu ) , policy );
    case HCI_READ_INQUIRYSCAN_ACTIVITY:
        return display_HCI_READ_INQUIRYSCAN_ACTIVITY_pdu ( indent , HCI_READ_INQUIRYSCAN_ACTIVITY_T_PDU ( pdu ) , policy );
    case HCI_READ_SIMPLE_PAIRING_MODE:
        return display_HCI_READ_SIMPLE_PAIRING_MODE_pdu ( indent , HCI_READ_SIMPLE_PAIRING_MODE_T_PDU ( pdu ) , policy );
    case HCI_WRITE_INQUIRY_MODE:
        return display_HCI_WRITE_INQUIRY_MODE_pdu ( indent , HCI_WRITE_INQUIRY_MODE_T_PDU ( pdu ) , policy );
    case HCI_USER_CONFIRMATION_REQUEST_REPLY:
        return display_HCI_USER_CONFIRMATION_REQUEST_REPLY_pdu ( indent , HCI_USER_CONFIRMATION_REQUEST_REPLY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_PAGE_TIMEOUT:
        return display_HCI_WRITE_PAGE_TIMEOUT_pdu ( indent , HCI_WRITE_PAGE_TIMEOUT_T_PDU ( pdu ) , policy );
    case HCI_ULP_ADD_DEVICE_TO_WHITE_LIST:
        return display_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_pdu ( indent , HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGESCAN_PERIOD_MODE:
        return display_HCI_READ_PAGESCAN_PERIOD_MODE_pdu ( indent , HCI_READ_PAGESCAN_PERIOD_MODE_T_PDU ( pdu ) , policy );
    case HCI_WRITE_PAGE_SCAN_TYPE:
        return display_HCI_WRITE_PAGE_SCAN_TYPE_pdu ( indent , HCI_WRITE_PAGE_SCAN_TYPE_T_PDU ( pdu ) , policy );
    case HCI_REMOTE_NAME_REQ:
        return display_HCI_REMOTE_NAME_REQ_pdu ( indent , HCI_REMOTE_NAME_REQ_T_PDU ( pdu ) , policy );
    case HCI_CREATE_CONNECTION_CANCEL:
        return display_HCI_CREATE_CONNECTION_CANCEL_pdu ( indent , HCI_CREATE_CONNECTION_CANCEL_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGE_SCAN_TYPE:
        return display_HCI_READ_PAGE_SCAN_TYPE_pdu ( indent , HCI_READ_PAGE_SCAN_TYPE_T_PDU ( pdu ) , policy );
    case HCI_REMOTE_OOB_DATA_REQUEST_REPLY:
        return display_HCI_REMOTE_OOB_DATA_REQUEST_REPLY_pdu ( indent , HCI_REMOTE_OOB_DATA_REQUEST_REPLY_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_NAME:
        return display_HCI_READ_LOCAL_NAME_pdu ( indent , HCI_READ_LOCAL_NAME_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_VER_INFO:
        return display_HCI_READ_LOCAL_VER_INFO_pdu ( indent , HCI_READ_LOCAL_VER_INFO_T_PDU ( pdu ) , policy );
    case HCI_DISCONNECT:
        return display_HCI_DISCONNECT_pdu ( indent , HCI_DISCONNECT_T_PDU ( pdu ) , policy );
    case HCI_WRITE_AFH_CHANNEL_CLASS_M:
        return display_HCI_WRITE_AFH_CHANNEL_CLASS_M_pdu ( indent , HCI_WRITE_AFH_CHANNEL_CLASS_M_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION:
        return display_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_pdu ( indent , HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_T_PDU ( pdu ) , policy );
    case HCI_READ_ENC_MODE:
        return display_HCI_READ_ENC_MODE_pdu ( indent , HCI_READ_ENC_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_BD_ADDR:
        return display_HCI_READ_BD_ADDR_pdu ( indent , HCI_READ_BD_ADDR_T_PDU ( pdu ) , policy );
    case HCI_GENERATED_ALIAS:
        return display_HCI_GENERATED_ALIAS_pdu ( indent , HCI_GENERATED_ALIAS_T_PDU ( pdu ) , policy );
    case HCI_PRIVATE_PAIRING_REQ_NEG_REPLY:
        return display_HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_pdu ( indent , HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_T_PDU ( pdu ) , policy );
    case HCI_LINK_KEY_REQ_REPLY:
        return display_HCI_LINK_KEY_REQ_REPLY_pdu ( indent , HCI_LINK_KEY_REQ_REPLY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_NUM_BCAST_RETXS:
        return display_HCI_WRITE_NUM_BCAST_RETXS_pdu ( indent , HCI_WRITE_NUM_BCAST_RETXS_T_PDU ( pdu ) , policy );
    case HCI_PIN_CODE_REQ_NEG_REPLY:
        return display_HCI_PIN_CODE_REQ_NEG_REPLY_pdu ( indent , HCI_PIN_CODE_REQ_NEG_REPLY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_ALIAS_AUTH_ENABLE:
        return display_HCI_WRITE_ALIAS_AUTH_ENABLE_pdu ( indent , HCI_WRITE_ALIAS_AUTH_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_WRITE_LE_HOST_SUPPORT:
        return display_HCI_WRITE_LE_HOST_SUPPORT_pdu ( indent , HCI_WRITE_LE_HOST_SUPPORT_T_PDU ( pdu ) , policy );
    case HCI_MASTER_LINK_KEY:
        return display_HCI_MASTER_LINK_KEY_pdu ( indent , HCI_MASTER_LINK_KEY_T_PDU ( pdu ) , policy );
    case HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY:
        return display_HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_pdu ( indent , HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_T_PDU ( pdu ) , policy );
    case HCI_ULP_ENCRYPT:
        return display_HCI_ULP_ENCRYPT_pdu ( indent , HCI_ULP_ENCRYPT_T_PDU ( pdu ) , policy );
    case HCI_READ_AFH_CHANNEL_CLASS_M:
        return display_HCI_READ_AFH_CHANNEL_CLASS_M_pdu ( indent , HCI_READ_AFH_CHANNEL_CLASS_M_T_PDU ( pdu ) , policy );
    case HCI_WRITE_HOLD_MODE_ACTIVITY:
        return display_HCI_WRITE_HOLD_MODE_ACTIVITY_pdu ( indent , HCI_WRITE_HOLD_MODE_ACTIVITY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL:
        return display_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_pdu ( indent , HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_T_PDU ( pdu ) , policy );
    case HCI_READ_SCAN_ENABLE:
        return display_HCI_READ_SCAN_ENABLE_pdu ( indent , HCI_READ_SCAN_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_READ_ENCRYPTION_KEY_SIZE:
        return display_HCI_READ_ENCRYPTION_KEY_SIZE_pdu ( indent , HCI_READ_ENCRYPTION_KEY_SIZE_T_PDU ( pdu ) , policy );
    case HCI_WRITE_LINK_POLICY_SETTINGS:
        return display_HCI_WRITE_LINK_POLICY_SETTINGS_pdu ( indent , HCI_WRITE_LINK_POLICY_SETTINGS_T_PDU ( pdu ) , policy );
    case HCI_READ_ALIAS_AUTH_ENABLE:
        return display_HCI_READ_ALIAS_AUTH_ENABLE_pdu ( indent , HCI_READ_ALIAS_AUTH_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_PIN_CODE_REQ_REPLY:
        return display_HCI_PIN_CODE_REQ_REPLY_pdu ( indent , HCI_PIN_CODE_REQ_REPLY_T_PDU ( pdu ) , policy );
    case HCI_CREATE_NEW_UNIT_KEY:
        return display_HCI_CREATE_NEW_UNIT_KEY_pdu ( indent , HCI_CREATE_NEW_UNIT_KEY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_PAGESCAN_MODE:
        return display_HCI_WRITE_PAGESCAN_MODE_pdu ( indent , HCI_WRITE_PAGESCAN_MODE_T_PDU ( pdu ) , policy );
    case HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA:
        return display_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( indent , HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU ( pdu ) , policy );
    case HCI_EXIT_SNIFF_MODE:
        return display_HCI_EXIT_SNIFF_MODE_pdu ( indent , HCI_EXIT_SNIFF_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_LOOPBACK_MODE:
        return display_HCI_READ_LOOPBACK_MODE_pdu ( indent , HCI_READ_LOOPBACK_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA:
        return display_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_pdu ( indent , HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU ( pdu ) , policy );
    case HCI_READ_FAILED_CONTACT_COUNT:
        return display_HCI_READ_FAILED_CONTACT_COUNT_pdu ( indent , HCI_READ_FAILED_CONTACT_COUNT_T_PDU ( pdu ) , policy );
    case HCI_SNIFF_SUB_RATE:
        return display_HCI_SNIFF_SUB_RATE_pdu ( indent , HCI_SNIFF_SUB_RATE_T_PDU ( pdu ) , policy );
    case HCI_READ_ANON_MODE:
        return display_HCI_READ_ANON_MODE_pdu ( indent , HCI_READ_ANON_MODE_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_SCAN_PARAMETERS:
        return display_HCI_ULP_SET_SCAN_PARAMETERS_pdu ( indent , HCI_ULP_SET_SCAN_PARAMETERS_T_PDU ( pdu ) , policy );
    case HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE:
        return display_HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_pdu ( indent , HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_AUTO_FLUSH_TIMEOUT:
        return display_HCI_READ_AUTO_FLUSH_TIMEOUT_pdu ( indent , HCI_READ_AUTO_FLUSH_TIMEOUT_T_PDU ( pdu ) , policy );
    case HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY:
        return display_HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_pdu ( indent , HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_T_PDU ( pdu ) , policy );
    case HCI_DELETE_STORED_LINK_KEY:
        return display_HCI_DELETE_STORED_LINK_KEY_pdu ( indent , HCI_DELETE_STORED_LINK_KEY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_CLASS_OF_DEVICE:
        return display_HCI_WRITE_CLASS_OF_DEVICE_pdu ( indent , HCI_WRITE_CLASS_OF_DEVICE_T_PDU ( pdu ) , policy );
    case HCI_WRITE_PIN_TYPE:
        return display_HCI_WRITE_PIN_TYPE_pdu ( indent , HCI_WRITE_PIN_TYPE_T_PDU ( pdu ) , policy );
    case HCI_EXIT_PARK_MODE:
        return display_HCI_EXIT_PARK_MODE_pdu ( indent , HCI_EXIT_PARK_MODE_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_ADVERTISE_ENABLE:
        return display_HCI_ULP_SET_ADVERTISE_ENABLE_pdu ( indent , HCI_ULP_SET_ADVERTISE_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_QOS_SETUP:
        return display_HCI_QOS_SETUP_pdu ( indent , HCI_QOS_SETUP_T_PDU ( pdu ) , policy );
    case HCI_WRITE_PAGESCAN_ACTIVITY:
        return display_HCI_WRITE_PAGESCAN_ACTIVITY_pdu ( indent , HCI_WRITE_PAGESCAN_ACTIVITY_T_PDU ( pdu ) , policy );
    case HCI_READ_VOICE_SETTING:
        return display_HCI_READ_VOICE_SETTING_pdu ( indent , HCI_READ_VOICE_SETTING_T_PDU ( pdu ) , policy );
    case HCI_PARK_MODE:
        return display_HCI_PARK_MODE_pdu ( indent , HCI_PARK_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_COUNTRY_CODE:
        return display_HCI_READ_COUNTRY_CODE_pdu ( indent , HCI_READ_COUNTRY_CODE_T_PDU ( pdu ) , policy );
    case HCI_SET_EVENT_MASK:
        return display_HCI_SET_EVENT_MASK_pdu ( indent , HCI_SET_EVENT_MASK_T_PDU ( pdu ) , policy );
    case HCI_HOLD_MODE:
        return display_HCI_HOLD_MODE_pdu ( indent , HCI_HOLD_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_AUTH_ENABLE:
        return display_HCI_READ_AUTH_ENABLE_pdu ( indent , HCI_READ_AUTH_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_OOB_DATA:
        return display_HCI_READ_LOCAL_OOB_DATA_pdu ( indent , HCI_READ_LOCAL_OOB_DATA_T_PDU ( pdu ) , policy );
    case HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS:
        return display_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_pdu ( indent , HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGESCAN_ACTIVITY:
        return display_HCI_READ_PAGESCAN_ACTIVITY_pdu ( indent , HCI_READ_PAGESCAN_ACTIVITY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_CURRENT_IAC_LAP:
        return display_HCI_WRITE_CURRENT_IAC_LAP_pdu ( indent , HCI_WRITE_CURRENT_IAC_LAP_T_PDU ( pdu ) , policy );
    case HCI_ACCEPT_CONNECTION_REQ:
        return display_HCI_ACCEPT_CONNECTION_REQ_pdu ( indent , HCI_ACCEPT_CONNECTION_REQ_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES:
        return display_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_pdu ( indent , HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_T_PDU ( pdu ) , policy );
    case HCI_READ_TX_POWER_LEVEL:
        return display_HCI_READ_TX_POWER_LEVEL_pdu ( indent , HCI_READ_TX_POWER_LEVEL_T_PDU ( pdu ) , policy );
    case HCI_WRITE_LINK_SUPERV_TIMEOUT:
        return display_HCI_WRITE_LINK_SUPERV_TIMEOUT_pdu ( indent , HCI_WRITE_LINK_SUPERV_TIMEOUT_T_PDU ( pdu ) , policy );
    case HCI_AUTH_REQ:
        return display_HCI_AUTH_REQ_pdu ( indent , HCI_AUTH_REQ_T_PDU ( pdu ) , policy );
    case HCI_INQUIRY_CANCEL:
        return display_HCI_INQUIRY_CANCEL_pdu ( indent , HCI_INQUIRY_CANCEL_T_PDU ( pdu ) , policy );
    case HCI_WRITE_INQUIRYSCAN_ACTIVITY:
        return display_HCI_WRITE_INQUIRYSCAN_ACTIVITY_pdu ( indent , HCI_WRITE_INQUIRYSCAN_ACTIVITY_T_PDU ( pdu ) , policy );
    case HCI_READ_NUM_BCAST_RETXS:
        return display_HCI_READ_NUM_BCAST_RETXS_pdu ( indent , HCI_READ_NUM_BCAST_RETXS_T_PDU ( pdu ) , policy );
    case HCI_READ_AFH_CHANNEL_MAP:
        return display_HCI_READ_AFH_CHANNEL_MAP_pdu ( indent , HCI_READ_AFH_CHANNEL_MAP_T_PDU ( pdu ) , policy );
    case HCI_USER_PASSKEY_REQUEST_REPLY:
        return display_HCI_USER_PASSKEY_REQUEST_REPLY_pdu ( indent , HCI_USER_PASSKEY_REQUEST_REPLY_T_PDU ( pdu ) , policy );
    case HCI_WRITE_PAGESCAN_PERIOD_MODE:
        return display_HCI_WRITE_PAGESCAN_PERIOD_MODE_pdu ( indent , HCI_WRITE_PAGESCAN_PERIOD_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_LE_HOST_SUPPORT:
        return display_HCI_READ_LE_HOST_SUPPORT_pdu ( indent , HCI_READ_LE_HOST_SUPPORT_T_PDU ( pdu ) , policy );
    case HCI_READ_LINK_SUPERV_TIMEOUT:
        return display_HCI_READ_LINK_SUPERV_TIMEOUT_pdu ( indent , HCI_READ_LINK_SUPERV_TIMEOUT_T_PDU ( pdu ) , policy );
    case HCI_EXCHANGE_ALIAS_INFO:
        return display_HCI_EXCHANGE_ALIAS_INFO_pdu ( indent , HCI_EXCHANGE_ALIAS_INFO_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_SCAN_RESPONSE_DATA:
        return display_HCI_ULP_SET_SCAN_RESPONSE_DATA_pdu ( indent , HCI_ULP_SET_SCAN_RESPONSE_DATA_T_PDU ( pdu ) , policy );
    case HCI_WRITE_CONN_ACCEPT_TIMEOUT:
        return display_HCI_WRITE_CONN_ACCEPT_TIMEOUT_pdu ( indent , HCI_WRITE_CONN_ACCEPT_TIMEOUT_T_PDU ( pdu ) , policy );
    case HCI_RESET_FAILED_CONTACT_COUNT:
        return display_HCI_RESET_FAILED_CONTACT_COUNT_pdu ( indent , HCI_RESET_FAILED_CONTACT_COUNT_T_PDU ( pdu ) , policy );
    case HCI_WRITE_LOOPBACK_MODE:
        return display_HCI_WRITE_LOOPBACK_MODE_pdu ( indent , HCI_WRITE_LOOPBACK_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_ANON_ADDR_CHANGE_PARAMS:
        return display_HCI_READ_ANON_ADDR_CHANGE_PARAMS_pdu ( indent , HCI_READ_ANON_ADDR_CHANGE_PARAMS_T_PDU ( pdu ) , policy );
    case HCI_ULP_CREATE_CONNECTION:
        return display_HCI_ULP_CREATE_CONNECTION_pdu ( indent , HCI_ULP_CREATE_CONNECTION_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_SUPP_FEATURES:
        return display_HCI_READ_LOCAL_SUPP_FEATURES_pdu ( indent , HCI_READ_LOCAL_SUPP_FEATURES_T_PDU ( pdu ) , policy );
    case HCI_READ_RSSI:
        return display_HCI_READ_RSSI_pdu ( indent , HCI_READ_RSSI_T_PDU ( pdu ) , policy );
    case HCI_EXIT_PERIODIC_INQUIRY_MODE:
        return display_HCI_EXIT_PERIODIC_INQUIRY_MODE_pdu ( indent , HCI_EXIT_PERIODIC_INQUIRY_MODE_T_PDU ( pdu ) , policy );
    case HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY:
        return display_HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_pdu ( indent , HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_T_PDU ( pdu ) , policy );
    case HCI_ACCEPT_SYNCHRONOUS_CONN_REQ:
        return display_HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_pdu ( indent , HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_T_PDU ( pdu ) , policy );
    case HCI_WRITE_ENC_MODE:
        return display_HCI_WRITE_ENC_MODE_pdu ( indent , HCI_WRITE_ENC_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_CONN_ACCEPT_TIMEOUT:
        return display_HCI_READ_CONN_ACCEPT_TIMEOUT_pdu ( indent , HCI_READ_CONN_ACCEPT_TIMEOUT_T_PDU ( pdu ) , policy );
    case HCI_IO_CAPABILITY_REQUEST_NEG_REPLY:
        return display_HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_pdu ( indent , HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_T_PDU ( pdu ) , policy );
    case HCI_ENABLE_DUT_MODE:
        return display_HCI_ENABLE_DUT_MODE_pdu ( indent , HCI_ENABLE_DUT_MODE_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_SUPPORTED_STATES:
        return display_HCI_ULP_READ_SUPPORTED_STATES_pdu ( indent , HCI_ULP_READ_SUPPORTED_STATES_T_PDU ( pdu ) , policy );
    case HCI_GET_LINK_QUALITY:
        return display_HCI_GET_LINK_QUALITY_pdu ( indent , HCI_GET_LINK_QUALITY_T_PDU ( pdu ) , policy );
    case HCI_CHANGE_CONN_PKT_TYPE:
        return display_HCI_CHANGE_CONN_PKT_TYPE_pdu ( indent , HCI_CHANGE_CONN_PKT_TYPE_T_PDU ( pdu ) , policy );
    case HCI_WRITE_VOICE_SETTING:
        return display_HCI_WRITE_VOICE_SETTING_pdu ( indent , HCI_WRITE_VOICE_SETTING_T_PDU ( pdu ) , policy );
    case HCI_READ_ENH_TX_POWER_LEVEL:
        return display_HCI_READ_ENH_TX_POWER_LEVEL_pdu ( indent , HCI_READ_ENH_TX_POWER_LEVEL_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_RANDOM_ADDRESS:
        return display_HCI_ULP_SET_RANDOM_ADDRESS_pdu ( indent , HCI_ULP_SET_RANDOM_ADDRESS_T_PDU ( pdu ) , policy );
    case HCI_READ_CLOCK_OFFSET:
        return display_HCI_READ_CLOCK_OFFSET_pdu ( indent , HCI_READ_CLOCK_OFFSET_T_PDU ( pdu ) , policy );
    case HCI_REMOTE_NAME_REQ_CANCEL:
        return display_HCI_REMOTE_NAME_REQ_CANCEL_pdu ( indent , HCI_REMOTE_NAME_REQ_CANCEL_T_PDU ( pdu ) , policy );
    case HCI_WRITE_STORED_LINK_KEY:
        return display_HCI_WRITE_STORED_LINK_KEY_pdu ( indent , HCI_WRITE_STORED_LINK_KEY_T_PDU ( pdu ) , policy );
    case HCI_ULP_RECEIVER_TEST:
        return display_HCI_ULP_RECEIVER_TEST_pdu ( indent , HCI_ULP_RECEIVER_TEST_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_BUFFER_SIZE:
        return display_HCI_ULP_READ_BUFFER_SIZE_pdu ( indent , HCI_ULP_READ_BUFFER_SIZE_T_PDU ( pdu ) , policy );
    case HCI_USER_PASSKEY_REQUEST_NEG_REPLY:
        return display_HCI_USER_PASSKEY_REQUEST_NEG_REPLY_pdu ( indent , HCI_USER_PASSKEY_REQUEST_NEG_REPLY_T_PDU ( pdu ) , policy );
    case HCI_LINK_KEY_REQ_NEG_REPLY:
        return display_HCI_LINK_KEY_REQ_NEG_REPLY_pdu ( indent , HCI_LINK_KEY_REQ_NEG_REPLY_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_EXT_FEATURES:
        return display_HCI_READ_LOCAL_EXT_FEATURES_pdu ( indent , HCI_READ_LOCAL_EXT_FEATURES_T_PDU ( pdu ) , policy );
    case HCI_READ_CLASS_OF_DEVICE:
        return display_HCI_READ_CLASS_OF_DEVICE_pdu ( indent , HCI_READ_CLASS_OF_DEVICE_T_PDU ( pdu ) , policy );
    case HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST:
        return display_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_pdu ( indent , HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_T_PDU ( pdu ) , policy );
    case HCI_READ_BUFFER_SIZE:
        return display_HCI_READ_BUFFER_SIZE_pdu ( indent , HCI_READ_BUFFER_SIZE_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_REMOTE_USED_FEATURES:
        return display_HCI_ULP_READ_REMOTE_USED_FEATURES_pdu ( indent , HCI_ULP_READ_REMOTE_USED_FEATURES_T_PDU ( pdu ) , policy );
    case HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER:
        return display_HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_pdu ( indent , HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_T_PDU ( pdu ) , policy );
    case HCI_FLOW_SPEC:
        return display_HCI_FLOW_SPEC_pdu ( indent , HCI_FLOW_SPEC_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_EVENT_MASK:
        return display_HCI_ULP_SET_EVENT_MASK_pdu ( indent , HCI_ULP_SET_EVENT_MASK_T_PDU ( pdu ) , policy );
    case HCI_SET_HCTOHOST_FLOW_CONTROL:
        return display_HCI_SET_HCTOHOST_FLOW_CONTROL_pdu ( indent , HCI_SET_HCTOHOST_FLOW_CONTROL_T_PDU ( pdu ) , policy );
    case HCI_WRITE_SCAN_ENABLE:
        return display_HCI_WRITE_SCAN_ENABLE_pdu ( indent , HCI_WRITE_SCAN_ENABLE_T_PDU ( pdu ) , policy );
    case HCI_ULP_READ_CHANNEL_MAP:
        return display_HCI_ULP_READ_CHANNEL_MAP_pdu ( indent , HCI_ULP_READ_CHANNEL_MAP_T_PDU ( pdu ) , policy );
    case HCI_SNIFF_MODE:
        return display_HCI_SNIFF_MODE_pdu ( indent , HCI_SNIFF_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_LOCAL_SUPP_COMMANDS:
        return display_HCI_READ_LOCAL_SUPP_COMMANDS_pdu ( indent , HCI_READ_LOCAL_SUPP_COMMANDS_T_PDU ( pdu ) , policy );
    case HCI_REJECT_CONNECTION_REQ:
        return display_HCI_REJECT_CONNECTION_REQ_pdu ( indent , HCI_REJECT_CONNECTION_REQ_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_ADVERTISING_PARAMETERS:
        return display_HCI_ULP_SET_ADVERTISING_PARAMETERS_pdu ( indent , HCI_ULP_SET_ADVERTISING_PARAMETERS_T_PDU ( pdu ) , policy );
    case HCI_WRITE_ANON_ADDR_CHANGE_PARAMS:
        return display_HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_pdu ( indent , HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_T_PDU ( pdu ) , policy );
    case HCI_CREATE_CONNECTION:
        return display_HCI_CREATE_CONNECTION_pdu ( indent , HCI_CREATE_CONNECTION_T_PDU ( pdu ) , policy );
    case HCI_READ_CURRENT_IAC_LAP:
        return display_HCI_READ_CURRENT_IAC_LAP_pdu ( indent , HCI_READ_CURRENT_IAC_LAP_T_PDU ( pdu ) , policy );
    case HCI_READ_HOLD_MODE_ACTIVITY:
        return display_HCI_READ_HOLD_MODE_ACTIVITY_pdu ( indent , HCI_READ_HOLD_MODE_ACTIVITY_T_PDU ( pdu ) , policy );
    case HCI_CHANGE_LOCAL_NAME:
        return display_HCI_CHANGE_LOCAL_NAME_pdu ( indent , HCI_CHANGE_LOCAL_NAME_T_PDU ( pdu ) , policy );
    case HCI_ULP_SET_ADVERTISING_DATA:
        return display_HCI_ULP_SET_ADVERTISING_DATA_pdu ( indent , HCI_ULP_SET_ADVERTISING_DATA_T_PDU ( pdu ) , policy );
    case HCI_READ_INQUIRY_MODE:
        return display_HCI_READ_INQUIRY_MODE_pdu ( indent , HCI_READ_INQUIRY_MODE_T_PDU ( pdu ) , policy );
    case HCI_READ_PAGE_TIMEOUT:
        return display_HCI_READ_PAGE_TIMEOUT_pdu ( indent , HCI_READ_PAGE_TIMEOUT_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( CMD_PDU ( pdu ).get_op_code() , "CMD" , pdu );
    }
}

a_string display_evt_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( EVT_PDU ( pdu ).get_event_code() )
    {
    case HCI_EV_USER_PASSKEY_REQUEST:
        return display_HCI_EV_USER_PASSKEY_REQUEST_pdu ( indent , HCI_EV_USER_PASSKEY_REQUEST_T_PDU ( pdu ) , policy );
    case HCI_EV_KEYPRESS_NOTIFICATION:
        return display_HCI_EV_KEYPRESS_NOTIFICATION_pdu ( indent , HCI_EV_KEYPRESS_NOTIFICATION_T_PDU ( pdu ) , policy );
    case HCI_EV_DATA_BUFFER_OVERFLOW:
        return display_HCI_EV_DATA_BUFFER_OVERFLOW_pdu ( indent , HCI_EV_DATA_BUFFER_OVERFLOW_T_PDU ( pdu ) , policy );
    case HCI_EV_ACTIVE_ADDRESS:
        return display_HCI_EV_ACTIVE_ADDRESS_pdu ( indent , HCI_EV_ACTIVE_ADDRESS_T_PDU ( pdu ) , policy );
    case HCI_EV_SYNC_CONN_COMPLETE:
        return display_HCI_EV_SYNC_CONN_COMPLETE_pdu ( indent , HCI_EV_SYNC_CONN_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_ALIAS_ADDRESS_REQ:
        return display_HCI_EV_ALIAS_ADDRESS_REQ_pdu ( indent , HCI_EV_ALIAS_ADDRESS_REQ_T_PDU ( pdu ) , policy );
    case HCI_EV_LINK_KEY_NOTIFICATION:
        return display_HCI_EV_LINK_KEY_NOTIFICATION_pdu ( indent , HCI_EV_LINK_KEY_NOTIFICATION_T_PDU ( pdu ) , policy );
    case HCI_EV_ALLOW_PRIVATE_PAIRING:
        return display_HCI_EV_ALLOW_PRIVATE_PAIRING_pdu ( indent , HCI_EV_ALLOW_PRIVATE_PAIRING_T_PDU ( pdu ) , policy );
    case HCI_EV_DISCONNECT_COMPLETE:
        return display_HCI_EV_DISCONNECT_COMPLETE_pdu ( indent , HCI_EV_DISCONNECT_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_INQUIRY_RESULT:
        return display_HCI_EV_INQUIRY_RESULT_pdu ( indent , HCI_EV_INQUIRY_RESULT_T_PDU ( pdu ) , policy );
    case HCI_EV_LST_CHANGE:
        return display_HCI_EV_LST_CHANGE_pdu ( indent , HCI_EV_LST_CHANGE_T_PDU ( pdu ) , policy );
    case HCI_EV_COMMAND_STATUS:
        return display_HCI_EV_COMMAND_STATUS_pdu ( indent , HCI_EV_COMMAND_STATUS_T_PDU ( pdu ) , policy );
    case HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE:
        return display_HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE_pdu ( indent , HCI_EV_ENCRYPTION_KEY_REFRESH_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_READ_CLOCK_OFFSET_COMPLETE:
        return display_HCI_EV_READ_CLOCK_OFFSET_COMPLETE_pdu ( indent , HCI_EV_READ_CLOCK_OFFSET_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_CONN_REQUEST:
        return display_HCI_EV_CONN_REQUEST_pdu ( indent , HCI_EV_CONN_REQUEST_T_PDU ( pdu ) , policy );
    case HCI_EV_MODE_CHANGE:
        return display_HCI_EV_MODE_CHANGE_pdu ( indent , HCI_EV_MODE_CHANGE_T_PDU ( pdu ) , policy );
    case HCI_EV_USER_PASSKEY_NOTIFICATION:
        return display_HCI_EV_USER_PASSKEY_NOTIFICATION_pdu ( indent , HCI_EV_USER_PASSKEY_NOTIFICATION_T_PDU ( pdu ) , policy );
    case HCI_EV_FIXED_ADDRESS_ATTEMPT:
        return display_HCI_EV_FIXED_ADDRESS_ATTEMPT_pdu ( indent , HCI_EV_FIXED_ADDRESS_ATTEMPT_T_PDU ( pdu ) , policy );
    case HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE:
        return display_HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE_pdu ( indent , HCI_EV_READ_REM_SUPP_FEATURES_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_REMOTE_NAME_REQ_COMPLETE:
        return display_HCI_EV_REMOTE_NAME_REQ_COMPLETE_pdu ( indent , HCI_EV_REMOTE_NAME_REQ_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_CONN_COMPLETE:
        return display_HCI_EV_CONN_COMPLETE_pdu ( indent , HCI_EV_CONN_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_REM_HOST_SUPPORTED_FEATURES:
        return display_HCI_EV_REM_HOST_SUPPORTED_FEATURES_pdu ( indent , HCI_EV_REM_HOST_SUPPORTED_FEATURES_T_PDU ( pdu ) , policy );
    case HCI_EV_GENERATE_ALIAS_REQ:
        return display_HCI_EV_GENERATE_ALIAS_REQ_pdu ( indent , HCI_EV_GENERATE_ALIAS_REQ_T_PDU ( pdu ) , policy );
    case HCI_EV_READ_REMOTE_VER_INFO_COMPLETE:
        return display_HCI_EV_READ_REMOTE_VER_INFO_COMPLETE_pdu ( indent , HCI_EV_READ_REMOTE_VER_INFO_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_EXTENDED_INQUIRY_RESULT:
        return display_HCI_EV_EXTENDED_INQUIRY_RESULT_pdu ( indent , HCI_EV_EXTENDED_INQUIRY_RESULT_T_PDU ( pdu ) , policy );
    case HCI_EV_IO_CAPABILITY_REQUEST:
        return display_HCI_EV_IO_CAPABILITY_REQUEST_pdu ( indent , HCI_EV_IO_CAPABILITY_REQUEST_T_PDU ( pdu ) , policy );
    case HCI_EV_IO_CAPABILITY_RESPONSE:
        return display_HCI_EV_IO_CAPABILITY_RESPONSE_pdu ( indent , HCI_EV_IO_CAPABILITY_RESPONSE_T_PDU ( pdu ) , policy );
    case HCI_EV_ROLE_CHANGE:
        return display_HCI_EV_ROLE_CHANGE_pdu ( indent , HCI_EV_ROLE_CHANGE_T_PDU ( pdu ) , policy );
    case HCI_EV_LINK_KEY_REQ:
        return display_HCI_EV_LINK_KEY_REQ_pdu ( indent , HCI_EV_LINK_KEY_REQ_T_PDU ( pdu ) , policy );
    case HCI_EV_USER_CONFIRMATION_REQUEST:
        return display_HCI_EV_USER_CONFIRMATION_REQUEST_pdu ( indent , HCI_EV_USER_CONFIRMATION_REQUEST_T_PDU ( pdu ) , policy );
    case HCI_EV_FLOW_SPEC_COMPLETE:
        return display_HCI_EV_FLOW_SPEC_COMPLETE_pdu ( indent , HCI_EV_FLOW_SPEC_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_REMOTE_OOB_DATA_REQUEST:
        return display_HCI_EV_REMOTE_OOB_DATA_REQUEST_pdu ( indent , HCI_EV_REMOTE_OOB_DATA_REQUEST_T_PDU ( pdu ) , policy );
    case HCI_EV_MASTER_LINK_KEY_COMPLETE:
        return display_HCI_EV_MASTER_LINK_KEY_COMPLETE_pdu ( indent , HCI_EV_MASTER_LINK_KEY_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_SIMPLE_PAIRING_COMPLETE:
        return display_HCI_EV_SIMPLE_PAIRING_COMPLETE_pdu ( indent , HCI_EV_SIMPLE_PAIRING_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_FLUSH_OCCURRED:
        return display_HCI_EV_FLUSH_OCCURRED_pdu ( indent , HCI_EV_FLUSH_OCCURRED_T_PDU ( pdu ) , policy );
    case HCI_EV_PAGE_SCAN_REP_MODE_CHANGE:
        return display_HCI_EV_PAGE_SCAN_REP_MODE_CHANGE_pdu ( indent , HCI_EV_PAGE_SCAN_REP_MODE_CHANGE_T_PDU ( pdu ) , policy );
    case HCI_EV_MNFR_EXTENSION:
        return display_HCI_EV_MNFR_EXTENSION_pdu ( indent , HCI_EV_MNFR_EXTENSION_T_PDU ( pdu ) , policy );
    case HCI_EV_CONN_PACKET_TYPE_CHANGED:
        return display_HCI_EV_CONN_PACKET_TYPE_CHANGED_pdu ( indent , HCI_EV_CONN_PACKET_TYPE_CHANGED_T_PDU ( pdu ) , policy );
    case HCI_EV_INQUIRY_RESULT_WITH_RSSI:
        return display_HCI_EV_INQUIRY_RESULT_WITH_RSSI_pdu ( indent , HCI_EV_INQUIRY_RESULT_WITH_RSSI_T_PDU ( pdu ) , policy );
    case HCI_EV_HARDWARE_ERROR:
        return display_HCI_EV_HARDWARE_ERROR_pdu ( indent , HCI_EV_HARDWARE_ERROR_T_PDU ( pdu ) , policy );
    case HCI_EV_SYNC_CONN_CHANGED:
        return display_HCI_EV_SYNC_CONN_CHANGED_pdu ( indent , HCI_EV_SYNC_CONN_CHANGED_T_PDU ( pdu ) , policy );
    case HCI_EV_QOS_VIOLATION:
        return display_HCI_EV_QOS_VIOLATION_pdu ( indent , HCI_EV_QOS_VIOLATION_T_PDU ( pdu ) , policy );
    case HCI_EV_READ_REM_EXT_FEATURES_COMPLETE:
        return display_HCI_EV_READ_REM_EXT_FEATURES_COMPLETE_pdu ( indent , HCI_EV_READ_REM_EXT_FEATURES_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_MAX_SLOTS_CHANGE:
        return display_HCI_EV_MAX_SLOTS_CHANGE_pdu ( indent , HCI_EV_MAX_SLOTS_CHANGE_T_PDU ( pdu ) , policy );
    case HCI_EV_ALIAS_ADDRESS:
        return display_HCI_EV_ALIAS_ADDRESS_pdu ( indent , HCI_EV_ALIAS_ADDRESS_T_PDU ( pdu ) , policy );
    case HCI_EV_RETURN_LINK_KEYS:
        return display_HCI_EV_RETURN_LINK_KEYS_pdu ( indent , HCI_EV_RETURN_LINK_KEYS_T_PDU ( pdu ) , policy );
    case HCI_EV_FIXED_ADDRESS:
        return display_HCI_EV_FIXED_ADDRESS_pdu ( indent , HCI_EV_FIXED_ADDRESS_T_PDU ( pdu ) , policy );
    case HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE:
        return display_HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE_pdu ( indent , HCI_EV_CHANGE_CONN_LINK_KEY_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_SNIFF_SUB_RATE:
        return display_HCI_EV_SNIFF_SUB_RATE_pdu ( indent , HCI_EV_SNIFF_SUB_RATE_T_PDU ( pdu ) , policy );
    case HCI_EV_INQUIRY_COMPLETE:
        return display_HCI_EV_INQUIRY_COMPLETE_pdu ( indent , HCI_EV_INQUIRY_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_ALIAS_NOT_RECOGNISED:
        return display_HCI_EV_ALIAS_NOT_RECOGNISED_pdu ( indent , HCI_EV_ALIAS_NOT_RECOGNISED_T_PDU ( pdu ) , policy );
    case HCI_EV_QOS_SETUP_COMPLETE:
        return display_HCI_EV_QOS_SETUP_COMPLETE_pdu ( indent , HCI_EV_QOS_SETUP_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_NUMBER_COMPLETED_PKTS:
        return display_HCI_EV_NUMBER_COMPLETED_PKTS_pdu ( indent , HCI_EV_NUMBER_COMPLETED_PKTS_T_PDU ( pdu ) , policy );
    case HCI_EV_AUTH_COMPLETE:
        return display_HCI_EV_AUTH_COMPLETE_pdu ( indent , HCI_EV_AUTH_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_ENHANCED_FLUSH_COMPLETE:
        return display_HCI_EV_ENHANCED_FLUSH_COMPLETE_pdu ( indent , HCI_EV_ENHANCED_FLUSH_COMPLETE_T_PDU ( pdu ) , policy );
    case HCI_EV_PAGE_SCAN_MODE_CHANGE:
        return display_HCI_EV_PAGE_SCAN_MODE_CHANGE_pdu ( indent , HCI_EV_PAGE_SCAN_MODE_CHANGE_T_PDU ( pdu ) , policy );
    case HCI_EV_ENCRYPTION_CHANGE:
        return display_HCI_EV_ENCRYPTION_CHANGE_pdu ( indent , HCI_EV_ENCRYPTION_CHANGE_T_PDU ( pdu ) , policy );
    case HCI_EV_LOOPBACK_COMMAND:
        return display_HCI_EV_LOOPBACK_COMMAND_pdu ( indent , HCI_EV_LOOPBACK_COMMAND_T_PDU ( pdu ) , policy );
    case HCI_EV_PIN_CODE_REQ:
        return display_HCI_EV_PIN_CODE_REQ_pdu ( indent , HCI_EV_PIN_CODE_REQ_T_PDU ( pdu ) , policy );
    case HCI_EV_COMMAND_COMPLETE:
        return display_cmd_cmplt_pdu ( indent , HCICommandCompletePDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( EVT_PDU ( pdu ).get_event_code() , "EVT" , pdu );
    }
}

a_string display_rfcomm_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( RFCOMM_PDU ( pdu ).get_type() )
    {
    case RFC_CLIENT_CONNECT_CFM:
        return display_RFC_CLIENT_CONNECT_CFM_pdu ( indent , RFC_CLIENT_CONNECT_CFM_T_PDU ( pdu ) , policy );
    case RFC_LINESTATUS_IND:
        return display_RFC_LINESTATUS_IND_pdu ( indent , RFC_LINESTATUS_IND_T_PDU ( pdu ) , policy );
    case RFC_L2CA_AMP_LINK_LOSS_IND:
        return display_RFC_L2CA_AMP_LINK_LOSS_IND_pdu ( indent , RFC_L2CA_AMP_LINK_LOSS_IND_T_PDU ( pdu ) , policy );
    case RFC_INIT_CFM:
        return display_RFC_INIT_CFM_pdu ( indent , RFC_INIT_CFM_T_PDU ( pdu ) , policy );
    case RFC_DISCONNECT_IND:
        return display_RFC_DISCONNECT_IND_pdu ( indent , RFC_DISCONNECT_IND_T_PDU ( pdu ) , policy );
    case RFC_SERVER_CONNECT_CFM:
        return display_RFC_SERVER_CONNECT_CFM_pdu ( indent , RFC_SERVER_CONNECT_CFM_T_PDU ( pdu ) , policy );
    case RFC_LINESTATUS_REQ:
        return display_RFC_LINESTATUS_REQ_pdu ( indent , RFC_LINESTATUS_REQ_T_PDU ( pdu ) , policy );
    case RFC_L2CA_MOVE_CHANNEL_RSP:
        return display_RFC_L2CA_MOVE_CHANNEL_RSP_pdu ( indent , RFC_L2CA_MOVE_CHANNEL_RSP_T_PDU ( pdu ) , policy );
    case RFC_DATAREAD_IND:
        return display_RFC_DATAREAD_IND_pdu ( indent , RFC_DATAREAD_IND_T_PDU ( pdu ) , policy );
    case RFC_UNREGISTER_CFM:
        return display_RFC_UNREGISTER_CFM_pdu ( indent , RFC_UNREGISTER_CFM_T_PDU ( pdu ) , policy );
    case RFC_PORTNEG_CFM:
        return display_RFC_PORTNEG_CFM_pdu ( indent , RFC_PORTNEG_CFM_T_PDU ( pdu ) , policy );
    case RFC_DATAWRITE_REQ:
        return display_RFC_DATAWRITE_REQ_pdu ( indent , RFC_DATAWRITE_REQ_T_PDU ( pdu ) , policy );
    case RFC_DISCONNECT_REQ:
        return display_RFC_DISCONNECT_REQ_pdu ( indent , RFC_DISCONNECT_REQ_T_PDU ( pdu ) , policy );
    case RFC_MODEM_STATUS_CFM:
        return display_RFC_MODEM_STATUS_CFM_pdu ( indent , RFC_MODEM_STATUS_CFM_T_PDU ( pdu ) , policy );
    case RFC_FC_CFM:
        return display_RFC_FC_CFM_pdu ( indent , RFC_FC_CFM_T_PDU ( pdu ) , policy );
    case RFC_TEST_REQ:
        return display_RFC_TEST_REQ_pdu ( indent , RFC_TEST_REQ_T_PDU ( pdu ) , policy );
    case RFC_L2CA_MOVE_CHANNEL_IND:
        return display_RFC_L2CA_MOVE_CHANNEL_IND_pdu ( indent , RFC_L2CA_MOVE_CHANNEL_IND_T_PDU ( pdu ) , policy );
    case RFC_NSC_IND:
        return display_RFC_NSC_IND_pdu ( indent , RFC_NSC_IND_T_PDU ( pdu ) , policy );
    case RFC_SERVER_CONNECT_RSP:
        return display_RFC_SERVER_CONNECT_RSP_pdu ( indent , RFC_SERVER_CONNECT_RSP_T_PDU ( pdu ) , policy );
    case RFC_LINESTATUS_CFM:
        return display_RFC_LINESTATUS_CFM_pdu ( indent , RFC_LINESTATUS_CFM_T_PDU ( pdu ) , policy );
    case RFC_L2CA_MOVE_CHANNEL_REQ:
        return display_RFC_L2CA_MOVE_CHANNEL_REQ_pdu ( indent , RFC_L2CA_MOVE_CHANNEL_REQ_T_PDU ( pdu ) , policy );
    case RFC_ERROR_IND:
        return display_RFC_ERROR_IND_pdu ( indent , RFC_ERROR_IND_T_PDU ( pdu ) , policy );
    case RFC_PORTNEG_RSP:
        return display_RFC_PORTNEG_RSP_pdu ( indent , RFC_PORTNEG_RSP_T_PDU ( pdu ) , policy );
    case RFC_DISCONNECT_CFM:
        return display_RFC_DISCONNECT_CFM_pdu ( indent , RFC_DISCONNECT_CFM_T_PDU ( pdu ) , policy );
    case RFC_DATAWRITE_CFM:
        return display_RFC_DATAWRITE_CFM_pdu ( indent , RFC_DATAWRITE_CFM_T_PDU ( pdu ) , policy );
    case RFC_REGISTER_REQ:
        return display_RFC_REGISTER_REQ_pdu ( indent , RFC_REGISTER_REQ_T_PDU ( pdu ) , policy );
    case RFC_CLIENT_CONNECT_REQ:
        return display_RFC_CLIENT_CONNECT_REQ_pdu ( indent , RFC_CLIENT_CONNECT_REQ_T_PDU ( pdu ) , policy );
    case RFC_SERVER_CONNECT_IND:
        return display_RFC_SERVER_CONNECT_IND_pdu ( indent , RFC_SERVER_CONNECT_IND_T_PDU ( pdu ) , policy );
    case RFC_TEST_CFM:
        return display_RFC_TEST_CFM_pdu ( indent , RFC_TEST_CFM_T_PDU ( pdu ) , policy );
    case RFC_INIT_REQ:
        return display_RFC_INIT_REQ_pdu ( indent , RFC_INIT_REQ_T_PDU ( pdu ) , policy );
    case RFC_PORTNEG_IND:
        return display_RFC_PORTNEG_IND_pdu ( indent , RFC_PORTNEG_IND_T_PDU ( pdu ) , policy );
    case RFC_UNREGISTER_REQ:
        return display_RFC_UNREGISTER_REQ_pdu ( indent , RFC_UNREGISTER_REQ_T_PDU ( pdu ) , policy );
    case RFC_L2CA_MOVE_CHANNEL_CMP_IND:
        return display_RFC_L2CA_MOVE_CHANNEL_CMP_IND_pdu ( indent , RFC_L2CA_MOVE_CHANNEL_CMP_IND_T_PDU ( pdu ) , policy );
    case RFC_L2CA_MOVE_CHANNEL_CFM:
        return display_RFC_L2CA_MOVE_CHANNEL_CFM_pdu ( indent , RFC_L2CA_MOVE_CHANNEL_CFM_T_PDU ( pdu ) , policy );
    case RFC_FC_IND:
        return display_RFC_FC_IND_pdu ( indent , RFC_FC_IND_T_PDU ( pdu ) , policy );
    case RFC_MODEM_STATUS_IND:
        return display_RFC_MODEM_STATUS_IND_pdu ( indent , RFC_MODEM_STATUS_IND_T_PDU ( pdu ) , policy );
    case RFC_PORTNEG_REQ:
        return display_RFC_PORTNEG_REQ_pdu ( indent , RFC_PORTNEG_REQ_T_PDU ( pdu ) , policy );
    case RFC_DISCONNECT_RSP:
        return display_RFC_DISCONNECT_RSP_pdu ( indent , RFC_DISCONNECT_RSP_T_PDU ( pdu ) , policy );
    case RFC_DATAREAD_RSP:
        return display_RFC_DATAREAD_RSP_pdu ( indent , RFC_DATAREAD_RSP_T_PDU ( pdu ) , policy );
    case RFC_REGISTER_CFM:
        return display_RFC_REGISTER_CFM_pdu ( indent , RFC_REGISTER_CFM_T_PDU ( pdu ) , policy );
    case RFC_FC_REQ:
        return display_RFC_FC_REQ_pdu ( indent , RFC_FC_REQ_T_PDU ( pdu ) , policy );
    case RFC_MODEM_STATUS_REQ:
        return display_RFC_MODEM_STATUS_REQ_pdu ( indent , RFC_MODEM_STATUS_REQ_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( RFCOMM_PDU ( pdu ).get_type() , "RFCOMM" , pdu );
    }
}

a_string display_l2cap_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( L2CAP_PDU ( pdu ).get_type() )
    {
    case L2CA_MOVE_CHANNEL_REQ:
        return display_L2CA_MOVE_CHANNEL_REQ_pdu ( indent , L2CA_MOVE_CHANNEL_REQ_T_PDU ( pdu ) , policy );
    case L2CA_CREATE_CHANNEL_IND:
        return display_L2CA_CREATE_CHANNEL_IND_pdu ( indent , L2CA_CREATE_CHANNEL_IND_T_PDU ( pdu ) , policy );
    case L2CA_DISCONNECT_IND:
        return display_L2CA_DISCONNECT_IND_pdu ( indent , L2CA_DISCONNECT_IND_T_PDU ( pdu ) , policy );
    case L2CA_DATAREAD_RSP:
        return display_L2CA_DATAREAD_RSP_pdu ( indent , L2CA_DATAREAD_RSP_T_PDU ( pdu ) , policy );
    case L2CA_REGISTER_CFM:
        return display_L2CA_REGISTER_CFM_pdu ( indent , L2CA_REGISTER_CFM_T_PDU ( pdu ) , policy );
    case L2CA_AUTO_CONNECT_IND:
        return display_L2CA_AUTO_CONNECT_IND_pdu ( indent , L2CA_AUTO_CONNECT_IND_T_PDU ( pdu ) , policy );
    case L2CA_ROUTE_DATA_REQ:
        return display_L2CA_ROUTE_DATA_REQ_pdu ( indent , L2CA_ROUTE_DATA_REQ_T_PDU ( pdu ) , policy );
    case L2CA_REGISTER_FIXED_CID_REQ:
        return display_L2CA_REGISTER_FIXED_CID_REQ_pdu ( indent , L2CA_REGISTER_FIXED_CID_REQ_T_PDU ( pdu ) , policy );
    case L2CA_CONNECT_IND:
        return display_L2CA_CONNECT_IND_pdu ( indent , L2CA_CONNECT_IND_T_PDU ( pdu ) , policy );
    case L2CA_UNREGISTER_CFM:
        return display_L2CA_UNREGISTER_CFM_pdu ( indent , L2CA_UNREGISTER_CFM_T_PDU ( pdu ) , policy );
    case L2CA_CREATE_CHANNEL_REQ:
        return display_L2CA_CREATE_CHANNEL_REQ_pdu ( indent , L2CA_CREATE_CHANNEL_REQ_T_PDU ( pdu ) , policy );
    case L2CA_MULTICAST_REQ:
        return display_L2CA_MULTICAST_REQ_pdu ( indent , L2CA_MULTICAST_REQ_T_PDU ( pdu ) , policy );
    case L2CA_CONFIG_CFM:
        return display_L2CA_CONFIG_CFM_pdu ( indent , L2CA_CONFIG_CFM_T_PDU ( pdu ) , policy );
    case L2CA_AUTO_CONNECT_REQ:
        return display_L2CA_AUTO_CONNECT_REQ_pdu ( indent , L2CA_AUTO_CONNECT_REQ_T_PDU ( pdu ) , policy );
    case L2CA_DISCONNECT_REQ:
        return display_L2CA_DISCONNECT_REQ_pdu ( indent , L2CA_DISCONNECT_REQ_T_PDU ( pdu ) , policy );
    case L2CA_UNKNOWN_SIGNAL_IND:
        return display_L2CA_UNKNOWN_SIGNAL_IND_pdu ( indent , L2CA_UNKNOWN_SIGNAL_IND_T_PDU ( pdu ) , policy );
    case L2CA_CONNECT_REQ:
        return display_L2CA_CONNECT_REQ_pdu ( indent , L2CA_CONNECT_REQ_T_PDU ( pdu ) , policy );
    case L2CA_DATAWRITE_CFM:
        return display_L2CA_DATAWRITE_CFM_pdu ( indent , L2CA_DATAWRITE_CFM_T_PDU ( pdu ) , policy );
    case L2CA_MTU_VIOLATION_IND:
        return display_L2CA_MTU_VIOLATION_IND_pdu ( indent , L2CA_MTU_VIOLATION_IND_T_PDU ( pdu ) , policy );
    case L2CA_CONNECTION_PAR_UPDATE_CFM:
        return display_L2CA_CONNECTION_PAR_UPDATE_CFM_pdu ( indent , L2CA_CONNECTION_PAR_UPDATE_CFM_T_PDU ( pdu ) , policy );
    case L2CA_MAP_FIXED_CID_CFM:
        return display_L2CA_MAP_FIXED_CID_CFM_pdu ( indent , L2CA_MAP_FIXED_CID_CFM_T_PDU ( pdu ) , policy );
    case L2CA_DATAREAD_IND:
        return display_L2CA_DATAREAD_IND_pdu ( indent , L2CA_DATAREAD_IND_T_PDU ( pdu ) , policy );
    case L2CA_MOVE_CHANNEL_CFM:
        return display_L2CA_MOVE_CHANNEL_CFM_pdu ( indent , L2CA_MOVE_CHANNEL_CFM_T_PDU ( pdu ) , policy );
    case L2CA_UNROUTE_DATA_IND:
        return display_L2CA_UNROUTE_DATA_IND_pdu ( indent , L2CA_UNROUTE_DATA_IND_T_PDU ( pdu ) , policy );
    case L2CA_BUSY_IND:
        return display_L2CA_BUSY_IND_pdu ( indent , L2CA_BUSY_IND_T_PDU ( pdu ) , policy );
    case L2CA_GETINFO_REQ:
        return display_L2CA_GETINFO_REQ_pdu ( indent , L2CA_GETINFO_REQ_T_PDU ( pdu ) , policy );
    case L2CA_PING_REQ:
        return display_L2CA_PING_REQ_pdu ( indent , L2CA_PING_REQ_T_PDU ( pdu ) , policy );
    case L2CA_ROUTE_DATA_CFM:
        return display_L2CA_ROUTE_DATA_CFM_pdu ( indent , L2CA_ROUTE_DATA_CFM_T_PDU ( pdu ) , policy );
    case L2CA_REGISTER_FIXED_CID_CFM:
        return display_L2CA_REGISTER_FIXED_CID_CFM_pdu ( indent , L2CA_REGISTER_FIXED_CID_CFM_T_PDU ( pdu ) , policy );
    case L2CA_BUSY_REQ:
        return display_L2CA_BUSY_REQ_pdu ( indent , L2CA_BUSY_REQ_T_PDU ( pdu ) , policy );
    case L2CA_UNROUTE_DATA_REQ:
        return display_L2CA_UNROUTE_DATA_REQ_pdu ( indent , L2CA_UNROUTE_DATA_REQ_T_PDU ( pdu ) , policy );
    case L2CA_DATAWRITE_ABORT_REQ:
        return display_L2CA_DATAWRITE_ABORT_REQ_pdu ( indent , L2CA_DATAWRITE_ABORT_REQ_T_PDU ( pdu ) , policy );
    case L2CA_MOVE_CHANNEL_CMP_IND:
        return display_L2CA_MOVE_CHANNEL_CMP_IND_pdu ( indent , L2CA_MOVE_CHANNEL_CMP_IND_T_PDU ( pdu ) , policy );
    case L2CA_CREATE_CHANNEL_CFM:
        return display_L2CA_CREATE_CHANNEL_CFM_pdu ( indent , L2CA_CREATE_CHANNEL_CFM_T_PDU ( pdu ) , policy );
    case L2CA_CONFIG_RSP:
        return display_L2CA_CONFIG_RSP_pdu ( indent , L2CA_CONFIG_RSP_T_PDU ( pdu ) , policy );
    case L2CA_DISCONNECT_CFM:
        return display_L2CA_DISCONNECT_CFM_pdu ( indent , L2CA_DISCONNECT_CFM_T_PDU ( pdu ) , policy );
    case L2CA_AUTO_CONNECT_CFM:
        return display_L2CA_AUTO_CONNECT_CFM_pdu ( indent , L2CA_AUTO_CONNECT_CFM_T_PDU ( pdu ) , policy );
    case L2CA_RAW_DATA_IND:
        return display_L2CA_RAW_DATA_IND_pdu ( indent , L2CA_RAW_DATA_IND_T_PDU ( pdu ) , policy );
    case L2CA_DEBUG_DROP_REQ:
        return display_L2CA_DEBUG_DROP_REQ_pdu ( indent , L2CA_DEBUG_DROP_REQ_T_PDU ( pdu ) , policy );
    case L2CA_CONNECT_CFM:
        return display_L2CA_CONNECT_CFM_pdu ( indent , L2CA_CONNECT_CFM_T_PDU ( pdu ) , policy );
    case L2CA_MAP_FIXED_CID_RSP:
        return display_L2CA_MAP_FIXED_CID_RSP_pdu ( indent , L2CA_MAP_FIXED_CID_RSP_T_PDU ( pdu ) , policy );
    case L2CA_MOVE_CHANNEL_RSP:
        return display_L2CA_MOVE_CHANNEL_RSP_pdu ( indent , L2CA_MOVE_CHANNEL_RSP_T_PDU ( pdu ) , policy );
    case L2CA_RAW_DATA_REQ:
        return display_L2CA_RAW_DATA_REQ_pdu ( indent , L2CA_RAW_DATA_REQ_T_PDU ( pdu ) , policy );
    case L2CA_CONFIG_IND:
        return display_L2CA_CONFIG_IND_pdu ( indent , L2CA_CONFIG_IND_T_PDU ( pdu ) , policy );
    case L2CA_GETINFO_CFM:
        return display_L2CA_GETINFO_CFM_pdu ( indent , L2CA_GETINFO_CFM_T_PDU ( pdu ) , policy );
    case L2CA_REGISTER_REQ:
        return display_L2CA_REGISTER_REQ_pdu ( indent , L2CA_REGISTER_REQ_T_PDU ( pdu ) , policy );
    case L2CA_UNMAP_FIXED_CID_IND:
        return display_L2CA_UNMAP_FIXED_CID_IND_pdu ( indent , L2CA_UNMAP_FIXED_CID_IND_T_PDU ( pdu ) , policy );
    case L2CA_PING_CFM:
        return display_L2CA_PING_CFM_pdu ( indent , L2CA_PING_CFM_T_PDU ( pdu ) , policy );
    case L2CA_UNREGISTER_REQ:
        return display_L2CA_UNREGISTER_REQ_pdu ( indent , L2CA_UNREGISTER_REQ_T_PDU ( pdu ) , policy );
    case L2CA_MAP_FIXED_CID_IND:
        return display_L2CA_MAP_FIXED_CID_IND_pdu ( indent , L2CA_MAP_FIXED_CID_IND_T_PDU ( pdu ) , policy );
    case L2CA_UNROUTE_DATA_CFM:
        return display_L2CA_UNROUTE_DATA_CFM_pdu ( indent , L2CA_UNROUTE_DATA_CFM_T_PDU ( pdu ) , policy );
    case L2CA_DATAWRITE_ABORT_CFM:
        return display_L2CA_DATAWRITE_ABORT_CFM_pdu ( indent , L2CA_DATAWRITE_ABORT_CFM_T_PDU ( pdu ) , policy );
    case L2CA_TIMEOUT_IND:
        return display_L2CA_TIMEOUT_IND_pdu ( indent , L2CA_TIMEOUT_IND_T_PDU ( pdu ) , policy );
    case L2CA_CREATE_CHANNEL_RSP:
        return display_L2CA_CREATE_CHANNEL_RSP_pdu ( indent , L2CA_CREATE_CHANNEL_RSP_T_PDU ( pdu ) , policy );
    case L2CA_MOVE_CHANNEL_IND:
        return display_L2CA_MOVE_CHANNEL_IND_pdu ( indent , L2CA_MOVE_CHANNEL_IND_T_PDU ( pdu ) , policy );
    case L2CA_CONFIG_REQ:
        return display_L2CA_CONFIG_REQ_pdu ( indent , L2CA_CONFIG_REQ_T_PDU ( pdu ) , policy );
    case L2CA_DISCONNECT_RSP:
        return display_L2CA_DISCONNECT_RSP_pdu ( indent , L2CA_DISCONNECT_RSP_T_PDU ( pdu ) , policy );
    case L2CA_RAW_MODE_REQ:
        return display_L2CA_RAW_MODE_REQ_pdu ( indent , L2CA_RAW_MODE_REQ_T_PDU ( pdu ) , policy );
    case L2CA_UNMAP_FIXED_CID_REQ:
        return display_L2CA_UNMAP_FIXED_CID_REQ_pdu ( indent , L2CA_UNMAP_FIXED_CID_REQ_T_PDU ( pdu ) , policy );
    case L2CA_AUTO_CONNECT_RSP:
        return display_L2CA_AUTO_CONNECT_RSP_pdu ( indent , L2CA_AUTO_CONNECT_RSP_T_PDU ( pdu ) , policy );
    case L2CA_DATAWRITE_REQ:
        return display_L2CA_DATAWRITE_REQ_pdu ( indent , L2CA_DATAWRITE_REQ_T_PDU ( pdu ) , policy );
    case L2CA_CONNECT_RSP:
        return display_L2CA_CONNECT_RSP_pdu ( indent , L2CA_CONNECT_RSP_T_PDU ( pdu ) , policy );
    case L2CA_CONNECTION_PAR_UPDATE_REQ:
        return display_L2CA_CONNECTION_PAR_UPDATE_REQ_pdu ( indent , L2CA_CONNECTION_PAR_UPDATE_REQ_T_PDU ( pdu ) , policy );
    case L2CA_MAP_FIXED_CID_REQ:
        return display_L2CA_MAP_FIXED_CID_REQ_pdu ( indent , L2CA_MAP_FIXED_CID_REQ_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( L2CAP_PDU ( pdu ).get_type() , "L2CAP" , pdu );
    }
}

a_string display_sdp_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( SDP_PDU ( pdu ).get_type() )
    {
    case SDC_CONFIG_REQ:
        return display_SDC_CONFIG_REQ_pdu ( indent , SDC_CONFIG_REQ_T_PDU ( pdu ) , policy );
    case SDC_OPEN_SEARCH_CFM:
        return display_SDC_OPEN_SEARCH_CFM_pdu ( indent , SDC_OPEN_SEARCH_CFM_T_PDU ( pdu ) , policy );
    case SDS_REGISTER_CFM:
        return display_SDS_REGISTER_CFM_pdu ( indent , SDS_REGISTER_CFM_T_PDU ( pdu ) , policy );
    case SDS_CONFIG_CFM:
        return display_SDS_CONFIG_CFM_pdu ( indent , SDS_CONFIG_CFM_T_PDU ( pdu ) , policy );
    case SDC_SERVICE_ATTRIBUTE_REQ:
        return display_SDC_SERVICE_ATTRIBUTE_REQ_pdu ( indent , SDC_SERVICE_ATTRIBUTE_REQ_T_PDU ( pdu ) , policy );
    case SDS_UNREGISTER_CFM:
        return display_SDS_UNREGISTER_CFM_pdu ( indent , SDS_UNREGISTER_CFM_T_PDU ( pdu ) , policy );
    case SDC_TERMINATE_PRIMITIVE_REQ:
        return display_SDC_TERMINATE_PRIMITIVE_REQ_pdu ( indent , SDC_TERMINATE_PRIMITIVE_REQ_T_PDU ( pdu ) , policy );
    case SDC_CONFIG_CFM:
        return display_SDC_CONFIG_CFM_pdu ( indent , SDC_CONFIG_CFM_T_PDU ( pdu ) , policy );
    case SDC_SERVICE_SEARCH_ATTRIBUTE_REQ:
        return display_SDC_SERVICE_SEARCH_ATTRIBUTE_REQ_pdu ( indent , SDC_SERVICE_SEARCH_ATTRIBUTE_REQ_T_PDU ( pdu ) , policy );
    case SDC_SERVICE_SEARCH_REQ:
        return display_SDC_SERVICE_SEARCH_REQ_pdu ( indent , SDC_SERVICE_SEARCH_REQ_T_PDU ( pdu ) , policy );
    case SDC_SERVICE_ATTRIBUTE_CFM:
        return display_SDC_SERVICE_ATTRIBUTE_CFM_pdu ( indent , SDC_SERVICE_ATTRIBUTE_CFM_T_PDU ( pdu ) , policy );
    case SDC_CLOSE_SEARCH_IND:
        return display_SDC_CLOSE_SEARCH_IND_pdu ( indent , SDC_CLOSE_SEARCH_IND_T_PDU ( pdu ) , policy );
    case SDC_OPEN_SEARCH_REQ:
        return display_SDC_OPEN_SEARCH_REQ_pdu ( indent , SDC_OPEN_SEARCH_REQ_T_PDU ( pdu ) , policy );
    case SDC_SERVICE_SEARCH_ATTRIBUTE_CFM:
        return display_SDC_SERVICE_SEARCH_ATTRIBUTE_CFM_pdu ( indent , SDC_SERVICE_SEARCH_ATTRIBUTE_CFM_T_PDU ( pdu ) , policy );
    case SDC_CLOSE_SEARCH_REQ:
        return display_SDC_CLOSE_SEARCH_REQ_pdu ( indent , SDC_CLOSE_SEARCH_REQ_T_PDU ( pdu ) , policy );
    case SDS_CONFIG_REQ:
        return display_SDS_CONFIG_REQ_pdu ( indent , SDS_CONFIG_REQ_T_PDU ( pdu ) , policy );
    case SDS_REGISTER_REQ:
        return display_SDS_REGISTER_REQ_pdu ( indent , SDS_REGISTER_REQ_T_PDU ( pdu ) , policy );
    case SDC_SERVICE_SEARCH_CFM:
        return display_SDC_SERVICE_SEARCH_CFM_pdu ( indent , SDC_SERVICE_SEARCH_CFM_T_PDU ( pdu ) , policy );
    case SDS_UNREGISTER_REQ:
        return display_SDS_UNREGISTER_REQ_pdu ( indent , SDS_UNREGISTER_REQ_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( SDP_PDU ( pdu ).get_type() , "SDP" , pdu );
    }
}

a_string display_bnep_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( BNEP_PDU ( pdu ).get_type() )
    {
    case BNEP_DATA_REQ:
        return display_BNEP_DATA_REQ_pdu ( indent , BNEP_DATA_REQ_T_PDU ( pdu ) , policy );
    case BNEP_DISCONNECT_IND:
        return display_BNEP_DISCONNECT_IND_pdu ( indent , BNEP_DISCONNECT_IND_T_PDU ( pdu ) , policy );
    case BNEP_DOWN_IND:
        return display_BNEP_DOWN_IND_pdu ( indent , BNEP_DOWN_IND_T_PDU ( pdu ) , policy );
    case BNEP_UP_IND:
        return display_BNEP_UP_IND_pdu ( indent , BNEP_UP_IND_T_PDU ( pdu ) , policy );
    case BNEP_LISTEN_REQ:
        return display_BNEP_LISTEN_REQ_pdu ( indent , BNEP_LISTEN_REQ_T_PDU ( pdu ) , policy );
    case BNEP_DEBUG_IND:
        return display_BNEP_DEBUG_IND_pdu ( indent , BNEP_DEBUG_IND_T_PDU ( pdu ) , policy );
    case BNEP_DISCONNECT_REQ:
        return display_BNEP_DISCONNECT_REQ_pdu ( indent , BNEP_DISCONNECT_REQ_T_PDU ( pdu ) , policy );
    case BNEP_IGNORE_REQ:
        return display_BNEP_IGNORE_REQ_pdu ( indent , BNEP_IGNORE_REQ_T_PDU ( pdu ) , policy );
    case BNEP_DEBUG_REQ:
        return display_BNEP_DEBUG_REQ_pdu ( indent , BNEP_DEBUG_REQ_T_PDU ( pdu ) , policy );
    case BNEP_FLOW_IND:
        return display_BNEP_FLOW_IND_pdu ( indent , BNEP_FLOW_IND_T_PDU ( pdu ) , policy );
    case BNEP_CONNECT_CFM:
        return display_BNEP_CONNECT_CFM_pdu ( indent , BNEP_CONNECT_CFM_T_PDU ( pdu ) , policy );
    case BNEP_CONNECT_IND:
        return display_BNEP_CONNECT_IND_pdu ( indent , BNEP_CONNECT_IND_T_PDU ( pdu ) , policy );
    case BNEP_EXTENDED_MULTICAST_DATA_REQ:
        return display_BNEP_EXTENDED_MULTICAST_DATA_REQ_pdu ( indent , BNEP_EXTENDED_MULTICAST_DATA_REQ_T_PDU ( pdu ) , policy );
    case BNEP_LOOPBACK_DATA_IND:
        return display_BNEP_LOOPBACK_DATA_IND_pdu ( indent , BNEP_LOOPBACK_DATA_IND_T_PDU ( pdu ) , policy );
    case BNEP_FLOW_REQ:
        return display_BNEP_FLOW_REQ_pdu ( indent , BNEP_FLOW_REQ_T_PDU ( pdu ) , policy );
    case BNEP_EXTENDED_DATA_IND:
        return display_BNEP_EXTENDED_DATA_IND_pdu ( indent , BNEP_EXTENDED_DATA_IND_T_PDU ( pdu ) , policy );
    case BNEP_CONNECT_REQ:
        return display_BNEP_CONNECT_REQ_pdu ( indent , BNEP_CONNECT_REQ_T_PDU ( pdu ) , policy );
    case BNEP_REGISTER_REQ:
        return display_BNEP_REGISTER_REQ_pdu ( indent , BNEP_REGISTER_REQ_T_PDU ( pdu ) , policy );
    case BNEP_HCI_SWITCH_ROLE_RSP:
        return display_BNEP_HCI_SWITCH_ROLE_RSP_pdu ( indent , BNEP_HCI_SWITCH_ROLE_RSP_T_PDU ( pdu ) , policy );
    case BNEP_DATA_IND:
        return display_BNEP_DATA_IND_pdu ( indent , BNEP_DATA_IND_T_PDU ( pdu ) , policy );
    case BNEP_MULTICAST_DATA_IND:
        return display_BNEP_MULTICAST_DATA_IND_pdu ( indent , BNEP_MULTICAST_DATA_IND_T_PDU ( pdu ) , policy );
    case BNEP_EXTENDED_DATA_REQ:
        return display_BNEP_EXTENDED_DATA_REQ_pdu ( indent , BNEP_EXTENDED_DATA_REQ_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( BNEP_PDU ( pdu ).get_type() , "BNEP" , pdu );
    }
}

a_string display_tcp_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( TCP_PDU ( pdu ).get_type() )
    {
    case TCP_CLOSE_REQ:
        return display_TCP_CLOSE_REQ_pdu ( indent , TCP_CLOSE_REQ_T_PDU ( pdu ) , policy );
    case TCP_DATA_CFM:
        return display_TCP_DATA_CFM_pdu ( indent , TCP_DATA_CFM_T_PDU ( pdu ) , policy );
    case TCP_OPEN_RSP:
        return display_TCP_OPEN_RSP_pdu ( indent , TCP_OPEN_RSP_T_PDU ( pdu ) , policy );
    case TCP_DATA_IND:
        return display_TCP_DATA_IND_pdu ( indent , TCP_DATA_IND_T_PDU ( pdu ) , policy );
    case TCP_ABORT_REQ:
        return display_TCP_ABORT_REQ_pdu ( indent , TCP_ABORT_REQ_T_PDU ( pdu ) , policy );
    case TCP_CLOSED_RSP:
        return display_TCP_CLOSED_RSP_pdu ( indent , TCP_CLOSED_RSP_T_PDU ( pdu ) , policy );
    case TCP_DATA_REQ:
        return display_TCP_DATA_REQ_pdu ( indent , TCP_DATA_REQ_T_PDU ( pdu ) , policy );
    case TCP_OPEN_CFM:
        return display_TCP_OPEN_CFM_pdu ( indent , TCP_OPEN_CFM_T_PDU ( pdu ) , policy );
    case TCP_OPEN_IND:
        return display_TCP_OPEN_IND_pdu ( indent , TCP_OPEN_IND_T_PDU ( pdu ) , policy );
    case TCP_ABORT_RSP:
        return display_TCP_ABORT_RSP_pdu ( indent , TCP_ABORT_RSP_T_PDU ( pdu ) , policy );
    case TCP_CLOSED_IND:
        return display_TCP_CLOSED_IND_pdu ( indent , TCP_CLOSED_IND_T_PDU ( pdu ) , policy );
    case TCP_DATA_RSP:
        return display_TCP_DATA_RSP_pdu ( indent , TCP_DATA_RSP_T_PDU ( pdu ) , policy );
    case TCP_OPEN_REQ:
        return display_TCP_OPEN_REQ_pdu ( indent , TCP_OPEN_REQ_T_PDU ( pdu ) , policy );
    case TCP_CLOSE_IND:
        return display_TCP_CLOSE_IND_pdu ( indent , TCP_CLOSE_IND_T_PDU ( pdu ) , policy );
    case TCP_ABORT_IND:
        return display_TCP_ABORT_IND_pdu ( indent , TCP_ABORT_IND_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( TCP_PDU ( pdu ).get_type() , "TCP" , pdu );
    }
}

a_string display_udp_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( UDP_PDU ( pdu ).get_type() )
    {
    case UDP_DATA_CFM:
        return display_UDP_DATA_CFM_pdu ( indent , UDP_DATA_CFM_T_PDU ( pdu ) , policy );
    case UDP_EXTENDED_DATA_IND:
        return display_UDP_EXTENDED_DATA_IND_pdu ( indent , UDP_EXTENDED_DATA_IND_T_PDU ( pdu ) , policy );
    case UDP_DATA_IND:
        return display_UDP_DATA_IND_pdu ( indent , UDP_DATA_IND_T_PDU ( pdu ) , policy );
    case UDP_CLOSE_CFM:
        return display_UDP_CLOSE_CFM_pdu ( indent , UDP_CLOSE_CFM_T_PDU ( pdu ) , policy );
    case UDP_DATA_REQ:
        return display_UDP_DATA_REQ_pdu ( indent , UDP_DATA_REQ_T_PDU ( pdu ) , policy );
    case UDP_EXTENDED_DATA_REQ:
        return display_UDP_EXTENDED_DATA_REQ_pdu ( indent , UDP_EXTENDED_DATA_REQ_T_PDU ( pdu ) , policy );
    case UDP_OPEN_CFM:
        return display_UDP_OPEN_CFM_pdu ( indent , UDP_OPEN_CFM_T_PDU ( pdu ) , policy );
    case UDP_LISTEN_REQ:
        return display_UDP_LISTEN_REQ_pdu ( indent , UDP_LISTEN_REQ_T_PDU ( pdu ) , policy );
    case UDP_CLOSE_REQ:
        return display_UDP_CLOSE_REQ_pdu ( indent , UDP_CLOSE_REQ_T_PDU ( pdu ) , policy );
    case UDP_OPEN_REQ:
        return display_UDP_OPEN_REQ_pdu ( indent , UDP_OPEN_REQ_T_PDU ( pdu ) , policy );
    case UDP_IGNORE_REQ:
        return display_UDP_IGNORE_REQ_pdu ( indent , UDP_IGNORE_REQ_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( UDP_PDU ( pdu ).get_type() , "UDP" , pdu );
    }
}

a_string display_att_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( ATT_PDU ( pdu ).get_type() )
    {
    case ATT_FIND_BY_TYPE_VALUE_REQ:
        return display_ATT_FIND_BY_TYPE_VALUE_REQ_pdu ( indent , ATT_FIND_BY_TYPE_VALUE_REQ_T_PDU ( pdu ) , policy );
    case ATT_CONNECT_CFM:
        return display_ATT_CONNECT_CFM_pdu ( indent , ATT_CONNECT_CFM_T_PDU ( pdu ) , policy );
    case ATT_READ_BLOB_REQ:
        return display_ATT_READ_BLOB_REQ_pdu ( indent , ATT_READ_BLOB_REQ_T_PDU ( pdu ) , policy );
    case ATT_FIND_INFO_CFM:
        return display_ATT_FIND_INFO_CFM_pdu ( indent , ATT_FIND_INFO_CFM_T_PDU ( pdu ) , policy );
    case ATT_HANDLE_VALUE_IND:
        return display_ATT_HANDLE_VALUE_IND_pdu ( indent , ATT_HANDLE_VALUE_IND_T_PDU ( pdu ) , policy );
    case ATT_EXCHANGE_MTU_RSP:
        return display_ATT_EXCHANGE_MTU_RSP_pdu ( indent , ATT_EXCHANGE_MTU_RSP_T_PDU ( pdu ) , policy );
    case ATT_DISCONNECT_IND:
        return display_ATT_DISCONNECT_IND_pdu ( indent , ATT_DISCONNECT_IND_T_PDU ( pdu ) , policy );
    case ATT_READ_MULTI_CFM:
        return display_ATT_READ_MULTI_CFM_pdu ( indent , ATT_READ_MULTI_CFM_T_PDU ( pdu ) , policy );
    case ATT_UNREGISTER_CFM:
        return display_ATT_UNREGISTER_CFM_pdu ( indent , ATT_UNREGISTER_CFM_T_PDU ( pdu ) , policy );
    case ATT_ACCESS_RSP:
        return display_ATT_ACCESS_RSP_pdu ( indent , ATT_ACCESS_RSP_T_PDU ( pdu ) , policy );
    case ATT_EXECUTE_WRITE_REQ:
        return display_ATT_EXECUTE_WRITE_REQ_pdu ( indent , ATT_EXECUTE_WRITE_REQ_T_PDU ( pdu ) , policy );
    case ATT_HANDLE_VALUE_REQ:
        return display_ATT_HANDLE_VALUE_REQ_pdu ( indent , ATT_HANDLE_VALUE_REQ_T_PDU ( pdu ) , policy );
    case ATT_DISCONNECT_REQ:
        return display_ATT_DISCONNECT_REQ_pdu ( indent , ATT_DISCONNECT_REQ_T_PDU ( pdu ) , policy );
    case ATT_DEBUG_IND:
        return display_ATT_DEBUG_IND_pdu ( indent , ATT_DEBUG_IND_T_PDU ( pdu ) , policy );
    case ATT_REGISTER_CFM:
        return display_ATT_REGISTER_CFM_pdu ( indent , ATT_REGISTER_CFM_T_PDU ( pdu ) , policy );
    case ATT_FIND_BY_TYPE_VALUE_CFM:
        return display_ATT_FIND_BY_TYPE_VALUE_CFM_pdu ( indent , ATT_FIND_BY_TYPE_VALUE_CFM_T_PDU ( pdu ) , policy );
    case ATT_EXCHANGE_MTU_IND:
        return display_ATT_EXCHANGE_MTU_IND_pdu ( indent , ATT_EXCHANGE_MTU_IND_T_PDU ( pdu ) , policy );
    case ATT_READ_BLOB_CFM:
        return display_ATT_READ_BLOB_CFM_pdu ( indent , ATT_READ_BLOB_CFM_T_PDU ( pdu ) , policy );
    case ATT_PREPARE_WRITE_REQ:
        return display_ATT_PREPARE_WRITE_REQ_pdu ( indent , ATT_PREPARE_WRITE_REQ_T_PDU ( pdu ) , policy );
    case ATT_WRITE_REQ:
        return display_ATT_WRITE_REQ_pdu ( indent , ATT_WRITE_REQ_T_PDU ( pdu ) , policy );
    case ATT_READ_BY_TYPE_REQ:
        return display_ATT_READ_BY_TYPE_REQ_pdu ( indent , ATT_READ_BY_TYPE_REQ_T_PDU ( pdu ) , policy );
    case ATT_ADD_DB_REQ:
        return display_ATT_ADD_DB_REQ_pdu ( indent , ATT_ADD_DB_REQ_T_PDU ( pdu ) , policy );
    case ATT_ACCESS_IND:
        return display_ATT_ACCESS_IND_pdu ( indent , ATT_ACCESS_IND_T_PDU ( pdu ) , policy );
    case ATT_EXCHANGE_MTU_REQ:
        return display_ATT_EXCHANGE_MTU_REQ_pdu ( indent , ATT_EXCHANGE_MTU_REQ_T_PDU ( pdu ) , policy );
    case ATT_CONNECT_IND:
        return display_ATT_CONNECT_IND_pdu ( indent , ATT_CONNECT_IND_T_PDU ( pdu ) , policy );
    case ATT_READ_REQ:
        return display_ATT_READ_REQ_pdu ( indent , ATT_READ_REQ_T_PDU ( pdu ) , policy );
    case ATT_READ_BY_GROUP_TYPE_REQ:
        return display_ATT_READ_BY_GROUP_TYPE_REQ_pdu ( indent , ATT_READ_BY_GROUP_TYPE_REQ_T_PDU ( pdu ) , policy );
    case ATT_EXECUTE_WRITE_CFM:
        return display_ATT_EXECUTE_WRITE_CFM_pdu ( indent , ATT_EXECUTE_WRITE_CFM_T_PDU ( pdu ) , policy );
    case ATT_HANDLE_VALUE_CFM:
        return display_ATT_HANDLE_VALUE_CFM_pdu ( indent , ATT_HANDLE_VALUE_CFM_T_PDU ( pdu ) , policy );
    case ATT_CONNECT_REQ:
        return display_ATT_CONNECT_REQ_pdu ( indent , ATT_CONNECT_REQ_T_PDU ( pdu ) , policy );
    case ATT_FIND_INFO_REQ:
        return display_ATT_FIND_INFO_REQ_pdu ( indent , ATT_FIND_INFO_REQ_T_PDU ( pdu ) , policy );
    case ATT_PREPARE_WRITE_CFM:
        return display_ATT_PREPARE_WRITE_CFM_pdu ( indent , ATT_PREPARE_WRITE_CFM_T_PDU ( pdu ) , policy );
    case ATT_WRITE_CFM:
        return display_ATT_WRITE_CFM_pdu ( indent , ATT_WRITE_CFM_T_PDU ( pdu ) , policy );
    case ATT_READ_BY_TYPE_CFM:
        return display_ATT_READ_BY_TYPE_CFM_pdu ( indent , ATT_READ_BY_TYPE_CFM_T_PDU ( pdu ) , policy );
    case ATT_ADD_DB_CFM:
        return display_ATT_ADD_DB_CFM_pdu ( indent , ATT_ADD_DB_CFM_T_PDU ( pdu ) , policy );
    case ATT_EXCHANGE_MTU_CFM:
        return display_ATT_EXCHANGE_MTU_CFM_pdu ( indent , ATT_EXCHANGE_MTU_CFM_T_PDU ( pdu ) , policy );
    case ATT_READ_MULTI_REQ:
        return display_ATT_READ_MULTI_REQ_pdu ( indent , ATT_READ_MULTI_REQ_T_PDU ( pdu ) , policy );
    case ATT_UNREGISTER_REQ:
        return display_ATT_UNREGISTER_REQ_pdu ( indent , ATT_UNREGISTER_REQ_T_PDU ( pdu ) , policy );
    case ATT_READ_CFM:
        return display_ATT_READ_CFM_pdu ( indent , ATT_READ_CFM_T_PDU ( pdu ) , policy );
    case ATT_READ_BY_GROUP_TYPE_CFM:
        return display_ATT_READ_BY_GROUP_TYPE_CFM_pdu ( indent , ATT_READ_BY_GROUP_TYPE_CFM_T_PDU ( pdu ) , policy );
    case ATT_HANDLE_VALUE_RSP:
        return display_ATT_HANDLE_VALUE_RSP_pdu ( indent , ATT_HANDLE_VALUE_RSP_T_PDU ( pdu ) , policy );
    case ATT_REGISTER_REQ:
        return display_ATT_REGISTER_REQ_pdu ( indent , ATT_REGISTER_REQ_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( ATT_PDU ( pdu ).get_type() , "ATT" , pdu );
    }
}

a_string display_bccmd_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( BCCMD_PDU ( pdu ).get_varid() )
    {
    case BCCMDVARID_MAP_SCO_WBS:
        return display_BCCMD_MAP_SCO_WBS_pdu ( indent , BCCMD_MAP_SCO_WBS_PDU ( pdu ) , policy );
    case BCCMDVARID_BLE_ADV_FILT_CLEAR:
        return display_BCCMD_BLE_ADV_FILT_CLEAR_pdu ( indent , BCCMD_BLE_ADV_FILT_CLEAR_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U10:
        return display_BCCMD_STIBBONS_U10_pdu ( indent , BCCMD_STIBBONS_U10_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U11:
        return display_BCCMD_STIBBONS_U11_pdu ( indent , BCCMD_STIBBONS_U11_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U12:
        return display_BCCMD_STIBBONS_U12_pdu ( indent , BCCMD_STIBBONS_U12_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U13:
        return display_BCCMD_STIBBONS_U13_pdu ( indent , BCCMD_STIBBONS_U13_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U14:
        return display_BCCMD_STIBBONS_U14_pdu ( indent , BCCMD_STIBBONS_U14_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U15:
        return display_BCCMD_STIBBONS_U15_pdu ( indent , BCCMD_STIBBONS_U15_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U16:
        return display_BCCMD_STIBBONS_U16_pdu ( indent , BCCMD_STIBBONS_U16_PDU ( pdu ) , policy );
    case BCCMDVARID_PCM_RATE_AND_ROUTE:
        return display_BCCMD_PCM_RATE_AND_ROUTE_pdu ( indent , BCCMD_PCM_RATE_AND_ROUTE_PDU ( pdu ) , policy );
    case BCCMDVARID_VM_STATUS:
        return display_BCCMD_VM_STATUS_pdu ( indent , BCCMD_VM_STATUS_PDU ( pdu ) , policy );
    case BCCMDVARID_COEX_ENABLE:
        return display_BCCMD_COEX_ENABLE_pdu ( indent , BCCMD_COEX_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_MIC_BIAS_CTRL:
        return display_BCCMD_MIC_BIAS_CTRL_pdu ( indent , BCCMD_MIC_BIAS_CTRL_PDU ( pdu ) , policy );
    case BCCMDVARID_BABEL_SPI_RESET_AND_GO:
        return display_BCCMD_BABEL_SPI_RESET_AND_GO_pdu ( indent , BCCMD_BABEL_SPI_RESET_AND_GO_PDU ( pdu ) , policy );
    case BCCMDVARID_PSCLR:
        return display_BCCMD_PSCLR_pdu ( indent , BCCMD_PSCLR_PDU ( pdu ) , policy );
    case BCCMDVARID_RDF_BLE_ADVERTISING:
        return display_BCCMD_RDF_BLE_ADVERTISING_pdu ( indent , BCCMD_RDF_BLE_ADVERTISING_PDU ( pdu ) , policy );
    case BCCMDVARID_AFH_CHANNEL_RELEASE_TIME:
        return display_BCCMD_AFH_CHANNEL_RELEASE_TIME_pdu ( indent , BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU ( pdu ) , policy );
    case BCCMDVARID_CONFIG_UART:
        return display_BCCMD_CONFIG_UART_pdu ( indent , BCCMD_CONFIG_UART_PDU ( pdu ) , policy );
    case BCCMDVARID_CHARGER_SET_TRIM_NOW:
        return display_BCCMD_CHARGER_SET_TRIM_NOW_pdu ( indent , BCCMD_CHARGER_SET_TRIM_NOW_PDU ( pdu ) , policy );
    case BCCMDVARID_CHARGER_DISABLE:
        return display_BCCMD_CHARGER_DISABLE_pdu ( indent , BCCMD_CHARGER_DISABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_BUILDID_LOADER:
        return display_BCCMD_BUILDID_LOADER_pdu ( indent , BCCMD_BUILDID_LOADER_PDU ( pdu ) , policy );
    case BCCMDVARID_EXT_CLOCK_PERIOD:
        return display_BCCMD_EXT_CLOCK_PERIOD_pdu ( indent , BCCMD_EXT_CLOCK_PERIOD_PDU ( pdu ) , policy );
    case BCCMDVARID_FMTX_REG:
        return display_BCCMD_FMTX_REG_pdu ( indent , BCCMD_FMTX_REG_PDU ( pdu ) , policy );
    case BCCMDVARID_RDF_BLE_PACKET_MATCH:
        return display_BCCMD_RDF_BLE_PACKET_MATCH_pdu ( indent , BCCMD_RDF_BLE_PACKET_MATCH_PDU ( pdu ) , policy );
    case BCCMDVARID_ADCRES:
        return display_BCCMD_ADCRES_pdu ( indent , BCCMD_ADCRES_PDU ( pdu ) , policy );
    case BCCMDVARID_VM_DEBUG:
        return display_BCCMD_VM_DEBUG_pdu ( indent , BCCMD_VM_DEBUG_PDU ( pdu ) , policy );
    case BCCMDVARID_RESET_OPERATOR:
        return display_BCCMD_RESET_OPERATOR_pdu ( indent , BCCMD_RESET_OPERATOR_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO_PROTECT_MASK:
        return display_BCCMD_PIO_PROTECT_MASK_pdu ( indent , BCCMD_PIO_PROTECT_MASK_PDU ( pdu ) , policy );
    case BCCMDVARID_SCATTERNET_OVERRIDE_SCO:
        return display_BCCMD_SCATTERNET_OVERRIDE_SCO_pdu ( indent , BCCMD_SCATTERNET_OVERRIDE_SCO_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_TRANSACTION_COMPLETE:
        return display_BCCMD_STREAM_TRANSACTION_COMPLETE_pdu ( indent , BCCMD_STREAM_TRANSACTION_COMPLETE_PDU ( pdu ) , policy );
    case BCCMDVARID_GSM_RX_ARFCN:
        return display_BCCMD_GSM_RX_ARFCN_pdu ( indent , BCCMD_GSM_RX_ARFCN_PDU ( pdu ) , policy );
    case BCCMDVARID_PS_FACTORY_SET:
        return display_BCCMD_PS_FACTORY_SET_pdu ( indent , BCCMD_PS_FACTORY_SET_PDU ( pdu ) , policy );
    case BCCMDVARID_SPI_LOCK_INITIATE_LOCK:
        return display_BCCMD_SPI_LOCK_INITIATE_LOCK_pdu ( indent , BCCMD_SPI_LOCK_INITIATE_LOCK_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO_DIRECTION_MASK:
        return display_BCCMD_PIO_DIRECTION_MASK_pdu ( indent , BCCMD_PIO_DIRECTION_MASK_PDU ( pdu ) , policy );
    case BCCMDVARID_AUX_DAC_ENABLE:
        return display_BCCMD_AUX_DAC_ENABLE_pdu ( indent , BCCMD_AUX_DAC_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_CHIPANAVER:
        return display_BCCMD_CHIPANAVER_pdu ( indent , BCCMD_CHIPANAVER_PDU ( pdu ) , policy );
    case BCCMDVARID_ACTIVATE_BT_STACK:
        return display_BCCMD_ACTIVATE_BT_STACK_pdu ( indent , BCCMD_ACTIVATE_BT_STACK_PDU ( pdu ) , policy );
    case BCCMDVARID_PSCLRALL:
        return display_BCCMD_PSCLRALL_pdu ( indent , BCCMD_PSCLRALL_PDU ( pdu ) , policy );
    case BCCMDVARID_BLE_T_IFS:
        return display_BCCMD_BLE_T_IFS_pdu ( indent , BCCMD_BLE_T_IFS_PDU ( pdu ) , policy );
    case BCCMDVARID_FM_AUDIO_ROUTING:
        return display_BCCMD_FM_AUDIO_ROUTING_pdu ( indent , BCCMD_FM_AUDIO_ROUTING_PDU ( pdu ) , policy );
    case BCCMDVARID_FASTPIPE_ENABLE:
        return display_BCCMD_FASTPIPE_ENABLE_pdu ( indent , BCCMD_FASTPIPE_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_COEX_SYNC_PERIOD:
        return display_BCCMD_COEX_SYNC_PERIOD_pdu ( indent , BCCMD_COEX_SYNC_PERIOD_PDU ( pdu ) , policy );
    case BCCMDVARID_PICONET_INSTANT:
        return display_BCCMD_PICONET_INSTANT_pdu ( indent , BCCMD_PICONET_INSTANT_PDU ( pdu ) , policy );
    case BCCMDVARID_CAPSENSE_RT_PADS:
        return display_BCCMD_CAPSENSE_RT_PADS_pdu ( indent , BCCMD_CAPSENSE_RT_PADS_PDU ( pdu ) , policy );
    case BCCMDVARID_SNIFF_MULTISLOT_ENABLE:
        return display_BCCMD_SNIFF_MULTISLOT_ENABLE_pdu ( indent , BCCMD_SNIFF_MULTISLOT_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_RECAL:
        return display_BCCMD_RECAL_pdu ( indent , BCCMD_RECAL_PDU ( pdu ) , policy );
    case BCCMDVARID_PSU_HV_LINEAR_ENABLE:
        return display_BCCMD_PSU_HV_LINEAR_ENABLE_pdu ( indent , BCCMD_PSU_HV_LINEAR_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_TRANSFORM_DISCONNECT:
        return display_BCCMD_STREAM_TRANSFORM_DISCONNECT_pdu ( indent , BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU ( pdu ) , policy );
    case BCCMDVARID_FM_RDS:
        return display_BCCMD_FM_RDS_pdu ( indent , BCCMD_FM_RDS_PDU ( pdu ) , policy );
    case BCCMDVARID_FAULT_ARG:
        return display_BCCMD_FAULT_ARG_pdu ( indent , BCCMD_FAULT_ARG_PDU ( pdu ) , policy );
    case BCCMDVARID_RECLAIM_RAM_RESERVE:
        return display_BCCMD_RECLAIM_RAM_RESERVE_pdu ( indent , BCCMD_RECLAIM_RAM_RESERVE_PDU ( pdu ) , policy );
    case BCCMDVARID_LC_FRAC_COUNT:
        return display_BCCMD_LC_FRAC_COUNT_pdu ( indent , BCCMD_LC_FRAC_COUNT_PDU ( pdu ) , policy );
    case BCCMDVARID_MAX_TX_POWER:
        return display_BCCMD_MAX_TX_POWER_pdu ( indent , BCCMD_MAX_TX_POWER_PDU ( pdu ) , policy );
    case BCCMDVARID_COASTER_ADD_SV:
        return display_BCCMD_COASTER_ADD_SV_pdu ( indent , BCCMD_COASTER_ADD_SV_PDU ( pdu ) , policy );
    case BCCMDVARID_DEEP_SLEEP_TIME:
        return display_BCCMD_DEEP_SLEEP_TIME_pdu ( indent , BCCMD_DEEP_SLEEP_TIME_PDU ( pdu ) , policy );
    case BCCMDVARID_BLE_WHITELIST_FREE_SPACE:
        return display_BCCMD_BLE_WHITELIST_FREE_SPACE_pdu ( indent , BCCMD_BLE_WHITELIST_FREE_SPACE_PDU ( pdu ) , policy );
    case BCCMDVARID_MEMORY:
        return display_BCCMD_MEMORY_pdu ( indent , BCCMD_MEMORY_PDU ( pdu ) , policy );
    case BCCMDVARID_BABEL_SPI_RESET_AND_STOP:
        return display_BCCMD_BABEL_SPI_RESET_AND_STOP_pdu ( indent , BCCMD_BABEL_SPI_RESET_AND_STOP_PDU ( pdu ) , policy );
    case BCCMDVARID_RDF_DATA_CAPTURE_ENABLE:
        return display_BCCMD_RDF_DATA_CAPTURE_ENABLE_pdu ( indent , BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_CACHED_TEMPERATURE:
        return display_BCCMD_CACHED_TEMPERATURE_pdu ( indent , BCCMD_CACHED_TEMPERATURE_PDU ( pdu ) , policy );
    case BCCMDVARID_COEX_PRIORITY_PIOS_ON:
        return display_BCCMD_COEX_PRIORITY_PIOS_ON_pdu ( indent , BCCMD_COEX_PRIORITY_PIOS_ON_PDU ( pdu ) , policy );
    case BCCMDVARID_FM_REG:
        return display_BCCMD_FM_REG_pdu ( indent , BCCMD_FM_REG_PDU ( pdu ) , policy );
    case BCCMDVARID_CODEC_INPUT_GAIN:
        return display_BCCMD_CODEC_INPUT_GAIN_pdu ( indent , BCCMD_CODEC_INPUT_GAIN_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_GET_SINK:
        return display_BCCMD_STREAM_GET_SINK_pdu ( indent , BCCMD_STREAM_GET_SINK_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U01X:
        return display_BCCMD_STIBBONS_U01X_pdu ( indent , BCCMD_STIBBONS_U01X_PDU ( pdu ) , policy );
    case BCCMDVARID_BYPASS_UART:
        return display_BCCMD_BYPASS_UART_pdu ( indent , BCCMD_BYPASS_UART_PDU ( pdu ) , policy );
    case BCCMDVARID_INQUIRY_PRIORITY:
        return display_BCCMD_INQUIRY_PRIORITY_pdu ( indent , BCCMD_INQUIRY_PRIORITY_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO32_DIRECTION_MASK:
        return display_BCCMD_PIO32_DIRECTION_MASK_pdu ( indent , BCCMD_PIO32_DIRECTION_MASK_PDU ( pdu ) , policy );
    case BCCMDVARID_SIFLASH:
        return display_BCCMD_SIFLASH_pdu ( indent , BCCMD_SIFLASH_PDU ( pdu ) , policy );
    case BCCMDVARID_SPI_LOCK_CUSTOMER_KEY:
        return display_BCCMD_SPI_LOCK_CUSTOMER_KEY_pdu ( indent , BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU ( pdu ) , policy );
    case BCCMDVARID_HQ_SCRAPING_LEN:
        return display_BCCMD_HQ_SCRAPING_LEN_pdu ( indent , BCCMD_HQ_SCRAPING_LEN_PDU ( pdu ) , policy );
    case BCCMDVARID_WLAN_COEX_PRIORITY:
        return display_BCCMD_WLAN_COEX_PRIORITY_pdu ( indent , BCCMD_WLAN_COEX_PRIORITY_PDU ( pdu ) , policy );
    case BCCMDVARID_HQ_SCRAPING:
        return display_BCCMD_HQ_SCRAPING_pdu ( indent , BCCMD_HQ_SCRAPING_PDU ( pdu ) , policy );
    case BCCMDVARID_BC01_STATUS:
        return display_BCCMD_BC01_STATUS_pdu ( indent , BCCMD_BC01_STATUS_PDU ( pdu ) , policy );
    case BCCMDVARID_CHECK_ROM_CRC32:
        return display_BCCMD_CHECK_ROM_CRC32_pdu ( indent , BCCMD_CHECK_ROM_CRC32_PDU ( pdu ) , policy );
    case BCCMDVARID_PS_FACTORY_RESTORE:
        return display_BCCMD_PS_FACTORY_RESTORE_pdu ( indent , BCCMD_PS_FACTORY_RESTORE_PDU ( pdu ) , policy );
    case BCCMDVARID_SCO_PARAMETERS:
        return display_BCCMD_SCO_PARAMETERS_pdu ( indent , BCCMD_SCO_PARAMETERS_PDU ( pdu ) , policy );
    case BCCMDVARID_PCM_ATTENUATION:
        return display_BCCMD_PCM_ATTENUATION_pdu ( indent , BCCMD_PCM_ATTENUATION_PDU ( pdu ) , policy );
    case BCCMDVARID_CODEC_OUTPUT_GAIN:
        return display_BCCMD_CODEC_OUTPUT_GAIN_pdu ( indent , BCCMD_CODEC_OUTPUT_GAIN_PDU ( pdu ) , policy );
    case BCCMDVARID_RDF_DATA_CAPTURE_DISABLE:
        return display_BCCMD_RDF_DATA_CAPTURE_DISABLE_pdu ( indent , BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_RSSI_ACL:
        return display_BCCMD_RSSI_ACL_pdu ( indent , BCCMD_RSSI_ACL_PDU ( pdu ) , policy );
    case BCCMDVARID_PCM_CONFIG32:
        return display_BCCMD_PCM_CONFIG32_pdu ( indent , BCCMD_PCM_CONFIG32_PDU ( pdu ) , policy );
    case BCCMDVARID_INQUIRY_TX_POWER:
        return display_BCCMD_INQUIRY_TX_POWER_pdu ( indent , BCCMD_INQUIRY_TX_POWER_PDU ( pdu ) , policy );
    case BCCMDVARID_BLE_AROPE_CAPABILITIES:
        return display_BCCMD_BLE_AROPE_CAPABILITIES_pdu ( indent , BCCMD_BLE_AROPE_CAPABILITIES_PDU ( pdu ) , policy );
    case BCCMDVARID_BLE_DEFAULT_TX_POWER:
        return display_BCCMD_BLE_DEFAULT_TX_POWER_pdu ( indent , BCCMD_BLE_DEFAULT_TX_POWER_PDU ( pdu ) , policy );
    case BCCMDVARID_DEFAULT_TX_POWER:
        return display_BCCMD_DEFAULT_TX_POWER_pdu ( indent , BCCMD_DEFAULT_TX_POWER_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_CLOSE_SINK:
        return display_BCCMD_STREAM_CLOSE_SINK_pdu ( indent , BCCMD_STREAM_CLOSE_SINK_PDU ( pdu ) , policy );
    case BCCMDVARID_COLD_RESET:
        return display_BCCMD_COLD_RESET_pdu ( indent , BCCMD_COLD_RESET_PDU ( pdu ) , policy );
    case BCCMDVARID_MIC_BIAS_CONFIGURE:
        return display_BCCMD_MIC_BIAS_CONFIGURE_pdu ( indent , BCCMD_MIC_BIAS_CONFIGURE_PDU ( pdu ) , policy );
    case BCCMDVARID_CHECK_ROM:
        return display_BCCMD_CHECK_ROM_pdu ( indent , BCCMD_CHECK_ROM_PDU ( pdu ) , policy );
    case BCCMDVARID_RAND:
        return display_BCCMD_RAND_pdu ( indent , BCCMD_RAND_PDU ( pdu ) , policy );
    case BCCMDVARID_COLD_HALT:
        return display_BCCMD_COLD_HALT_pdu ( indent , BCCMD_COLD_HALT_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO32_PROTECT_MASK:
        return display_BCCMD_PIO32_PROTECT_MASK_pdu ( indent , BCCMD_PIO32_PROTECT_MASK_PDU ( pdu ) , policy );
    case BCCMDVARID_DSPMANAGER_DEBUG:
        return display_BCCMD_DSPMANAGER_DEBUG_pdu ( indent , BCCMD_DSPMANAGER_DEBUG_PDU ( pdu ) , policy );
    case BCCMDVARID_COASTER_STOP:
        return display_BCCMD_COASTER_STOP_pdu ( indent , BCCMD_COASTER_STOP_PDU ( pdu ) , policy );
    case BCCMDVARID_ALLOCATE_RAM_RESERVE:
        return display_BCCMD_ALLOCATE_RAM_RESERVE_pdu ( indent , BCCMD_ALLOCATE_RAM_RESERVE_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_TRANSACTION_START:
        return display_BCCMD_STREAM_TRANSACTION_START_pdu ( indent , BCCMD_STREAM_TRANSACTION_START_PDU ( pdu ) , policy );
    case BCCMDVARID_EGPS_PULSE_CONFIG:
        return display_BCCMD_EGPS_PULSE_CONFIG_pdu ( indent , BCCMD_EGPS_PULSE_CONFIG_PDU ( pdu ) , policy );
    case BCCMDVARID_PANIC_ON_FAULT:
        return display_BCCMD_PANIC_ON_FAULT_pdu ( indent , BCCMD_PANIC_ON_FAULT_PDU ( pdu ) , policy );
    case BCCMDVARID_GET_NEXT_BUILDDEF:
        return display_BCCMD_GET_NEXT_BUILDDEF_pdu ( indent , BCCMD_GET_NEXT_BUILDDEF_PDU ( pdu ) , policy );
    case BCCMDVARID_SHA256_INIT:
        return display_BCCMD_SHA256_INIT_pdu ( indent , BCCMD_SHA256_INIT_PDU ( pdu ) , policy );
    case BCCMDVARID_ENABLE_DUT_MODE:
        return display_BCCMD_ENABLE_DUT_MODE_pdu ( indent , BCCMD_ENABLE_DUT_MODE_PDU ( pdu ) , policy );
    case BCCMDVARID_BLE_ADV_FILT_ADD:
        return display_BCCMD_BLE_ADV_FILT_ADD_pdu ( indent , BCCMD_BLE_ADV_FILT_ADD_PDU ( pdu ) , policy );
    case BCCMDVARID_BLE_SCAN_BACKOFF:
        return display_BCCMD_BLE_SCAN_BACKOFF_pdu ( indent , BCCMD_BLE_SCAN_BACKOFF_PDU ( pdu ) , policy );
    case BCCMDVARID_BT_CLOCK:
        return display_BCCMD_BT_CLOCK_pdu ( indent , BCCMD_BT_CLOCK_PDU ( pdu ) , policy );
    case BCCMDVARID_SPI_BUFSIZE:
        return display_BCCMD_SPI_BUFSIZE_pdu ( indent , BCCMD_SPI_BUFSIZE_PDU ( pdu ) , policy );
    case BCCMDVARID_FMTX_TEXT:
        return display_BCCMD_FMTX_TEXT_pdu ( indent , BCCMD_FMTX_TEXT_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C01:
        return display_BCCMD_STIBBONS_C01_pdu ( indent , BCCMD_STIBBONS_C01_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C02:
        return display_BCCMD_STIBBONS_C02_pdu ( indent , BCCMD_STIBBONS_C02_PDU ( pdu ) , policy );
    case BCCMDVARID_PCM_SYNC_RATE:
        return display_BCCMD_PCM_SYNC_RATE_pdu ( indent , BCCMD_PCM_SYNC_RATE_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C03:
        return display_BCCMD_STIBBONS_C03_pdu ( indent , BCCMD_STIBBONS_C03_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C04:
        return display_BCCMD_STIBBONS_C04_pdu ( indent , BCCMD_STIBBONS_C04_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C05:
        return display_BCCMD_STIBBONS_C05_pdu ( indent , BCCMD_STIBBONS_C05_PDU ( pdu ) , policy );
    case BCCMDVARID_LED2_ENABLE:
        return display_BCCMD_LED2_ENABLE_pdu ( indent , BCCMD_LED2_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_CHECK_RAM_RESULT:
        return display_BCCMD_CHECK_RAM_RESULT_pdu ( indent , BCCMD_CHECK_RAM_RESULT_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C06:
        return display_BCCMD_STIBBONS_C06_pdu ( indent , BCCMD_STIBBONS_C06_PDU ( pdu ) , policy );
    case BCCMDVARID_EGPS_PULSE_OUTPUT_START:
        return display_BCCMD_EGPS_PULSE_OUTPUT_START_pdu ( indent , BCCMD_EGPS_PULSE_OUTPUT_START_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C07:
        return display_BCCMD_STIBBONS_C07_pdu ( indent , BCCMD_STIBBONS_C07_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C08:
        return display_BCCMD_STIBBONS_C08_pdu ( indent , BCCMD_STIBBONS_C08_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C09:
        return display_BCCMD_STIBBONS_C09_pdu ( indent , BCCMD_STIBBONS_C09_PDU ( pdu ) , policy );
    case BCCMDVARID_CHECK_RAM:
        return display_BCCMD_CHECK_RAM_pdu ( indent , BCCMD_CHECK_RAM_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_GET_SOURCE:
        return display_BCCMD_STREAM_GET_SOURCE_pdu ( indent , BCCMD_STREAM_GET_SOURCE_PDU ( pdu ) , policy );
    case BCCMDVARID_ROUTE_CLOCK:
        return display_BCCMD_ROUTE_CLOCK_pdu ( indent , BCCMD_ROUTE_CLOCK_PDU ( pdu ) , policy );
    case BCCMDVARID_BABEL_SPI_GO:
        return display_BCCMD_BABEL_SPI_GO_pdu ( indent , BCCMD_BABEL_SPI_GO_PDU ( pdu ) , policy );
    case BCCMDVARID_COASTER_SV_STATE:
        return display_BCCMD_COASTER_SV_STATE_pdu ( indent , BCCMD_COASTER_SV_STATE_PDU ( pdu ) , policy );
    case BCCMDVARID_RDF_BLE_SCAN_MODE:
        return display_BCCMD_RDF_BLE_SCAN_MODE_pdu ( indent , BCCMD_RDF_BLE_SCAN_MODE_PDU ( pdu ) , policy );
    case BCCMDVARID_RANDOM:
        return display_BCCMD_RANDOM_pdu ( indent , BCCMD_RANDOM_PDU ( pdu ) , policy );
    case BCCMDVARID_PS_FACTORY_RESTORE_ALL:
        return display_BCCMD_PS_FACTORY_RESTORE_ALL_pdu ( indent , BCCMD_PS_FACTORY_RESTORE_ALL_PDU ( pdu ) , policy );
    case BCCMDVARID_COEX_DUMP:
        return display_BCCMD_COEX_DUMP_pdu ( indent , BCCMD_COEX_DUMP_PDU ( pdu ) , policy );
    case BCCMDVARID_CLOCK_MODULATION_ENABLE:
        return display_BCCMD_CLOCK_MODULATION_ENABLE_pdu ( indent , BCCMD_CLOCK_MODULATION_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C10:
        return display_BCCMD_STIBBONS_C10_pdu ( indent , BCCMD_STIBBONS_C10_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_TRANSACTION_CANCEL:
        return display_BCCMD_STREAM_TRANSACTION_CANCEL_pdu ( indent , BCCMD_STREAM_TRANSACTION_CANCEL_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C11:
        return display_BCCMD_STIBBONS_C11_pdu ( indent , BCCMD_STIBBONS_C11_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C12:
        return display_BCCMD_STIBBONS_C12_pdu ( indent , BCCMD_STIBBONS_C12_PDU ( pdu ) , policy );
    case BCCMDVARID_HOST_DECIDES_TIMING:
        return display_BCCMD_HOST_DECIDES_TIMING_pdu ( indent , BCCMD_HOST_DECIDES_TIMING_PDU ( pdu ) , policy );
    case BCCMDVARID_RADIOTEST:
        return display_radiotest_pdu ( indent , BCCMD_RADIOTEST_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C13:
        return display_BCCMD_STIBBONS_C13_pdu ( indent , BCCMD_STIBBONS_C13_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C14:
        return display_BCCMD_STIBBONS_C14_pdu ( indent , BCCMD_STIBBONS_C14_PDU ( pdu ) , policy );
    case BCCMDVARID_VREF_CONSTANT:
        return display_BCCMD_VREF_CONSTANT_pdu ( indent , BCCMD_VREF_CONSTANT_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C15:
        return display_BCCMD_STIBBONS_C15_pdu ( indent , BCCMD_STIBBONS_C15_PDU ( pdu ) , policy );
    case BCCMDVARID_CLK_SKEW_COUNT:
        return display_BCCMD_CLK_SKEW_COUNT_pdu ( indent , BCCMD_CLK_SKEW_COUNT_PDU ( pdu ) , policy );
    case BCCMDVARID_AWAY_TIME:
        return display_BCCMD_AWAY_TIME_pdu ( indent , BCCMD_AWAY_TIME_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_C16:
        return display_BCCMD_STIBBONS_C16_pdu ( indent , BCCMD_STIBBONS_C16_PDU ( pdu ) , policy );
    case BCCMDVARID_WAIT_FOR_N_MS:
        return display_BCCMD_WAIT_FOR_N_MS_pdu ( indent , BCCMD_WAIT_FOR_N_MS_PDU ( pdu ) , policy );
    case BCCMDVARID_PCM_CLOCK_RATE:
        return display_BCCMD_PCM_CLOCK_RATE_pdu ( indent , BCCMD_PCM_CLOCK_RATE_PDU ( pdu ) , policy );
    case BCCMDVARID_TESTB_AMUX:
        return display_BCCMD_TESTB_AMUX_pdu ( indent , BCCMD_TESTB_AMUX_PDU ( pdu ) , policy );
    case BCCMDVARID_GPS_START:
        return display_BCCMD_GPS_START_pdu ( indent , BCCMD_GPS_START_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_ALIAS_SINK:
        return display_BCCMD_STREAM_ALIAS_SINK_pdu ( indent , BCCMD_STREAM_ALIAS_SINK_PDU ( pdu ) , policy );
    case BCCMDVARID_LIMIT_EDR_POWER:
        return display_BCCMD_LIMIT_EDR_POWER_pdu ( indent , BCCMD_LIMIT_EDR_POWER_PDU ( pdu ) , policy );
    case BCCMDVARID_HOSTIO_ENABLE_DEBUG:
        return display_BCCMD_HOSTIO_ENABLE_DEBUG_pdu ( indent , BCCMD_HOSTIO_ENABLE_DEBUG_PDU ( pdu ) , policy );
    case BCCMDVARID_WARM_HALT:
        return display_BCCMD_WARM_HALT_pdu ( indent , BCCMD_WARM_HALT_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_CLOSE_SOURCE:
        return display_BCCMD_STREAM_CLOSE_SOURCE_pdu ( indent , BCCMD_STREAM_CLOSE_SOURCE_PDU ( pdu ) , policy );
    case BCCMDVARID_BUILD_NAME:
        return display_BCCMD_BUILD_NAME_pdu ( indent , BCCMD_BUILD_NAME_PDU ( pdu ) , policy );
    case BCCMDVARID_SINGLE_CHAN:
        return display_BCCMD_SINGLE_CHAN_pdu ( indent , BCCMD_SINGLE_CHAN_PDU ( pdu ) , policy );
    case BCCMDVARID_PSCLRS:
        return display_BCCMD_PSCLRS_pdu ( indent , BCCMD_PSCLRS_PDU ( pdu ) , policy );
    case BCCMDVARID_LED_CONFIG:
        return display_BCCMD_LED_CONFIG_pdu ( indent , BCCMD_LED_CONFIG_PDU ( pdu ) , policy );
    case BCCMDVARID_LOCK_ACL_PACKET_TYPE:
        return display_BCCMD_LOCK_ACL_PACKET_TYPE_pdu ( indent , BCCMD_LOCK_ACL_PACKET_TYPE_PDU ( pdu ) , policy );
    case BCCMDVARID_LC_RX_FRACS:
        return display_BCCMD_LC_RX_FRACS_pdu ( indent , BCCMD_LC_RX_FRACS_PDU ( pdu ) , policy );
    case BCCMDVARID_COMBO_DOT11_ESCO_RTX_PRIORITY:
        return display_BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_pdu ( indent , BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU ( pdu ) , policy );
    case BCCMDVARID_TESTA_AMUX:
        return display_BCCMD_TESTA_AMUX_pdu ( indent , BCCMD_TESTA_AMUX_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO32_STRONG_BIAS:
        return display_BCCMD_PIO32_STRONG_BIAS_pdu ( indent , BCCMD_PIO32_STRONG_BIAS_PDU ( pdu ) , policy );
    case BCCMDVARID_PS_MEMORY_TYPE:
        return display_BCCMD_PS_MEMORY_TYPE_pdu ( indent , BCCMD_PS_MEMORY_TYPE_PDU ( pdu ) , policy );
    case BCCMDVARID_BABEL_SPI_RUN_STATE:
        return display_BCCMD_BABEL_SPI_RUN_STATE_pdu ( indent , BCCMD_BABEL_SPI_RUN_STATE_PDU ( pdu ) , policy );
    case BCCMDVARID_PSSIZE:
        return display_BCCMD_PSSIZE_pdu ( indent , BCCMD_PSSIZE_PDU ( pdu ) , policy );
    case BCCMDVARID_KILL_VM_APPLICATION:
        return display_BCCMD_KILL_VM_APPLICATION_pdu ( indent , BCCMD_KILL_VM_APPLICATION_PDU ( pdu ) , policy );
    case BCCMDVARID_ANA_FTRIM_READWRITE:
        return display_BCCMD_ANA_FTRIM_READWRITE_pdu ( indent , BCCMD_ANA_FTRIM_READWRITE_PDU ( pdu ) , policy );
    case BCCMDVARID_ENABLE_DEV_CONNECT:
        return display_BCCMD_ENABLE_DEV_CONNECT_pdu ( indent , BCCMD_ENABLE_DEV_CONNECT_PDU ( pdu ) , policy );
    case BCCMDVARID_BER_THRESHOLD:
        return display_BCCMD_BER_THRESHOLD_pdu ( indent , BCCMD_BER_THRESHOLD_PDU ( pdu ) , policy );
    case BCCMDVARID_START_OPERATOR:
        return display_BCCMD_START_OPERATOR_pdu ( indent , BCCMD_START_OPERATOR_PDU ( pdu ) , policy );
    case BCCMDVARID_COEX_INT_TEST:
        return display_BCCMD_COEX_INT_TEST_pdu ( indent , BCCMD_COEX_INT_TEST_PDU ( pdu ) , policy );
    case BCCMDVARID_RDF_PT:
        return display_BCCMD_RDF_PT_pdu ( indent , BCCMD_RDF_PT_PDU ( pdu ) , policy );
    case BCCMDVARID_EGPS_PULSE_INPUT_START:
        return display_BCCMD_EGPS_PULSE_INPUT_START_pdu ( indent , BCCMD_EGPS_PULSE_INPUT_START_PDU ( pdu ) , policy );
    case BCCMDVARID_RDF_PT_SELECT_ANTENNA:
        return display_BCCMD_RDF_PT_SELECT_ANTENNA_pdu ( indent , BCCMD_RDF_PT_SELECT_ANTENNA_PDU ( pdu ) , policy );
    case BCCMDVARID_PCM_LOW_JITTER:
        return display_BCCMD_PCM_LOW_JITTER_pdu ( indent , BCCMD_PCM_LOW_JITTER_PDU ( pdu ) , policy );
    case BCCMDVARID_SHA256_RES:
        return display_BCCMD_SHA256_RES_pdu ( indent , BCCMD_SHA256_RES_PDU ( pdu ) , policy );
    case BCCMDVARID_CHARGER_TRIMS:
        return display_BCCMD_CHARGER_TRIMS_pdu ( indent , BCCMD_CHARGER_TRIMS_PDU ( pdu ) , policy );
    case BCCMDVARID_KALSPIDEBUG_SETDEBUGMODE:
        return display_BCCMD_KALSPIDEBUG_SETDEBUGMODE_pdu ( indent , BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU ( pdu ) , policy );
    case BCCMDVARID_PCM2_ATTENUATION:
        return display_BCCMD_PCM2_ATTENUATION_pdu ( indent , BCCMD_PCM2_ATTENUATION_PDU ( pdu ) , policy );
    case BCCMDVARID_SAVE_CONNECTION_EVENT_FILTERS:
        return display_BCCMD_SAVE_CONNECTION_EVENT_FILTERS_pdu ( indent , BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU ( pdu ) , policy );
    case BCCMDVARID_ESCOTEST:
        return display_BCCMD_ESCOTEST_pdu ( indent , BCCMD_ESCOTEST_PDU ( pdu ) , policy );
    case BCCMDVARID_E2_APP_SIZE:
        return display_BCCMD_E2_APP_SIZE_pdu ( indent , BCCMD_E2_APP_SIZE_PDU ( pdu ) , policy );
    case BCCMDVARID_BUFFER:
        return display_BCCMD_BUFFER_pdu ( indent , BCCMD_BUFFER_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_CONFIGURE:
        return display_BCCMD_STREAM_CONFIGURE_pdu ( indent , BCCMD_STREAM_CONFIGURE_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC:
        return display_BCCMD_ADC_pdu ( indent , BCCMD_ADC_PDU ( pdu ) , policy );
    case BCCMDVARID_PSNEXT_ALL:
        return display_BCCMD_PSNEXT_ALL_pdu ( indent , BCCMD_PSNEXT_ALL_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_SYNC_SID:
        return display_BCCMD_STREAM_SYNC_SID_pdu ( indent , BCCMD_STREAM_SYNC_SID_PDU ( pdu ) , policy );
    case BCCMDVARID_MAP_SCO_PCM:
        return display_BCCMD_MAP_SCO_PCM_pdu ( indent , BCCMD_MAP_SCO_PCM_PDU ( pdu ) , policy );
    case BCCMDVARID_FASTPIPE_CREATE:
        return display_BCCMD_FASTPIPE_CREATE_pdu ( indent , BCCMD_FASTPIPE_CREATE_PDU ( pdu ) , policy );
    case BCCMDVARID_COASTER_INDICATIONS:
        return display_BCCMD_COASTER_INDICATIONS_pdu ( indent , BCCMD_COASTER_INDICATIONS_PDU ( pdu ) , policy );
    case BCCMDVARID_LED1_ENABLE:
        return display_BCCMD_LED1_ENABLE_pdu ( indent , BCCMD_LED1_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_ENABLE_COEX_MESSAGE_REPORTING:
        return display_BCCMD_ENABLE_COEX_MESSAGE_REPORTING_pdu ( indent , BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU ( pdu ) , policy );
    case BCCMDVARID_SHA256_DATA:
        return display_BCCMD_SHA256_DATA_pdu ( indent , BCCMD_SHA256_DATA_PDU ( pdu ) , policy );
    case BCCMDVARID_DIGITAL_AUDIO_CONFIG:
        return display_BCCMD_DIGITAL_AUDIO_CONFIG_pdu ( indent , BCCMD_DIGITAL_AUDIO_CONFIG_PDU ( pdu ) , policy );
    case BCCMDVARID_CHIPVER:
        return display_BCCMD_CHIPVER_pdu ( indent , BCCMD_CHIPVER_PDU ( pdu ) , policy );
    case BCCMDVARID_SPI_LOCK_STATUS:
        return display_BCCMD_SPI_LOCK_STATUS_pdu ( indent , BCCMD_SPI_LOCK_STATUS_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC0:
        return display_BCCMD_ADC0_pdu ( indent , BCCMD_ADC0_PDU ( pdu ) , policy );
    case BCCMDVARID_ENABLE_MEDIUM_RATE:
        return display_BCCMD_ENABLE_MEDIUM_RATE_pdu ( indent , BCCMD_ENABLE_MEDIUM_RATE_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC1:
        return display_BCCMD_ADC1_pdu ( indent , BCCMD_ADC1_PDU ( pdu ) , policy );
    case BCCMDVARID_FMTX_SET_CDAC:
        return display_BCCMD_FMTX_SET_CDAC_pdu ( indent , BCCMD_FMTX_SET_CDAC_PDU ( pdu ) , policy );
    case BCCMDVARID_DIGITAL_AUDIO_RATE:
        return display_BCCMD_DIGITAL_AUDIO_RATE_pdu ( indent , BCCMD_DIGITAL_AUDIO_RATE_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC2:
        return display_BCCMD_ADC2_pdu ( indent , BCCMD_ADC2_PDU ( pdu ) , policy );
    case BCCMDVARID_PROVOKE_PANIC:
        return display_BCCMD_PROVOKE_PANIC_pdu ( indent , BCCMD_PROVOKE_PANIC_PDU ( pdu ) , policy );
    case BCCMDVARID_GET_CLR_EVT:
        return display_BCCMD_GET_CLR_EVT_pdu ( indent , BCCMD_GET_CLR_EVT_PDU ( pdu ) , policy );
    case BCCMDVARID_E2_DEVICE:
        return display_BCCMD_E2_DEVICE_pdu ( indent , BCCMD_E2_DEVICE_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC3:
        return display_BCCMD_ADC3_pdu ( indent , BCCMD_ADC3_PDU ( pdu ) , policy );
    case BCCMDVARID_INTERFACE_VERSION:
        return display_BCCMD_INTERFACE_VERSION_pdu ( indent , BCCMD_INTERFACE_VERSION_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC4:
        return display_BCCMD_ADC4_pdu ( indent , BCCMD_ADC4_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC5:
        return display_BCCMD_ADC5_pdu ( indent , BCCMD_ADC5_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC6:
        return display_BCCMD_ADC6_pdu ( indent , BCCMD_ADC6_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC7:
        return display_BCCMD_ADC7_pdu ( indent , BCCMD_ADC7_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC8:
        return display_BCCMD_ADC8_pdu ( indent , BCCMD_ADC8_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC9:
        return display_BCCMD_ADC9_pdu ( indent , BCCMD_ADC9_PDU ( pdu ) , policy );
    case BCCMDVARID_KALDEBUG:
        return display_BCCMD_KALDEBUG_pdu ( indent , BCCMD_KALDEBUG_PDU ( pdu ) , policy );
    case BCCMDVARID_CHARGER_SUPPRESS_LED0:
        return display_BCCMD_CHARGER_SUPPRESS_LED0_pdu ( indent , BCCMD_CHARGER_SUPPRESS_LED0_PDU ( pdu ) , policy );
    case BCCMDVARID_RDF_BLE_RAND_ADDR:
        return display_BCCMD_RDF_BLE_RAND_ADDR_pdu ( indent , BCCMD_RDF_BLE_RAND_ADDR_PDU ( pdu ) , policy );
    case BCCMDVARID_DESTROY_OPERATOR:
        return display_BCCMD_DESTROY_OPERATOR_pdu ( indent , BCCMD_DESTROY_OPERATOR_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO_STRONG_BIAS:
        return display_BCCMD_PIO_STRONG_BIAS_pdu ( indent , BCCMD_PIO_STRONG_BIAS_PDU ( pdu ) , policy );
    case BCCMDVARID_CHARGER_STATUS:
        return display_BCCMD_CHARGER_STATUS_pdu ( indent , BCCMD_CHARGER_STATUS_PDU ( pdu ) , policy );
    case BCCMDVARID_PREVIN_TUNNEL:
        return display_BCCMD_PREVIN_TUNNEL_pdu ( indent , BCCMD_PREVIN_TUNNEL_PDU ( pdu ) , policy );
    case BCCMDVARID_PS:
        return display_BCCMD_PS_pdu ( indent , BCCMD_PS_PDU ( pdu ) , policy );
    case BCCMDVARID_CREATE_OPERATOR_C:
        return display_BCCMD_CREATE_OPERATOR_C_pdu ( indent , BCCMD_CREATE_OPERATOR_C_PDU ( pdu ) , policy );
    case BCCMDVARID_COASTER_DEL_SV:
        return display_BCCMD_COASTER_DEL_SV_pdu ( indent , BCCMD_COASTER_DEL_SV_PDU ( pdu ) , policy );
    case BCCMDVARID_FIRMWARE_CHECK_MASK:
        return display_BCCMD_FIRMWARE_CHECK_MASK_pdu ( indent , BCCMD_FIRMWARE_CHECK_MASK_PDU ( pdu ) , policy );
    case BCCMDVARID_PRESERVE_VALID:
        return display_BCCMD_PRESERVE_VALID_pdu ( indent , BCCMD_PRESERVE_VALID_PDU ( pdu ) , policy );
    case BCCMDVARID_CREATE_OPERATOR_P:
        return display_BCCMD_CREATE_OPERATOR_P_pdu ( indent , BCCMD_CREATE_OPERATOR_P_PDU ( pdu ) , policy );
    case BCCMDVARID_CLKSW_CURRENT_CLOCKS:
        return display_BCCMD_CLKSW_CURRENT_CLOCKS_pdu ( indent , BCCMD_CLKSW_CURRENT_CLOCKS_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO32:
        return display_BCCMD_PIO32_pdu ( indent , BCCMD_PIO32_PDU ( pdu ) , policy );
    case BCCMDVARID_STREAM_CONNECT:
        return display_BCCMD_STREAM_CONNECT_pdu ( indent , BCCMD_STREAM_CONNECT_PDU ( pdu ) , policy );
    case BCCMDVARID_HQ_SCRAPING_ENABLE:
        return display_BCCMD_HQ_SCRAPING_ENABLE_pdu ( indent , BCCMD_HQ_SCRAPING_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_CLOCK_MODULATION_CONFIG:
        return display_BCCMD_CLOCK_MODULATION_CONFIG_pdu ( indent , BCCMD_CLOCK_MODULATION_CONFIG_PDU ( pdu ) , policy );
    case BCCMDVARID_GPS_STOP:
        return display_BCCMD_GPS_STOP_pdu ( indent , BCCMD_GPS_STOP_PDU ( pdu ) , policy );
    case BCCMDVARID_CRYPTKEYLEN:
        return display_BCCMD_CRYPTKEYLEN_pdu ( indent , BCCMD_CRYPTKEYLEN_PDU ( pdu ) , policy );
    case BCCMDVARID_PSCLRALLS:
        return display_BCCMD_PSCLRALLS_pdu ( indent , BCCMD_PSCLRALLS_PDU ( pdu ) , policy );
    case BCCMDVARID_PCM_SLOTS_PER_FRAME:
        return display_BCCMD_PCM_SLOTS_PER_FRAME_pdu ( indent , BCCMD_PCM_SLOTS_PER_FRAME_PDU ( pdu ) , policy );
    case BCCMDVARID_WARM_RESET:
        return display_BCCMD_WARM_RESET_pdu ( indent , BCCMD_WARM_RESET_PDU ( pdu ) , policy );
    case BCCMDVARID_FASTPIPE_DESTROY:
        return display_BCCMD_FASTPIPE_DESTROY_pdu ( indent , BCCMD_FASTPIPE_DESTROY_PDU ( pdu ) , policy );
    case BCCMDVARID_SYNC_CLOCK:
        return display_BCCMD_SYNC_CLOCK_pdu ( indent , BCCMD_SYNC_CLOCK_PDU ( pdu ) , policy );
    case BCCMDVARID_BLE_RADIO_TEST:
        return display_BCCMD_BLE_RADIO_TEST_pdu ( indent , BCCMD_BLE_RADIO_TEST_PDU ( pdu ) , policy );
    case BCCMDVARID_I2C_TRANSFER:
        return display_BCCMD_I2C_TRANSFER_pdu ( indent , BCCMD_I2C_TRANSFER_PDU ( pdu ) , policy );
    case BCCMDVARID_OPERATOR_MESSAGE:
        return display_BCCMD_OPERATOR_MESSAGE_pdu ( indent , BCCMD_OPERATOR_MESSAGE_PDU ( pdu ) , policy );
    case BCCMDVARID_PSNEXT:
        return display_BCCMD_PSNEXT_pdu ( indent , BCCMD_PSNEXT_PDU ( pdu ) , policy );
    case BCCMDVARID_ENABLE_TX:
        return display_BCCMD_ENABLE_TX_pdu ( indent , BCCMD_ENABLE_TX_PDU ( pdu ) , policy );
    case BCCMDVARID_PSU_SMPS_ENABLE:
        return display_BCCMD_PSU_SMPS_ENABLE_pdu ( indent , BCCMD_PSU_SMPS_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_UNLOCK_OTP:
        return display_BCCMD_UNLOCK_OTP_pdu ( indent , BCCMD_UNLOCK_OTP_PDU ( pdu ) , policy );
    case BCCMDVARID_STOP_OPERATOR:
        return display_BCCMD_STOP_OPERATOR_pdu ( indent , BCCMD_STOP_OPERATOR_PDU ( pdu ) , policy );
    case BCCMDVARID_BABEL_SPI_GET_LINE_STATUS:
        return display_BCCMD_BABEL_SPI_GET_LINE_STATUS_pdu ( indent , BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU ( pdu ) , policy );
    case BCCMDVARID_GPS_CONFIG:
        return display_BCCMD_GPS_CONFIG_pdu ( indent , BCCMD_GPS_CONFIG_PDU ( pdu ) , policy );
    case BCCMDVARID_BC3PSU:
        return display_BCCMD_BC3PSU_pdu ( indent , BCCMD_BC3PSU_PDU ( pdu ) , policy );
    case BCCMDVARID_DEEP_SLEEP_PERIOD:
        return display_BCCMD_DEEP_SLEEP_PERIOD_pdu ( indent , BCCMD_DEEP_SLEEP_PERIOD_PDU ( pdu ) , policy );
    case BCCMDVARID_HOPPING_ON:
        return display_BCCMD_HOPPING_ON_pdu ( indent , BCCMD_HOPPING_ON_PDU ( pdu ) , policy );
    case BCCMDVARID_GSM_RX_MODE:
        return display_BCCMD_GSM_RX_MODE_pdu ( indent , BCCMD_GSM_RX_MODE_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO32_SET_PIN_FUNCTION:
        return display_BCCMD_PIO32_SET_PIN_FUNCTION_pdu ( indent , BCCMD_PIO32_SET_PIN_FUNCTION_PDU ( pdu ) , policy );
    case BCCMDVARID_RADIOTEST_INTERFACE_VERSION:
        return display_BCCMD_RADIOTEST_INTERFACE_VERSION_pdu ( indent , BCCMD_RADIOTEST_INTERFACE_VERSION_PDU ( pdu ) , policy );
    case BCCMDVARID_BOOTMODE:
        return display_BCCMD_BOOTMODE_pdu ( indent , BCCMD_BOOTMODE_PDU ( pdu ) , policy );
    case BCCMDVARID_DEFRAG_RESET:
        return display_BCCMD_DEFRAG_RESET_pdu ( indent , BCCMD_DEFRAG_RESET_PDU ( pdu ) , policy );
    case BCCMDVARID_CANCEL_PAGE:
        return display_BCCMD_CANCEL_PAGE_pdu ( indent , BCCMD_CANCEL_PAGE_PDU ( pdu ) , policy );
    case BCCMDVARID_MAP_SCO_AUDIO:
        return display_BCCMD_MAP_SCO_AUDIO_pdu ( indent , BCCMD_MAP_SCO_AUDIO_PDU ( pdu ) , policy );
    case BCCMDVARID_NO_VARIABLE:
        return display_BCCMD_NO_VARIABLE_pdu ( indent , BCCMD_NO_VARIABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_L2CAP_CRC:
        return display_BCCMD_L2CAP_CRC_pdu ( indent , BCCMD_L2CAP_CRC_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC_READ:
        return display_BCCMD_ADC_READ_pdu ( indent , BCCMD_ADC_READ_PDU ( pdu ) , policy );
    case BCCMDVARID_AUX_DAC:
        return display_BCCMD_AUX_DAC_pdu ( indent , BCCMD_AUX_DAC_PDU ( pdu ) , policy );
    case BCCMDVARID_PROVOKE_DELAYED_PANIC:
        return display_BCCMD_PROVOKE_DELAYED_PANIC_pdu ( indent , BCCMD_PROVOKE_DELAYED_PANIC_PDU ( pdu ) , policy );
    case BCCMDVARID_BABEL_SPI_STOP:
        return display_BCCMD_BABEL_SPI_STOP_pdu ( indent , BCCMD_BABEL_SPI_STOP_PDU ( pdu ) , policy );
    case BCCMDVARID_SPI_LOCK_STAY_LOCKED_KEY:
        return display_BCCMD_SPI_LOCK_STAY_LOCKED_KEY_pdu ( indent , BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU ( pdu ) , policy );
    case BCCMDVARID_INFORM_LINK_PROFILES:
        return display_BCCMD_INFORM_LINK_PROFILES_pdu ( indent , BCCMD_INFORM_LINK_PROFILES_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC10:
        return display_BCCMD_ADC10_pdu ( indent , BCCMD_ADC10_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC11:
        return display_BCCMD_ADC11_pdu ( indent , BCCMD_ADC11_PDU ( pdu ) , policy );
    case BCCMDVARID_BABEL_SPI_DELAY:
        return display_BCCMD_BABEL_SPI_DELAY_pdu ( indent , BCCMD_BABEL_SPI_DELAY_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC12:
        return display_BCCMD_ADC12_pdu ( indent , BCCMD_ADC12_PDU ( pdu ) , policy );
    case BCCMDVARID_EGPS_PULSE_STOP:
        return display_BCCMD_EGPS_PULSE_STOP_pdu ( indent , BCCMD_EGPS_PULSE_STOP_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC13:
        return display_BCCMD_ADC13_pdu ( indent , BCCMD_ADC13_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC14:
        return display_BCCMD_ADC14_pdu ( indent , BCCMD_ADC14_PDU ( pdu ) , policy );
    case BCCMDVARID_ADC15:
        return display_BCCMD_ADC15_pdu ( indent , BCCMD_ADC15_PDU ( pdu ) , policy );
    case BCCMDVARID_ENABLE_SCO_STREAMS:
        return display_BCCMD_ENABLE_SCO_STREAMS_pdu ( indent , BCCMD_ENABLE_SCO_STREAMS_PDU ( pdu ) , policy );
    case BCCMDVARID_COASTER_START:
        return display_BCCMD_COASTER_START_pdu ( indent , BCCMD_COASTER_START_PDU ( pdu ) , policy );
    case BCCMDVARID_LED0_ENABLE:
        return display_BCCMD_LED0_ENABLE_pdu ( indent , BCCMD_LED0_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_ENABLE_AFH:
        return display_BCCMD_ENABLE_AFH_pdu ( indent , BCCMD_ENABLE_AFH_PDU ( pdu ) , policy );
    case BCCMDVARID_CHIPREV:
        return display_BCCMD_CHIPREV_pdu ( indent , BCCMD_CHIPREV_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO:
        return display_BCCMD_PIO_pdu ( indent , BCCMD_PIO_PDU ( pdu ) , policy );
    case BCCMDVARID_CHARGER_PSU_TRIM:
        return display_BCCMD_CHARGER_PSU_TRIM_pdu ( indent , BCCMD_CHARGER_PSU_TRIM_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U03:
        return display_BCCMD_STIBBONS_U03_pdu ( indent , BCCMD_STIBBONS_U03_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U04:
        return display_BCCMD_STIBBONS_U04_pdu ( indent , BCCMD_STIBBONS_U04_PDU ( pdu ) , policy );
    case BCCMDVARID_BUILDID:
        return display_BCCMD_BUILDID_pdu ( indent , BCCMD_BUILDID_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U05:
        return display_BCCMD_STIBBONS_U05_pdu ( indent , BCCMD_STIBBONS_U05_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U06:
        return display_BCCMD_STIBBONS_U06_pdu ( indent , BCCMD_STIBBONS_U06_PDU ( pdu ) , policy );
    case BCCMDVARID_REMOVE_DOWNLOADED_CAPABILITY:
        return display_BCCMD_REMOVE_DOWNLOADED_CAPABILITY_pdu ( indent , BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U07:
        return display_BCCMD_STIBBONS_U07_pdu ( indent , BCCMD_STIBBONS_U07_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U08:
        return display_BCCMD_STIBBONS_U08_pdu ( indent , BCCMD_STIBBONS_U08_PDU ( pdu ) , policy );
    case BCCMDVARID_STIBBONS_U09:
        return display_BCCMD_STIBBONS_U09_pdu ( indent , BCCMD_STIBBONS_U09_PDU ( pdu ) , policy );
    case BCCMDVARID_PIO32_MAP_PINS:
        return display_BCCMD_PIO32_MAP_PINS_pdu ( indent , BCCMD_PIO32_MAP_PINS_PDU ( pdu ) , policy );
    case BCCMDVARID_PROVOKE_FAULT:
        return display_BCCMD_PROVOKE_FAULT_pdu ( indent , BCCMD_PROVOKE_FAULT_PDU ( pdu ) , policy );
    case BCCMDVARID_ANA_FTRIM:
        return display_BCCMD_ANA_FTRIM_pdu ( indent , BCCMD_ANA_FTRIM_PDU ( pdu ) , policy );
    case BCCMDVARID_FIRMWARE_CHECK:
        return display_BCCMD_FIRMWARE_CHECK_pdu ( indent , BCCMD_FIRMWARE_CHECK_PDU ( pdu ) , policy );
    case BCCMDVARID_INIT_BT_STACK:
        return display_BCCMD_INIT_BT_STACK_pdu ( indent , BCCMD_INIT_BT_STACK_PDU ( pdu ) , policy );
    case BCCMDVARID_MAXCRYPTKEYLEN:
        return display_BCCMD_MAXCRYPTKEYLEN_pdu ( indent , BCCMD_MAXCRYPTKEYLEN_PDU ( pdu ) , policy );
    case BCCMDVARID_E2_APP_DATA:
        return display_BCCMD_E2_APP_DATA_pdu ( indent , BCCMD_E2_APP_DATA_PDU ( pdu ) , policy );
    case BCCMDVARID_GPS_DSP_ENABLE:
        return display_BCCMD_GPS_DSP_ENABLE_pdu ( indent , BCCMD_GPS_DSP_ENABLE_PDU ( pdu ) , policy );
    case BCCMDVARID_KALEXTADDRDEBUG:
        return display_BCCMD_KALEXTADDRDEBUG_pdu ( indent , BCCMD_KALEXTADDRDEBUG_PDU ( pdu ) , policy );
    case BCCMDVARID_PANIC_ARG:
        return display_BCCMD_PANIC_ARG_pdu ( indent , BCCMD_PANIC_ARG_PDU ( pdu ) , policy );
    case BCCMDVARID_DISABLE_TX:
        return display_BCCMD_DISABLE_TX_pdu ( indent , BCCMD_DISABLE_TX_PDU ( pdu ) , policy );
    case BCCMDVARID_FASTPIPE_RESIZE:
        return display_BCCMD_FASTPIPE_RESIZE_pdu ( indent , BCCMD_FASTPIPE_RESIZE_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( BCCMD_PDU ( pdu ).get_varid() , "BCCMD" , pdu );
    }
}

a_string display_radiotest_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( RADIOTEST_PDU ( pdu ).get_radiotest() )
    {
    case RADIOTEST_TXSTART:
        return display_RADIOTEST_TXSTART_pdu ( indent , RADIOTEST_TXSTART_PDU ( pdu ) , policy );
    case RADIOTEST_CTS_RTS_LB:
        return display_RADIOTEST_CTS_RTS_LB_pdu ( indent , RADIOTEST_CTS_RTS_LB_PDU ( pdu ) , policy );
    case RADIOTEST_CONFIG_TX_IF:
        return display_RADIOTEST_CONFIG_TX_IF_pdu ( indent , RADIOTEST_CONFIG_TX_IF_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_LB:
        return display_RADIOTEST_PCM_LB_pdu ( indent , RADIOTEST_PCM_LB_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_SETTLE:
        return display_RADIOTEST_CFG_SETTLE_pdu ( indent , RADIOTEST_CFG_SETTLE_PDU ( pdu ) , policy );
    case RADIOTEST_IF_RESP:
        return display_RADIOTEST_IF_RESP_pdu ( indent , RADIOTEST_IF_RESP_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_EXT_LB:
        return display_RADIOTEST_PCM_EXT_LB_pdu ( indent , RADIOTEST_PCM_EXT_LB_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_TX_RF_TRIM:
        return display_RADIOTEST_CFG_TX_RF_TRIM_pdu ( indent , RADIOTEST_CFG_TX_RF_TRIM_PDU ( pdu ) , policy );
    case RADIOTEST_CODEC_STEREO_LB:
        return display_RADIOTEST_CODEC_STEREO_LB_pdu ( indent , RADIOTEST_CODEC_STEREO_LB_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_UAP_LAP:
        return display_RADIOTEST_CFG_UAP_LAP_pdu ( indent , RADIOTEST_CFG_UAP_LAP_PDU ( pdu ) , policy );
    case RADIOTEST_SETTLE_RPT:
        return display_RADIOTEST_SETTLE_RPT_pdu ( indent , RADIOTEST_SETTLE_RPT_PDU ( pdu ) , policy );
    case RADIOTEST_DEEP_SLEEP:
        return display_RADIOTEST_DEEP_SLEEP_pdu ( indent , RADIOTEST_DEEP_SLEEP_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_EXT_LB_INTERFACE:
        return display_RADIOTEST_PCM_EXT_LB_INTERFACE_pdu ( indent , RADIOTEST_PCM_EXT_LB_INTERFACE_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_PKT:
        return display_RADIOTEST_CFG_PKT_pdu ( indent , RADIOTEST_CFG_PKT_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_TX_TRIM:
        return display_RADIOTEST_CFG_TX_TRIM_pdu ( indent , RADIOTEST_CFG_TX_TRIM_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_FREQ_MS:
        return display_RADIOTEST_CFG_FREQ_MS_pdu ( indent , RADIOTEST_CFG_FREQ_MS_PDU ( pdu ) , policy );
    case RADIOTEST_RXDATA1:
        return display_RADIOTEST_RXDATA1_pdu ( indent , RADIOTEST_RXDATA1_PDU ( pdu ) , policy );
    case RADIOTEST_RXDATA2:
        return display_RADIOTEST_RXDATA2_pdu ( indent , RADIOTEST_RXDATA2_PDU ( pdu ) , policy );
    case RADIOTEST_RADIO_STATUS_ARRAY:
        return display_RADIOTEST_RADIO_STATUS_ARRAY_pdu ( indent , RADIOTEST_RADIO_STATUS_ARRAY_PDU ( pdu ) , policy );
    case RADIOTEST_DEEP_SLEEP_SELECT:
        return display_RADIOTEST_DEEP_SLEEP_SELECT_pdu ( indent , RADIOTEST_DEEP_SLEEP_SELECT_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_IQ_TRIM:
        return display_RADIOTEST_CFG_IQ_TRIM_pdu ( indent , RADIOTEST_CFG_IQ_TRIM_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_PIO_CHANNEL_MASK:
        return display_RADIOTEST_CFG_PIO_CHANNEL_MASK_pdu ( indent , RADIOTEST_CFG_PIO_CHANNEL_MASK_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_ACC_ERRS:
        return display_RADIOTEST_CFG_ACC_ERRS_pdu ( indent , RADIOTEST_CFG_ACC_ERRS_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_TXPOWER:
        return display_RADIOTEST_CFG_TXPOWER_pdu ( indent , RADIOTEST_CFG_TXPOWER_PDU ( pdu ) , policy );
    case RADIOTEST_IF_IQ_MATCH:
        return display_RADIOTEST_IF_IQ_MATCH_pdu ( indent , RADIOTEST_IF_IQ_MATCH_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_FREQ:
        return display_RADIOTEST_CFG_FREQ_pdu ( indent , RADIOTEST_CFG_FREQ_PDU ( pdu ) , policy );
    case RADIOTEST_TXDATA1:
        return display_RADIOTEST_TXDATA1_pdu ( indent , RADIOTEST_TXDATA1_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_LO_LVL:
        return display_RADIOTEST_CFG_LO_LVL_pdu ( indent , RADIOTEST_CFG_LO_LVL_PDU ( pdu ) , policy );
    case RADIOTEST_TXDATA2:
        return display_RADIOTEST_TXDATA2_pdu ( indent , RADIOTEST_TXDATA2_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_TONE_INTERFACE:
        return display_RADIOTEST_PCM_TONE_INTERFACE_pdu ( indent , RADIOTEST_PCM_TONE_INTERFACE_PDU ( pdu ) , policy );
    case RADIOTEST_RF_IQ_MATCH:
        return display_RADIOTEST_RF_IQ_MATCH_pdu ( indent , RADIOTEST_RF_IQ_MATCH_PDU ( pdu ) , policy );
    case RADIOTEST_SETTLE:
        return display_RADIOTEST_SETTLE_pdu ( indent , RADIOTEST_SETTLE_PDU ( pdu ) , policy );
    case RADIOTEST_TXDATA3:
        return display_RADIOTEST_TXDATA3_pdu ( indent , RADIOTEST_TXDATA3_PDU ( pdu ) , policy );
    case RADIOTEST_TXDATA4:
        return display_RADIOTEST_TXDATA4_pdu ( indent , RADIOTEST_TXDATA4_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_TONE_STEREO:
        return display_RADIOTEST_PCM_TONE_STEREO_pdu ( indent , RADIOTEST_PCM_TONE_STEREO_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_PIO_ENABLE_MASK:
        return display_RADIOTEST_CFG_PIO_ENABLE_MASK_pdu ( indent , RADIOTEST_CFG_PIO_ENABLE_MASK_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_TIMING_IN:
        return display_RADIOTEST_PCM_TIMING_IN_pdu ( indent , RADIOTEST_PCM_TIMING_IN_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_TONE:
        return display_RADIOTEST_PCM_TONE_pdu ( indent , RADIOTEST_PCM_TONE_PDU ( pdu ) , policy );
    case RADIOTEST_RX_LOOP_BACK:
        return display_RADIOTEST_RX_LOOP_BACK_pdu ( indent , RADIOTEST_RX_LOOP_BACK_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_TIMING_IN_INTERFACE:
        return display_RADIOTEST_PCM_TIMING_IN_INTERFACE_pdu ( indent , RADIOTEST_PCM_TIMING_IN_INTERFACE_PDU ( pdu ) , policy );
    case RADIOTEST_PCM_LB_INTERFACE:
        return display_RADIOTEST_PCM_LB_INTERFACE_pdu ( indent , RADIOTEST_PCM_LB_INTERFACE_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_TX_COMP:
        return display_RADIOTEST_CFG_TX_COMP_pdu ( indent , RADIOTEST_CFG_TX_COMP_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_XTAL_FTRIM:
        return display_RADIOTEST_CFG_XTAL_FTRIM_pdu ( indent , RADIOTEST_CFG_XTAL_FTRIM_PDU ( pdu ) , policy );
    case RADIOTEST_RXSTART1:
        return display_RADIOTEST_RXSTART1_pdu ( indent , RADIOTEST_RXSTART1_PDU ( pdu ) , policy );
    case RADIOTEST_RXSTART2:
        return display_RADIOTEST_RXSTART2_pdu ( indent , RADIOTEST_RXSTART2_PDU ( pdu ) , policy );
    case RADIOTEST_RADIO_STATUS:
        return display_RADIOTEST_RADIO_STATUS_pdu ( indent , RADIOTEST_RADIO_STATUS_PDU ( pdu ) , policy );
    case RADIOTEST_BUILD_LUT:
        return display_RADIOTEST_BUILD_LUT_pdu ( indent , RADIOTEST_BUILD_LUT_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_HOPPING_SEQUENCE:
        return display_RADIOTEST_CFG_HOPPING_SEQUENCE_pdu ( indent , RADIOTEST_CFG_HOPPING_SEQUENCE_PDU ( pdu ) , policy );
    case RADIOTEST_BER_LOOP_BACK:
        return display_RADIOTEST_BER_LOOP_BACK_pdu ( indent , RADIOTEST_BER_LOOP_BACK_PDU ( pdu ) , policy );
    case RADIOTEST_BER1:
        return display_RADIOTEST_BER1_pdu ( indent , RADIOTEST_BER1_PDU ( pdu ) , policy );
    case RADIOTEST_BER2:
        return display_RADIOTEST_BER2_pdu ( indent , RADIOTEST_BER2_PDU ( pdu ) , policy );
    case RADIOTEST_READ_LUT:
        return display_RADIOTEST_READ_LUT_pdu ( indent , RADIOTEST_READ_LUT_PDU ( pdu ) , policy );
    case RADIOTEST_VCOTRIM:
        return display_RADIOTEST_VCOTRIM_pdu ( indent , RADIOTEST_VCOTRIM_PDU ( pdu ) , policy );
    case RADIOTEST_PAUSE:
        return display_RADIOTEST_PAUSE_pdu ( indent , RADIOTEST_PAUSE_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_BIT_ERR:
        return display_RADIOTEST_CFG_BIT_ERR_pdu ( indent , RADIOTEST_CFG_BIT_ERR_PDU ( pdu ) , policy );
    case RADIOTEST_CFG_TX_PA_ATTEN:
        return display_RADIOTEST_CFG_TX_PA_ATTEN_pdu ( indent , RADIOTEST_CFG_TX_PA_ATTEN_PDU ( pdu ) , policy );
    case RADIOTEST_LOOP_BACK:
        return display_RADIOTEST_LOOP_BACK_pdu ( indent , RADIOTEST_LOOP_BACK_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( RADIOTEST_PDU ( pdu ).get_radiotest() , "RADIOTEST" , pdu );
    }
}

a_string display_hq_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( HQ_PDU ( pdu ).get_varid() )
    {
    case HQVARID_STIBBONS_U02:
        return display_HQ_STIBBONS_U02_pdu ( indent , HQ_STIBBONS_U02_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U03:
        return display_HQ_STIBBONS_U03_pdu ( indent , HQ_STIBBONS_U03_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U04:
        return display_HQ_STIBBONS_U04_pdu ( indent , HQ_STIBBONS_U04_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U05:
        return display_HQ_STIBBONS_U05_pdu ( indent , HQ_STIBBONS_U05_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U06:
        return display_HQ_STIBBONS_U06_pdu ( indent , HQ_STIBBONS_U06_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U07:
        return display_HQ_STIBBONS_U07_pdu ( indent , HQ_STIBBONS_U07_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U08:
        return display_HQ_STIBBONS_U08_pdu ( indent , HQ_STIBBONS_U08_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U09:
        return display_HQ_STIBBONS_U09_pdu ( indent , HQ_STIBBONS_U09_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C01:
        return display_HQ_STIBBONS_C01_pdu ( indent , HQ_STIBBONS_C01_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C02:
        return display_HQ_STIBBONS_C02_pdu ( indent , HQ_STIBBONS_C02_PDU ( pdu ) , policy );
    case HQVARID_ESCO_REQ:
        return display_HQ_ESCO_REQ_pdu ( indent , HQ_ESCO_REQ_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C03:
        return display_HQ_STIBBONS_C03_pdu ( indent , HQ_STIBBONS_C03_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C04:
        return display_HQ_STIBBONS_C04_pdu ( indent , HQ_STIBBONS_C04_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C05:
        return display_HQ_STIBBONS_C05_pdu ( indent , HQ_STIBBONS_C05_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C06:
        return display_HQ_STIBBONS_C06_pdu ( indent , HQ_STIBBONS_C06_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C07:
        return display_HQ_STIBBONS_C07_pdu ( indent , HQ_STIBBONS_C07_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C08:
        return display_HQ_STIBBONS_C08_pdu ( indent , HQ_STIBBONS_C08_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C09:
        return display_HQ_STIBBONS_C09_pdu ( indent , HQ_STIBBONS_C09_PDU ( pdu ) , policy );
    case HQVARID_FM_RDS_DATA:
        return display_HQ_FM_RDS_DATA_pdu ( indent , HQ_FM_RDS_DATA_PDU ( pdu ) , policy );
    case HQVARID_SNIFF_REQ:
        return display_HQ_SNIFF_REQ_pdu ( indent , HQ_SNIFF_REQ_PDU ( pdu ) , policy );
    case HQVARID_RSSI:
        return display_HQ_RSSI_pdu ( indent , HQ_RSSI_PDU ( pdu ) , policy );
    case HQVARID_BOOTED:
        return display_HQ_BOOTED_pdu ( indent , HQ_BOOTED_PDU ( pdu ) , policy );
    case HQVARID_EGPS_TIME_STAMP:
        return display_HQ_EGPS_TIME_STAMP_pdu ( indent , HQ_EGPS_TIME_STAMP_PDU ( pdu ) , policy );
    case HQVARID_NO_VARIABLE:
        return display_HQ_NO_VARIABLE_pdu ( indent , HQ_NO_VARIABLE_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U10:
        return display_HQ_STIBBONS_U10_pdu ( indent , HQ_STIBBONS_U10_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U11:
        return display_HQ_STIBBONS_U11_pdu ( indent , HQ_STIBBONS_U11_PDU ( pdu ) , policy );
    case HQVARID_BIT_ERR:
        return display_HQ_BIT_ERR_pdu ( indent , HQ_BIT_ERR_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U12:
        return display_HQ_STIBBONS_U12_pdu ( indent , HQ_STIBBONS_U12_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U13:
        return display_HQ_STIBBONS_U13_pdu ( indent , HQ_STIBBONS_U13_PDU ( pdu ) , policy );
    case HQVARID_GPS_STATUS:
        return display_HQ_GPS_STATUS_pdu ( indent , HQ_GPS_STATUS_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U14:
        return display_HQ_STIBBONS_U14_pdu ( indent , HQ_STIBBONS_U14_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U15:
        return display_HQ_STIBBONS_U15_pdu ( indent , HQ_STIBBONS_U15_PDU ( pdu ) , policy );
    case HQVARID_DELAYED_PANIC:
        return display_HQ_DELAYED_PANIC_pdu ( indent , HQ_DELAYED_PANIC_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_U16:
        return display_HQ_STIBBONS_U16_pdu ( indent , HQ_STIBBONS_U16_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C10:
        return display_HQ_STIBBONS_C10_pdu ( indent , HQ_STIBBONS_C10_PDU ( pdu ) , policy );
    case HQVARID_PROTOCOL_ERROR:
        return display_HQ_PROTOCOL_ERROR_pdu ( indent , HQ_PROTOCOL_ERROR_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C11:
        return display_HQ_STIBBONS_C11_pdu ( indent , HQ_STIBBONS_C11_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C12:
        return display_HQ_STIBBONS_C12_pdu ( indent , HQ_STIBBONS_C12_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C13:
        return display_HQ_STIBBONS_C13_pdu ( indent , HQ_STIBBONS_C13_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C14:
        return display_HQ_STIBBONS_C14_pdu ( indent , HQ_STIBBONS_C14_PDU ( pdu ) , policy );
    case HQVARID_SCO_STREAM_HANDLES:
        return display_HQ_SCO_STREAM_HANDLES_pdu ( indent , HQ_SCO_STREAM_HANDLES_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C15:
        return display_HQ_STIBBONS_C15_pdu ( indent , HQ_STIBBONS_C15_PDU ( pdu ) , policy );
    case HQVARID_STIBBONS_C16:
        return display_HQ_STIBBONS_C16_pdu ( indent , HQ_STIBBONS_C16_PDU ( pdu ) , policy );
    case HQVARID_ACCEPT_TDI:
        return display_HQ_ACCEPT_TDI_pdu ( indent , HQ_ACCEPT_TDI_PDU ( pdu ) , policy );
    case HQVARID_FILTER_RESP:
        return display_HQ_FILTER_RESP_pdu ( indent , HQ_FILTER_RESP_PDU ( pdu ) , policy );
    case HQVARID_ADC_RESULT:
        return display_HQ_ADC_RESULT_pdu ( indent , HQ_ADC_RESULT_PDU ( pdu ) , policy );
    case HQVARID_BLE_RADIO_TEST:
        return display_HQ_BLE_RADIO_TEST_pdu ( indent , HQ_BLE_RADIO_TEST_PDU ( pdu ) , policy );
    case HQVARID_RXPKTSTATS:
        return display_HQ_RXPKTSTATS_pdu ( indent , HQ_RXPKTSTATS_PDU ( pdu ) , policy );
    case HQVARID_MESSAGE_FROM_OPERATOR:
        return display_HQ_MESSAGE_FROM_OPERATOR_pdu ( indent , HQ_MESSAGE_FROM_OPERATOR_PDU ( pdu ) , policy );
    case HQVARID_BER_TRIGGER:
        return display_HQ_BER_TRIGGER_pdu ( indent , HQ_BER_TRIGGER_PDU ( pdu ) , policy );
    case HQVARID_DRAIN_CALIBRATE:
        return display_HQ_DRAIN_CALIBRATE_pdu ( indent , HQ_DRAIN_CALIBRATE_PDU ( pdu ) , policy );
    case HQVARID_RADIO_STATUS_ARRAY:
        return display_HQ_RADIO_STATUS_ARRAY_pdu ( indent , HQ_RADIO_STATUS_ARRAY_PDU ( pdu ) , policy );
    case HQVARID_SYNTH_SETTLE:
        return display_HQ_SYNTH_SETTLE_pdu ( indent , HQ_SYNTH_SETTLE_PDU ( pdu ) , policy );
    case HQVARID_DSPMANAGER_DEBUG_INFO_B:
        return display_HQ_DSPMANAGER_DEBUG_INFO_B_pdu ( indent , HQ_DSPMANAGER_DEBUG_INFO_B_PDU ( pdu ) , policy );
    case HQVARID_FM_EVENT:
        return display_HQ_FM_EVENT_pdu ( indent , HQ_FM_EVENT_PDU ( pdu ) , policy );
    case HQVARID_FMTX_EVENT:
        return display_HQ_FMTX_EVENT_pdu ( indent , HQ_FMTX_EVENT_PDU ( pdu ) , policy );
    case HQVARID_FAULT:
        return display_HQ_FAULT_pdu ( indent , HQ_FAULT_PDU ( pdu ) , policy );
    case HQVARID_LUT_ENTRY:
        return display_HQ_LUT_ENTRY_pdu ( indent , HQ_LUT_ENTRY_PDU ( pdu ) , policy );
    case HQVARID_COEX_UART_MESSAGE:
        return display_HQ_COEX_UART_MESSAGE_pdu ( indent , HQ_COEX_UART_MESSAGE_PDU ( pdu ) , policy );
    case HQVARID_IQ_MATCH:
        return display_HQ_IQ_MATCH_pdu ( indent , HQ_IQ_MATCH_PDU ( pdu ) , policy );
    case HQVARID_RADIO_STATUS:
        return display_HQ_RADIO_STATUS_pdu ( indent , HQ_RADIO_STATUS_PDU ( pdu ) , policy );
    case HQVARID_CAPABILITY_DOWNLOAD_COMPLETE:
        return display_HQ_CAPABILITY_DOWNLOAD_COMPLETE_pdu ( indent , HQ_CAPABILITY_DOWNLOAD_COMPLETE_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( HQ_PDU ( pdu ).get_varid() , "HQ" , pdu );
    }
}

a_string display_dm_pdu ( int indent , const PDU& pdu , PDU_displayer * policy )
{
    switch ( DM_PDU ( pdu ).get_type() )
    {
    case DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ:
        return display_DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ_pdu ( indent , DM_HCI_WRITE_INQUIRY_SCAN_TYPE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_EVENT_MASK_CFM:
        return display_DM_HCI_ULP_SET_EVENT_MASK_CFM_pdu ( indent , DM_HCI_ULP_SET_EVENT_MASK_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_STORED_LINK_KEY_REQ:
        return display_DM_HCI_WRITE_STORED_LINK_KEY_REQ_pdu ( indent , DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_SWITCH_ROLE_REQ:
        return display_DM_HCI_SWITCH_ROLE_REQ_pdu ( indent , DM_HCI_SWITCH_ROLE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ:
        return display_DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ_pdu ( indent , DM_HCI_READ_AUTO_FLUSH_TIMEOUT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_CLASS_OF_DEVICE_REQ:
        return display_DM_HCI_WRITE_CLASS_OF_DEVICE_REQ_pdu ( indent , DM_HCI_WRITE_CLASS_OF_DEVICE_REQ_T_PDU ( pdu ) , policy );
    case DM_SYNC_RENEGOTIATE_IND:
        return display_DM_SYNC_RENEGOTIATE_IND_pdu ( indent , DM_SYNC_RENEGOTIATE_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LOCAL_VER_INFO_CFM:
        return display_DM_HCI_READ_LOCAL_VER_INFO_CFM_pdu ( indent , DM_HCI_READ_LOCAL_VER_INFO_CFM_T_PDU ( pdu ) , policy );
    case DM_AMPM_REGISTER_CFM:
        return display_DM_AMPM_REGISTER_CFM_pdu ( indent , DM_AMPM_REGISTER_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM:
        return display_DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM_pdu ( indent , DM_HCI_WRITE_PAGE_SCAN_TYPE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_AFH_CHANNEL_MAP_REQ:
        return display_DM_HCI_READ_AFH_CHANNEL_MAP_REQ_pdu ( indent , DM_HCI_READ_AFH_CHANNEL_MAP_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_READ_LOCAL_OOB_DATA_REQ:
        return display_DM_SM_READ_LOCAL_OOB_DATA_REQ_pdu ( indent , DM_SM_READ_LOCAL_OOB_DATA_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM:
        return display_DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM_pdu ( indent , DM_HCI_WRITE_INQUIRY_SCAN_TYPE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ:
        return display_DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_pdu ( indent , DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_STORED_LINK_KEY_CFM:
        return display_DM_HCI_WRITE_STORED_LINK_KEY_CFM_pdu ( indent , DM_HCI_WRITE_STORED_LINK_KEY_CFM_T_PDU ( pdu ) , policy );
    case DM_ACL_CLOSE_REQ:
        return display_DM_ACL_CLOSE_REQ_pdu ( indent , DM_ACL_CLOSE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_SWITCH_ROLE_CFM:
        return display_DM_HCI_SWITCH_ROLE_CFM_pdu ( indent , DM_HCI_SWITCH_ROLE_CFM_T_PDU ( pdu ) , policy );
    case DM_WRITE_CACHED_CLOCK_OFFSET_REQ:
        return display_DM_WRITE_CACHED_CLOCK_OFFSET_REQ_pdu ( indent , DM_WRITE_CACHED_CLOCK_OFFSET_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_SET_EVENT_FILTER_REQ:
        return display_DM_HCI_SET_EVENT_FILTER_REQ_pdu ( indent , DM_HCI_SET_EVENT_FILTER_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM:
        return display_DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM_pdu ( indent , DM_HCI_READ_AUTO_FLUSH_TIMEOUT_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_USER_PASSKEY_REQUEST_RSP:
        return display_DM_SM_USER_PASSKEY_REQUEST_RSP_pdu ( indent , DM_SM_USER_PASSKEY_REQUEST_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ:
        return display_DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ_pdu ( indent , DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_CLASS_OF_DEVICE_CFM:
        return display_DM_HCI_WRITE_CLASS_OF_DEVICE_CFM_pdu ( indent , DM_HCI_WRITE_CLASS_OF_DEVICE_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_INIT_REQ:
        return display_DM_SM_INIT_REQ_pdu ( indent , DM_SM_INIT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ:
        return display_DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ_pdu ( indent , DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ:
        return display_DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ_pdu ( indent , DM_HCI_READ_LINK_SUPERV_TIMEOUT_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_BONDING_CANCEL_REQ:
        return display_DM_SM_BONDING_CANCEL_REQ_pdu ( indent , DM_SM_BONDING_CANCEL_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_VOICE_SETTING_REQ:
        return display_DM_HCI_WRITE_VOICE_SETTING_REQ_pdu ( indent , DM_HCI_WRITE_VOICE_SETTING_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ:
        return display_DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ_pdu ( indent , DM_HCI_WRITE_PAGESCAN_ACTIVITY_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_USER_PASSKEY_REQUEST_IND:
        return display_DM_SM_USER_PASSKEY_REQUEST_IND_pdu ( indent , DM_SM_USER_PASSKEY_REQUEST_IND_T_PDU ( pdu ) , policy );
    case DM_SM_READ_LOCAL_OOB_DATA_CFM:
        return display_DM_SM_READ_LOCAL_OOB_DATA_CFM_pdu ( indent , DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_AFH_CHANNEL_MAP_CFM:
        return display_DM_HCI_READ_AFH_CHANNEL_MAP_CFM_pdu ( indent , DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_ACCESS_IND:
        return display_DM_SM_ACCESS_IND_pdu ( indent , DM_SM_ACCESS_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND:
        return display_DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_pdu ( indent , DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_QOS_SETUP_REQ:
        return display_DM_HCI_QOS_SETUP_REQ_pdu ( indent , DM_HCI_QOS_SETUP_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM:
        return display_DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM_pdu ( indent , DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_CFM_T_PDU ( pdu ) , policy );
    case DM_WRITE_CACHED_CLOCK_OFFSET_CFM:
        return display_DM_WRITE_CACHED_CLOCK_OFFSET_CFM_pdu ( indent , DM_WRITE_CACHED_CLOCK_OFFSET_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_SET_EVENT_FILTER_CFM:
        return display_DM_HCI_SET_EVENT_FILTER_CFM_pdu ( indent , DM_HCI_SET_EVENT_FILTER_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM:
        return display_DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM_pdu ( indent , DM_HCI_WRITE_LINK_SUPERV_TIMEOUT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ:
        return display_DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ_pdu ( indent , DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_INIT_CFM:
        return display_DM_SM_INIT_CFM_pdu ( indent , DM_SM_INIT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ENABLE_DUT_MODE_REQ:
        return display_DM_HCI_ENABLE_DUT_MODE_REQ_pdu ( indent , DM_HCI_ENABLE_DUT_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM:
        return display_DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM_pdu ( indent , DM_HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM:
        return display_DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM_pdu ( indent , DM_HCI_READ_LINK_SUPERV_TIMEOUT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ:
        return display_DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ_pdu ( indent , DM_HCI_READ_AFH_CHANNEL_CLASS_M_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_TX_POWER_LEVEL_REQ:
        return display_DM_HCI_READ_TX_POWER_LEVEL_REQ_pdu ( indent , DM_HCI_READ_TX_POWER_LEVEL_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_LINK_KEY_IND:
        return display_DM_SM_LINK_KEY_IND_pdu ( indent , DM_SM_LINK_KEY_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_GET_LINK_QUALITY_REQ:
        return display_DM_HCI_GET_LINK_QUALITY_REQ_pdu ( indent , DM_HCI_GET_LINK_QUALITY_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ:
        return display_DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ_pdu ( indent , DM_SM_CONFIGURE_LOCAL_ADDRESS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_VOICE_SETTING_CFM:
        return display_DM_HCI_WRITE_VOICE_SETTING_CFM_pdu ( indent , DM_HCI_WRITE_VOICE_SETTING_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM:
        return display_DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM_pdu ( indent , DM_HCI_WRITE_PAGESCAN_ACTIVITY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_INQUIRY_REQ:
        return display_DM_HCI_INQUIRY_REQ_pdu ( indent , DM_HCI_INQUIRY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_TRANSMITTER_TEST_REQ:
        return display_DM_HCI_ULP_TRANSMITTER_TEST_REQ_pdu ( indent , DM_HCI_ULP_TRANSMITTER_TEST_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_QOS_SETUP_CFM:
        return display_DM_HCI_QOS_SETUP_CFM_pdu ( indent , DM_HCI_QOS_SETUP_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM:
        return display_DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM_pdu ( indent , DM_HCI_WRITE_AFH_CHANNEL_CLASS_M_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ENABLE_DUT_MODE_CFM:
        return display_DM_HCI_ENABLE_DUT_MODE_CFM_pdu ( indent , DM_HCI_ENABLE_DUT_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_LP_WRITE_ROLESWITCH_POLICY_REQ:
        return display_DM_LP_WRITE_ROLESWITCH_POLICY_REQ_pdu ( indent , DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_AUTHORISE_RSP:
        return display_DM_SM_AUTHORISE_RSP_pdu ( indent , DM_SM_AUTHORISE_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_TEST_END_REQ:
        return display_DM_HCI_ULP_TEST_END_REQ_pdu ( indent , DM_HCI_ULP_TEST_END_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM:
        return display_DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM_pdu ( indent , DM_HCI_READ_AFH_CHANNEL_CLASS_M_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_TX_POWER_LEVEL_CFM:
        return display_DM_HCI_READ_TX_POWER_LEVEL_CFM_pdu ( indent , DM_HCI_READ_TX_POWER_LEVEL_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_CHANNEL_MAP_REQ:
        return display_DM_HCI_ULP_READ_CHANNEL_MAP_REQ_pdu ( indent , DM_HCI_ULP_READ_CHANNEL_MAP_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ:
        return display_DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ_pdu ( indent , DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_GET_LINK_QUALITY_CFM:
        return display_DM_HCI_GET_LINK_QUALITY_CFM_pdu ( indent , DM_HCI_GET_LINK_QUALITY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_FLOW_SPEC_REQ:
        return display_DM_HCI_FLOW_SPEC_REQ_pdu ( indent , DM_HCI_FLOW_SPEC_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_BONDING_REQ:
        return display_DM_SM_BONDING_REQ_pdu ( indent , DM_SM_BONDING_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM:
        return display_DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM_pdu ( indent , DM_SM_CONFIGURE_LOCAL_ADDRESS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_INQUIRY_CFM:
        return display_DM_HCI_INQUIRY_CFM_pdu ( indent , DM_HCI_INQUIRY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_TRANSMITTER_TEST_CFM:
        return display_DM_HCI_ULP_TRANSMITTER_TEST_CFM_pdu ( indent , DM_HCI_ULP_TRANSMITTER_TEST_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_LINK_KEY_REQUEST_RSP:
        return display_DM_SM_LINK_KEY_REQUEST_RSP_pdu ( indent , DM_SM_LINK_KEY_REQUEST_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_ADVERTISING_REPORT_IND:
        return display_DM_HCI_ULP_ADVERTISING_REPORT_IND_pdu ( indent , DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU ( pdu ) , policy );
    case DM_AMPM_CONNECT_RSP:
        return display_DM_AMPM_CONNECT_RSP_pdu ( indent , DM_AMPM_CONNECT_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ:
        return display_DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ_pdu ( indent , DM_HCI_ULP_READ_REMOTE_USED_FEATURES_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGESCAN_MODE_REQ:
        return display_DM_HCI_WRITE_PAGESCAN_MODE_REQ_pdu ( indent , DM_HCI_WRITE_PAGESCAN_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_AUTHORISE_IND:
        return display_DM_SM_AUTHORISE_IND_pdu ( indent , DM_SM_AUTHORISE_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_NUM_SUPPORTED_IAC_REQ:
        return display_DM_HCI_READ_NUM_SUPPORTED_IAC_REQ_pdu ( indent , DM_HCI_READ_NUM_SUPPORTED_IAC_REQ_T_PDU ( pdu ) , policy );
    case DM_LP_WRITE_ROLESWITCH_POLICY_CFM:
        return display_DM_LP_WRITE_ROLESWITCH_POLICY_CFM_pdu ( indent , DM_LP_WRITE_ROLESWITCH_POLICY_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_LINK_KEY_REQUEST_IND:
        return display_DM_SM_LINK_KEY_REQUEST_IND_pdu ( indent , DM_SM_LINK_KEY_REQUEST_IND_T_PDU ( pdu ) , policy );
    case DM_AMPM_CONNECT_IND:
        return display_DM_AMPM_CONNECT_IND_pdu ( indent , DM_AMPM_CONNECT_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_TEST_END_CFM:
        return display_DM_HCI_ULP_TEST_END_CFM_pdu ( indent , DM_HCI_ULP_TEST_END_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_CHANNEL_MAP_CFM:
        return display_DM_HCI_ULP_READ_CHANNEL_MAP_CFM_pdu ( indent , DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM:
        return display_DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM_pdu ( indent , DM_HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_EXIT_SNIFF_MODE_REQ:
        return display_DM_HCI_EXIT_SNIFF_MODE_REQ_pdu ( indent , DM_HCI_EXIT_SNIFF_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_BONDING_CFM:
        return display_DM_SM_BONDING_CFM_pdu ( indent , DM_SM_BONDING_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_FLOW_SPEC_CFM:
        return display_DM_HCI_FLOW_SPEC_CFM_pdu ( indent , DM_HCI_FLOW_SPEC_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ:
        return display_DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ_pdu ( indent , DM_SM_SEND_KEYPRESS_NOTIFICATION_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ:
        return display_DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ_pdu ( indent , DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ:
        return display_DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ_pdu ( indent , DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ:
        return display_DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ_pdu ( indent , DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM:
        return display_DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_pdu ( indent , DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGESCAN_MODE_CFM:
        return display_DM_HCI_WRITE_PAGESCAN_MODE_CFM_pdu ( indent , DM_HCI_WRITE_PAGESCAN_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP:
        return display_DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP_pdu ( indent , DM_SM_USER_CONFIRMATION_REQUEST_NEG_RSP_T_PDU ( pdu ) , policy );
    case DM_AMPM_READ_DATA_BLOCK_SIZE_RSP:
        return display_DM_AMPM_READ_DATA_BLOCK_SIZE_RSP_pdu ( indent , DM_AMPM_READ_DATA_BLOCK_SIZE_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ:
        return display_DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ_pdu ( indent , DM_HCI_WRITE_HOLD_MODE_ACTIVITY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND:
        return display_DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_pdu ( indent , DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU ( pdu ) , policy );
    case DM_SYNC_CONNECT_COMPLETE_IND:
        return display_DM_SYNC_CONNECT_COMPLETE_IND_pdu ( indent , DM_SYNC_CONNECT_COMPLETE_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_NUM_SUPPORTED_IAC_CFM:
        return display_DM_HCI_READ_NUM_SUPPORTED_IAC_CFM_pdu ( indent , DM_HCI_READ_NUM_SUPPORTED_IAC_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ:
        return display_DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ_pdu ( indent , DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_REQ_T_PDU ( pdu ) , policy );
    case DM_AM_REGISTER_WRONG_API_REQ:
        return display_DM_AM_REGISTER_WRONG_API_REQ_pdu ( indent , DM_AM_REGISTER_WRONG_API_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_COUNTRY_CODE_REQ:
        return display_DM_HCI_READ_COUNTRY_CODE_REQ_pdu ( indent , DM_HCI_READ_COUNTRY_CODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_CURRENT_IAC_LAP_REQ:
        return display_DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_pdu ( indent , DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_BD_ADDR_REQ:
        return display_DM_HCI_READ_BD_ADDR_REQ_pdu ( indent , DM_HCI_READ_BD_ADDR_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM:
        return display_DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM_pdu ( indent , DM_SM_GENERATE_NONRESOLVABLE_PRIVATE_ADDRESS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_SUPPORTED_STATES_REQ:
        return display_DM_HCI_ULP_READ_SUPPORTED_STATES_REQ_pdu ( indent , DM_HCI_ULP_READ_SUPPORTED_STATES_REQ_T_PDU ( pdu ) , policy );
    case DM_AMPM_READ_DATA_BLOCK_SIZE_IND:
        return display_DM_AMPM_READ_DATA_BLOCK_SIZE_IND_pdu ( indent , DM_AMPM_READ_DATA_BLOCK_SIZE_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM:
        return display_DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM_pdu ( indent , DM_HCI_EXIT_PERIODIC_INQUIRY_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM:
        return display_DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM_pdu ( indent , DM_HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_CFM_T_PDU ( pdu ) , policy );
    case DM_SYNC_CONNECT_RSP:
        return display_DM_SYNC_CONNECT_RSP_pdu ( indent , DM_SYNC_CONNECT_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ:
        return display_DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ_pdu ( indent , DM_HCI_ULP_SET_RANDOM_ADDRESS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM:
        return display_DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM_pdu ( indent , DM_HCI_WRITE_HOLD_MODE_ACTIVITY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ:
        return display_DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ_pdu ( indent , DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_ADD_DEVICE_REQ:
        return display_DM_SM_ADD_DEVICE_REQ_pdu ( indent , DM_SM_ADD_DEVICE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PIN_TYPE_REQ:
        return display_DM_HCI_WRITE_PIN_TYPE_REQ_pdu ( indent , DM_HCI_WRITE_PIN_TYPE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM:
        return display_DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM_pdu ( indent , DM_HCI_WRITE_INQUIRYSCAN_ACTIVITY_CFM_T_PDU ( pdu ) , policy );
    case DM_SYNC_CONNECT_IND:
        return display_DM_SYNC_CONNECT_IND_pdu ( indent , DM_SYNC_CONNECT_IND_T_PDU ( pdu ) , policy );
    case DM_AM_REGISTER_WRONG_API_CFM:
        return display_DM_AM_REGISTER_WRONG_API_CFM_pdu ( indent , DM_AM_REGISTER_WRONG_API_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_COUNTRY_CODE_CFM:
        return display_DM_HCI_READ_COUNTRY_CODE_CFM_pdu ( indent , DM_HCI_READ_COUNTRY_CODE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_REMOTE_NAME_REQUEST_REQ:
        return display_DM_HCI_REMOTE_NAME_REQUEST_REQ_pdu ( indent , DM_HCI_REMOTE_NAME_REQUEST_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_CURRENT_IAC_LAP_CFM:
        return display_DM_HCI_WRITE_CURRENT_IAC_LAP_CFM_pdu ( indent , DM_HCI_WRITE_CURRENT_IAC_LAP_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_REFRESH_ENCRYPTION_KEY_IND:
        return display_DM_HCI_REFRESH_ENCRYPTION_KEY_IND_pdu ( indent , DM_HCI_REFRESH_ENCRYPTION_KEY_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_BD_ADDR_CFM:
        return display_DM_HCI_READ_BD_ADDR_CFM_pdu ( indent , DM_HCI_READ_BD_ADDR_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_SUPPORTED_STATES_CFM:
        return display_DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_pdu ( indent , DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU ( pdu ) , policy );
    case DM_AMPM_CONN_CHANNEL_RSP:
        return display_DM_AMPM_CONN_CHANNEL_RSP_pdu ( indent , DM_AMPM_CONN_CHANNEL_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_CHANGE_CONN_LINK_KEY_REQ:
        return display_DM_HCI_CHANGE_CONN_LINK_KEY_REQ_pdu ( indent , DM_HCI_CHANGE_CONN_LINK_KEY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM:
        return display_DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM_pdu ( indent , DM_HCI_ULP_SET_RANDOM_ADDRESS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGE_TIMEOUT_REQ:
        return display_DM_HCI_READ_PAGE_TIMEOUT_REQ_pdu ( indent , DM_HCI_READ_PAGE_TIMEOUT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM:
        return display_DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM_pdu ( indent , DM_HCI_WRITE_PAGESCAN_PERIOD_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_RSSI_REQ:
        return display_DM_HCI_READ_RSSI_REQ_pdu ( indent , DM_HCI_READ_RSSI_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_ADD_DEVICE_CFM:
        return display_DM_SM_ADD_DEVICE_CFM_pdu ( indent , DM_SM_ADD_DEVICE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PIN_TYPE_CFM:
        return display_DM_HCI_WRITE_PIN_TYPE_CFM_pdu ( indent , DM_HCI_WRITE_PIN_TYPE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_INQUIRY_RESULT_IND:
        return display_DM_HCI_INQUIRY_RESULT_IND_pdu ( indent , DM_HCI_INQUIRY_RESULT_IND_T_PDU ( pdu ) , policy );
    case DM_LP_WRITE_POWERSTATES_REQ:
        return display_DM_LP_WRITE_POWERSTATES_REQ_pdu ( indent , DM_LP_WRITE_POWERSTATES_REQ_T_PDU ( pdu ) , policy );
    case DM_AMPM_CONN_CHANNEL_IND:
        return display_DM_AMPM_CONN_CHANNEL_IND_pdu ( indent , DM_AMPM_CONN_CHANNEL_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ:
        return display_DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ_pdu ( indent , DM_HCI_ULP_SET_SCAN_PARAMETERS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ:
        return display_DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ_pdu ( indent , DM_HCI_READ_HOLD_MODE_ACTIVITY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_CHANGE_CONN_LINK_KEY_CFM:
        return display_DM_HCI_CHANGE_CONN_LINK_KEY_CFM_pdu ( indent , DM_HCI_CHANGE_CONN_LINK_KEY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_ENCRYPT_REQ:
        return display_DM_HCI_ULP_ENCRYPT_REQ_pdu ( indent , DM_HCI_ULP_ENCRYPT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGE_TIMEOUT_CFM:
        return display_DM_HCI_READ_PAGE_TIMEOUT_CFM_pdu ( indent , DM_HCI_READ_PAGE_TIMEOUT_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_SECURITY_IND:
        return display_DM_SM_SECURITY_IND_pdu ( indent , DM_SM_SECURITY_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ:
        return display_DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ_pdu ( indent , DM_HCI_ULP_READ_WHITE_LIST_SIZE_REQ_T_PDU ( pdu ) , policy );
    case DM_AMPM_REMOTE_FEATURES_IND:
        return display_DM_AMPM_REMOTE_FEATURES_IND_pdu ( indent , DM_AMPM_REMOTE_FEATURES_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CLOCK_OFFSET_REQ:
        return display_DM_HCI_READ_CLOCK_OFFSET_REQ_pdu ( indent , DM_HCI_READ_CLOCK_OFFSET_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_RSSI_CFM:
        return display_DM_HCI_READ_RSSI_CFM_pdu ( indent , DM_HCI_READ_RSSI_CFM_T_PDU ( pdu ) , policy );
    case DM_LP_WRITE_POWERSTATES_CFM:
        return display_DM_LP_WRITE_POWERSTATES_CFM_pdu ( indent , DM_LP_WRITE_POWERSTATES_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_CREATE_NEW_UNIT_KEY_REQ:
        return display_DM_HCI_CREATE_NEW_UNIT_KEY_REQ_pdu ( indent , DM_HCI_CREATE_NEW_UNIT_KEY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_HOLD_MODE_REQ:
        return display_DM_HCI_HOLD_MODE_REQ_pdu ( indent , DM_HCI_HOLD_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGE_TIMEOUT_REQ:
        return display_DM_HCI_WRITE_PAGE_TIMEOUT_REQ_pdu ( indent , DM_HCI_WRITE_PAGE_TIMEOUT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_CLEAR_WHITE_LIST_REQ:
        return display_DM_HCI_ULP_CLEAR_WHITE_LIST_REQ_pdu ( indent , DM_HCI_ULP_CLEAR_WHITE_LIST_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LOCAL_NAME_REQ:
        return display_DM_HCI_READ_LOCAL_NAME_REQ_pdu ( indent , DM_HCI_READ_LOCAL_NAME_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM:
        return display_DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM_pdu ( indent , DM_HCI_ULP_SET_SCAN_PARAMETERS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM:
        return display_DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM_pdu ( indent , DM_HCI_READ_HOLD_MODE_ACTIVITY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_CONN_PACKET_TYPE_CHANGED_IND:
        return display_DM_HCI_CONN_PACKET_TYPE_CHANGED_IND_pdu ( indent , DM_HCI_CONN_PACKET_TYPE_CHANGED_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_ENCRYPT_CFM:
        return display_DM_HCI_ULP_ENCRYPT_CFM_pdu ( indent , DM_HCI_ULP_ENCRYPT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_NUM_BCAST_RETXS_REQ:
        return display_DM_HCI_READ_NUM_BCAST_RETXS_REQ_pdu ( indent , DM_HCI_READ_NUM_BCAST_RETXS_REQ_T_PDU ( pdu ) , policy );
    case DM_ACL_OPENED_IND:
        return display_DM_ACL_OPENED_IND_pdu ( indent , DM_ACL_OPENED_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM:
        return display_DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM_pdu ( indent , DM_HCI_ULP_READ_WHITE_LIST_SIZE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CLOCK_OFFSET_CFM:
        return display_DM_HCI_READ_CLOCK_OFFSET_CFM_pdu ( indent , DM_HCI_READ_CLOCK_OFFSET_CFM_T_PDU ( pdu ) , policy );
    case DM_AMPM_SIMPLE_PAIRING_ENABLED_IND:
        return display_DM_AMPM_SIMPLE_PAIRING_ENABLED_IND_pdu ( indent , DM_AMPM_SIMPLE_PAIRING_ENABLED_IND_T_PDU ( pdu ) , policy );
    case DM_SYNC_RENEGOTIATE_REQ:
        return display_DM_SYNC_RENEGOTIATE_REQ_pdu ( indent , DM_SYNC_RENEGOTIATE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_CHANGE_CONN_PKT_TYPE_REQ:
        return display_DM_HCI_CHANGE_CONN_PKT_TYPE_REQ_pdu ( indent , DM_HCI_CHANGE_CONN_PKT_TYPE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_CREATE_NEW_UNIT_KEY_CFM:
        return display_DM_HCI_CREATE_NEW_UNIT_KEY_CFM_pdu ( indent , DM_HCI_CREATE_NEW_UNIT_KEY_CFM_T_PDU ( pdu ) , policy );
    case DM_ACL_CLOSED_IND:
        return display_DM_ACL_CLOSED_IND_pdu ( indent , DM_ACL_CLOSED_IND_T_PDU ( pdu ) , policy );
    case DM_WRITE_CACHED_PAGE_MODE_REQ:
        return display_DM_WRITE_CACHED_PAGE_MODE_REQ_pdu ( indent , DM_WRITE_CACHED_PAGE_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_KEYPRESS_NOTIFICATION_IND:
        return display_DM_SM_KEYPRESS_NOTIFICATION_IND_pdu ( indent , DM_SM_KEYPRESS_NOTIFICATION_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGE_TIMEOUT_CFM:
        return display_DM_HCI_WRITE_PAGE_TIMEOUT_CFM_pdu ( indent , DM_HCI_WRITE_PAGE_TIMEOUT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ:
        return display_DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_pdu ( indent , DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_CLEAR_WHITE_LIST_CFM:
        return display_DM_HCI_ULP_CLEAR_WHITE_LIST_CFM_pdu ( indent , DM_HCI_ULP_CLEAR_WHITE_LIST_CFM_T_PDU ( pdu ) , policy );
    case DM_SET_BLE_CONNECTION_PARAMETERS_REQ:
        return display_DM_SET_BLE_CONNECTION_PARAMETERS_REQ_pdu ( indent , DM_SET_BLE_CONNECTION_PARAMETERS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LOCAL_NAME_CFM:
        return display_DM_HCI_READ_LOCAL_NAME_CFM_pdu ( indent , DM_HCI_READ_LOCAL_NAME_CFM_T_PDU ( pdu ) , policy );
    case DM_SYNC_DISCONNECT_IND:
        return display_DM_SYNC_DISCONNECT_IND_pdu ( indent , DM_SYNC_DISCONNECT_IND_T_PDU ( pdu ) , policy );
    case DM_SM_REGISTER_REQ:
        return display_DM_SM_REGISTER_REQ_pdu ( indent , DM_SM_REGISTER_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_SCAN_ENABLE_REQ:
        return display_DM_HCI_READ_SCAN_ENABLE_REQ_pdu ( indent , DM_HCI_READ_SCAN_ENABLE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_SNIFF_SUB_RATING_IND:
        return display_DM_HCI_SNIFF_SUB_RATING_IND_pdu ( indent , DM_HCI_SNIFF_SUB_RATING_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_NUM_BCAST_RETXS_CFM:
        return display_DM_HCI_READ_NUM_BCAST_RETXS_CFM_pdu ( indent , DM_HCI_READ_NUM_BCAST_RETXS_CFM_T_PDU ( pdu ) , policy );
    case DM_SYNC_RENEGOTIATE_CFM:
        return display_DM_SYNC_RENEGOTIATE_CFM_pdu ( indent , DM_SYNC_RENEGOTIATE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ENHANCED_FLUSH_REQ:
        return display_DM_HCI_ENHANCED_FLUSH_REQ_pdu ( indent , DM_HCI_ENHANCED_FLUSH_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND:
        return display_DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND_pdu ( indent , DM_HCI_ULP_CONNECTION_UPDATE_COMPLETE_IND_T_PDU ( pdu ) , policy );
    case DM_WRITE_CACHED_PAGE_MODE_CFM:
        return display_DM_WRITE_CACHED_PAGE_MODE_CFM_pdu ( indent , DM_WRITE_CACHED_PAGE_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM:
        return display_DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM_pdu ( indent , DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_ACCESS_REQ:
        return display_DM_SM_ACCESS_REQ_pdu ( indent , DM_SM_ACCESS_REQ_T_PDU ( pdu ) , policy );
    case DM_SET_BLE_CONNECTION_PARAMETERS_CFM:
        return display_DM_SET_BLE_CONNECTION_PARAMETERS_CFM_pdu ( indent , DM_SET_BLE_CONNECTION_PARAMETERS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ:
        return display_DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ_pdu ( indent , DM_HCI_WRITE_LINK_POLICY_SETTINGS_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_REGISTER_CFM:
        return display_DM_SM_REGISTER_CFM_pdu ( indent , DM_SM_REGISTER_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_SCAN_ENABLE_CFM:
        return display_DM_HCI_READ_SCAN_ENABLE_CFM_pdu ( indent , DM_HCI_READ_SCAN_ENABLE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_LINK_SUPERV_TIMEOUT_IND:
        return display_DM_HCI_LINK_SUPERV_TIMEOUT_IND_pdu ( indent , DM_HCI_LINK_SUPERV_TIMEOUT_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_REMOTE_VER_INFO_REQ:
        return display_DM_HCI_READ_REMOTE_VER_INFO_REQ_pdu ( indent , DM_HCI_READ_REMOTE_VER_INFO_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ENHANCED_FLUSH_CFM:
        return display_DM_HCI_ENHANCED_FLUSH_CFM_pdu ( indent , DM_HCI_ENHANCED_FLUSH_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_INQUIRY_MODE_REQ:
        return display_DM_HCI_READ_INQUIRY_MODE_REQ_pdu ( indent , DM_HCI_READ_INQUIRY_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ:
        return display_DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ_pdu ( indent , DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_REQ_T_PDU ( pdu ) , policy );
    case DM_AMPM_DISCONNECT_CHANNEL_RSP:
        return display_DM_AMPM_DISCONNECT_CHANNEL_RSP_pdu ( indent , DM_AMPM_DISCONNECT_CHANNEL_RSP_T_PDU ( pdu ) , policy );
    case DM_SM_ACCESS_CFM:
        return display_DM_SM_ACCESS_CFM_pdu ( indent , DM_SM_ACCESS_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_READ_DEVICE_REQ:
        return display_DM_SM_READ_DEVICE_REQ_pdu ( indent , DM_SM_READ_DEVICE_REQ_T_PDU ( pdu ) , policy );
    case DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ:
        return display_DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ_pdu ( indent , DM_LP_WRITE_ALWAYS_MASTER_DEVICES_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_RECEIVER_TEST_REQ:
        return display_DM_HCI_ULP_RECEIVER_TEST_REQ_pdu ( indent , DM_HCI_ULP_RECEIVER_TEST_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM:
        return display_DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM_pdu ( indent , DM_HCI_WRITE_LINK_POLICY_SETTINGS_CFM_T_PDU ( pdu ) , policy );
    case DM_AMPM_DISCONNECT_CHANNEL_IND:
        return display_DM_AMPM_DISCONNECT_CHANNEL_IND_pdu ( indent , DM_AMPM_DISCONNECT_CHANNEL_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_REMOTE_VER_INFO_CFM:
        return display_DM_HCI_READ_REMOTE_VER_INFO_CFM_pdu ( indent , DM_HCI_READ_REMOTE_VER_INFO_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ:
        return display_DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ_pdu ( indent , DM_HCI_REMOTE_NAME_REQ_CANCEL_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_DELETE_STORED_LINK_KEY_REQ:
        return display_DM_HCI_DELETE_STORED_LINK_KEY_REQ_pdu ( indent , DM_HCI_DELETE_STORED_LINK_KEY_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_IO_CAPABILITY_RESPONSE_IND:
        return display_DM_SM_IO_CAPABILITY_RESPONSE_IND_pdu ( indent , DM_SM_IO_CAPABILITY_RESPONSE_IND_T_PDU ( pdu ) , policy );
    case DM_SM_IO_CAPABILITY_REQUEST_RSP:
        return display_DM_SM_IO_CAPABILITY_REQUEST_RSP_pdu ( indent , DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_INQUIRY_MODE_CFM:
        return display_DM_HCI_READ_INQUIRY_MODE_CFM_pdu ( indent , DM_HCI_READ_INQUIRY_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_REMOVE_DEVICE_REQ:
        return display_DM_SM_REMOVE_DEVICE_REQ_pdu ( indent , DM_SM_REMOVE_DEVICE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM:
        return display_DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM_pdu ( indent , DM_HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_CFM_T_PDU ( pdu ) , policy );
    case DM_AMPM_DISCONNECT_REQ:
        return display_DM_AMPM_DISCONNECT_REQ_pdu ( indent , DM_AMPM_DISCONNECT_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_READ_DEVICE_CFM:
        return display_DM_SM_READ_DEVICE_CFM_pdu ( indent , DM_SM_READ_DEVICE_CFM_T_PDU ( pdu ) , policy );
    case DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM:
        return display_DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM_pdu ( indent , DM_LP_WRITE_ALWAYS_MASTER_DEVICES_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_RECEIVER_TEST_CFM:
        return display_DM_HCI_ULP_RECEIVER_TEST_CFM_pdu ( indent , DM_HCI_ULP_RECEIVER_TEST_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_SET_EVENT_MASK_REQ:
        return display_DM_HCI_SET_EVENT_MASK_REQ_pdu ( indent , DM_HCI_SET_EVENT_MASK_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LOCAL_EXT_FEATURES_REQ:
        return display_DM_HCI_READ_LOCAL_EXT_FEATURES_REQ_pdu ( indent , DM_HCI_READ_LOCAL_EXT_FEATURES_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ:
        return display_DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ_pdu ( indent , DM_HCI_RESET_FAILED_CONTACT_COUNT_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_IO_CAPABILITY_REQUEST_IND:
        return display_DM_SM_IO_CAPABILITY_REQUEST_IND_pdu ( indent , DM_SM_IO_CAPABILITY_REQUEST_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_INQUIRY_MODE_REQ:
        return display_DM_HCI_WRITE_INQUIRY_MODE_REQ_pdu ( indent , DM_HCI_WRITE_INQUIRY_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_KEY_REQUEST_RSP:
        return display_DM_SM_KEY_REQUEST_RSP_pdu ( indent , DM_SM_KEY_REQUEST_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM:
        return display_DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM_pdu ( indent , DM_HCI_REMOTE_NAME_REQ_CANCEL_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_DELETE_STORED_LINK_KEY_CFM:
        return display_DM_HCI_DELETE_STORED_LINK_KEY_CFM_pdu ( indent , DM_HCI_DELETE_STORED_LINK_KEY_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_USER_PASSKEY_NOTIFICATION_IND:
        return display_DM_SM_USER_PASSKEY_NOTIFICATION_IND_pdu ( indent , DM_SM_USER_PASSKEY_NOTIFICATION_IND_T_PDU ( pdu ) , policy );
    case DM_SET_BT_VERSION_REQ:
        return display_DM_SET_BT_VERSION_REQ_pdu ( indent , DM_SET_BT_VERSION_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_RETURN_LINK_KEYS_IND:
        return display_DM_HCI_RETURN_LINK_KEYS_IND_pdu ( indent , DM_HCI_RETURN_LINK_KEYS_IND_T_PDU ( pdu ) , policy );
    case DM_SM_ENCRYPTION_CHANGE_IND:
        return display_DM_SM_ENCRYPTION_CHANGE_IND_pdu ( indent , DM_SM_ENCRYPTION_CHANGE_IND_T_PDU ( pdu ) , policy );
    case DM_AMPM_VERIFY_PHYSICAL_LINK_RSP:
        return display_DM_AMPM_VERIFY_PHYSICAL_LINK_RSP_pdu ( indent , DM_AMPM_VERIFY_PHYSICAL_LINK_RSP_T_PDU ( pdu ) , policy );
    case DM_SM_UNREGISTER_REQ:
        return display_DM_SM_UNREGISTER_REQ_pdu ( indent , DM_SM_UNREGISTER_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_EXTENDED_INQUIRY_RESULT_IND:
        return display_DM_HCI_EXTENDED_INQUIRY_RESULT_IND_pdu ( indent , DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU ( pdu ) , policy );
    case DM_SM_REMOVE_DEVICE_CFM:
        return display_DM_SM_REMOVE_DEVICE_CFM_pdu ( indent , DM_SM_REMOVE_DEVICE_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_CSRK_COUNTER_CHANGE_IND:
        return display_DM_SM_CSRK_COUNTER_CHANGE_IND_pdu ( indent , DM_SM_CSRK_COUNTER_CHANGE_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_SNIFF_SUB_RATE_REQ:
        return display_DM_HCI_SNIFF_SUB_RATE_REQ_pdu ( indent , DM_HCI_SNIFF_SUB_RATE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_KEY_REQUEST_IND:
        return display_DM_SM_KEY_REQUEST_IND_pdu ( indent , DM_SM_KEY_REQUEST_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LOCAL_EXT_FEATURES_CFM:
        return display_DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_pdu ( indent , DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_SET_EVENT_MASK_CFM:
        return display_DM_HCI_SET_EVENT_MASK_CFM_pdu ( indent , DM_HCI_SET_EVENT_MASK_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM:
        return display_DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM_pdu ( indent , DM_HCI_RESET_FAILED_CONTACT_COUNT_CFM_T_PDU ( pdu ) , policy );
    case DM_AMPM_READ_BD_ADDR_REQ:
        return display_DM_AMPM_READ_BD_ADDR_REQ_pdu ( indent , DM_AMPM_READ_BD_ADDR_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_INQUIRY_MODE_CFM:
        return display_DM_HCI_WRITE_INQUIRY_MODE_CFM_pdu ( indent , DM_HCI_WRITE_INQUIRY_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_AMPM_VERIFY_PHYSICAL_LINK_IND:
        return display_DM_AMPM_VERIFY_PHYSICAL_LINK_IND_pdu ( indent , DM_AMPM_VERIFY_PHYSICAL_LINK_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_PERIODIC_INQUIRY_MODE_REQ:
        return display_DM_HCI_PERIODIC_INQUIRY_MODE_REQ_pdu ( indent , DM_HCI_PERIODIC_INQUIRY_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_CHANGE_LOCAL_NAME_REQ:
        return display_DM_HCI_CHANGE_LOCAL_NAME_REQ_pdu ( indent , DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_SIMPLE_PAIRING_COMPLETE_IND:
        return display_DM_SM_SIMPLE_PAIRING_COMPLETE_IND_pdu ( indent , DM_SM_SIMPLE_PAIRING_COMPLETE_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ:
        return display_DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ_pdu ( indent , DM_HCI_READ_REMOTE_SUPP_FEATURES_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_STORED_LINK_KEY_REQ:
        return display_DM_HCI_READ_STORED_LINK_KEY_REQ_pdu ( indent , DM_HCI_READ_STORED_LINK_KEY_REQ_T_PDU ( pdu ) , policy );
    case DM_AM_REGISTER_REQ:
        return display_DM_AM_REGISTER_REQ_pdu ( indent , DM_AM_REGISTER_REQ_T_PDU ( pdu ) , policy );
    case DM_SET_BT_VERSION_CFM:
        return display_DM_SET_BT_VERSION_CFM_pdu ( indent , DM_SET_BT_VERSION_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_UNREGISTER_CFM:
        return display_DM_SM_UNREGISTER_CFM_pdu ( indent , DM_SM_UNREGISTER_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CLASS_OF_DEVICE_REQ:
        return display_DM_HCI_READ_CLASS_OF_DEVICE_REQ_pdu ( indent , DM_HCI_READ_CLASS_OF_DEVICE_REQ_T_PDU ( pdu ) , policy );
    case DM_SYNC_UNREGISTER_REQ:
        return display_DM_SYNC_UNREGISTER_REQ_pdu ( indent , DM_SYNC_UNREGISTER_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_SNIFF_SUB_RATE_CFM:
        return display_DM_HCI_SNIFF_SUB_RATE_CFM_pdu ( indent , DM_HCI_SNIFF_SUB_RATE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ:
        return display_DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ_pdu ( indent , DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_REQ_T_PDU ( pdu ) , policy );
    case DM_AMPM_READ_BD_ADDR_CFM:
        return display_DM_AMPM_READ_BD_ADDR_CFM_pdu ( indent , DM_AMPM_READ_BD_ADDR_CFM_T_PDU ( pdu ) , policy );
    case DM_ACL_OPEN_REQ:
        return display_DM_ACL_OPEN_REQ_pdu ( indent , DM_ACL_OPEN_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_CREATE_CONNECTION_CANCEL_REQ:
        return display_DM_HCI_CREATE_CONNECTION_CANCEL_REQ_pdu ( indent , DM_HCI_CREATE_CONNECTION_CANCEL_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_RAND_REQ:
        return display_DM_HCI_ULP_RAND_REQ_pdu ( indent , DM_HCI_ULP_RAND_REQ_T_PDU ( pdu ) , policy );
    case DM_CLEAR_PARAM_CACHE_REQ:
        return display_DM_CLEAR_PARAM_CACHE_REQ_pdu ( indent , DM_CLEAR_PARAM_CACHE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_PERIODIC_INQUIRY_MODE_CFM:
        return display_DM_HCI_PERIODIC_INQUIRY_MODE_CFM_pdu ( indent , DM_HCI_PERIODIC_INQUIRY_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_REMOTE_NAME_CFM:
        return display_DM_HCI_REMOTE_NAME_CFM_pdu ( indent , DM_HCI_REMOTE_NAME_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_CHANGE_LOCAL_NAME_CFM:
        return display_DM_HCI_CHANGE_LOCAL_NAME_CFM_pdu ( indent , DM_HCI_CHANGE_LOCAL_NAME_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ:
        return display_DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ_pdu ( indent , DM_HCI_READ_LOCAL_SUPP_FEATURES_REQ_T_PDU ( pdu ) , policy );
    case DM_SYNC_CONNECT_REQ:
        return display_DM_SYNC_CONNECT_REQ_pdu ( indent , DM_SYNC_CONNECT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ:
        return display_DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ_pdu ( indent , DM_HCI_READ_INQUIRYSCAN_ACTIVITY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM:
        return display_DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_pdu ( indent , DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_STORED_LINK_KEY_CFM:
        return display_DM_HCI_READ_STORED_LINK_KEY_CFM_pdu ( indent , DM_HCI_READ_STORED_LINK_KEY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_REFRESH_ENCRYPTION_KEY_REQ:
        return display_DM_HCI_REFRESH_ENCRYPTION_KEY_REQ_pdu ( indent , DM_HCI_REFRESH_ENCRYPTION_KEY_REQ_T_PDU ( pdu ) , policy );
    case DM_AM_REGISTER_CFM:
        return display_DM_AM_REGISTER_CFM_pdu ( indent , DM_AM_REGISTER_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_SCAN_ENABLE_REQ:
        return display_DM_HCI_WRITE_SCAN_ENABLE_REQ_pdu ( indent , DM_HCI_WRITE_SCAN_ENABLE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ:
        return display_DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ_pdu ( indent , DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CLASS_OF_DEVICE_CFM:
        return display_DM_HCI_READ_CLASS_OF_DEVICE_CFM_pdu ( indent , DM_HCI_READ_CLASS_OF_DEVICE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ:
        return display_DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ_pdu ( indent , DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_REQ_T_PDU ( pdu ) , policy );
    case DM_SYNC_UNREGISTER_CFM:
        return display_DM_SYNC_UNREGISTER_CFM_pdu ( indent , DM_SYNC_UNREGISTER_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM:
        return display_DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM_pdu ( indent , DM_HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_CFM_T_PDU ( pdu ) , policy );
    case DM_ACL_OPEN_CFM:
        return display_DM_ACL_OPEN_CFM_pdu ( indent , DM_ACL_OPEN_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_CREATE_CONNECTION_CANCEL_CFM:
        return display_DM_HCI_CREATE_CONNECTION_CANCEL_CFM_pdu ( indent , DM_HCI_CREATE_CONNECTION_CANCEL_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PIN_TYPE_REQ:
        return display_DM_HCI_READ_PIN_TYPE_REQ_pdu ( indent , DM_HCI_READ_PIN_TYPE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_RAND_CFM:
        return display_DM_HCI_ULP_RAND_CFM_pdu ( indent , DM_HCI_ULP_RAND_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_VOICE_SETTING_REQ:
        return display_DM_HCI_READ_VOICE_SETTING_REQ_pdu ( indent , DM_HCI_READ_VOICE_SETTING_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ:
        return display_DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ_pdu ( indent , DM_HCI_READ_PAGESCAN_PERIOD_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_CLEAR_PARAM_CACHE_CFM:
        return display_DM_CLEAR_PARAM_CACHE_CFM_pdu ( indent , DM_CLEAR_PARAM_CACHE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_SET_AFH_CHANNEL_CLASS_REQ:
        return display_DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_pdu ( indent , DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_INQUIRY_CANCEL_REQ:
        return display_DM_HCI_INQUIRY_CANCEL_REQ_pdu ( indent , DM_HCI_INQUIRY_CANCEL_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ:
        return display_DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_pdu ( indent , DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM:
        return display_DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_pdu ( indent , DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU ( pdu ) , policy );
    case DM_SYNC_CONNECT_CFM:
        return display_DM_SYNC_CONNECT_CFM_pdu ( indent , DM_SYNC_CONNECT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM:
        return display_DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM_pdu ( indent , DM_HCI_READ_INQUIRYSCAN_ACTIVITY_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_PIN_REQUEST_RSP:
        return display_DM_SM_PIN_REQUEST_RSP_pdu ( indent , DM_SM_PIN_REQUEST_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_SCAN_ENABLE_CFM:
        return display_DM_HCI_WRITE_SCAN_ENABLE_CFM_pdu ( indent , DM_HCI_WRITE_SCAN_ENABLE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM:
        return display_DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM_pdu ( indent , DM_HCI_ULP_SET_ADVERTISING_PARAMETERS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM:
        return display_DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM_pdu ( indent , DM_HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ:
        return display_DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ_pdu ( indent , DM_HCI_READ_SCO_FLOW_CON_ENABLE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_FLUSH_REQ:
        return display_DM_HCI_FLUSH_REQ_pdu ( indent , DM_HCI_FLUSH_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PIN_TYPE_CFM:
        return display_DM_HCI_READ_PIN_TYPE_CFM_pdu ( indent , DM_HCI_READ_PIN_TYPE_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_SECURITY_REQ:
        return display_DM_SM_SECURITY_REQ_pdu ( indent , DM_SM_SECURITY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_VOICE_SETTING_CFM:
        return display_DM_HCI_READ_VOICE_SETTING_CFM_pdu ( indent , DM_HCI_READ_VOICE_SETTING_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_PIN_REQUEST_IND:
        return display_DM_SM_PIN_REQUEST_IND_pdu ( indent , DM_SM_PIN_REQUEST_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_ADVERTISING_DATA_REQ:
        return display_DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_pdu ( indent , DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM:
        return display_DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM_pdu ( indent , DM_HCI_READ_PAGESCAN_PERIOD_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_KEYS_IND:
        return display_DM_SM_KEYS_IND_pdu ( indent , DM_SM_KEYS_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_SET_AFH_CHANNEL_CLASS_CFM:
        return display_DM_HCI_SET_AFH_CHANNEL_CLASS_CFM_pdu ( indent , DM_HCI_SET_AFH_CHANNEL_CLASS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM:
        return display_DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_pdu ( indent , DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_INQUIRY_CANCEL_CFM:
        return display_DM_HCI_INQUIRY_CANCEL_CFM_pdu ( indent , DM_HCI_INQUIRY_CANCEL_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ:
        return display_DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ_pdu ( indent , DM_HCI_READ_INQUIRY_SCAN_TYPE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_ENCRYPT_REQ:
        return display_DM_SM_ENCRYPT_REQ_pdu ( indent , DM_SM_ENCRYPT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_NUM_BCAST_RETXS_REQ:
        return display_DM_HCI_WRITE_NUM_BCAST_RETXS_REQ_pdu ( indent , DM_HCI_WRITE_NUM_BCAST_RETXS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ:
        return display_DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ_pdu ( indent , DM_HCI_ULP_CREATE_CONNECTION_CANCEL_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_USER_CONFIRMATION_REQUEST_RSP:
        return display_DM_SM_USER_CONFIRMATION_REQUEST_RSP_pdu ( indent , DM_SM_USER_CONFIRMATION_REQUEST_RSP_T_PDU ( pdu ) , policy );
    case DM_BLUESTACK_STATE_TRANSITION_EXIT_IND:
        return display_DM_BLUESTACK_STATE_TRANSITION_EXIT_IND_pdu ( indent , DM_BLUESTACK_STATE_TRANSITION_EXIT_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM:
        return display_DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM_pdu ( indent , DM_HCI_HOST_NUM_COMPLETED_PACKETS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_REMOTE_EXT_FEATURES_REQ:
        return display_DM_HCI_READ_REMOTE_EXT_FEATURES_REQ_pdu ( indent , DM_HCI_READ_REMOTE_EXT_FEATURES_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_USER_PASSKEY_REQUEST_NEG_RSP:
        return display_DM_SM_USER_PASSKEY_REQUEST_NEG_RSP_pdu ( indent , DM_SM_USER_PASSKEY_REQUEST_NEG_RSP_T_PDU ( pdu ) , policy );
    case DM_SET_DEFAULT_LINK_POLICY_REQ:
        return display_DM_SET_DEFAULT_LINK_POLICY_REQ_pdu ( indent , DM_SET_DEFAULT_LINK_POLICY_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_UNREGISTER_OUTGOING_REQ:
        return display_DM_SM_UNREGISTER_OUTGOING_REQ_pdu ( indent , DM_SM_UNREGISTER_OUTGOING_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LMP_HANDLE_REQ:
        return display_DM_HCI_READ_LMP_HANDLE_REQ_pdu ( indent , DM_HCI_READ_LMP_HANDLE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_FLUSH_CFM:
        return display_DM_HCI_FLUSH_CFM_pdu ( indent , DM_HCI_FLUSH_CFM_T_PDU ( pdu ) , policy );
    case DM_AMPM_LINK_KEY_NOTIFICATION_IND:
        return display_DM_AMPM_LINK_KEY_NOTIFICATION_IND_pdu ( indent , DM_AMPM_LINK_KEY_NOTIFICATION_IND_T_PDU ( pdu ) , policy );
    case DM_SM_SECURITY_CFM:
        return display_DM_SM_SECURITY_CFM_pdu ( indent , DM_SM_SECURITY_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_USER_CONFIRMATION_REQUEST_IND:
        return display_DM_SM_USER_CONFIRMATION_REQUEST_IND_pdu ( indent , DM_SM_USER_CONFIRMATION_REQUEST_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_ADVERTISING_DATA_CFM:
        return display_DM_HCI_ULP_SET_ADVERTISING_DATA_CFM_pdu ( indent , DM_HCI_ULP_SET_ADVERTISING_DATA_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM:
        return display_DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM_pdu ( indent , DM_HCI_READ_INQUIRY_SCAN_TYPE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGESCAN_MODE_REQ:
        return display_DM_HCI_READ_PAGESCAN_MODE_REQ_pdu ( indent , DM_HCI_READ_PAGESCAN_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_ENCRYPT_CFM:
        return display_DM_SM_ENCRYPT_CFM_pdu ( indent , DM_SM_ENCRYPT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_NUM_BCAST_RETXS_CFM:
        return display_DM_HCI_WRITE_NUM_BCAST_RETXS_CFM_pdu ( indent , DM_HCI_WRITE_NUM_BCAST_RETXS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM:
        return display_DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM_pdu ( indent , DM_HCI_ULP_CREATE_CONNECTION_CANCEL_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ:
        return display_DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ_pdu ( indent , DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_AUTHENTICATE_REQ:
        return display_DM_SM_AUTHENTICATE_REQ_pdu ( indent , DM_SM_AUTHENTICATE_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_REGISTER_OUTGOING_REQ:
        return display_DM_SM_REGISTER_OUTGOING_REQ_pdu ( indent , DM_SM_REGISTER_OUTGOING_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_EXIT_PARK_MODE_REQ:
        return display_DM_HCI_EXIT_PARK_MODE_REQ_pdu ( indent , DM_HCI_EXIT_PARK_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND:
        return display_DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND_pdu ( indent , DM_BLUESTACK_STATE_TRANSITION_ENTRY_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ:
        return display_DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ_pdu ( indent , DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_REMOTE_EXT_FEATURES_CFM:
        return display_DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_pdu ( indent , DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ:
        return display_DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ_pdu ( indent , DM_HCI_READ_CONN_ACCEPT_TIMEOUT_REQ_T_PDU ( pdu ) , policy );
    case DM_SYNC_DISCONNECT_REQ:
        return display_DM_SYNC_DISCONNECT_REQ_pdu ( indent , DM_SYNC_DISCONNECT_REQ_T_PDU ( pdu ) , policy );
    case DM_SM_UNREGISTER_OUTGOING_CFM:
        return display_DM_SM_UNREGISTER_OUTGOING_CFM_pdu ( indent , DM_SM_UNREGISTER_OUTGOING_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ:
        return display_DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ_pdu ( indent , DM_HCI_READ_ENCRYPTION_KEY_SIZE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LMP_HANDLE_CFM:
        return display_DM_HCI_READ_LMP_HANDLE_CFM_pdu ( indent , DM_HCI_READ_LMP_HANDLE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ:
        return display_DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_pdu ( indent , DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_MASTER_LINK_KEY_REQ:
        return display_DM_HCI_MASTER_LINK_KEY_REQ_pdu ( indent , DM_HCI_MASTER_LINK_KEY_REQ_T_PDU ( pdu ) , policy );
    case DM_BAD_MESSAGE_IND:
        return display_DM_BAD_MESSAGE_IND_pdu ( indent , DM_BAD_MESSAGE_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CLOCK_REQ:
        return display_DM_HCI_READ_CLOCK_REQ_pdu ( indent , DM_HCI_READ_CLOCK_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGESCAN_ACTIVITY_REQ:
        return display_DM_HCI_READ_PAGESCAN_ACTIVITY_REQ_pdu ( indent , DM_HCI_READ_PAGESCAN_ACTIVITY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ:
        return display_DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ_pdu ( indent , DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGESCAN_MODE_CFM:
        return display_DM_HCI_READ_PAGESCAN_MODE_CFM_pdu ( indent , DM_HCI_READ_PAGESCAN_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGE_SCAN_TYPE_REQ:
        return display_DM_HCI_READ_PAGE_SCAN_TYPE_REQ_pdu ( indent , DM_HCI_READ_PAGE_SCAN_TYPE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM:
        return display_DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM_pdu ( indent , DM_HCI_WRITE_CONN_ACCEPT_TIMEOUT_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_AUTHENTICATE_CFM:
        return display_DM_SM_AUTHENTICATE_CFM_pdu ( indent , DM_SM_AUTHENTICATE_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_REGISTER_OUTGOING_CFM:
        return display_DM_SM_REGISTER_OUTGOING_CFM_pdu ( indent , DM_SM_REGISTER_OUTGOING_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_ENC_MODE_REQ:
        return display_DM_HCI_READ_ENC_MODE_REQ_pdu ( indent , DM_HCI_READ_ENC_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_SCAN_ENABLE_REQ:
        return display_DM_HCI_ULP_SET_SCAN_ENABLE_REQ_pdu ( indent , DM_HCI_ULP_SET_SCAN_ENABLE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM:
        return display_DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_pdu ( indent , DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM:
        return display_DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM_pdu ( indent , DM_HCI_READ_CONN_ACCEPT_TIMEOUT_CFM_T_PDU ( pdu ) , policy );
    case DM_SYNC_DISCONNECT_CFM:
        return display_DM_SYNC_DISCONNECT_CFM_pdu ( indent , DM_SYNC_DISCONNECT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM:
        return display_DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM_pdu ( indent , DM_HCI_READ_ENCRYPTION_KEY_SIZE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_FAILED_CONTACT_COUNT_REQ:
        return display_DM_HCI_READ_FAILED_CONTACT_COUNT_REQ_pdu ( indent , DM_HCI_READ_FAILED_CONTACT_COUNT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM:
        return display_DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_pdu ( indent , DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU ( pdu ) , policy );
    case DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ:
        return display_DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ_pdu ( indent , DM_BLE_UPDATE_CONNECTION_PARAMETERS_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CLOCK_CFM:
        return display_DM_HCI_READ_CLOCK_CFM_pdu ( indent , DM_HCI_READ_CLOCK_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CURRENT_IAC_LAP_REQ:
        return display_DM_HCI_READ_CURRENT_IAC_LAP_REQ_pdu ( indent , DM_HCI_READ_CURRENT_IAC_LAP_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_MASTER_LINK_KEY_CFM:
        return display_DM_HCI_MASTER_LINK_KEY_CFM_pdu ( indent , DM_HCI_MASTER_LINK_KEY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGESCAN_ACTIVITY_CFM:
        return display_DM_HCI_READ_PAGESCAN_ACTIVITY_CFM_pdu ( indent , DM_HCI_READ_PAGESCAN_ACTIVITY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM:
        return display_DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM_pdu ( indent , DM_HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ:
        return display_DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ_pdu ( indent , DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_PAGE_SCAN_TYPE_CFM:
        return display_DM_HCI_READ_PAGE_SCAN_TYPE_CFM_pdu ( indent , DM_HCI_READ_PAGE_SCAN_TYPE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_AUTH_ENABLE_REQ:
        return display_DM_HCI_READ_AUTH_ENABLE_REQ_pdu ( indent , DM_HCI_READ_AUTH_ENABLE_REQ_T_PDU ( pdu ) , policy );
    case DM_SYNC_REGISTER_REQ:
        return display_DM_SYNC_REGISTER_REQ_pdu ( indent , DM_SYNC_REGISTER_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ:
        return display_DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ_pdu ( indent , DM_HCI_ULP_SET_ADVERTISE_ENABLE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_ENC_MODE_CFM:
        return display_DM_HCI_READ_ENC_MODE_CFM_pdu ( indent , DM_HCI_READ_ENC_MODE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_SCAN_ENABLE_CFM:
        return display_DM_HCI_ULP_SET_SCAN_ENABLE_CFM_pdu ( indent , DM_HCI_ULP_SET_SCAN_ENABLE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_SNIFF_MODE_REQ:
        return display_DM_HCI_SNIFF_MODE_REQ_pdu ( indent , DM_HCI_SNIFF_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_FAILED_CONTACT_COUNT_CFM:
        return display_DM_HCI_READ_FAILED_CONTACT_COUNT_CFM_pdu ( indent , DM_HCI_READ_FAILED_CONTACT_COUNT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ROLE_DISCOVERY_REQ:
        return display_DM_HCI_ROLE_DISCOVERY_REQ_pdu ( indent , DM_HCI_ROLE_DISCOVERY_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LINK_POLICY_SETTINGS_REQ:
        return display_DM_HCI_READ_LINK_POLICY_SETTINGS_REQ_pdu ( indent , DM_HCI_READ_LINK_POLICY_SETTINGS_REQ_T_PDU ( pdu ) , policy );
    case DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM:
        return display_DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM_pdu ( indent , DM_BLE_UPDATE_CONNECTION_PARAMETERS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_RESET_REQ:
        return display_DM_HCI_RESET_REQ_pdu ( indent , DM_HCI_RESET_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_CURRENT_IAC_LAP_CFM:
        return display_DM_HCI_READ_CURRENT_IAC_LAP_CFM_pdu ( indent , DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM:
        return display_DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM_pdu ( indent , DM_HCI_WRITE_AUTO_FLUSH_TIMEOUT_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_AUTH_ENABLE_CFM:
        return display_DM_HCI_READ_AUTH_ENABLE_CFM_pdu ( indent , DM_HCI_READ_AUTH_ENABLE_CFM_T_PDU ( pdu ) , policy );
    case DM_SYNC_REGISTER_CFM:
        return display_DM_SYNC_REGISTER_CFM_pdu ( indent , DM_SYNC_REGISTER_CFM_T_PDU ( pdu ) , policy );
    case DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP:
        return display_DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP_pdu ( indent , DM_SM_IO_CAPABILITY_REQUEST_NEG_RSP_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM:
        return display_DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM_pdu ( indent , DM_HCI_ULP_SET_ADVERTISE_ENABLE_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_MODE_CHANGE_EVENT_IND:
        return display_DM_HCI_MODE_CHANGE_EVENT_IND_pdu ( indent , DM_HCI_MODE_CHANGE_EVENT_IND_T_PDU ( pdu ) , policy );
    case DM_HCI_ULP_SET_EVENT_MASK_REQ:
        return display_DM_HCI_ULP_SET_EVENT_MASK_REQ_pdu ( indent , DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LINK_POLICY_SETTINGS_CFM:
        return display_DM_HCI_READ_LINK_POLICY_SETTINGS_CFM_pdu ( indent , DM_HCI_READ_LINK_POLICY_SETTINGS_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_ROLE_DISCOVERY_CFM:
        return display_DM_HCI_ROLE_DISCOVERY_CFM_pdu ( indent , DM_HCI_ROLE_DISCOVERY_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_PARK_MODE_REQ:
        return display_DM_HCI_PARK_MODE_REQ_pdu ( indent , DM_HCI_PARK_MODE_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_RESET_CFM:
        return display_DM_HCI_RESET_CFM_pdu ( indent , DM_HCI_RESET_CFM_T_PDU ( pdu ) , policy );
    case DM_HCI_READ_LOCAL_VER_INFO_REQ:
        return display_DM_HCI_READ_LOCAL_VER_INFO_REQ_pdu ( indent , DM_HCI_READ_LOCAL_VER_INFO_REQ_T_PDU ( pdu ) , policy );
    case DM_AMPM_REGISTER_REQ:
        return display_DM_AMPM_REGISTER_REQ_pdu ( indent , DM_AMPM_REGISTER_REQ_T_PDU ( pdu ) , policy );
    case DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ:
        return display_DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ_pdu ( indent , DM_HCI_WRITE_PAGE_SCAN_TYPE_REQ_T_PDU ( pdu ) , policy );
    default:
        //  pdu is not a recognised type
        return policy->display_unknown_type ( DM_PDU ( pdu ).get_type() , "DM" , pdu );
    }
}

#endif//USE_DISPLAY_PDU
