///////////////////////////////////////////////////////////////////////////////
//
//  FILE:     xtradm.cpp
//
//  PURPOSE:  define non-autogenerated DM primitive pdus
//
///////////////////////////////////////////////////////////////////////////////

#include "hcipacker/xtradm.h"
#include "bcflayout.h"
#include <cstring>

#define OFFSET_LinkKey(name) \
    OFFSET_uint8(name),OFFSET_uint8(name##_x1),\
    OFFSET_uint8(name##_x2),OFFSET_uint8(name##_x3),\
    OFFSET_uint8(name##_x4),OFFSET_uint8(name##_x5),\
    OFFSET_uint8(name##_x6),OFFSET_uint8(name##_x7),\
    OFFSET_uint8(name##_x8),OFFSET_uint8(name##_x9),\
    OFFSET_uint8(name##_x10),OFFSET_uint8(name##_x11),\
    OFFSET_uint8(name##_x12),OFFSET_uint8(name##_x13),\
    OFFSET_uint8(name##_x14),OFFSET_uint8(name##_x15)

#define OFFSET_PinCode(name) OFFSET_LinkKey(name)

#define OFFSET_LMPSupportedFeatures_remote(name)\
    OFFSET_uint16(name),OFFSET_uint16(name##_x1),\
    OFFSET_uint16(name##_x2),OFFSET_uint16(name##_x3)

#define OFFSET_LMPSupportedFeatures_local(name) \
    OFFSET_uint8(name),OFFSET_uint8(name##_x1),\
    OFFSET_uint8(name##_x2),OFFSET_uint8(name##_x3),\
    OFFSET_uint8(name##_x4),OFFSET_uint8(name##_x5),\
    OFFSET_uint8(name##_x6),OFFSET_uint8(name##_x7)

#define OFFSET_LMPExtFeatures(name) \
    OFFSET_uint8(name),OFFSET_uint8(name##_x1),\
    OFFSET_uint8(name##_x2),OFFSET_uint8(name##_x3),\
    OFFSET_uint8(name##_x4),OFFSET_uint8(name##_x5),\
    OFFSET_uint8(name##_x6),OFFSET_uint8(name##_x7)

#define OFFSET_AFHmap(name) \
    OFFSET_uint8(name),OFFSET_uint8(name##_x1),\
    OFFSET_uint8(name##_x2),OFFSET_uint8(name##_x3),\
    OFFSET_uint8(name##_x4),OFFSET_uint8(name##_x5),\
    OFFSET_uint8(name##_x6),OFFSET_uint8(name##_x7),\
    OFFSET_uint8(name##_x8),OFFSET_uint8(name##_x9)

#define OFFSET_uint16Ptr(name) OFFSET_uint16(name)

#define OFFSET_DM_SM_UKEY_T(name, count) \
    OFFSET_uint16_array(name, count)

#define OFFSET_DM_SM_TRUST_T(name) \
    OFFSET_uint16(name)

#define OFFSET_DM_SM_KEY_TYPE_T(name) \
    OFFSET_uint16(name)

enum {
	OFFSET_START(DM_HCI_RETURN_LINK_KEYS_IND_T)
	OFFSET_uint16(DM_HCI_RETURN_LINK_KEYS_IND_T_type),
	OFFSET_uint16(DM_HCI_RETURN_LINK_KEYS_IND_T_phandle),
	OFFSET_uint8(DM_HCI_RETURN_LINK_KEYS_IND_T_num_keys),
	OFFSET_PtrArray(DM_HCI_RETURN_LINK_KEYS_IND_T_link_key_bd_addr,HCI_STORED_LINK_KEY_MAX),
	DM_HCI_RETURN_LINK_KEYS_IND_T_pduSize
} ;

enum {
	OFFSET_START(DM_SM_LINK_KEY_IND_T)
	OFFSET_uint16(DM_SM_LINK_KEY_IND_T_type),
	OFFSET_uint16(DM_SM_LINK_KEY_IND_T_phandle),
	OFFSET_BluetoothDeviceAddress(DM_SM_LINK_KEY_IND_T_bd_addr),
	OFFSET_uint8(DM_SM_LINK_KEY_IND_T_key_type),
	OFFSET_LinkKey(DM_SM_LINK_KEY_IND_T_key),
	DM_SM_LINK_KEY_IND_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_REMOTE_NAME_CFM_T)
	OFFSET_uint16(DM_HCI_REMOTE_NAME_CFM_T_type),
	OFFSET_uint16(DM_HCI_REMOTE_NAME_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_REMOTE_NAME_CFM_T_status),
	OFFSET_BluetoothDeviceAddress(DM_HCI_REMOTE_NAME_CFM_T_bd_addr),
	OFFSET_PtrArray(DM_HCI_REMOTE_NAME_CFM_T_name_part,HCI_LOCAL_NAME_BYTE_PACKET_PTRS),
	DM_HCI_REMOTE_NAME_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T)
	OFFSET_uint16(DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_type),
	OFFSET_uint16(DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_status),
	OFFSET_BluetoothDeviceAddress(DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_bd_addr),
	OFFSET_LMPSupportedFeatures_remote(DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_features),
	DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T)
	OFFSET_uint16(DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_type),
	OFFSET_uint16(DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_status),
	OFFSET_LMPSupportedFeatures_local(DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_lmp_supp_features),
	DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_READ_LOCAL_NAME_CFM_T)
	OFFSET_uint16(DM_HCI_READ_LOCAL_NAME_CFM_T_type),
	OFFSET_uint16(DM_HCI_READ_LOCAL_NAME_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_READ_LOCAL_NAME_CFM_T_status),
	OFFSET_PtrArray(DM_HCI_READ_LOCAL_NAME_CFM_T_name_part,HCI_LOCAL_NAME_BYTE_PACKET_PTRS),
	DM_HCI_READ_LOCAL_NAME_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_SM_PIN_REQUEST_RSP_T)
	OFFSET_uint16(DM_SM_PIN_REQUEST_RSP_T_type),
	OFFSET_BluetoothDeviceAddressWithType(DM_SM_PIN_REQUEST_RSP_T_addrt),
	OFFSET_uint8(DM_SM_PIN_REQUEST_RSP_T_pin_length),
	OFFSET_PinCode(DM_SM_PIN_REQUEST_RSP_T_pin),
	DM_SM_PIN_REQUEST_RSP_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T)
	OFFSET_uint16(DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_op_code),
	OFFSET_uint8(DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_length),
	OFFSET_uint8(DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_num_handles),
	OFFSET_PtrArray(DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_num_completed_pkts_ptr,HCI_HOST_NUM_COMPLETED_PACKET_PTRS),
	DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_READ_CURRENT_IAC_LAP_CFM_T)
	OFFSET_uint16(DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_type),
	OFFSET_uint16(DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_status),
	OFFSET_uint8(DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_num_current_iac),
	OFFSET_PtrArray(DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_iac_lap,HCI_IAC_LAP_PTRS),
	DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_INQUIRY_RESULT_IND_T)
	OFFSET_uint16(DM_HCI_INQUIRY_RESULT_IND_T_type),
	OFFSET_uint16(DM_HCI_INQUIRY_RESULT_IND_T_phandle),
	OFFSET_uint8(DM_HCI_INQUIRY_RESULT_IND_T_num_responses),
	OFFSET_PtrArray(DM_HCI_INQUIRY_RESULT_IND_T_result,HCI_MAX_INQ_RESULT_PTRS),
	DM_HCI_INQUIRY_RESULT_IND_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T)
	OFFSET_uint16(DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_type),
	OFFSET_uint16(DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_phandle),
	OFFSET_uint8(DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_num_responses),
	OFFSET_PtrArray(DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_result,HCI_MAX_INQ_RESULT_PTRS),
	DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_pduSize
} ;

enum {
	OFFSET_START(DM_LP_WRITE_POWERSTATES_REQ_T)
	OFFSET_uint16(DM_LP_WRITE_POWERSTATES_REQ_T_type),
	OFFSET_BluetoothDeviceAddress(DM_LP_WRITE_POWERSTATES_REQ_T_bd_addr),
	OFFSET_uint16(DM_LP_WRITE_POWERSTATES_REQ_T_size_of_states),
	OFFSET_uint16(DM_LP_WRITE_POWERSTATES_REQ_T_states_ptr),
	DM_LP_WRITE_POWERSTATES_REQ_T_pduSize
} ;

enum {
        OFFSET_START(DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T)
        OFFSET_uint16(DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_type),
        OFFSET_uint16(DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_version),
        OFFSET_uint16(DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_length),
        OFFSET_uint16(DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_rs_table),
        DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_pduSize
} ;

enum {
        OFFSET_START(DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T)
        OFFSET_uint16(DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_op_code),
        OFFSET_uint8 (DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_cmd_parameter_length),
        OFFSET_uint8 (DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_fec_required),
        OFFSET_PtrArray(DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_eir_data_part, HCI_EIR_DATA_PACKET_PTRS),
        DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_pduSize
} ;

enum {
        OFFSET_START(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T)
        OFFSET_uint16(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_type),
        OFFSET_uint16(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_phandle),
        OFFSET_uint8(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_num_responses),
        OFFSET_BluetoothDeviceAddress
                            (DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_bd_addr),
        OFFSET_uint8(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_page_scan_rep_mode),
        OFFSET_uint8
                (DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_page_scan_period_mode),
        OFFSET_uint24(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_dev_class),
        OFFSET_uint16(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_clock_offset),
        OFFSET_int8(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_rssi),
        OFFSET_PtrArray(DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_eir_data_part, 
                                                    HCI_EIR_DATA_PACKET_PTRS),
        DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_pduSize
} ;

enum {
        OFFSET_START(DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T)
        OFFSET_uint16(DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_type),
        OFFSET_uint16(DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_phandle),
        OFFSET_uint8(DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_status),
        OFFSET_uint8(DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_fec_required),
        OFFSET_PtrArray(DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_eir_data_part, HCI_EIR_DATA_PACKET_PTRS),
        DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_pduSize
} ;

enum{
        OFFSET_START(DM_SM_IO_CAPABILITY_REQUEST_RSP_T)
        OFFSET_uint16(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_type),
        OFFSET_BluetoothDeviceAddressWithType(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_addrt),
        OFFSET_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_io_capability),
        OFFSET_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_oob_data_present),
        OFFSET_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_authentication_requirements),
        OFFSET_PtrArray(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_oob_hash_c, 1),
        OFFSET_PtrArray(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_oob_rand_r, 1),
        OFFSET_uint16(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_key_distribution),
        DM_SM_IO_CAPABILITY_REQUEST_RSP_T_pduSize
} ;

enum{
        OFFSET_START(DM_SM_READ_LOCAL_OOB_DATA_CFM_T)
        OFFSET_uint16(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_type),
        OFFSET_uint16(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_phandle),
        OFFSET_uint8(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_status),
        OFFSET_PtrArray(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_oob_hash_c, 1),
        OFFSET_PtrArray(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_oob_rand_r, 1),
        DM_SM_READ_LOCAL_OOB_DATA_CFM_T_pduSize
} ;

enum{
        OFFSET_START(DM_SM_LINK_KEY_REQUEST_RSP_T)
        OFFSET_uint16(DM_SM_LINK_KEY_REQUEST_RSP_T_type),
        OFFSET_BluetoothDeviceAddress(DM_SM_LINK_KEY_REQUEST_RSP_T_bd_addr),
        OFFSET_uint16(DM_SM_LINK_KEY_REQUEST_RSP_T_key_type),
        OFFSET_PtrArray(DM_SM_LINK_KEY_REQUEST_RSP_T_key, 1),
        DM_SM_LINK_KEY_REQUEST_RSP_T_pduSize
} ;

enum{
        OFFSET_START(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T)
        OFFSET_uint16(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_type),
        OFFSET_uint16(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_phandle),
        OFFSET_BluetoothDeviceAddress(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_bd_addr),
        OFFSET_uint16_array(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_host_features, 4),
        DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_pduSize
} ;

enum {
        OFFSET_START(DM_SYNC_CONNECT_REQ_T)
        OFFSET_uint16(DM_SYNC_CONNECT_REQ_T_type),
        OFFSET_uint16(DM_SYNC_CONNECT_REQ_T_phandle),
        OFFSET_uint16(DM_SYNC_CONNECT_REQ_T_pv_cbarg),
        OFFSET_BluetoothDeviceAddress(DM_SYNC_CONNECT_REQ_T_bd_addr),
        OFFSET_uint16(DM_SYNC_CONNECT_REQ_T_length),
        OFFSET_uint16Ptr(DM_SYNC_CONNECT_REQ_T_config),
        DM_SYNC_CONNECT_REQ_T_pduSize
} ;

enum {
        OFFSET_START(DM_SYNC_RENEGOTIATE_REQ_T)
        OFFSET_uint16(DM_SYNC_RENEGOTIATE_REQ_T_type),
        OFFSET_uint16(DM_SYNC_RENEGOTIATE_REQ_T_handle),
        OFFSET_uint16(DM_SYNC_RENEGOTIATE_REQ_T_length),
        OFFSET_uint16Ptr(DM_SYNC_RENEGOTIATE_REQ_T_config),
        DM_SYNC_RENEGOTIATE_REQ_T_pduSize
} ;

enum {
        OFFSET_START(DM_BAD_MESSAGE_IND_T)
        OFFSET_uint16(DM_BAD_MESSAGE_IND_T_type),
        OFFSET_uint16(DM_BAD_MESSAGE_IND_T_phandle),
        OFFSET_uint16(DM_BAD_MESSAGE_IND_T_reason),
        OFFSET_uint8(DM_BAD_MESSAGE_IND_T_protocol),
        OFFSET_uint16(DM_BAD_MESSAGE_IND_T_request_type),
        OFFSET_uint16(DM_BAD_MESSAGE_IND_T_message_length),
        OFFSET_uint16Ptr(DM_BAD_MESSAGE_IND_T_message),
        DM_BAD_MESSAGE_IND_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T)
	OFFSET_uint16(DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_op_code),
	OFFSET_uint8(DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_cmd_parameter_length),
	OFFSET_uint8(DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_advertising_data_len),
	OFFSET_uint8_array(DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_advertising_data, 31),
	DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T)
	OFFSET_uint16(DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_type),
	OFFSET_uint16(DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_status),
	OFFSET_uint8_array(DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_feature_set, 8),
	DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_ADVERTISING_REPORT_IND_T)
	OFFSET_uint16(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_type),
	OFFSET_uint16(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_phandle),
	OFFSET_uint8(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_num_reports),
	OFFSET_uint8(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_event_type),
	OFFSET_BluetoothDeviceAddressWithType(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_current_addrt),
        OFFSET_BluetoothDeviceAddressWithType(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_permanent_addrt),
	OFFSET_uint8(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_length_data),
	OFFSET_PtrArray(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_data, 1),
	OFFSET_uint8(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_rssi),
	DM_HCI_ULP_ADVERTISING_REPORT_IND_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T)
	OFFSET_uint16(DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_type),
	OFFSET_uint16(DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_status),
	OFFSET_uint8_array(DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_supported_states,8),
	DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T)
	OFFSET_uint16(DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_type),
	OFFSET_uint16(DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_status),
	OFFSET_BluetoothDeviceAddressWithType(DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_addrt),
	OFFSET_uint8_array(DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_ulp_channel_map,5),
	DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T)
	OFFSET_uint16(DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_type),
	OFFSET_uint16(DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_status),
	OFFSET_BluetoothDeviceAddressWithType(DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_addrt),
	OFFSET_uint8_array(DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_feature_set,8),
	DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_ENCRYPT_CFM_T)
	OFFSET_uint16(DM_HCI_ULP_ENCRYPT_CFM_T_type),
	OFFSET_uint16(DM_HCI_ULP_ENCRYPT_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_ULP_ENCRYPT_CFM_T_status),
	OFFSET_uint8_array(DM_HCI_ULP_ENCRYPT_CFM_T_encrypted_data,16),
	DM_HCI_ULP_ENCRYPT_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_RAND_CFM_T)
	OFFSET_uint16(DM_HCI_ULP_RAND_CFM_T_type),
	OFFSET_uint16(DM_HCI_ULP_RAND_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_ULP_RAND_CFM_T_status),
	OFFSET_uint8_array(DM_HCI_ULP_RAND_CFM_T_random_number,16),
	DM_HCI_ULP_RAND_CFM_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_ENCRYPT_REQ_T)
	OFFSET_uint16(DM_HCI_ULP_ENCRYPT_REQ_T_op_code),
	OFFSET_uint8(DM_HCI_ULP_ENCRYPT_REQ_T_cmd_parameter_length),
	OFFSET_uint8_array(DM_HCI_ULP_ENCRYPT_REQ_T_aes_key,16),
	OFFSET_uint8_array(DM_HCI_ULP_ENCRYPT_REQ_T_plaintext_data,16),
	DM_HCI_ULP_ENCRYPT_REQ_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T)
	OFFSET_uint16(DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_op_code),
	OFFSET_uint8(DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_cmd_parameter_length),
	OFFSET_uint8(DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_scan_response_data_len),
	OFFSET_uint8_array(DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_scan_response_data,31),
	DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_SET_EVENT_MASK_REQ_T)
	OFFSET_uint16(DM_HCI_ULP_SET_EVENT_MASK_REQ_T_op_code),
	OFFSET_uint8(DM_HCI_ULP_SET_EVENT_MASK_REQ_T_cmd_parameter_length),
	OFFSET_uint8_array(DM_HCI_ULP_SET_EVENT_MASK_REQ_T_ulp_event_mask,8),
	DM_HCI_ULP_SET_EVENT_MASK_REQ_T_pduSize
} ;

enum {
	OFFSET_START(DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T)
	OFFSET_uint16(DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_op_code),
	OFFSET_uint8(DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_cmd_parameter_length),
	OFFSET_uint8_array(DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_channel_map, 5),
	DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_pduSize
} ;

enum {
        OFFSET_START(DM_SM_ADD_DEVICE_REQ_T)
        OFFSET_uint16(DM_SM_ADD_DEVICE_REQ_T_type),
        OFFSET_uint16(DM_SM_ADD_DEVICE_REQ_T_phandle),
        OFFSET_BluetoothDeviceAddressWithType(DM_SM_ADD_DEVICE_REQ_T_addrt),
        OFFSET_uint16(DM_SM_ADD_DEVICE_REQ_T_privacy),
        OFFSET_BluetoothDeviceAddress(DM_SM_ADD_DEVICE_REQ_T_reconnection_bd_addr),
        OFFSET_DM_SM_TRUST_T(DM_SM_ADD_DEVICE_REQ_T_trust),
        OFFSET_uint16(DM_SM_ADD_DEVICE_REQ_T_security_requirements),
        OFFSET_uint16(DM_SM_ADD_DEVICE_REQ_T_encryption_key_size),
        OFFSET_uint16(DM_SM_ADD_DEVICE_REQ_T_present),
        OFFSET_DM_SM_UKEY_T(DM_SM_ADD_DEVICE_REQ_T_u, DM_SM_MAX_NUM_KEYS),
        DM_SM_ADD_DEVICE_REQ_T_pduSize
} ;

enum {
        OFFSET_START(DM_SM_READ_DEVICE_CFM_T)
        OFFSET_uint16(DM_SM_READ_DEVICE_CFM_T_type),
        OFFSET_uint16(DM_SM_READ_DEVICE_CFM_T_phandle),
        OFFSET_BluetoothDeviceAddressWithType(DM_SM_READ_DEVICE_CFM_T_addrt),
        OFFSET_uint8(DM_SM_READ_DEVICE_CFM_T_status),
        OFFSET_DM_SM_TRUST_T(DM_SM_READ_DEVICE_CFM_T_trust),
        OFFSET_uint16(DM_SM_READ_DEVICE_CFM_T_security_requirements),
        OFFSET_uint16(DM_SM_READ_DEVICE_CFM_T_encryption_key_size),
        OFFSET_uint16(DM_SM_READ_DEVICE_CFM_T_present),
        OFFSET_DM_SM_UKEY_T(DM_SM_READ_DEVICE_CFM_T_u, DM_SM_MAX_NUM_KEYS),
        DM_SM_READ_DEVICE_CFM_T_pduSize
} ;

enum {
        OFFSET_START(DM_SM_KEYS_IND_T)
        OFFSET_uint16(DM_SM_KEYS_IND_T_type),
        OFFSET_uint16(DM_SM_KEYS_IND_T_phandle),
        OFFSET_BluetoothDeviceAddressWithType(DM_SM_KEYS_IND_T_addrt),
        OFFSET_uint16(DM_SM_KEYS_IND_T_security_requirements),
        OFFSET_uint16(DM_SM_KEYS_IND_T_encryption_key_size),
        OFFSET_uint16(DM_SM_KEYS_IND_T_present),
        OFFSET_DM_SM_UKEY_T(DM_SM_KEYS_IND_T_u, DM_SM_MAX_NUM_KEYS),
        OFFSET_BluetoothDeviceAddressWithType(DM_SM_KEYS_IND_T_id_addrt),
        DM_SM_KEYS_IND_T_pduSize
} ;

enum {
        OFFSET_START(DM_SM_KEY_REQUEST_RSP_T)
        OFFSET_uint16(DM_SM_KEY_REQUEST_RSP_T_type),
        OFFSET_BluetoothDeviceAddressWithType(DM_SM_KEY_REQUEST_RSP_T_addrt),
        OFFSET_uint16(DM_SM_KEY_REQUEST_RSP_T_security_requirements),
        OFFSET_DM_SM_KEY_TYPE_T(DM_SM_KEY_REQUEST_RSP_T_key_type),
        OFFSET_DM_SM_UKEY_T(DM_SM_KEY_REQUEST_RSP_T_key, 1),
        DM_SM_KEY_REQUEST_RSP_T_pduSize
} ;

#include "hcipacker/gen_dm.h"

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_RETURN_LINK_KEYS_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_RETURN_LINK_KEYS_IND_T_PDU::DM_HCI_RETURN_LINK_KEYS_IND_T_PDU()
: DM_PDU ( DM_HCI_RETURN_LINK_KEYS_IND , DM_HCI_RETURN_LINK_KEYS_IND_T_pduSize )
{
}

DM_HCI_RETURN_LINK_KEYS_IND_T_PDU::DM_HCI_RETURN_LINK_KEYS_IND_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_RETURN_LINK_KEYS_IND_T_PDU::DM_HCI_RETURN_LINK_KEYS_IND_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_RETURN_LINK_KEYS_IND_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_HCI_RETURN_LINK_KEYS_IND_T_phandle );
}

uint8 DM_HCI_RETURN_LINK_KEYS_IND_T_PDU::get_num_keys(void) const
{
    return get_uint8 ( DM_HCI_RETURN_LINK_KEYS_IND_T_num_keys );
}

void DM_HCI_RETURN_LINK_KEYS_IND_T_PDU::get_link_key_bd_addr( uint8 index , BluetoothDeviceAddress &addr , LinkKey &key ) const
{
    uint16 offset = DM_HCI_RETURN_LINK_KEYS_IND_T_pduSize;
    offset += index * (8+32) ; //8 = bdaddr size, 32 = link key size
    addr = get_BluetoothDeviceAddress( offset );
    offset += 8 ;
    uint8 lkey[16];
    get_uint8Array( lkey , offset , 16 );
    key = LinkKey ( lkey ) ;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_LINK_KEY_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_SM_LINK_KEY_IND_T_PDU::DM_SM_LINK_KEY_IND_T_PDU()
: DM_PDU ( DM_SM_LINK_KEY_IND , DM_SM_LINK_KEY_IND_T_pduSize )
{
}

DM_SM_LINK_KEY_IND_T_PDU::DM_SM_LINK_KEY_IND_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SM_LINK_KEY_IND_T_PDU::DM_SM_LINK_KEY_IND_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_SM_LINK_KEY_IND_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_SM_LINK_KEY_IND_T_phandle );
}

BluetoothDeviceAddress DM_SM_LINK_KEY_IND_T_PDU::get_bd_addr(void) const
{
    return get_BluetoothDeviceAddress ( DM_SM_LINK_KEY_IND_T_bd_addr );
}

uint8 DM_SM_LINK_KEY_IND_T_PDU::get_key_type(void) const
{
    return get_uint8 ( DM_SM_LINK_KEY_IND_T_key_type );
}

LinkKey DM_SM_LINK_KEY_IND_T_PDU::get_key(void) const
{
    uint8 lkey[16];
    get_uint8Array( lkey , DM_SM_LINK_KEY_IND_T_key , 16 );
    return LinkKey ( lkey ) ;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_REMOTE_NAME_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_REMOTE_NAME_CFM_T_PDU::DM_HCI_REMOTE_NAME_CFM_T_PDU()
: DM_PDU ( DM_HCI_REMOTE_NAME_CFM , DM_HCI_REMOTE_NAME_CFM_T_pduSize )
{
}

DM_HCI_REMOTE_NAME_CFM_T_PDU::DM_HCI_REMOTE_NAME_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_REMOTE_NAME_CFM_T_PDU::DM_HCI_REMOTE_NAME_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_REMOTE_NAME_CFM_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_HCI_REMOTE_NAME_CFM_T_phandle );
}

uint8 DM_HCI_REMOTE_NAME_CFM_T_PDU::get_status(void) const
{
    return get_uint8 ( DM_HCI_REMOTE_NAME_CFM_T_status );
}

BluetoothDeviceAddress DM_HCI_REMOTE_NAME_CFM_T_PDU::get_bd_addr(void) const
{
    return get_BluetoothDeviceAddress ( DM_HCI_REMOTE_NAME_CFM_T_bd_addr );
}

BluetoothName DM_HCI_REMOTE_NAME_CFM_T_PDU::get_name_part(void) const
{
    return BluetoothName ( get_uint8ArrayPtr ( DM_HCI_REMOTE_NAME_CFM_T_pduSize ) ,
                           size() - DM_HCI_REMOTE_NAME_CFM_T_pduSize );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU::DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU()
: DM_PDU ( DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM , DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_pduSize )
{
}

DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU::DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU::DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_phandle );
}

uint8 DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU::get_status(void) const
{
    return get_uint8 ( DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_status );
}

BluetoothDeviceAddress DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU::get_bd_addr(void) const
{
    return get_BluetoothDeviceAddress ( DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_bd_addr );
}

LMPSupportedFeatures DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_PDU::get_features(void) const
{
    uint16 grr_ccl[4];
    get_uint16Array ( grr_ccl , DM_HCI_READ_REMOTE_SUPP_FEATURES_CFM_T_features , 4 );
    uint8 lmpsf[8] = { uint8(grr_ccl[0]) , grr_ccl[0] >> 8 , uint8(grr_ccl[1]) , grr_ccl[1] >> 8 , uint8(grr_ccl[2]) , grr_ccl[2] >> 8 , uint8(grr_ccl[3]) , grr_ccl[3] >> 8 };
    return LMPSupportedFeatures(lmpsf);
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU::DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU()
: DM_PDU ( DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM , DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_pduSize )
{
}

DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU::DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU::DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_phandle );
}

uint8 DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU::get_status(void) const
{
    return get_uint8 ( DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_status );
}

LMPSupportedFeatures DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_PDU::get_lmp_supp_features(void) const
{
    uint8 lmpsf[8];
    get_uint8Array ( lmpsf , DM_HCI_READ_LOCAL_SUPP_FEATURES_CFM_T_lmp_supp_features , 8 );
    return LMPSupportedFeatures(lmpsf);
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_READ_LOCAL_NAME_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_READ_LOCAL_NAME_CFM_T_PDU::DM_HCI_READ_LOCAL_NAME_CFM_T_PDU()
: DM_PDU ( DM_HCI_READ_LOCAL_NAME_CFM , DM_HCI_READ_LOCAL_NAME_CFM_T_pduSize )
{
}

DM_HCI_READ_LOCAL_NAME_CFM_T_PDU::DM_HCI_READ_LOCAL_NAME_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_READ_LOCAL_NAME_CFM_T_PDU::DM_HCI_READ_LOCAL_NAME_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_READ_LOCAL_NAME_CFM_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_HCI_READ_LOCAL_NAME_CFM_T_phandle );
}

uint8 DM_HCI_READ_LOCAL_NAME_CFM_T_PDU::get_status(void) const
{
    return get_uint8 ( DM_HCI_READ_LOCAL_NAME_CFM_T_status );
}

BluetoothName DM_HCI_READ_LOCAL_NAME_CFM_T_PDU::get_name_part(void) const
{
    return BluetoothName ( get_uint8ArrayPtr ( DM_HCI_READ_LOCAL_NAME_CFM_T_pduSize ) ,
                           size() - DM_HCI_READ_LOCAL_NAME_CFM_T_pduSize );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_PIN_REQUEST_RSP_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_SM_PIN_REQUEST_RSP_T_PDU::DM_SM_PIN_REQUEST_RSP_T_PDU()
: DM_PDU ( DM_SM_PIN_REQUEST_RSP , DM_SM_PIN_REQUEST_RSP_T_pduSize )
{
}

DM_SM_PIN_REQUEST_RSP_T_PDU::DM_SM_PIN_REQUEST_RSP_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SM_PIN_REQUEST_RSP_T_PDU::DM_SM_PIN_REQUEST_RSP_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

BluetoothDeviceAddressWithType DM_SM_PIN_REQUEST_RSP_T_PDU::get_addrt(void) const
{
    return get_BluetoothDeviceAddressWithType ( DM_SM_PIN_REQUEST_RSP_T_addrt );
}

void DM_SM_PIN_REQUEST_RSP_T_PDU::set_addrt(BluetoothDeviceAddressWithType value)
{
    set_BluetoothDeviceAddressWithType ( DM_SM_PIN_REQUEST_RSP_T_addrt , value );
}

uint8 DM_SM_PIN_REQUEST_RSP_T_PDU::get_pin_length(void) const
{
    return get_uint8 ( DM_SM_PIN_REQUEST_RSP_T_pin_length );
}

void DM_SM_PIN_REQUEST_RSP_T_PDU::set_pin_length(uint8 value)
{
    set_uint8 ( DM_SM_PIN_REQUEST_RSP_T_pin_length , value );
}

PinCode DM_SM_PIN_REQUEST_RSP_T_PDU::get_pin(void) const
{
    uint8 len = get_pin_length();
    uint8 pin[16];
    get_uint8Array( pin , DM_SM_PIN_REQUEST_RSP_T_pin , len );
    return PinCode ( pin , len ) ;
}

void DM_SM_PIN_REQUEST_RSP_T_PDU::set_pin( const PinCode& value)
{
    set_uint8Array ( value.get_data() , DM_SM_PIN_REQUEST_RSP_T_pin , value.get_length() );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU::DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU()
: DM_PDU ( DM_HCI_READ_CURRENT_IAC_LAP_CFM , DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_pduSize )
{
}

DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU::DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU::DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_phandle );
}

uint8 DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU::get_status(void) const
{
    return get_uint8 ( DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_status );
}

uint8 DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU::get_num_current_iac(void) const
{
    return get_uint8 ( DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_num_current_iac );
}

uint24 DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_PDU::get_iac_lap( uint8 index ) const
{
    return get_uint24 ( DM_HCI_READ_CURRENT_IAC_LAP_CFM_T_pduSize + ( index * 4 ) );
}

DM_HCI_INQUIRY_RESULT_IND_T_PDU::DM_HCI_INQUIRY_RESULT_IND_T_PDU()
: DM_PDU ( DM_HCI_INQUIRY_RESULT_IND , DM_HCI_INQUIRY_RESULT_IND_T_pduSize )
{
}

DM_HCI_INQUIRY_RESULT_IND_T_PDU::DM_HCI_INQUIRY_RESULT_IND_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_INQUIRY_RESULT_IND_T_PDU::DM_HCI_INQUIRY_RESULT_IND_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_INQUIRY_RESULT_IND_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_HCI_INQUIRY_RESULT_IND_T_phandle );
}

uint8 DM_HCI_INQUIRY_RESULT_IND_T_PDU::get_num_responses(void) const
{
    return get_uint8 ( DM_HCI_INQUIRY_RESULT_IND_T_num_responses );
}

InquiryResult DM_HCI_INQUIRY_RESULT_IND_T_PDU::get_result( uint8 index ) const
{
    uint32 offset = DM_HCI_INQUIRY_RESULT_IND_T_pduSize + ( index * 20 );
    uint8 block[13];
    InquiryResult r (block);
    r.set_bd_addr(get_BluetoothDeviceAddress ( offset ));
    r.set_page_scan_repetition_mode( get_uint8 ( offset + 8 ) );
    r.set_page_scan_period_mode ( get_uint8 ( offset + 10 ) );
    r.set_page_scan_mode( get_uint8 ( offset + 12 ) );
    r.set_class_of_device ( get_uint24 ( offset + 14 ) );
    r.set_clock_offset ( get_uint16 ( offset + 18 ) );
    return r;
}

///////////////////////////////////////////////////////////////////////////////
//
//  DM_HCI_CHANGE_LOCAL_NAME
//
///////////////////////////////////////////////////////////////////////////////
enum {
    OFFSET_START(DM_HCI_CHANGE_LOCAL_NAME_REQ_T)
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_op_code),
    OFFSET_uint8(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_cmd_parameter_length),
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_ptr0),
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_ptr1),
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_ptr2),
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_ptr3),
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_ptr4),
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_ptr5),
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_ptr6),
    OFFSET_uint16(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_ptr7),
    DM_HCI_CHANGE_LOCAL_NAME_REQ_T_pduSize
} ;

DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU()
: DM_PDU(DM_HCI_CHANGE_LOCAL_NAME_REQ,DM_HCI_CHANGE_LOCAL_NAME_REQ_T_pduSize)
{
}

DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU( const PDU& from )
: DM_PDU(from)
{
}

DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU( const uint8 * data , uint32 size )
: DM_PDU(data,size)
{
}

BluetoothName DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::get_name_part(void) const
{
    return BluetoothName (PDU::get_uint8ArrayPtr(DM_HCI_CHANGE_LOCAL_NAME_REQ_T_pduSize), size() - DM_HCI_CHANGE_LOCAL_NAME_REQ_T_pduSize ) ;
}

void DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::set_name_part(BluetoothName name)
{
    uint8 length = name.get_length();
    if ( length < 248 )
        length++; // add the null zero
    else
        length = 248;
    resize ( DM_HCI_CHANGE_LOCAL_NAME_REQ_T_pduSize + length );
    PDU::set_uint8Array ( name.get_str() , DM_HCI_CHANGE_LOCAL_NAME_REQ_T_pduSize , length );
}


///////////////////////////////////////////////////////////////////////////////
//
//  op_code and cmd_parameter_length get and set methods for classes
//  from gen_xtradm.h
//
///////////////////////////////////////////////////////////////////////////////

enum
{
    op_code_posn = 0,
    cmd_parameter_length_posn = 2,
    DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_op_code = op_code_posn,
    DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_cmd_parameter_length = cmd_parameter_length_posn,
    DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_op_code = op_code_posn,
    DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_cmd_parameter_length = cmd_parameter_length_posn,
    DM_HCI_SET_EVENT_MASK_REQ_T_op_code = op_code_posn,
    DM_HCI_SET_EVENT_MASK_REQ_T_cmd_parameter_length = cmd_parameter_length_posn,
    DM_HCI_SET_EVENT_FILTER_REQ_T_op_code = op_code_posn,
    DM_HCI_SET_EVENT_FILTER_REQ_T_cmd_parameter_length = cmd_parameter_length_posn
};

uint16 DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_CHANGE_LOCAL_NAME_REQ_T_op_code );
}

void DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_CHANGE_LOCAL_NAME_REQ_T_op_code , value );
}

uint8 DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_CHANGE_LOCAL_NAME_REQ_T_cmd_parameter_length );
}

void DM_HCI_CHANGE_LOCAL_NAME_REQ_T_PDU::set_cmd_parameter_length()
{
    set_uint8 ( DM_HCI_CHANGE_LOCAL_NAME_REQ_T_cmd_parameter_length , 0 );
}

uint16 DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_op_code );
}

void DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_op_code , value );
}

uint8 DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_cmd_parameter_length );
}

void DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_PDU::set_cmd_parameter_length( )
{
    set_uint8 ( DM_HCI_WRITE_CURRENT_IAC_LAP_REQ_T_cmd_parameter_length , 0 );
}

uint16 DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_op_code );
}

void DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_op_code , value );
}

uint8 DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_cmd_parameter_length );
}

void DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_PDU::set_cmd_parameter_length()
{
    set_uint8 ( DM_HCI_WRITE_STORED_LINK_KEY_REQ_T_cmd_parameter_length , 0 );
}

uint16 DM_HCI_SET_EVENT_MASK_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_SET_EVENT_MASK_REQ_T_op_code );
}

void DM_HCI_SET_EVENT_MASK_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_SET_EVENT_MASK_REQ_T_op_code , value );
}

uint8 DM_HCI_SET_EVENT_MASK_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_SET_EVENT_MASK_REQ_T_cmd_parameter_length );
}

void DM_HCI_SET_EVENT_MASK_REQ_T_PDU::set_cmd_parameter_length()
{
    set_uint8 ( DM_HCI_SET_EVENT_MASK_REQ_T_cmd_parameter_length , 0 );
}

uint16 DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_op_code );
}

void DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_op_code , value );
}

uint8 DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_length );
}

void DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_PDU::set_cmd_parameter_length()
{
    set_uint8 ( DM_HCI_HOST_NUM_COMPLETED_PACKETS_REQ_T_length , 0 );
}

uint16 DM_HCI_SET_EVENT_FILTER_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_SET_EVENT_FILTER_REQ_T_op_code );
}

void DM_HCI_SET_EVENT_FILTER_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_SET_EVENT_FILTER_REQ_T_op_code , value );
}

uint8 DM_HCI_SET_EVENT_FILTER_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_SET_EVENT_FILTER_REQ_T_cmd_parameter_length );
}

void DM_HCI_SET_EVENT_FILTER_REQ_T_PDU::set_cmd_parameter_length()
{
    set_uint8 ( DM_HCI_SET_EVENT_FILTER_REQ_T_cmd_parameter_length , 0 );
}


enum {
	OFFSET_START(DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T)
	OFFSET_uint16(DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_type),
	OFFSET_uint16(DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_status),
	OFFSET_BluetoothDeviceAddress(DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_bd_addr),
	OFFSET_uint8(DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_mode),
	OFFSET_AFHmap(DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_map),
	DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_pduSize
} ;



///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU::DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU()
: DM_PDU ( DM_HCI_READ_AFH_CHANNEL_MAP_CFM , DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_pduSize )
{
}

DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU::DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU::DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_phandle );
}

uint8 DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_status );
}

BluetoothDeviceAddress DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_bd_addr );
}

uint8 DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU::get_mode() const
{
    return get_uint8 ( DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_mode );
}

AFHmap DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_PDU::get_map() const
{
    uint8 m[10];
    get_uint8Array (m , DM_HCI_READ_AFH_CHANNEL_MAP_CFM_T_map , 10 );
    return AFHmap(m);
}

enum {
	OFFSET_START(DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T)
	OFFSET_uint16(DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_op_code),
	OFFSET_uint8(DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_cmd_parameter_length),
	OFFSET_AFHmap(DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_map),
	DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_pduSize
} ;


///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU()
: DM_PDU ( DM_HCI_SET_AFH_CHANNEL_CLASS_REQ , DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_pduSize )
{
}

DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_op_code );
}

void DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_op_code , value );
}

uint8 DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_cmd_parameter_length );
}

void DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::set_cmd_parameter_length( uint8 value )
{
    set_uint8 ( DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_cmd_parameter_length , value );
}

AFHmap DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::get_map() const
{
    uint8 m[10];
    get_uint8Array (m , DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_map , 10 );
    return AFHmap(m);
}

void DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_PDU::set_map( AFHmap value )
{
    set_uint8Array (value.get_ptr() , DM_HCI_SET_AFH_CHANNEL_CLASS_REQ_T_map , 10 );
}


enum {
	OFFSET_START(DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T)
	OFFSET_uint16(DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_type),
	OFFSET_uint16(DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_status),
	OFFSET_uint8(DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_page_num),
	OFFSET_uint8(DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_max_page_num),
	OFFSET_LMPExtFeatures(DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_lmp_ext_features),
	DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_pduSize
} ;

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU::DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU()
: DM_PDU ( DM_HCI_READ_LOCAL_EXT_FEATURES_CFM , DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_pduSize )
{
}

DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU::DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU::DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_phandle );
}

uint8 DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_status );
}

uint8 DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU::get_page_num() const
{
    return get_uint8 ( DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_page_num );
}

uint8 DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU::get_max_page_num() const
{
    return get_uint8 ( DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_max_page_num );
}

LMPExtFeatures DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_PDU::get_lmp_ext_features() const
{
    uint8 m[8];
    get_uint8Array (m , DM_HCI_READ_LOCAL_EXT_FEATURES_CFM_T_lmp_ext_features , sizeof(m) );
    return LMPExtFeatures(m);

}

enum {
	OFFSET_START(DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T)
	OFFSET_uint16(DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_type),
	OFFSET_uint16(DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_phandle),
	OFFSET_uint8(DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_status),
	OFFSET_BluetoothDeviceAddress(DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_bd_addr),
	OFFSET_uint8(DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_page_num),
	OFFSET_uint8(DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_max_page_num),
	OFFSET_LMPExtFeatures(DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_lmp_ext_features),
	DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_pduSize
} ;


///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU()
: DM_PDU ( DM_HCI_READ_REMOTE_EXT_FEATURES_CFM , DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_pduSize )
{
}

DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}
uint16 DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_phandle );
}

uint8 DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_status );
}

BluetoothDeviceAddress DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_bd_addr );
}

uint8 DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::get_page_num() const
{
    return get_uint8 ( DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_page_num );
}

uint8 DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::get_max_page_num() const
{
    return get_uint8 ( DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_max_page_num );
}

LMPExtFeatures DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_PDU::get_lmp_ext_features() const
{
    uint8 m[8];
    get_uint8Array (m , DM_HCI_READ_REMOTE_EXT_FEATURES_CFM_T_lmp_ext_features , sizeof(m) );
    return LMPExtFeatures(m);

}


///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_INQUIRY_RESULT_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU::DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU()
: DM_PDU ( DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND , DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_pduSize )
{
}

DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU::DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU::DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU::get_phandle(void) const
{
    return get_uint16 ( DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_phandle );
}

uint8 DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU::get_num_responses(void) const
{
    return get_uint8 ( DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_num_responses );
}

InquiryResultWithRSSI DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_PDU::get_result( uint8 index ) const
{
    uint32 offset = DM_HCI_INQUIRY_RESULT_WITH_RSSI_IND_T_pduSize + ( index * 20 );
    uint8 block[13];
    InquiryResultWithRSSI r (block);
    r.set_bd_addr(get_BluetoothDeviceAddress ( offset ));
    r.set_page_scan_repetition_mode( get_uint8 ( offset + 8 ) );
    r.set_page_scan_period_mode ( get_uint8 ( offset + 10 ) );
    r.set_class_of_device ( get_uint24 ( offset + 12 ) );
    r.set_clock_offset ( get_uint16 ( offset + 16 ) );
    r.set_rssi ( get_uint8 ( offset + 18 ) );
    return r;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_LP_WRITE_POWERSTATES_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_LP_WRITE_POWERSTATES_REQ_T_PDU::DM_LP_WRITE_POWERSTATES_REQ_T_PDU()
: DM_PDU ( DM_LP_WRITE_POWERSTATES_REQ , DM_LP_WRITE_POWERSTATES_REQ_T_pduSize )
{
}

DM_LP_WRITE_POWERSTATES_REQ_T_PDU::DM_LP_WRITE_POWERSTATES_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_LP_WRITE_POWERSTATES_REQ_T_PDU::DM_LP_WRITE_POWERSTATES_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

BluetoothDeviceAddress DM_LP_WRITE_POWERSTATES_REQ_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( DM_LP_WRITE_POWERSTATES_REQ_T_bd_addr );
}

void DM_LP_WRITE_POWERSTATES_REQ_T_PDU::set_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( DM_LP_WRITE_POWERSTATES_REQ_T_bd_addr , value );
}

LP_POWERSTATE_T DM_LP_WRITE_POWERSTATES_REQ_T_PDU::get_states( int index ) const
{
	/* size of DM_LP_WRITE_POWERSTATES_REQ_T on xap == 12 */
	LP_POWERSTATE_T val = {0,0,0,0,0,0};
	if ( index < get_num_states() )
	{
		val.mode = get_uint8 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + index * 12 );
		val.min_interval = get_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 2 + index * 12 );
		val.max_interval = get_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 4 + index * 12 );
		val.attempt = get_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 6 + index * 12 );
		val.timeout = get_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 8 + index * 12 );
		val.duration = get_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 10 + index * 12 );
	}
	return val;
}

void DM_LP_WRITE_POWERSTATES_REQ_T_PDU::set_states(const LP_POWERSTATE_T * states, int num_states)
{
	/* size of DM_LP_WRITE_POWERSTATES_REQ_T on xap == 12 */
	resize(DM_LP_WRITE_POWERSTATES_REQ_T_pduSize+12*num_states);
	for ( int index = 0 ; index != num_states ; ++index )
	{
		set_uint8 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + index * 12 , states[index].mode );
		set_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 2 + index * 12 , states[index].min_interval );
		set_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 4 + index * 12 , states[index].max_interval );
		set_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 6 + index * 12  , states[index].attempt );
		set_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 8 + index * 12 , states[index].timeout );
		set_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_pduSize + 10 + index * 12 , states[index].duration );
	}
	set_num_states(num_states);
}

uint16 DM_LP_WRITE_POWERSTATES_REQ_T_PDU::get_num_states() const
{
    return get_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_size_of_states );
}

void DM_LP_WRITE_POWERSTATES_REQ_T_PDU::set_num_states( uint16 value )
{
    set_uint16 ( DM_LP_WRITE_POWERSTATES_REQ_T_size_of_states , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU()
: DM_PDU ( DM_LP_WRITE_ROLESWITCH_POLICY_REQ, DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_pduSize )
{
}

DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_version() const
{
    return get_uint16 ( DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_version );
}

void DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::set_version( uint16 version )
{
    set_uint16 ( DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_version, version );
}

uint16 DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_length() const
{
    return get_uint16 ( DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_length );
}

void DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::set_length( uint16 length )
{
    set_uint16 ( DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_length, length );
}

DMRoleSwitchPolicyTable DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_rs_table(void) const
{
    DMRoleSwitchPolicyTable rs_table((uint16*)PDU::get_uint8ArrayPtr(DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_pduSize));
    return rs_table;
}

void DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::set_rs_table( DMRoleSwitchPolicyTable& new_rs_table )
{
    resize(DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_pduSize + 2*get_length());

    uint16* field = new_rs_table.get_rs_table();

    for (uint16 i = 0; i != get_length(); ++i)
        set_uint16 (DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_pduSize+2*i, field[i]);
}

uint8 DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_slaves(const uint8 index) const
{
    return get_rs_table().slaves(index);
}

uint8 DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_masters(const uint8 index) const
{
    return get_rs_table().masters(index);
}

uint8 DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_unsniffed_masters(const uint8 index) const
{
    return get_rs_table().unsniffed_masters(index);
}

uint8 DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_connections(const uint8 index) const
{
    return get_rs_table().connections(index);
}

bool DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_roleswitch_incoming(const uint8 index) const
{
    return get_rs_table().roleswitch_incoming(index);
}

bool DM_LP_WRITE_ROLESWITCH_POLICY_REQ_T_PDU::get_forbid_roleswitch_outgoing(const uint8 index) const
{
    return get_rs_table().forbid_roleswitch_outgoing(index);
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::
                        DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU()
: DM_PDU ( DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ,
                        DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_pduSize )
{
}

DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::
        DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::
                        DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU
                        ( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::
                                        get_op_code(void) const
{
    return get_uint16(DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_op_code);
}

void DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::
                                        set_op_code(uint16 op_code)
{
    set_uint16(DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_op_code, op_code);
}

uint8 DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::
                                        get_cmd_parameter_length(void) const
{
    return get_uint8(
        DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_cmd_parameter_length);
}

void DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::
                        set_cmd_parameter_length(uint8 cmd_parameter_length)
{
    set_uint8(
        DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_cmd_parameter_length,
        cmd_parameter_length);
}

void DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::set_fec_required
                                                        (uint8 fec_required)
{
    set_uint8 ( DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_fec_required,
                                                                fec_required);
}

uint8 DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::get_fec_required
                                                        (void) const
{
    return get_uint8 
            ( DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_fec_required);
}
    
void DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::set_eir_data_part
                                                        (EIRData eir_data_part)
{

    PDU::set_uint8Array ( eir_data_part.get_data() ,
        DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_pduSize , 
        eir_data_part.get_length() );
}

const EIRData DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_PDU::
                                                get_eir_data_part(void) const
{
    return EIRData ( PDU::get_uint8ArrayPtr
       ( DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_pduSize),
       size() - DM_HCI_WRITE_EXTENDED_INQUIRY_RESPONSE_DATA_REQ_T_pduSize ) ;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::
                                DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU()
: DM_PDU ( DM_HCI_EXTENDED_INQUIRY_RESULT_IND ,
                                DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_pduSize )
{
}

DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::
                    DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::
                                DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU
                                ( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::get_phandle(void) const
{
    return get_uint16 (DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_phandle);
}

uint8 DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::get_num_responses(void) const
{
    return get_uint8 (DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_num_responses );
}

BluetoothDeviceAddress
            DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::get_bd_addr(void) const
{
    return get_BluetoothDeviceAddress
                            ( DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_bd_addr );
}

uint8 DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::
                                        get_page_scan_rep_mode(void) const
{
    return get_uint8 
                ( DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_page_scan_rep_mode );
}

uint8 DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::
                                        get_page_scan_period_mode(void) const
{
    return get_uint8
                ( DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_page_scan_period_mode );
}

uint24 DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::get_dev_class(void) const
{
    return get_uint24 ( DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_dev_class );
}

uint16 DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::get_clock_offset(void) const
{
    return get_uint16 ( DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_clock_offset );
}

int8 DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::get_rssi(void) const
{
    return get_uint8 ( DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_rssi );
}

const EIRData DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_PDU::
                                                get_eir_data_part(void) const
{
    return EIRData ( get_uint8ArrayPtr (DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_pduSize), size() - DM_HCI_EXTENDED_INQUIRY_RESULT_IND_T_pduSize );
}


///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU::DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU()
: DM_PDU ( DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM , DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_pduSize )
{
}

DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU::DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU::DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU::get_phandle(void) const
{
    return get_uint16( DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_phandle );
}

uint8 DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU::get_status(void) const
{
    return get_uint8( DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_status );
}

uint8 DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU::get_fec_required(void) const
{
    return get_uint8( DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_fec_required );
}

EIRData DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_PDU::get_eir_data_part(void) const
{
    return EIRData ( get_uint8ArrayPtr (DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_pduSize), size() - DM_HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_CFM_T_pduSize );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU
//
/////////////////////////////////////////////////////////////////////////////

DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU()
: DM_PDU ( DM_SM_IO_CAPABILITY_REQUEST_RSP , DM_SM_IO_CAPABILITY_REQUEST_RSP_T_pduSize )
{
}

DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}


BluetoothDeviceAddressWithType DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::get_addrt(void) const
{
    return get_BluetoothDeviceAddressWithType(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_addrt); 
}    
    
void DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::set_addrt(BluetoothDeviceAddressWithType addrt)
{
    set_BluetoothDeviceAddressWithType(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_addrt, addrt);
}

uint8 DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::get_io_capability(void) const
{
    return get_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_io_capability);
}

void DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::set_io_capability(uint8 io_capability)
{
    set_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_io_capability, io_capability);
}

uint8 DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::get_authentication_requirements(void) const
{
    return get_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_authentication_requirements);
}

void DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::set_authentication_requirements(uint8 authentication_requirements)
{
    set_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_authentication_requirements, authentication_requirements);
}

uint8 DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::get_oob_data_present(void) const
{
    return get_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_oob_data_present);
}

void DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::set_oob_data_present(uint8 oob_data_present)
{
    set_uint8(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_oob_data_present, oob_data_present);
}

SPhashC DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::get_oob_hash_c() const
{
    if (get_oob_data_present())
        return SPhashC(get_uint8ArrayPtr(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_pduSize));

    return SPhashC(0);
}

void DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::set_oob_hash_c( const SPhashC& oob_hash_c)
{
    if (oob_hash_c.get_data() != 0)
        set_final_uint8Ptr(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_pduSize,
                           DM_SM_IO_CAPABILITY_REQUEST_RSP_T_pduSize,
                           oob_hash_c.get_data(), SIZE_OOB_DATA);
}

SPrandomizerR DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::get_oob_rand_r() const
{
    if (get_oob_data_present())
        return SPrandomizerR(get_uint8ArrayPtr(
                    DM_SM_IO_CAPABILITY_REQUEST_RSP_T_pduSize + SIZE_OOB_DATA));

    return SPrandomizerR(0);
}

void DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::set_oob_rand_r( const SPrandomizerR& oob_rand_r) 
{
    if (oob_rand_r.get_data() != 0)
        set_final_uint8Ptr(DM_SM_IO_CAPABILITY_REQUEST_RSP_T_pduSize + SIZE_OOB_DATA,
                           DM_SM_IO_CAPABILITY_REQUEST_RSP_T_pduSize + SIZE_OOB_DATA,
                           oob_rand_r.get_data(), SIZE_OOB_DATA );
}

uint16 DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::get_key_distribution() const
{
    return get_uint16 ( DM_SM_IO_CAPABILITY_REQUEST_RSP_T_key_distribution );
}

void DM_SM_IO_CAPABILITY_REQUEST_RSP_T_PDU::set_key_distribution( uint16 value )
{
    set_uint16 ( DM_SM_IO_CAPABILITY_REQUEST_RSP_T_key_distribution , value );
}


/////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU
//
/////////////////////////////////////////////////////////////////////////////

DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU()
    : DM_PDU ( DM_SM_READ_LOCAL_OOB_DATA_CFM, DM_SM_READ_LOCAL_OOB_DATA_CFM_T_pduSize )
{
}

DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU
                                                            ( const PDU& from )
    : DM_PDU ( from )
{
}

DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU
                                        ( const uint8 * buffer, uint32 len )
    : DM_PDU ( buffer , len )
{
}

uint16 DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::get_phandle(void) const
{
    return get_uint16(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_phandle);
}

void DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::set_phandle(uint16 phandle)
{
    set_uint16(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_phandle, phandle);
}

uint8 DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::get_status(void) const
{
    return get_uint8(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_status);
}

void DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::set_status(uint8 status)
{
    set_uint8(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_status, status);
}

SPhashC DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::get_oob_hash_c() const
{
    return SPhashC(get_uint8ArrayPtr(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_pduSize));
}

void DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::set_oob_hash_c(const SPhashC& oob_hash_c)
{
    set_final_uint8Ptr(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_pduSize,
                       DM_SM_READ_LOCAL_OOB_DATA_CFM_T_pduSize,
                       oob_hash_c.get_data(), SIZE_OOB_DATA);
}

SPrandomizerR DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::get_oob_rand_r() const
{
    return SPrandomizerR(get_uint8ArrayPtr(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_pduSize
                + SIZE_OOB_DATA));
}

void DM_SM_READ_LOCAL_OOB_DATA_CFM_T_PDU::set_oob_rand_r
                                            ( const SPrandomizerR& oob_rand_r)
{
    set_final_uint8Ptr(DM_SM_READ_LOCAL_OOB_DATA_CFM_T_pduSize + SIZE_OOB_DATA,
                       DM_SM_READ_LOCAL_OOB_DATA_CFM_T_pduSize + SIZE_OOB_DATA,
                       oob_rand_r.get_data(), SIZE_OOB_DATA);
}

/////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_LINK_KEY_REQUEST_RSP_T_PDU
//
/////////////////////////////////////////////////////////////////////////////

DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::DM_SM_LINK_KEY_REQUEST_RSP_T_PDU()
    : DM_PDU ( DM_SM_LINK_KEY_REQUEST_RSP,
                                    DM_SM_LINK_KEY_REQUEST_RSP_T_pduSize )
{
    key_data = 0;
}

DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::DM_SM_LINK_KEY_REQUEST_RSP_T_PDU
                                                            ( const PDU& from )
    : DM_PDU ( from )
{
    if (get_key_type() == DM_SM_LINK_KEY_NONE)
        key_data = 0;
    else
        key_data = DM_SM_LINK_KEY_REQUEST_RSP_T_pduSize;
}

DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::DM_SM_LINK_KEY_REQUEST_RSP_T_PDU
                                        ( const uint8 * buffer, uint32 len )
    : DM_PDU ( buffer , len )
{
    if (get_key_type() == DM_SM_LINK_KEY_NONE)
        key_data = 0;
    else
        key_data = DM_SM_LINK_KEY_REQUEST_RSP_T_pduSize;
}

BluetoothDeviceAddress DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::get_bd_addr(void) const
{
    return get_BluetoothDeviceAddress(DM_SM_LINK_KEY_REQUEST_RSP_T_bd_addr);
}

void DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::set_bd_addr(BluetoothDeviceAddress bd_addr)
{
    set_BluetoothDeviceAddress(DM_SM_LINK_KEY_REQUEST_RSP_T_bd_addr, bd_addr);
}

uint16 DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::get_key_type(void) const
{
    return get_uint16(DM_SM_LINK_KEY_REQUEST_RSP_T_key_type);
}

void DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::set_key_type(uint16 key_type)
{
    set_uint16(DM_SM_LINK_KEY_REQUEST_RSP_T_key_type, key_type);
}

LinkKey DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::get_key(void) const
{
    if (key_data != 0)
        return LinkKey(get_uint8ArrayPtr(key_data));

    return LinkKey(0);
}

void DM_SM_LINK_KEY_REQUEST_RSP_T_PDU::set_key(LinkKey key)
{
    if (key.get_data())
    {
        key_data = DM_SM_LINK_KEY_REQUEST_RSP_T_pduSize;
        set_final_uint8Ptr(key_data, key_data, key.get_data(), SIZE_LINK_KEY);
    }
}

/////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU
//
/////////////////////////////////////////////////////////////////////////////

DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU()
    : DM_PDU(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND, DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_pduSize)
{
}

DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU( const PDU& from )
    : DM_PDU ( from )
{
}

DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU( const uint8 * buffer, uint32 len )
    : DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::get_phandle(void) const
{
    return get_uint16(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_phandle);
}

void DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::set_phandle(uint16 phandle)
{
    set_uint16(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_phandle, phandle);
}

BluetoothDeviceAddress DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::get_bd_addr(void) const
{
    return get_BluetoothDeviceAddress(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_bd_addr);
}

void DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::set_bd_addr(BluetoothDeviceAddress bd_addr)
{
    set_BluetoothDeviceAddress(DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_bd_addr, bd_addr);
}

LMPSupportedFeatures DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::get_host_features(void) const
{
    uint8 i, j, k;
    uint16 a[4];
    uint8 b[8];
    get_uint16Array(a, DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_host_features, 4) ;
    /* Convert 4 x uint16 to 8 x uint8 */
    for (i = 0; i < 8; ++i)
    {
        j = i >> 1;
        k = (i & 1) << 3;
        b[i] = 0xFF & (a[j] >> k);
    }

    LMPSupportedFeatures host_features(b);

    return host_features;
}

void DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_PDU::set_host_features(LMPSupportedFeatures host_features)
{
    uint16 a[4] = {0, 0, 0, 0};
    const uint8 *b = host_features.get_data();
    uint8 i, j, k;

    for (i = 0; i < 8; ++i)
    {
        j = i >> 1;
        k = (i & 1) << 3;
        a[j] |= b[i] << k;
    }

    set_uint16Array(a, DM_HCI_REM_HOST_SUPPORTED_FEATURES_IND_T_host_features, 4);
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SYNC_CONNECT_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_SYNC_CONNECT_REQ_T_PDU::DM_SYNC_CONNECT_REQ_T_PDU()
: DM_PDU ( DM_SYNC_CONNECT_REQ , DM_SYNC_CONNECT_REQ_T_pduSize )
{
}

DM_SYNC_CONNECT_REQ_T_PDU::DM_SYNC_CONNECT_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SYNC_CONNECT_REQ_T_PDU::DM_SYNC_CONNECT_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_SYNC_CONNECT_REQ_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_SYNC_CONNECT_REQ_T_phandle );
}

void DM_SYNC_CONNECT_REQ_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_SYNC_CONNECT_REQ_T_phandle , value );
}

uint16 DM_SYNC_CONNECT_REQ_T_PDU::get_pv_cbarg() const
{
    return get_uint16 ( DM_SYNC_CONNECT_REQ_T_pv_cbarg );
}

void DM_SYNC_CONNECT_REQ_T_PDU::set_pv_cbarg( uint16 value )
{
    set_uint16 ( DM_SYNC_CONNECT_REQ_T_pv_cbarg , value );
}

BluetoothDeviceAddress DM_SYNC_CONNECT_REQ_T_PDU::get_bd_addr() const
{
    return get_BluetoothDeviceAddress ( DM_SYNC_CONNECT_REQ_T_bd_addr );
}

void DM_SYNC_CONNECT_REQ_T_PDU::set_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( DM_SYNC_CONNECT_REQ_T_bd_addr , value );
}

uint16 DM_SYNC_CONNECT_REQ_T_PDU::get_length() const
{
    return get_uint16 ( DM_SYNC_CONNECT_REQ_T_length );
}

void DM_SYNC_CONNECT_REQ_T_PDU::set_length( uint16 value )
{
    set_uint16 ( DM_SYNC_CONNECT_REQ_T_length , value );
}

const DMSyncConfig DM_SYNC_CONNECT_REQ_T_PDU::get_config(void) const
{
    return DMSyncConfig(get_uint8ArrayPtr(DM_SYNC_CONNECT_REQ_T_pduSize), 0);
}

void DM_SYNC_CONNECT_REQ_T_PDU::set_config(const DMSyncConfig value)
{
    PDU::set_uint8Array ( value.get_data(),
                     DM_SYNC_CONNECT_REQ_T_pduSize,
                     value.get_data_size());
}


///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SYNC_RENEGOTIATE_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_SYNC_RENEGOTIATE_REQ_T_PDU::DM_SYNC_RENEGOTIATE_REQ_T_PDU()
: DM_PDU ( DM_SYNC_RENEGOTIATE_REQ , DM_SYNC_RENEGOTIATE_REQ_T_pduSize )
{
}

DM_SYNC_RENEGOTIATE_REQ_T_PDU::DM_SYNC_RENEGOTIATE_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SYNC_RENEGOTIATE_REQ_T_PDU::DM_SYNC_RENEGOTIATE_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_SYNC_RENEGOTIATE_REQ_T_PDU::get_handle() const
{
    return get_uint16 ( DM_SYNC_RENEGOTIATE_REQ_T_handle );
}

void DM_SYNC_RENEGOTIATE_REQ_T_PDU::set_handle( uint16 value )
{
    set_uint16 ( DM_SYNC_RENEGOTIATE_REQ_T_handle , value );
}

uint16 DM_SYNC_RENEGOTIATE_REQ_T_PDU::get_length() const
{
    return get_uint16 ( DM_SYNC_RENEGOTIATE_REQ_T_length );
}

void DM_SYNC_RENEGOTIATE_REQ_T_PDU::set_length( uint16 value )
{
    set_uint16 ( DM_SYNC_RENEGOTIATE_REQ_T_length , value );
}

const DMSyncConfig DM_SYNC_RENEGOTIATE_REQ_T_PDU::get_config(void) const
{
    return DMSyncConfig(get_uint8ArrayPtr(DM_SYNC_RENEGOTIATE_REQ_T_pduSize), 0);
}

void DM_SYNC_RENEGOTIATE_REQ_T_PDU::set_config(const DMSyncConfig value)
{
    PDU::set_uint8Array ( value.get_data(),
                     DM_SYNC_RENEGOTIATE_REQ_T_pduSize,
                     value.get_data_size());
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_BAD_MESSAGE_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_BAD_MESSAGE_IND_T_PDU::DM_BAD_MESSAGE_IND_T_PDU()
    : DM_PDU ( DM_BAD_MESSAGE_IND , DM_BAD_MESSAGE_IND_T_pduSize )
{
}

DM_BAD_MESSAGE_IND_T_PDU::DM_BAD_MESSAGE_IND_T_PDU( const PDU& from )
    : DM_PDU ( from )
{
}

DM_BAD_MESSAGE_IND_T_PDU::DM_BAD_MESSAGE_IND_T_PDU( const uint8 * buffer , uint32 len )
    : DM_PDU ( buffer , len )
{
}

uint16 DM_BAD_MESSAGE_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_BAD_MESSAGE_IND_T_phandle );
}

void DM_BAD_MESSAGE_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_BAD_MESSAGE_IND_T_phandle , value );
}

uint16 DM_BAD_MESSAGE_IND_T_PDU::get_reason() const
{
    return get_uint16 ( DM_BAD_MESSAGE_IND_T_reason );
}

void DM_BAD_MESSAGE_IND_T_PDU::set_reason( uint16 value )
{
    set_uint16 ( DM_BAD_MESSAGE_IND_T_reason , value );
}

uint8 DM_BAD_MESSAGE_IND_T_PDU::get_protocol() const
{
    return get_uint8 ( DM_BAD_MESSAGE_IND_T_protocol );
}

void DM_BAD_MESSAGE_IND_T_PDU::set_protocol( uint8 value )
{
    set_uint8 ( DM_BAD_MESSAGE_IND_T_protocol , value );
}

uint16 DM_BAD_MESSAGE_IND_T_PDU::get_request_type() const
{
    return get_uint16 ( DM_BAD_MESSAGE_IND_T_request_type );
}

void DM_BAD_MESSAGE_IND_T_PDU::set_request_type( uint16 value )
{
    set_uint16 ( DM_BAD_MESSAGE_IND_T_request_type , value );
}

uint16 DM_BAD_MESSAGE_IND_T_PDU::get_message_length() const
{
    return get_uint16 ( DM_BAD_MESSAGE_IND_T_message_length );
}

uint16 *DM_BAD_MESSAGE_IND_T_PDU::get_message() const
{
    return get_uint16ArrayPtr( DM_BAD_MESSAGE_IND_T_pduSize);
}

void DM_BAD_MESSAGE_IND_T_PDU::set_message( uint16 *value, uint16 length )
{
    set_uint16 ( DM_BAD_MESSAGE_IND_T_message_length, length );
    PDU::set_uint16Array ( value, DM_BAD_MESSAGE_IND_T_pduSize, length );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU()
: DM_PDU ( DM_HCI_ULP_SET_ADVERTISING_DATA_REQ , DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_pduSize )
{
}

DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_op_code );
}

void DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_op_code , value );
}

uint8 DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_cmd_parameter_length );
}

void DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::set_cmd_parameter_length( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_cmd_parameter_length , value );
}

uint8 DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::get_advertising_data_len() const
{
    return get_uint8 ( DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_advertising_data_len );
}

void DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::set_advertising_data_len( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_advertising_data_len , value );
}

void DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::get_advertising_data(uint8 *value) const
{
    (void)get_uint8Array(value, DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_advertising_data, get_advertising_data_len());
}

void DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_PDU::set_advertising_data(uint8_t *value )
{
    set_uint8Array(value,
                   DM_HCI_ULP_SET_ADVERTISING_DATA_REQ_T_advertising_data,
                   31);
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU::DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU()
: DM_PDU ( DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM , DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_pduSize )
{
}

DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU::DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU::DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_phandle );
}

void DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_phandle , value );
}

uint8 DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_status );
}

void DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU::set_status( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_status , value );
}

ULPSupportedFeatures DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_PDU::get_feature_set() const
{
    return ULPSupportedFeatures(get_uint8ArrayPtr(
                DM_HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_CFM_T_feature_set));
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU()
: DM_PDU ( DM_HCI_ULP_ADVERTISING_REPORT_IND , DM_HCI_ULP_ADVERTISING_REPORT_IND_T_pduSize )
{
}

DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_phandle );
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_phandle , value );
}

uint8 DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::get_num_reports() const
{
    return get_uint8 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_num_reports );
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::set_num_reports( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_num_reports , value );
}

uint8 DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::get_event_type() const
{
    return get_uint8 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_event_type );
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::set_event_type( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_event_type , value );
}

BluetoothDeviceAddressWithType DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::get_current_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_current_addrt );
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::set_current_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_current_addrt , value );
}

BluetoothDeviceAddressWithType DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::get_permanent_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_permanent_addrt );
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::set_permanent_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_permanent_addrt , value );
}

uint8 DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::get_length_data() const
{
    return get_uint8 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_length_data );
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::set_length_data( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_length_data , value );
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::get_data(uint8 *value) const
{
    memcpy(value,
           get_uint8ArrayPtr(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_pduSize),
           get_length_data()*sizeof(uint8));
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::set_data( uint8 *value )
{
    set_final_uint8Ptr(DM_HCI_ULP_ADVERTISING_REPORT_IND_T_pduSize,
                       DM_HCI_ULP_ADVERTISING_REPORT_IND_T_pduSize,
                       value,
                       get_length_data());
}

uint8 DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::get_rssi() const
{
    return get_uint8 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_rssi );
}

void DM_HCI_ULP_ADVERTISING_REPORT_IND_T_PDU::set_rssi( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_ADVERTISING_REPORT_IND_T_rssi , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU::DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU()
: DM_PDU ( DM_HCI_ULP_READ_SUPPORTED_STATES_CFM , DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_pduSize )
{
}

DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU::DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU::DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_phandle );
}

void DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_phandle , value );
}

uint8 DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_status );
}

void DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU::set_status( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_status , value );
}

ULPSupportedStates DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_PDU::get_supported_states() const
{
    return ULPSupportedStates( get_uint8ArrayPtr (
                DM_HCI_ULP_READ_SUPPORTED_STATES_CFM_T_supported_states ) );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU()
: DM_PDU ( DM_HCI_ULP_READ_CHANNEL_MAP_CFM , DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_pduSize )
{
}

DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_phandle );
}

void DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_phandle , value );
}

uint8 DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_status );
}

void DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::set_status( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_status , value );
}

BluetoothDeviceAddressWithType DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::get_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_addrt );
}

void DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::set_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_addrt , value );
}

ULPChannelMap DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_PDU::get_ulp_channel_map() const
{
    return ULPChannelMap ( get_uint8ArrayPtr ( DM_HCI_ULP_READ_CHANNEL_MAP_CFM_T_ulp_channel_map ) );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU()
: DM_PDU ( DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM , DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_pduSize )
{
}

DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_phandle );
}

void DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_phandle , value );
}

uint8 DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_status );
}

void DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::set_status( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_status , value );
}

BluetoothDeviceAddressWithType DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::get_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_addrt );
}

void DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::set_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_addrt , value );
}

ULPSupportedFeatures DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_PDU::get_feature_set() const
{
    return ULPSupportedFeatures(get_uint8ArrayPtr(
                DM_HCI_ULP_READ_REMOTE_USED_FEATURES_CFM_T_feature_set));
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_ENCRYPT_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_ENCRYPT_CFM_T_PDU::DM_HCI_ULP_ENCRYPT_CFM_T_PDU()
: DM_PDU ( DM_HCI_ULP_ENCRYPT_CFM , DM_HCI_ULP_ENCRYPT_CFM_T_pduSize )
{
}

DM_HCI_ULP_ENCRYPT_CFM_T_PDU::DM_HCI_ULP_ENCRYPT_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_ENCRYPT_CFM_T_PDU::DM_HCI_ULP_ENCRYPT_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_ENCRYPT_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_ULP_ENCRYPT_CFM_T_phandle );
}

void DM_HCI_ULP_ENCRYPT_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_ENCRYPT_CFM_T_phandle , value );
}

uint8 DM_HCI_ULP_ENCRYPT_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_ULP_ENCRYPT_CFM_T_status );
}

void DM_HCI_ULP_ENCRYPT_CFM_T_PDU::set_status( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_ENCRYPT_CFM_T_status , value );
}

DATA_uint8_len_16_ret DM_HCI_ULP_ENCRYPT_CFM_T_PDU::get_encrypted_data() const
{
    return DATA_uint8_len_16_ret(get_uint8ArrayPtr(DM_HCI_ULP_ENCRYPT_CFM_T_encrypted_data)) ;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_RAND_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_RAND_CFM_T_PDU::DM_HCI_ULP_RAND_CFM_T_PDU()
: DM_PDU ( DM_HCI_ULP_RAND_CFM , DM_HCI_ULP_RAND_CFM_T_pduSize )
{
}

DM_HCI_ULP_RAND_CFM_T_PDU::DM_HCI_ULP_RAND_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_RAND_CFM_T_PDU::DM_HCI_ULP_RAND_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_RAND_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_HCI_ULP_RAND_CFM_T_phandle );
}

void DM_HCI_ULP_RAND_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_RAND_CFM_T_phandle , value );
}

uint8 DM_HCI_ULP_RAND_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_HCI_ULP_RAND_CFM_T_status );
}

void DM_HCI_ULP_RAND_CFM_T_PDU::set_status( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_RAND_CFM_T_status , value );
}

ULPRandom DM_HCI_ULP_RAND_CFM_T_PDU::get_random_number() const
{
    return ULPRandom ( get_uint8ArrayPtr( DM_HCI_ULP_RAND_CFM_T_random_number ));
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_ENCRYPT_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_ENCRYPT_REQ_T_PDU::DM_HCI_ULP_ENCRYPT_REQ_T_PDU()
: DM_PDU ( DM_HCI_ULP_ENCRYPT_REQ , DM_HCI_ULP_ENCRYPT_REQ_T_pduSize )
{
}

DM_HCI_ULP_ENCRYPT_REQ_T_PDU::DM_HCI_ULP_ENCRYPT_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_ENCRYPT_REQ_T_PDU::DM_HCI_ULP_ENCRYPT_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_ENCRYPT_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_ULP_ENCRYPT_REQ_T_op_code );
}

void DM_HCI_ULP_ENCRYPT_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_ENCRYPT_REQ_T_op_code , value );
}

uint8 DM_HCI_ULP_ENCRYPT_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_ULP_ENCRYPT_REQ_T_cmd_parameter_length );
}

void DM_HCI_ULP_ENCRYPT_REQ_T_PDU::set_cmd_parameter_length( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_ENCRYPT_REQ_T_cmd_parameter_length , value );
}

ULPKey DM_HCI_ULP_ENCRYPT_REQ_T_PDU::get_aes_key() const
{
    return ULPKey ( get_uint8ArrayPtr( DM_HCI_ULP_ENCRYPT_REQ_T_aes_key ) );
}

void DM_HCI_ULP_ENCRYPT_REQ_T_PDU::set_aes_key( const ULPKey &value )
{
    set_uint8Array ( value.get_str(), DM_HCI_ULP_ENCRYPT_REQ_T_aes_key , 16 );
}

ULPKey DM_HCI_ULP_ENCRYPT_REQ_T_PDU::get_plaintext_data() const
{
    return ULPKey ( get_uint8ArrayPtr ( DM_HCI_ULP_ENCRYPT_REQ_T_plaintext_data ) );
}

void DM_HCI_ULP_ENCRYPT_REQ_T_PDU::set_plaintext_data( const ULPKey &value )
{
    set_uint8Array ( value.get_str(), DM_HCI_ULP_ENCRYPT_REQ_T_plaintext_data , 16 );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU()
: DM_PDU ( DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ , DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_pduSize )
{
}

DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_op_code );
}

void DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_op_code , value );
}

uint8 DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_cmd_parameter_length );
}

void DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::set_cmd_parameter_length( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_cmd_parameter_length , value );
}

uint8 DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::get_scan_response_data_len() const
{
    return get_uint8 ( DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_scan_response_data_len );
}

void DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::set_scan_response_data_len( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_scan_response_data_len , value );
}

void DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::get_scan_response_data(uint8 *value) const
{
    (void)get_uint8Array(value, DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_scan_response_data, get_scan_response_data_len());
}

void DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_PDU::set_scan_response_data( uint8 *value )
{
    PDU::set_uint8Array(value,
                        DM_HCI_ULP_SET_SCAN_RESPONSE_DATA_REQ_T_scan_response_data,
                        get_scan_response_data_len() );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU()
: DM_PDU ( DM_HCI_ULP_SET_EVENT_MASK_REQ , DM_HCI_ULP_SET_EVENT_MASK_REQ_T_pduSize )
{
}

DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_ULP_SET_EVENT_MASK_REQ_T_op_code );
}

void DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_SET_EVENT_MASK_REQ_T_op_code , value );
}

uint8 DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_ULP_SET_EVENT_MASK_REQ_T_cmd_parameter_length );
}

void DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::set_cmd_parameter_length( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_SET_EVENT_MASK_REQ_T_cmd_parameter_length , value );
}

ULPEventMask DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::get_ulp_event_mask() const
{
    return ULPEventMask ( get_uint8ArrayPtr ( DM_HCI_ULP_SET_EVENT_MASK_REQ_T_ulp_event_mask ) );
}

void DM_HCI_ULP_SET_EVENT_MASK_REQ_T_PDU::set_ulp_event_mask( const ULPEventMask &value )
{
    set_uint8Array ( value.get_data() , DM_HCI_ULP_SET_EVENT_MASK_REQ_T_ulp_event_mask , 8 ) ;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU()
: DM_PDU ( DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ , DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_pduSize )
{
}

DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::get_op_code() const
{
    return get_uint16 ( DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_op_code );
}

void DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::set_op_code( uint16 value )
{
    set_uint16 ( DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_op_code , value );
}

uint8 DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::get_cmd_parameter_length() const
{
    return get_uint8 ( DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_cmd_parameter_length );
}

void DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::set_cmd_parameter_length( uint8 value )
{
    set_uint8 ( DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_cmd_parameter_length , value );
}

ULPChannelMap DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::get_channel_map() const
{
    return ULPChannelMap ( get_uint8ArrayPtr(DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_channel_map) );
}

void DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_PDU::set_channel_map( ULPChannelMap &value )
{
    set_uint8Array ( value.get_ptr() , DM_HCI_ULP_SET_HOST_CHANNEL_CLASSIFICATION_REQ_T_channel_map, 5 );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_ADD_DEVICE_REQ_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_SM_ADD_DEVICE_REQ_T_PDU::DM_SM_ADD_DEVICE_REQ_T_PDU()
: DM_PDU ( DM_SM_ADD_DEVICE_REQ , DM_SM_ADD_DEVICE_REQ_T_pduSize )
{
}

DM_SM_ADD_DEVICE_REQ_T_PDU::DM_SM_ADD_DEVICE_REQ_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SM_ADD_DEVICE_REQ_T_PDU::DM_SM_ADD_DEVICE_REQ_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_SM_ADD_DEVICE_REQ_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_SM_ADD_DEVICE_REQ_T_phandle );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_SM_ADD_DEVICE_REQ_T_phandle , value );
}

BluetoothDeviceAddressWithType DM_SM_ADD_DEVICE_REQ_T_PDU::get_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_SM_ADD_DEVICE_REQ_T_addrt );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_SM_ADD_DEVICE_REQ_T_addrt , value );
}

uint16 DM_SM_ADD_DEVICE_REQ_T_PDU::get_privacy() const
{
    return get_uint16 ( DM_SM_ADD_DEVICE_REQ_T_privacy );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_privacy( uint16 value )
{
    set_uint16 ( DM_SM_ADD_DEVICE_REQ_T_privacy , value );
}

BluetoothDeviceAddress DM_SM_ADD_DEVICE_REQ_T_PDU::get_reconnection_bd_addr() const
{
    return get_BluetoothDeviceAddress ( DM_SM_ADD_DEVICE_REQ_T_reconnection_bd_addr );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_reconnection_bd_addr( BluetoothDeviceAddress value )
{
    set_BluetoothDeviceAddress ( DM_SM_ADD_DEVICE_REQ_T_reconnection_bd_addr , value );
}

DM_SM_TRUST_T DM_SM_ADD_DEVICE_REQ_T_PDU::get_trust() const
{
    return get_DM_SM_TRUST_T ( DM_SM_ADD_DEVICE_REQ_T_trust );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_trust( DM_SM_TRUST_T value )
{
    set_DM_SM_TRUST_T ( DM_SM_ADD_DEVICE_REQ_T_trust , value );
}

uint16 DM_SM_ADD_DEVICE_REQ_T_PDU::get_security_requirements() const
{
    return get_uint16 ( DM_SM_ADD_DEVICE_REQ_T_security_requirements );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_security_requirements( uint16 value )
{
    set_uint16 ( DM_SM_ADD_DEVICE_REQ_T_security_requirements , value );
}

uint16 DM_SM_ADD_DEVICE_REQ_T_PDU::get_encryption_key_size() const
{
    return get_uint16 ( DM_SM_ADD_DEVICE_REQ_T_encryption_key_size );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_encryption_key_size( uint16 value )
{
    set_uint16 ( DM_SM_ADD_DEVICE_REQ_T_encryption_key_size , value );
}

uint16 DM_SM_ADD_DEVICE_REQ_T_PDU::get_present() const
{
    return get_uint16 ( DM_SM_ADD_DEVICE_REQ_T_present );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_present( uint16 value )
{
    set_uint16 ( DM_SM_ADD_DEVICE_REQ_T_present , value );
}

const void DM_SM_ADD_DEVICE_REQ_T_PDU::get_u( DM_SM_RFCLI_UKEY_T *u ) const
{
    get_DM_SM_UKEY_T ( DM_SM_ADD_DEVICE_REQ_T_pduSize,
                       DM_SM_ADD_DEVICE_REQ_T_u,
                       get_present(),
                       u );
}

void DM_SM_ADD_DEVICE_REQ_T_PDU::set_u( DM_SM_RFCLI_UKEY_T *value )
{
    uint32 offset = DM_SM_ADD_DEVICE_REQ_T_pduSize;
    set_DM_SM_UKEY_T ( offset, DM_SM_ADD_DEVICE_REQ_T_u, get_present(), value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_READ_DEVICE_CFM_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_SM_READ_DEVICE_CFM_T_PDU::DM_SM_READ_DEVICE_CFM_T_PDU()
: DM_PDU ( DM_SM_READ_DEVICE_CFM , DM_SM_READ_DEVICE_CFM_T_pduSize )
{
}

DM_SM_READ_DEVICE_CFM_T_PDU::DM_SM_READ_DEVICE_CFM_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SM_READ_DEVICE_CFM_T_PDU::DM_SM_READ_DEVICE_CFM_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_SM_READ_DEVICE_CFM_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_SM_READ_DEVICE_CFM_T_phandle );
}

void DM_SM_READ_DEVICE_CFM_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_SM_READ_DEVICE_CFM_T_phandle , value );
}

BluetoothDeviceAddressWithType DM_SM_READ_DEVICE_CFM_T_PDU::get_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_SM_READ_DEVICE_CFM_T_addrt );
}

void DM_SM_READ_DEVICE_CFM_T_PDU::set_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_SM_READ_DEVICE_CFM_T_addrt , value );
}

uint8 DM_SM_READ_DEVICE_CFM_T_PDU::get_status() const
{
    return get_uint8 ( DM_SM_READ_DEVICE_CFM_T_status );
}

void DM_SM_READ_DEVICE_CFM_T_PDU::set_status( uint8 value )
{
    set_uint8 ( DM_SM_READ_DEVICE_CFM_T_status , value );
}

DM_SM_TRUST_T DM_SM_READ_DEVICE_CFM_T_PDU::get_trust() const
{
    return get_DM_SM_TRUST_T ( DM_SM_READ_DEVICE_CFM_T_trust );
}

void DM_SM_READ_DEVICE_CFM_T_PDU::set_trust( DM_SM_TRUST_T value )
{
    set_DM_SM_TRUST_T ( DM_SM_READ_DEVICE_CFM_T_trust , value );
}

uint16 DM_SM_READ_DEVICE_CFM_T_PDU::get_security_requirements() const
{
    return get_uint16 ( DM_SM_READ_DEVICE_CFM_T_security_requirements );
}

void DM_SM_READ_DEVICE_CFM_T_PDU::set_security_requirements( uint16 value )
{
    set_uint16 ( DM_SM_READ_DEVICE_CFM_T_security_requirements , value );
}

uint16 DM_SM_READ_DEVICE_CFM_T_PDU::get_encryption_key_size() const
{
    return get_uint16 ( DM_SM_READ_DEVICE_CFM_T_encryption_key_size );
}

void DM_SM_READ_DEVICE_CFM_T_PDU::set_encryption_key_size( uint16 value )
{
    set_uint16 ( DM_SM_READ_DEVICE_CFM_T_encryption_key_size , value );
}

uint16 DM_SM_READ_DEVICE_CFM_T_PDU::get_present() const
{
    return get_uint16 ( DM_SM_READ_DEVICE_CFM_T_present );
}

void DM_SM_READ_DEVICE_CFM_T_PDU::set_present( uint16 value )
{
    set_uint16 ( DM_SM_READ_DEVICE_CFM_T_present , value );
}

const void DM_SM_READ_DEVICE_CFM_T_PDU::get_u( DM_SM_RFCLI_UKEY_T *u ) const
{
    get_DM_SM_UKEY_T ( DM_SM_READ_DEVICE_CFM_T_pduSize,
                       DM_SM_READ_DEVICE_CFM_T_u,
                       get_present(),
                       u );
}

void DM_SM_READ_DEVICE_CFM_T_PDU::set_u( DM_SM_RFCLI_UKEY_T *value )
{
    uint32 offset =  DM_SM_READ_DEVICE_CFM_T_pduSize;
    set_DM_SM_UKEY_T ( offset , DM_SM_READ_DEVICE_CFM_T_u, get_present(), value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_KEYS_IND_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_SM_KEYS_IND_T_PDU::DM_SM_KEYS_IND_T_PDU()
: DM_PDU ( DM_SM_KEYS_IND , DM_SM_KEYS_IND_T_pduSize )
{
}

DM_SM_KEYS_IND_T_PDU::DM_SM_KEYS_IND_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SM_KEYS_IND_T_PDU::DM_SM_KEYS_IND_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

uint16 DM_SM_KEYS_IND_T_PDU::get_phandle() const
{
    return get_uint16 ( DM_SM_KEYS_IND_T_phandle );
}

void DM_SM_KEYS_IND_T_PDU::set_phandle( uint16 value )
{
    set_uint16 ( DM_SM_KEYS_IND_T_phandle , value );
}

BluetoothDeviceAddressWithType DM_SM_KEYS_IND_T_PDU::get_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_SM_KEYS_IND_T_addrt );
}

void DM_SM_KEYS_IND_T_PDU::set_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_SM_KEYS_IND_T_addrt , value );
}

uint16 DM_SM_KEYS_IND_T_PDU::get_security_requirements() const
{
    return get_uint16 ( DM_SM_KEYS_IND_T_security_requirements );
}

void DM_SM_KEYS_IND_T_PDU::set_security_requirements( uint16 value )
{
    set_uint16 ( DM_SM_KEYS_IND_T_security_requirements , value );
}

uint16 DM_SM_KEYS_IND_T_PDU::get_encryption_key_size() const
{
    return get_uint16 ( DM_SM_KEYS_IND_T_encryption_key_size );
}

void DM_SM_KEYS_IND_T_PDU::set_encryption_key_size( uint16 value )
{
    set_uint16 ( DM_SM_KEYS_IND_T_encryption_key_size , value );
}

uint16 DM_SM_KEYS_IND_T_PDU::get_present() const
{
    return get_uint16 ( DM_SM_KEYS_IND_T_present );
}

void DM_SM_KEYS_IND_T_PDU::set_present( uint16 value )
{
    set_uint16 ( DM_SM_KEYS_IND_T_present , value );
}

const void DM_SM_KEYS_IND_T_PDU::get_u(DM_SM_RFCLI_UKEY_T *u ) const
{
    get_DM_SM_UKEY_T ( DM_SM_KEYS_IND_T_pduSize,
                       DM_SM_KEYS_IND_T_u,
                       get_present(),
                       u );
}

void DM_SM_KEYS_IND_T_PDU::set_u( DM_SM_RFCLI_UKEY_T *value )
{
    uint32 offset = DM_SM_KEYS_IND_T_pduSize;
    set_DM_SM_UKEY_T ( offset, DM_SM_KEYS_IND_T_u, get_present(), value );
}

BluetoothDeviceAddressWithType DM_SM_KEYS_IND_T_PDU::get_id_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_SM_KEYS_IND_T_id_addrt );
}

void DM_SM_KEYS_IND_T_PDU::set_id_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_SM_KEYS_IND_T_id_addrt , value );
}

///////////////////////////////////////////////////////////////////////////////
//
//  Class: DM_SM_KEY_REQUEST_RSP_T_PDU
//
///////////////////////////////////////////////////////////////////////////////

DM_SM_KEY_REQUEST_RSP_T_PDU::DM_SM_KEY_REQUEST_RSP_T_PDU()
: DM_PDU ( DM_SM_KEY_REQUEST_RSP , DM_SM_KEY_REQUEST_RSP_T_pduSize )
{
}

DM_SM_KEY_REQUEST_RSP_T_PDU::DM_SM_KEY_REQUEST_RSP_T_PDU( const PDU& from )
: DM_PDU ( from )
{
}

DM_SM_KEY_REQUEST_RSP_T_PDU::DM_SM_KEY_REQUEST_RSP_T_PDU( const uint8 * buffer , uint32 len )
: DM_PDU ( buffer , len )
{
}

BluetoothDeviceAddressWithType DM_SM_KEY_REQUEST_RSP_T_PDU::get_addrt() const
{
    return get_BluetoothDeviceAddressWithType ( DM_SM_KEY_REQUEST_RSP_T_addrt );
}

void DM_SM_KEY_REQUEST_RSP_T_PDU::set_addrt( BluetoothDeviceAddressWithType value )
{
    set_BluetoothDeviceAddressWithType ( DM_SM_KEY_REQUEST_RSP_T_addrt , value );
}

uint16 DM_SM_KEY_REQUEST_RSP_T_PDU::get_security_requirements() const
{
    return get_uint16 ( DM_SM_KEY_REQUEST_RSP_T_security_requirements );
}

void DM_SM_KEY_REQUEST_RSP_T_PDU::set_security_requirements( uint16 value )
{
    set_uint16 ( DM_SM_KEY_REQUEST_RSP_T_security_requirements , value );
}

DM_SM_KEY_TYPE_T DM_SM_KEY_REQUEST_RSP_T_PDU::get_key_type() const
{
    return get_DM_SM_KEY_TYPE_T ( DM_SM_KEY_REQUEST_RSP_T_key_type );
}

void DM_SM_KEY_REQUEST_RSP_T_PDU::set_key_type( DM_SM_KEY_TYPE_T value )
{
    set_DM_SM_KEY_TYPE_T ( DM_SM_KEY_REQUEST_RSP_T_key_type , value );
}

const void DM_SM_KEY_REQUEST_RSP_T_PDU::get_key( DM_SM_RFCLI_UKEY_T *u ) const
{
    get_DM_SM_UKEY_T ( DM_SM_KEY_REQUEST_RSP_T_pduSize,
                       DM_SM_KEY_REQUEST_RSP_T_key,
                       get_key_type(),
                       u );
}

void DM_SM_KEY_REQUEST_RSP_T_PDU::set_key( DM_SM_RFCLI_UKEY_T value )
{
    uint32 offset = DM_SM_KEY_REQUEST_RSP_T_pduSize;
    set_DM_SM_UKEY_T ( offset , DM_SM_KEY_REQUEST_RSP_T_key, get_key_type(), &value );
}
