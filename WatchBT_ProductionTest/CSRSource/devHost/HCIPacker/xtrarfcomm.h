///////////////////////////////////////////////////////////////////////////////
//
//  FILE:     xtrarfcomm.h
//
//  PURPOSE:  declare non-autogenerated SDC and SDS primitive pdus
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __XTRARFCOMM_H__
#define __XTRARFCOMM_H__

#include "hcipacker/bluestackpdu.h"

class RFC_DATAWRITE_REQ_T_PDU : public RFCOMM_PDU
{
public:
    RFC_DATAWRITE_REQ_T_PDU() ;
    RFC_DATAWRITE_REQ_T_PDU( const PDU& );
    RFC_DATAWRITE_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_conn_id(void) const ;
    void set_conn_id(uint16 value) ;
    uint16 get_payload_length(void) const ;
    void get_payload( uint8 * toFill ) const ;
    const uint8 * get_payloadPtr() const ;
    void set_payload( const uint8 * toCopy , uint16 length ) ;
    uint16 get_rx_credits(void) const ;
    void set_rx_credits(uint16 value) ;
};

class RFC_TEST_REQ_T_PDU : public RFCOMM_PDU
{
public:
    RFC_TEST_REQ_T_PDU() ;
    RFC_TEST_REQ_T_PDU( const PDU& );
    RFC_TEST_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress value) ;
    uint16 get_test_data_length(void) const ;
    void set_test_data_length(uint16 test_data_length);
    void get_test_data( uint8 * toFill ) const ;
    const uint8 * get_test_dataPtr() const ;
    void set_test_data( const uint8 * toCopy , uint16 length ) ;
};

class RFC_TEST_CFM_T_PDU : public RFCOMM_PDU
{
public:
    RFC_TEST_CFM_T_PDU() ;
    RFC_TEST_CFM_T_PDU( const PDU& );
    RFC_TEST_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress value) ;
    uint16 get_test_data_length(void) const ;
    void get_test_data( uint8 * toFill ) const ;
    const uint8 * get_test_dataPtr() const ;
    void set_test_data( const uint8 * toCopy , uint16 length ) ;
    uint16 get_status(void) const ;
    void set_status(uint16 value) ;
};

class RFC_DATAREAD_IND_T_PDU : public RFCOMM_PDU
{
public:
    RFC_DATAREAD_IND_T_PDU() ;
    RFC_DATAREAD_IND_T_PDU( const PDU& );
    RFC_DATAREAD_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_conn_id(void) const ;
    void set_conn_id(uint16 value) ;
    uint16 get_payload_length(void) const ;
    void get_payload( uint8 * toFill ) const ;
    const uint8 * get_payloadPtr() const ;
    void set_payload( const uint8 * toCopy , uint16 length ) ;
};

class RFC_CLIENT_CONNECT_REQ_T_PDU : public RFCOMM_PDU
{
public:
    RFC_CLIENT_CONNECT_REQ_T_PDU() ;
    RFC_CLIENT_CONNECT_REQ_T_PDU( const PDU& );
    RFC_CLIENT_CONNECT_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress value) ;
    uint8 get_rem_serv_chan(void) const ;
    void set_rem_serv_chan(uint8 value) ;
    uint8 get_flags(void) const ;
    void set_flags(uint8 value) ;
    uint16 get_context(void) const ;
    void set_context(uint16 value) ;
    uint16 get_client_security_chan(void) const ;
    void set_client_security_chan(uint16 value) ;
    uint16 get_max_payload_size(void) const ;
    void set_max_payload_size(uint16 value) ;
    uint8 get_priority(void) const ;
    void set_priority(uint8 value) ;
    uint16 get_total_credits(void) const ;
    void set_total_credits(uint16 value) ;
    uint16 get_remote_l2cap_control(void) const ;
    void set_remote_l2cap_control(uint16 value) ;
    uint16 get_local_l2cap_control(void) const ;
    void set_local_l2cap_control(uint16 value) ;
    uint16 get_reserved_length(void) const ;
    void set_reserved_length(uint16 value) ;
    uint16 *get_reserved(void) const ;
    void set_reserved(uint16 *value) ;
    uint8 get_modem_signal(void) const ;
    void set_modem_signal(uint8 value) ;
    uint8 get_break_signal(void) const ;
    void set_break_signal(uint8 value) ;
    uint16 get_msc_timeout(void) const ;
    void set_msc_timeout(uint16 value) ;
};

#endif//__XTRARFCOMM_H__
