
// C:\work_bluesuite_2_4\p4\bc\bluesuite_2_4\result\include\ps\psbc_data_types.h generated by extract_psdb.pl on c:\work_bluesuite_2_4\p4\bc\bluesuite_2_4\dev\src\csr\psbc\psbc_data


#ifndef PSBC_DATA_TYPES_INCLUDED
#define PSBC_DATA_TYPES_INCLUDED
#include "pshelp_types.h"



typedef struct string_val_pair
{
	const ichar *str;
	uint32 val;
} string_val_pair ;

typedef const string_val_pair enum_list[];


enum pskey_structure
{
	pskey_struct_BCSP_LM_PS_BLOCK,	/* 1 instance */
	pskey_struct_BT_TIMER_SLOT_DATA_array,	/* 2 instances */
	pskey_struct_BT_TIMER_TRIGGER_DATA_array,	/* 2 instances */
	pskey_struct_HOSTIO_FC_PS_BLOCK,	/* 1 instance */
	pskey_struct_HOSTIO_UART_PS_BLOCK,	/* 1 instance */
	pskey_struct_IQ_LVL_VAL_array,	/* 1 instance */
	pskey_struct_LM_LINK_KEY_BD_ADDR_T,	/* 24 instances */
	pskey_struct_PROTOCOL_INFO,	/* 16 instances */
	pskey_struct_TIME,	/* 32 instances */
	pskey_struct_TIME_array,	/* 8 instances */
	pskey_struct_agc_hyst_config,	/* 1 instance */
	pskey_struct_bc5_gc_trim_bias_control,	/* 1 instance */
	pskey_struct_bdaddr,	/* 1 instance */
	pskey_struct_bdcod,	/* 1 instance */
	pskey_struct_bool,	/* 153 instances */
	pskey_struct_char_array,	/* 2 instances */
	pskey_struct_clkgen_active_rate,	/* 6 instances */
	pskey_struct_cpu_idle_mode,	/* 1 instance */
	pskey_struct_deep_sleep_state,	/* 1 instance */
	pskey_struct_dorm_suspend_led_mode_type,	/* 6 instances */
	pskey_struct_edr_switch_mode,	/* 1 instance */
	pskey_struct_enhanced_power_setting_array,	/* 2 instances */
	pskey_struct_fs_location,	/* 1 instance */
	pskey_struct_golden_curve_freq_steps_array,	/* 1 instance */
	pskey_struct_hwakeup_state,	/* 1 instance */
	pskey_struct_int16,	/* 25 instances */
	pskey_struct_int16_array,	/* 13 instances */
	pskey_struct_int32,	/* 1 instance */
	pskey_struct_int8,	/* 7 instances */
	pskey_struct_iq_trim_enable_flag,	/* 1 instance */
	pskey_struct_lc_fc_lwm,	/* 2 instances */
	pskey_struct_local_name_complete,	/* 1 instance */
	pskey_struct_local_name_section,	/* 18 instances */
	pskey_struct_mmu_rate_jemima,	/* 3 instances */
	pskey_struct_phys_bus,	/* 1 instance */
	pskey_struct_power_setting_array,	/* 2 instances */
	pskey_struct_temperature_calibration,	/* 1 instance */
	pskey_struct_temperature_calibration_array,	/* 15 instances */
	pskey_struct_temperature_calibration_10bit,	/* 1 instance */
	pskey_struct_txpre_compensation,	/* 1 instance */
	pskey_struct_uint16,	/* 456 instances */
	pskey_struct_uint16_array,	/* 575 instances */
	pskey_struct_uint32,	/* 37 instances */
	pskey_struct_uint32_array,	/* 7 instances */
	pskey_struct_uint8,	/* 73 instances */
	pskey_struct_uint8_array,	/* 12 instances */
	pskey_struct_unicodestring,	/* 20 instances */
	pskey_struct_usbclass,	/* 6 instances */
	pskey_struct_utf8_array,	/* 1 instance */
	pskey_struct_vm_log_entry_array,	/* 1 instance */
	pskey_struct_wideband_rssi_config	/* 1 instance */
};


enum pskey_format		// Editing format where supported currently uint32 values
{
	pskey_format_hex,	// hexadecimal, sedenary, base 16
	pskey_format_dec	// decimal, denary, base 10
};

enum pskey_entry_type
{
	pskey_hc_key = 0,			// A traditional key.	
	pskey_hc_v_key = 1,			// A system virtual key - maps on to a traditional key.  host controller handles mapping.
	pskey_pres_key = 2,		// A presentation key - suppors enums and bitfields.
	pskey_pres_hc_v_key = 3 // Not used as a type, but used to show that a key has both virtual and presentation keys based on it.

};

enum pskey_constraint_type
{
	pskey_cons_none,
	pskey_cons_min_max,
	pskey_cons_min,
	pskey_cons_max,
	pskey_cons_enum,
	pskey_cons_str_len
};

enum pskey_access_type
{
	ACCESS_DEFAULT = 0,
	ACCESS_DEV,
	ACCESS_USER
};


typedef struct pskey_entry
{
	pskey key_number;			// The key number used to access the HCI's ps.
	pskey_entry_type key_type;   // A real or a virtual key.
	const ichar *id;				// programmer-readable, should be less than 30 chars.
	const ichar *label;			// user-readable, should be less than 30 chars.
	pskey_structure structure_type;  // bdaddr, time, enums, bool...  For enum (and therefore bool), the enum_list_num will be in the constraint.
									//  This value therefore determines the editor for the user interface.
	pskey_format format;        // Display format hex or decimal (currently uint32 only)
	pskey base_key;
	uint16 base_bit_offset, base_bit_length; // Used only for presentation keys.  Base bit offset is 16 * num_words + bit num  - this means it counts up from LSB (NOT down from MSB as a bitfield struct fills)
	pskey_constraint_type key_constraint;	// The constraint deals with what's acceptable and what's not.  For enums, it specifies the enum list.
	union { // for contraints
		struct TAG_constraint_min_max { int32 min_val, max_val;} constraint_min_max;	// For pskey_cons_min_max, pskey_cons_min, pskey_cons_max
		struct TAG_constraint_enum { uint32 enum_list_num;} contraint_enum;					// For pskey_cons_enum
		struct TAG_constraint_str_len { uint32 max_string_len ;} contraint_str_len;			// For pskey_cons_str_len
	} constraints;
	bool pre18; // True if this key exists in firmware builds prior to HCI 18
	const ichar **description;	// Wordy description.  Could run to several lines.
} pskey_entry;

extern const string_val_pair *enum_groups[];

extern const pskey_entry pskey_data[];

enum { 	NUM_PSKEY_ENTRIES = 1548, 
		NUM_PSKEY_ENUM_ENTRIES = (46 + 1) };
#endif // PSBC_DATA_TYPES_INCLUDED
