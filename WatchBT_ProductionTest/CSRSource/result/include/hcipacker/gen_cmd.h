/////////////////////////WARNING - AUTOGENERATED FILE//////////////////////////
//
//  FILENAME:   gen_cmd.h
//
//  PURPOSE :   Headers for autogenerated hci command pdus
//
//  Autogenerated
//  from devHost/HCIPacker/Autogen/templates/cmd_hdr.tpl
//  by devTools/bin/pdu/gencode.pl
///////////////////////////////////////////////////////////////////////////////

#ifndef __GEN_CMD_H__
#define __GEN_CMD_H__

class HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_T_PDU() ;
    HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_T_PDU( const PDU& ) ;
    HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_LMP_HANDLE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LMP_HANDLE_T_PDU() ;
    HCI_READ_LMP_HANDLE_T_PDU( const PDU& ) ;
    HCI_READ_LMP_HANDLE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_REJECT_SYNCHRONOUS_CONN_REQ_T_PDU : public HCICommandPDU
{
public:
    HCI_REJECT_SYNCHRONOUS_CONN_REQ_T_PDU() ;
    HCI_REJECT_SYNCHRONOUS_CONN_REQ_T_PDU( const PDU& ) ;
    HCI_REJECT_SYNCHRONOUS_CONN_REQ_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_reason(void) const ;
    void set_reason(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ADD_SCO_CONNECTION_T_PDU : public HCICommandPDU
{
public:
    HCI_ADD_SCO_CONNECTION_T_PDU() ;
    HCI_ADD_SCO_CONNECTION_T_PDU( const PDU& ) ;
    HCI_ADD_SCO_CONNECTION_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_pkt_type(void) const ;
    void set_pkt_type(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_ANON_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_ANON_MODE_T_PDU() ;
    HCI_WRITE_ANON_MODE_T_PDU( const PDU& ) ;
    HCI_WRITE_ANON_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_SEND_KEYPRESS_NOTIFICATION_T_PDU : public HCICommandPDU
{
public:
    HCI_SEND_KEYPRESS_NOTIFICATION_T_PDU() ;
    HCI_SEND_KEYPRESS_NOTIFICATION_T_PDU( const PDU& ) ;
    HCI_SEND_KEYPRESS_NOTIFICATION_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_notification_type(void) const ;
    void set_notification_type(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_CHANGE_CONN_LINK_KEY_T_PDU : public HCICommandPDU
{
public:
    HCI_CHANGE_CONN_LINK_KEY_T_PDU() ;
    HCI_CHANGE_CONN_LINK_KEY_T_PDU( const PDU& ) ;
    HCI_CHANGE_CONN_LINK_KEY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_T_PDU() ;
    HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_T_PDU( const PDU& ) ;
    HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_AUTO_FLUSH_TIMEOUT_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_AUTO_FLUSH_TIMEOUT_T_PDU() ;
    HCI_WRITE_AUTO_FLUSH_TIMEOUT_T_PDU( const PDU& ) ;
    HCI_WRITE_AUTO_FLUSH_TIMEOUT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_timeout(void) const ;
    void set_timeout(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_SCO_FLOW_CON_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_SCO_FLOW_CON_ENABLE_T_PDU() ;
    HCI_WRITE_SCO_FLOW_CON_ENABLE_T_PDU( const PDU& ) ;
    HCI_WRITE_SCO_FLOW_CON_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_sco_flow_control_enable(void) const ;
    void set_sco_flow_control_enable(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_CREATE_CONNECTION_CANCEL_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_CREATE_CONNECTION_CANCEL_T_PDU() ;
    HCI_ULP_CREATE_CONNECTION_CANCEL_T_PDU( const PDU& ) ;
    HCI_ULP_CREATE_CONNECTION_CANCEL_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_NUM_SUPPORTED_IAC_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_NUM_SUPPORTED_IAC_T_PDU() ;
    HCI_READ_NUM_SUPPORTED_IAC_T_PDU( const PDU& ) ;
    HCI_READ_NUM_SUPPORTED_IAC_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_WRITE_AUTH_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_AUTH_ENABLE_T_PDU() ;
    HCI_WRITE_AUTH_ENABLE_T_PDU( const PDU& ) ;
    HCI_WRITE_AUTH_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_auth_enable(void) const ;
    void set_auth_enable(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_LINK_POLICY_SETTINGS_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LINK_POLICY_SETTINGS_T_PDU() ;
    HCI_READ_LINK_POLICY_SETTINGS_T_PDU( const PDU& ) ;
    HCI_READ_LINK_POLICY_SETTINGS_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_SCO_FLOW_CON_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_SCO_FLOW_CON_ENABLE_T_PDU() ;
    HCI_READ_SCO_FLOW_CON_ENABLE_T_PDU( const PDU& ) ;
    HCI_READ_SCO_FLOW_CON_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_CLEAR_WHITE_LIST_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_CLEAR_WHITE_LIST_T_PDU() ;
    HCI_ULP_CLEAR_WHITE_LIST_T_PDU( const PDU& ) ;
    HCI_ULP_CLEAR_WHITE_LIST_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_STORED_LINK_KEY_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_STORED_LINK_KEY_T_PDU() ;
    HCI_READ_STORED_LINK_KEY_T_PDU( const PDU& ) ;
    HCI_READ_STORED_LINK_KEY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_read_all(void) const ;
    void set_read_all(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_SWITCH_ROLE_T_PDU : public HCICommandPDU
{
public:
    HCI_SWITCH_ROLE_T_PDU() ;
    HCI_SWITCH_ROLE_T_PDU( const PDU& ) ;
    HCI_SWITCH_ROLE_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_role(void) const ;
    void set_role(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_INQUIRY_T_PDU : public HCICommandPDU
{
public:
    HCI_INQUIRY_T_PDU() ;
    HCI_INQUIRY_T_PDU( const PDU& ) ;
    HCI_INQUIRY_T_PDU( const uint8* data , uint32 len ) ;
    uint24 get_lap(void) const ;
    void set_lap(uint24 data) ;
    uint8 get_inquiry_length(void) const ;
    void set_inquiry_length(uint8 data) ;
    uint8 get_num_responses(void) const ;
    void set_num_responses(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_REMOTE_EXT_FEATURES_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_REMOTE_EXT_FEATURES_T_PDU() ;
    HCI_READ_REMOTE_EXT_FEATURES_T_PDU( const PDU& ) ;
    HCI_READ_REMOTE_EXT_FEATURES_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_page_num(void) const ;
    void set_page_num(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_TRANSMITTER_TEST_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_TRANSMITTER_TEST_T_PDU() ;
    HCI_ULP_TRANSMITTER_TEST_T_PDU( const PDU& ) ;
    HCI_ULP_TRANSMITTER_TEST_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_tx_channel(void) const ;
    void set_tx_channel(uint8 data) ;
    uint8 get_length_test_data(void) const ;
    void set_length_test_data(uint8 data) ;
    uint8 get_packet_payload(void) const ;
    void set_packet_payload(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_INQUIRY_SCAN_TYPE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_INQUIRY_SCAN_TYPE_T_PDU() ;
    HCI_WRITE_INQUIRY_SCAN_TYPE_T_PDU( const PDU& ) ;
    HCI_WRITE_INQUIRY_SCAN_TYPE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_RESET_T_PDU : public HCICommandPDU
{
public:
    HCI_RESET_T_PDU() ;
    HCI_RESET_T_PDU( const PDU& ) ;
    HCI_RESET_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_RAND_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_RAND_T_PDU() ;
    HCI_ULP_RAND_T_PDU( const PDU& ) ;
    HCI_ULP_RAND_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_REFRESH_ENCRYPTION_KEY_T_PDU : public HCICommandPDU
{
public:
    HCI_REFRESH_ENCRYPTION_KEY_T_PDU() ;
    HCI_REFRESH_ENCRYPTION_KEY_T_PDU( const PDU& ) ;
    HCI_REFRESH_ENCRYPTION_KEY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_EXCHANGE_FIXED_INFO_T_PDU : public HCICommandPDU
{
public:
    HCI_EXCHANGE_FIXED_INFO_T_PDU() ;
    HCI_EXCHANGE_FIXED_INFO_T_PDU( const PDU& ) ;
    HCI_EXCHANGE_FIXED_INFO_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_T_PDU() ;
    HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_T_PDU( const PDU& ) ;
    HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_SETUP_SYNCHRONOUS_CONN_T_PDU : public HCICommandPDU
{
public:
    HCI_SETUP_SYNCHRONOUS_CONN_T_PDU() ;
    HCI_SETUP_SYNCHRONOUS_CONN_T_PDU( const PDU& ) ;
    HCI_SETUP_SYNCHRONOUS_CONN_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint32 get_tx_bdw(void) const ;
    void set_tx_bdw(uint32 data) ;
    uint32 get_rx_bdw(void) const ;
    void set_rx_bdw(uint32 data) ;
    uint16 get_max_latency(void) const ;
    void set_max_latency(uint16 data) ;
    uint16 get_voice_settings(void) const ;
    void set_voice_settings(uint16 data) ;
    uint8 get_retx_effort(void) const ;
    void set_retx_effort(uint8 data) ;
    uint16 get_pkt_type(void) const ;
    void set_pkt_type(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_INQUIRY_SCAN_TYPE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_INQUIRY_SCAN_TYPE_T_PDU() ;
    HCI_READ_INQUIRY_SCAN_TYPE_T_PDU( const PDU& ) ;
    HCI_READ_INQUIRY_SCAN_TYPE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_FLUSH_T_PDU : public HCICommandPDU
{
public:
    HCI_FLUSH_T_PDU() ;
    HCI_FLUSH_T_PDU( const PDU& ) ;
    HCI_FLUSH_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_READ_WHITE_LIST_SIZE_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_READ_WHITE_LIST_SIZE_T_PDU() ;
    HCI_ULP_READ_WHITE_LIST_SIZE_T_PDU( const PDU& ) ;
    HCI_ULP_READ_WHITE_LIST_SIZE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_SET_SCAN_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_SET_SCAN_ENABLE_T_PDU() ;
    HCI_ULP_SET_SCAN_ENABLE_T_PDU( const PDU& ) ;
    HCI_ULP_SET_SCAN_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_scan_enable(void) const ;
    void set_scan_enable(uint8 data) ;
    uint8 get_filter_duplicates(void) const ;
    void set_filter_duplicates(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_IO_CAPABILITY_RESPONSE_T_PDU : public HCICommandPDU
{
public:
    HCI_IO_CAPABILITY_RESPONSE_T_PDU() ;
    HCI_IO_CAPABILITY_RESPONSE_T_PDU( const PDU& ) ;
    HCI_IO_CAPABILITY_RESPONSE_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_io_capability(void) const ;
    void set_io_capability(uint8 data) ;
    uint8 get_oob_data_present(void) const ;
    void set_oob_data_present(uint8 data) ;
    uint8 get_authentication_requirements(void) const ;
    void set_authentication_requirements(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_SET_CONN_ENCRYPTION_T_PDU : public HCICommandPDU
{
public:
    HCI_SET_CONN_ENCRYPTION_T_PDU() ;
    HCI_SET_CONN_ENCRYPTION_T_PDU( const PDU& ) ;
    HCI_SET_CONN_ENCRYPTION_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_enc_enable(void) const ;
    void set_enc_enable(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_PIN_TYPE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_PIN_TYPE_T_PDU() ;
    HCI_READ_PIN_TYPE_T_PDU( const PDU& ) ;
    HCI_READ_PIN_TYPE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_TEST_END_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_TEST_END_T_PDU() ;
    HCI_ULP_TEST_END_T_PDU( const PDU& ) ;
    HCI_ULP_TEST_END_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_REMOTE_SUPP_FEATURES_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_REMOTE_SUPP_FEATURES_T_PDU() ;
    HCI_READ_REMOTE_SUPP_FEATURES_T_PDU( const PDU& ) ;
    HCI_READ_REMOTE_SUPP_FEATURES_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_REMOTE_VER_INFO_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_REMOTE_VER_INFO_T_PDU() ;
    HCI_READ_REMOTE_VER_INFO_T_PDU( const PDU& ) ;
    HCI_READ_REMOTE_VER_INFO_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_HOST_BUFFER_SIZE_T_PDU : public HCICommandPDU
{
public:
    HCI_HOST_BUFFER_SIZE_T_PDU() ;
    HCI_HOST_BUFFER_SIZE_T_PDU( const PDU& ) ;
    HCI_HOST_BUFFER_SIZE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_acl_packet_len(void) const ;
    void set_acl_packet_len(uint16 data) ;
    uint8 get_sco_packet_len(void) const ;
    void set_sco_packet_len(uint8 data) ;
    uint16 get_acl_total_packets(void) const ;
    void set_acl_total_packets(uint16 data) ;
    uint16 get_sco_total_packets(void) const ;
    void set_sco_total_packets(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ALIAS_ADDRESS_REQ_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_ALIAS_ADDRESS_REQ_REPLY_T_PDU() ;
    HCI_ALIAS_ADDRESS_REQ_REPLY_T_PDU( const PDU& ) ;
    HCI_ALIAS_ADDRESS_REQ_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    BluetoothDeviceAddress get_bd_addr_alias(void) const ;
    void set_bd_addr_alias(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_PAGESCAN_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_PAGESCAN_MODE_T_PDU() ;
    HCI_READ_PAGESCAN_MODE_T_PDU( const PDU& ) ;
    HCI_READ_PAGESCAN_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_WRITE_SIMPLE_PAIRING_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_SIMPLE_PAIRING_MODE_T_PDU() ;
    HCI_WRITE_SIMPLE_PAIRING_MODE_T_PDU( const PDU& ) ;
    HCI_WRITE_SIMPLE_PAIRING_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_simple_pairing_mode(void) const ;
    void set_simple_pairing_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_CONNECTION_UPDATE_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_CONNECTION_UPDATE_T_PDU() ;
    HCI_ULP_CONNECTION_UPDATE_T_PDU( const PDU& ) ;
    HCI_ULP_CONNECTION_UPDATE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_connection_handle(void) const ;
    void set_connection_handle(uint16 data) ;
    uint16 get_conn_interval_min(void) const ;
    void set_conn_interval_min(uint16 data) ;
    uint16 get_conn_interval_max(void) const ;
    void set_conn_interval_max(uint16 data) ;
    uint16 get_conn_latency(void) const ;
    void set_conn_latency(uint16 data) ;
    uint16 get_supervision_timeout(void) const ;
    void set_supervision_timeout(uint16 data) ;
    uint16 get_minimum_ce_length(void) const ;
    void set_minimum_ce_length(uint16 data) ;
    uint16 get_maximum_ce_length(void) const ;
    void set_maximum_ce_length(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_CLOCK_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_CLOCK_T_PDU() ;
    HCI_READ_CLOCK_T_PDU( const PDU& ) ;
    HCI_READ_CLOCK_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_which_clock(void) const ;
    void set_which_clock(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ENHANCED_FLUSH_T_PDU : public HCICommandPDU
{
public:
    HCI_ENHANCED_FLUSH_T_PDU() ;
    HCI_ENHANCED_FLUSH_T_PDU( const PDU& ) ;
    HCI_ENHANCED_FLUSH_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_pkt_type(void) const ;
    void set_pkt_type(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_T_PDU() ;
    HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_T_PDU( const PDU& ) ;
    HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_PERIODIC_INQUIRY_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_PERIODIC_INQUIRY_MODE_T_PDU() ;
    HCI_PERIODIC_INQUIRY_MODE_T_PDU( const PDU& ) ;
    HCI_PERIODIC_INQUIRY_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_max_period_length(void) const ;
    void set_max_period_length(uint16 data) ;
    uint16 get_min_period_length(void) const ;
    void set_min_period_length(uint16 data) ;
    uint24 get_lap(void) const ;
    void set_lap(uint24 data) ;
    uint8 get_inquiry_length(void) const ;
    void set_inquiry_length(uint8 data) ;
    uint8 get_num_responses(void) const ;
    void set_num_responses(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ROLE_DISCOVERY_T_PDU : public HCICommandPDU
{
public:
    HCI_ROLE_DISCOVERY_T_PDU() ;
    HCI_ROLE_DISCOVERY_T_PDU( const PDU& ) ;
    HCI_ROLE_DISCOVERY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_PRIVATE_PAIRING_REQ_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_PRIVATE_PAIRING_REQ_REPLY_T_PDU() ;
    HCI_PRIVATE_PAIRING_REQ_REPLY_T_PDU( const PDU& ) ;
    HCI_PRIVATE_PAIRING_REQ_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_INQUIRYSCAN_ACTIVITY_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_INQUIRYSCAN_ACTIVITY_T_PDU() ;
    HCI_READ_INQUIRYSCAN_ACTIVITY_T_PDU( const PDU& ) ;
    HCI_READ_INQUIRYSCAN_ACTIVITY_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_SIMPLE_PAIRING_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_SIMPLE_PAIRING_MODE_T_PDU() ;
    HCI_READ_SIMPLE_PAIRING_MODE_T_PDU( const PDU& ) ;
    HCI_READ_SIMPLE_PAIRING_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_WRITE_INQUIRY_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_INQUIRY_MODE_T_PDU() ;
    HCI_WRITE_INQUIRY_MODE_T_PDU( const PDU& ) ;
    HCI_WRITE_INQUIRY_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_USER_CONFIRMATION_REQUEST_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_USER_CONFIRMATION_REQUEST_REPLY_T_PDU() ;
    HCI_USER_CONFIRMATION_REQUEST_REPLY_T_PDU( const PDU& ) ;
    HCI_USER_CONFIRMATION_REQUEST_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_PAGE_TIMEOUT_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_PAGE_TIMEOUT_T_PDU() ;
    HCI_WRITE_PAGE_TIMEOUT_T_PDU( const PDU& ) ;
    HCI_WRITE_PAGE_TIMEOUT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_page_timeout(void) const ;
    void set_page_timeout(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_T_PDU() ;
    HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_T_PDU( const PDU& ) ;
    HCI_ULP_ADD_DEVICE_TO_WHITE_LIST_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_address_type(void) const ;
    void set_address_type(uint8 data) ;
    BluetoothDeviceAddress get_address(void) const ;
    void set_address(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_PAGESCAN_PERIOD_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_PAGESCAN_PERIOD_MODE_T_PDU() ;
    HCI_READ_PAGESCAN_PERIOD_MODE_T_PDU( const PDU& ) ;
    HCI_READ_PAGESCAN_PERIOD_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_WRITE_PAGE_SCAN_TYPE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_PAGE_SCAN_TYPE_T_PDU() ;
    HCI_WRITE_PAGE_SCAN_TYPE_T_PDU( const PDU& ) ;
    HCI_WRITE_PAGE_SCAN_TYPE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_REMOTE_NAME_REQ_T_PDU : public HCICommandPDU
{
public:
    HCI_REMOTE_NAME_REQ_T_PDU() ;
    HCI_REMOTE_NAME_REQ_T_PDU( const PDU& ) ;
    HCI_REMOTE_NAME_REQ_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_page_scan_rep_mode(void) const ;
    void set_page_scan_rep_mode(uint8 data) ;
    uint8 get_page_scan_mode(void) const ;
    void set_page_scan_mode(uint8 data) ;
    uint16 get_clock_offset(void) const ;
    void set_clock_offset(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_CREATE_CONNECTION_CANCEL_T_PDU : public HCICommandPDU
{
public:
    HCI_CREATE_CONNECTION_CANCEL_T_PDU() ;
    HCI_CREATE_CONNECTION_CANCEL_T_PDU( const PDU& ) ;
    HCI_CREATE_CONNECTION_CANCEL_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_PAGE_SCAN_TYPE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_PAGE_SCAN_TYPE_T_PDU() ;
    HCI_READ_PAGE_SCAN_TYPE_T_PDU( const PDU& ) ;
    HCI_READ_PAGE_SCAN_TYPE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_LOCAL_NAME_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LOCAL_NAME_T_PDU() ;
    HCI_READ_LOCAL_NAME_T_PDU( const PDU& ) ;
    HCI_READ_LOCAL_NAME_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_LOCAL_VER_INFO_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LOCAL_VER_INFO_T_PDU() ;
    HCI_READ_LOCAL_VER_INFO_T_PDU( const PDU& ) ;
    HCI_READ_LOCAL_VER_INFO_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_DISCONNECT_T_PDU : public HCICommandPDU
{
public:
    HCI_DISCONNECT_T_PDU() ;
    HCI_DISCONNECT_T_PDU( const PDU& ) ;
    HCI_DISCONNECT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_reason(void) const ;
    void set_reason(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_AFH_CHANNEL_CLASS_M_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_AFH_CHANNEL_CLASS_M_T_PDU() ;
    HCI_WRITE_AFH_CHANNEL_CLASS_M_T_PDU( const PDU& ) ;
    HCI_WRITE_AFH_CHANNEL_CLASS_M_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_class_mode(void) const ;
    void set_class_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_ENC_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_ENC_MODE_T_PDU() ;
    HCI_READ_ENC_MODE_T_PDU( const PDU& ) ;
    HCI_READ_ENC_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_BD_ADDR_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_BD_ADDR_T_PDU() ;
    HCI_READ_BD_ADDR_T_PDU( const PDU& ) ;
    HCI_READ_BD_ADDR_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_GENERATED_ALIAS_T_PDU : public HCICommandPDU
{
public:
    HCI_GENERATED_ALIAS_T_PDU() ;
    HCI_GENERATED_ALIAS_T_PDU( const PDU& ) ;
    HCI_GENERATED_ALIAS_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    BluetoothDeviceAddress get_bd_addr_alias(void) const ;
    void set_bd_addr_alias(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_T_PDU() ;
    HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_T_PDU( const PDU& ) ;
    HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_NUM_BCAST_RETXS_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_NUM_BCAST_RETXS_T_PDU() ;
    HCI_WRITE_NUM_BCAST_RETXS_T_PDU( const PDU& ) ;
    HCI_WRITE_NUM_BCAST_RETXS_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_num(void) const ;
    void set_num(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_PIN_CODE_REQ_NEG_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_PIN_CODE_REQ_NEG_REPLY_T_PDU() ;
    HCI_PIN_CODE_REQ_NEG_REPLY_T_PDU( const PDU& ) ;
    HCI_PIN_CODE_REQ_NEG_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_ALIAS_AUTH_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_ALIAS_AUTH_ENABLE_T_PDU() ;
    HCI_WRITE_ALIAS_AUTH_ENABLE_T_PDU( const PDU& ) ;
    HCI_WRITE_ALIAS_AUTH_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_enable(void) const ;
    void set_enable(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_LE_HOST_SUPPORT_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_LE_HOST_SUPPORT_T_PDU() ;
    HCI_WRITE_LE_HOST_SUPPORT_T_PDU( const PDU& ) ;
    HCI_WRITE_LE_HOST_SUPPORT_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_le_supported_host(void) const ;
    void set_le_supported_host(uint8 data) ;
    uint8 get_simultaneous_le_host(void) const ;
    void set_simultaneous_le_host(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_MASTER_LINK_KEY_T_PDU : public HCICommandPDU
{
public:
    HCI_MASTER_LINK_KEY_T_PDU() ;
    HCI_MASTER_LINK_KEY_T_PDU( const PDU& ) ;
    HCI_MASTER_LINK_KEY_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_link_key_type(void) const ;
    void set_link_key_type(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_T_PDU() ;
    HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_T_PDU( const PDU& ) ;
    HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_AFH_CHANNEL_CLASS_M_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_AFH_CHANNEL_CLASS_M_T_PDU() ;
    HCI_READ_AFH_CHANNEL_CLASS_M_T_PDU( const PDU& ) ;
    HCI_READ_AFH_CHANNEL_CLASS_M_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_WRITE_HOLD_MODE_ACTIVITY_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_HOLD_MODE_ACTIVITY_T_PDU() ;
    HCI_WRITE_HOLD_MODE_ACTIVITY_T_PDU( const PDU& ) ;
    HCI_WRITE_HOLD_MODE_ACTIVITY_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_activity(void) const ;
    void set_activity(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_T_PDU() ;
    HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_T_PDU( const PDU& ) ;
    HCI_WRITE_INQUIRY_TRANSMIT_POWER_LEVEL_T_PDU( const uint8* data , uint32 len ) ;
    int8 get_tx_power(void) const ;
    void set_tx_power(int8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_SCAN_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_SCAN_ENABLE_T_PDU() ;
    HCI_READ_SCAN_ENABLE_T_PDU( const PDU& ) ;
    HCI_READ_SCAN_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_ENCRYPTION_KEY_SIZE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_ENCRYPTION_KEY_SIZE_T_PDU() ;
    HCI_READ_ENCRYPTION_KEY_SIZE_T_PDU( const PDU& ) ;
    HCI_READ_ENCRYPTION_KEY_SIZE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_LINK_POLICY_SETTINGS_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_LINK_POLICY_SETTINGS_T_PDU() ;
    HCI_WRITE_LINK_POLICY_SETTINGS_T_PDU( const PDU& ) ;
    HCI_WRITE_LINK_POLICY_SETTINGS_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_link_policy_settings(void) const ;
    void set_link_policy_settings(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_ALIAS_AUTH_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_ALIAS_AUTH_ENABLE_T_PDU() ;
    HCI_READ_ALIAS_AUTH_ENABLE_T_PDU( const PDU& ) ;
    HCI_READ_ALIAS_AUTH_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_CREATE_NEW_UNIT_KEY_T_PDU : public HCICommandPDU
{
public:
    HCI_CREATE_NEW_UNIT_KEY_T_PDU() ;
    HCI_CREATE_NEW_UNIT_KEY_T_PDU( const PDU& ) ;
    HCI_CREATE_NEW_UNIT_KEY_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_WRITE_PAGESCAN_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_PAGESCAN_MODE_T_PDU() ;
    HCI_WRITE_PAGESCAN_MODE_T_PDU( const PDU& ) ;
    HCI_WRITE_PAGESCAN_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_EXIT_SNIFF_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_EXIT_SNIFF_MODE_T_PDU() ;
    HCI_EXIT_SNIFF_MODE_T_PDU( const PDU& ) ;
    HCI_EXIT_SNIFF_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_LOOPBACK_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LOOPBACK_MODE_T_PDU() ;
    HCI_READ_LOOPBACK_MODE_T_PDU( const PDU& ) ;
    HCI_READ_LOOPBACK_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU() ;
    HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU( const PDU& ) ;
    HCI_READ_EXTENDED_INQUIRY_RESPONSE_DATA_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_FAILED_CONTACT_COUNT_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_FAILED_CONTACT_COUNT_T_PDU() ;
    HCI_READ_FAILED_CONTACT_COUNT_T_PDU( const PDU& ) ;
    HCI_READ_FAILED_CONTACT_COUNT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_SNIFF_SUB_RATE_T_PDU : public HCICommandPDU
{
public:
    HCI_SNIFF_SUB_RATE_T_PDU() ;
    HCI_SNIFF_SUB_RATE_T_PDU( const PDU& ) ;
    HCI_SNIFF_SUB_RATE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_max_remote_latency(void) const ;
    void set_max_remote_latency(uint16 data) ;
    uint16 get_min_remote_timeout(void) const ;
    void set_min_remote_timeout(uint16 data) ;
    uint16 get_min_local_timeout(void) const ;
    void set_min_local_timeout(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_ANON_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_ANON_MODE_T_PDU() ;
    HCI_READ_ANON_MODE_T_PDU( const PDU& ) ;
    HCI_READ_ANON_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_SET_SCAN_PARAMETERS_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_SET_SCAN_PARAMETERS_T_PDU() ;
    HCI_ULP_SET_SCAN_PARAMETERS_T_PDU( const PDU& ) ;
    HCI_ULP_SET_SCAN_PARAMETERS_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_scan_type(void) const ;
    void set_scan_type(uint8 data) ;
    uint16 get_scan_interval(void) const ;
    void set_scan_interval(uint16 data) ;
    uint16 get_scan_window(void) const ;
    void set_scan_window(uint16 data) ;
    uint8 get_own_address_type(void) const ;
    void set_own_address_type(uint8 data) ;
    uint8 get_scanning_filter_policy(void) const ;
    void set_scanning_filter_policy(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_T_PDU() ;
    HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_T_PDU( const PDU& ) ;
    HCI_WRITE_SIMPLE_PAIRING_DEBUG_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_simple_pairing_debug_mode(void) const ;
    void set_simple_pairing_debug_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_AUTO_FLUSH_TIMEOUT_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_AUTO_FLUSH_TIMEOUT_T_PDU() ;
    HCI_READ_AUTO_FLUSH_TIMEOUT_T_PDU( const PDU& ) ;
    HCI_READ_AUTO_FLUSH_TIMEOUT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_T_PDU() ;
    HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_T_PDU( const PDU& ) ;
    HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_DELETE_STORED_LINK_KEY_T_PDU : public HCICommandPDU
{
public:
    HCI_DELETE_STORED_LINK_KEY_T_PDU() ;
    HCI_DELETE_STORED_LINK_KEY_T_PDU( const PDU& ) ;
    HCI_DELETE_STORED_LINK_KEY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_flag(void) const ;
    void set_flag(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_CLASS_OF_DEVICE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_CLASS_OF_DEVICE_T_PDU() ;
    HCI_WRITE_CLASS_OF_DEVICE_T_PDU( const PDU& ) ;
    HCI_WRITE_CLASS_OF_DEVICE_T_PDU( const uint8* data , uint32 len ) ;
    uint24 get_dev_class(void) const ;
    void set_dev_class(uint24 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_PIN_TYPE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_PIN_TYPE_T_PDU() ;
    HCI_WRITE_PIN_TYPE_T_PDU( const PDU& ) ;
    HCI_WRITE_PIN_TYPE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_pin_type(void) const ;
    void set_pin_type(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_EXIT_PARK_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_EXIT_PARK_MODE_T_PDU() ;
    HCI_EXIT_PARK_MODE_T_PDU( const PDU& ) ;
    HCI_EXIT_PARK_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_SET_ADVERTISE_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_SET_ADVERTISE_ENABLE_T_PDU() ;
    HCI_ULP_SET_ADVERTISE_ENABLE_T_PDU( const PDU& ) ;
    HCI_ULP_SET_ADVERTISE_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_advertising_enable(void) const ;
    void set_advertising_enable(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_QOS_SETUP_T_PDU : public HCICommandPDU
{
public:
    HCI_QOS_SETUP_T_PDU() ;
    HCI_QOS_SETUP_T_PDU( const PDU& ) ;
    HCI_QOS_SETUP_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_flags(void) const ;
    void set_flags(uint8 data) ;
    uint8 get_service_type(void) const ;
    void set_service_type(uint8 data) ;
    uint32 get_token_rate(void) const ;
    void set_token_rate(uint32 data) ;
    uint32 get_peak_bandwidth(void) const ;
    void set_peak_bandwidth(uint32 data) ;
    uint32 get_latency(void) const ;
    void set_latency(uint32 data) ;
    uint32 get_delay_variation(void) const ;
    void set_delay_variation(uint32 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_PAGESCAN_ACTIVITY_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_PAGESCAN_ACTIVITY_T_PDU() ;
    HCI_WRITE_PAGESCAN_ACTIVITY_T_PDU( const PDU& ) ;
    HCI_WRITE_PAGESCAN_ACTIVITY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_pagescan_interval(void) const ;
    void set_pagescan_interval(uint16 data) ;
    uint16 get_pagescan_window(void) const ;
    void set_pagescan_window(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_VOICE_SETTING_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_VOICE_SETTING_T_PDU() ;
    HCI_READ_VOICE_SETTING_T_PDU( const PDU& ) ;
    HCI_READ_VOICE_SETTING_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_PARK_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_PARK_MODE_T_PDU() ;
    HCI_PARK_MODE_T_PDU( const PDU& ) ;
    HCI_PARK_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_max_interval(void) const ;
    void set_max_interval(uint16 data) ;
    uint16 get_min_interval(void) const ;
    void set_min_interval(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_COUNTRY_CODE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_COUNTRY_CODE_T_PDU() ;
    HCI_READ_COUNTRY_CODE_T_PDU( const PDU& ) ;
    HCI_READ_COUNTRY_CODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_HOLD_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_HOLD_MODE_T_PDU() ;
    HCI_HOLD_MODE_T_PDU( const PDU& ) ;
    HCI_HOLD_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_max_interval(void) const ;
    void set_max_interval(uint16 data) ;
    uint16 get_min_interval(void) const ;
    void set_min_interval(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_AUTH_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_AUTH_ENABLE_T_PDU() ;
    HCI_READ_AUTH_ENABLE_T_PDU( const PDU& ) ;
    HCI_READ_AUTH_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_LOCAL_OOB_DATA_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LOCAL_OOB_DATA_T_PDU() ;
    HCI_READ_LOCAL_OOB_DATA_T_PDU( const PDU& ) ;
    HCI_READ_LOCAL_OOB_DATA_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_T_PDU() ;
    HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_T_PDU( const PDU& ) ;
    HCI_WRITE_DEFAULT_LINK_POLICY_SETTINGS_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_default_lps(void) const ;
    void set_default_lps(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_PAGESCAN_ACTIVITY_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_PAGESCAN_ACTIVITY_T_PDU() ;
    HCI_READ_PAGESCAN_ACTIVITY_T_PDU( const PDU& ) ;
    HCI_READ_PAGESCAN_ACTIVITY_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ACCEPT_CONNECTION_REQ_T_PDU : public HCICommandPDU
{
public:
    HCI_ACCEPT_CONNECTION_REQ_T_PDU() ;
    HCI_ACCEPT_CONNECTION_REQ_T_PDU( const PDU& ) ;
    HCI_ACCEPT_CONNECTION_REQ_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_role(void) const ;
    void set_role(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_T_PDU() ;
    HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_T_PDU( const PDU& ) ;
    HCI_ULP_READ_LOCAL_SUPPORTED_FEATURES_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_TX_POWER_LEVEL_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_TX_POWER_LEVEL_T_PDU() ;
    HCI_READ_TX_POWER_LEVEL_T_PDU( const PDU& ) ;
    HCI_READ_TX_POWER_LEVEL_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_type(void) const ;
    void set_type(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_LINK_SUPERV_TIMEOUT_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_LINK_SUPERV_TIMEOUT_T_PDU() ;
    HCI_WRITE_LINK_SUPERV_TIMEOUT_T_PDU( const PDU& ) ;
    HCI_WRITE_LINK_SUPERV_TIMEOUT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_timeout(void) const ;
    void set_timeout(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_AUTH_REQ_T_PDU : public HCICommandPDU
{
public:
    HCI_AUTH_REQ_T_PDU() ;
    HCI_AUTH_REQ_T_PDU( const PDU& ) ;
    HCI_AUTH_REQ_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_INQUIRY_CANCEL_T_PDU : public HCICommandPDU
{
public:
    HCI_INQUIRY_CANCEL_T_PDU() ;
    HCI_INQUIRY_CANCEL_T_PDU( const PDU& ) ;
    HCI_INQUIRY_CANCEL_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_WRITE_INQUIRYSCAN_ACTIVITY_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_INQUIRYSCAN_ACTIVITY_T_PDU() ;
    HCI_WRITE_INQUIRYSCAN_ACTIVITY_T_PDU( const PDU& ) ;
    HCI_WRITE_INQUIRYSCAN_ACTIVITY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_inqscan_interval(void) const ;
    void set_inqscan_interval(uint16 data) ;
    uint16 get_inqscan_window(void) const ;
    void set_inqscan_window(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_NUM_BCAST_RETXS_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_NUM_BCAST_RETXS_T_PDU() ;
    HCI_READ_NUM_BCAST_RETXS_T_PDU( const PDU& ) ;
    HCI_READ_NUM_BCAST_RETXS_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_AFH_CHANNEL_MAP_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_AFH_CHANNEL_MAP_T_PDU() ;
    HCI_READ_AFH_CHANNEL_MAP_T_PDU( const PDU& ) ;
    HCI_READ_AFH_CHANNEL_MAP_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_USER_PASSKEY_REQUEST_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_USER_PASSKEY_REQUEST_REPLY_T_PDU() ;
    HCI_USER_PASSKEY_REQUEST_REPLY_T_PDU( const PDU& ) ;
    HCI_USER_PASSKEY_REQUEST_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint32 get_numeric_value(void) const ;
    void set_numeric_value(uint32 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_PAGESCAN_PERIOD_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_PAGESCAN_PERIOD_MODE_T_PDU() ;
    HCI_WRITE_PAGESCAN_PERIOD_MODE_T_PDU( const PDU& ) ;
    HCI_WRITE_PAGESCAN_PERIOD_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_LE_HOST_SUPPORT_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LE_HOST_SUPPORT_T_PDU() ;
    HCI_READ_LE_HOST_SUPPORT_T_PDU( const PDU& ) ;
    HCI_READ_LE_HOST_SUPPORT_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_LINK_SUPERV_TIMEOUT_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LINK_SUPERV_TIMEOUT_T_PDU() ;
    HCI_READ_LINK_SUPERV_TIMEOUT_T_PDU( const PDU& ) ;
    HCI_READ_LINK_SUPERV_TIMEOUT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_EXCHANGE_ALIAS_INFO_T_PDU : public HCICommandPDU
{
public:
    HCI_EXCHANGE_ALIAS_INFO_T_PDU() ;
    HCI_EXCHANGE_ALIAS_INFO_T_PDU( const PDU& ) ;
    HCI_EXCHANGE_ALIAS_INFO_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    BluetoothDeviceAddress get_local_alias_addr(void) const ;
    void set_local_alias_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_CONN_ACCEPT_TIMEOUT_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_CONN_ACCEPT_TIMEOUT_T_PDU() ;
    HCI_WRITE_CONN_ACCEPT_TIMEOUT_T_PDU( const PDU& ) ;
    HCI_WRITE_CONN_ACCEPT_TIMEOUT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_conn_accept_timeout(void) const ;
    void set_conn_accept_timeout(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_RESET_FAILED_CONTACT_COUNT_T_PDU : public HCICommandPDU
{
public:
    HCI_RESET_FAILED_CONTACT_COUNT_T_PDU() ;
    HCI_RESET_FAILED_CONTACT_COUNT_T_PDU( const PDU& ) ;
    HCI_RESET_FAILED_CONTACT_COUNT_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_LOOPBACK_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_LOOPBACK_MODE_T_PDU() ;
    HCI_WRITE_LOOPBACK_MODE_T_PDU( const PDU& ) ;
    HCI_WRITE_LOOPBACK_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_ANON_ADDR_CHANGE_PARAMS_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_ANON_ADDR_CHANGE_PARAMS_T_PDU() ;
    HCI_READ_ANON_ADDR_CHANGE_PARAMS_T_PDU( const PDU& ) ;
    HCI_READ_ANON_ADDR_CHANGE_PARAMS_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_CREATE_CONNECTION_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_CREATE_CONNECTION_T_PDU() ;
    HCI_ULP_CREATE_CONNECTION_T_PDU( const PDU& ) ;
    HCI_ULP_CREATE_CONNECTION_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_scan_interval(void) const ;
    void set_scan_interval(uint16 data) ;
    uint16 get_scan_window(void) const ;
    void set_scan_window(uint16 data) ;
    uint8 get_initiator_filter_policy(void) const ;
    void set_initiator_filter_policy(uint8 data) ;
    uint8 get_peer_address_type(void) const ;
    void set_peer_address_type(uint8 data) ;
    BluetoothDeviceAddress get_peer_address(void) const ;
    void set_peer_address(BluetoothDeviceAddress data) ;
    uint8 get_own_address_type(void) const ;
    void set_own_address_type(uint8 data) ;
    uint16 get_conn_interval_min(void) const ;
    void set_conn_interval_min(uint16 data) ;
    uint16 get_conn_interval_max(void) const ;
    void set_conn_interval_max(uint16 data) ;
    uint16 get_conn_latency(void) const ;
    void set_conn_latency(uint16 data) ;
    uint16 get_supervision_timeout(void) const ;
    void set_supervision_timeout(uint16 data) ;
    uint16 get_minimum_ce_length(void) const ;
    void set_minimum_ce_length(uint16 data) ;
    uint16 get_maximum_ce_length(void) const ;
    void set_maximum_ce_length(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_LOCAL_SUPP_FEATURES_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LOCAL_SUPP_FEATURES_T_PDU() ;
    HCI_READ_LOCAL_SUPP_FEATURES_T_PDU( const PDU& ) ;
    HCI_READ_LOCAL_SUPP_FEATURES_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_RSSI_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_RSSI_T_PDU() ;
    HCI_READ_RSSI_T_PDU( const PDU& ) ;
    HCI_READ_RSSI_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_EXIT_PERIODIC_INQUIRY_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_EXIT_PERIODIC_INQUIRY_MODE_T_PDU() ;
    HCI_EXIT_PERIODIC_INQUIRY_MODE_T_PDU( const PDU& ) ;
    HCI_EXIT_PERIODIC_INQUIRY_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_T_PDU() ;
    HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_T_PDU( const PDU& ) ;
    HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_connection_handle(void) const ;
    void set_connection_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_T_PDU : public HCICommandPDU
{
public:
    HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_T_PDU() ;
    HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_T_PDU( const PDU& ) ;
    HCI_ACCEPT_SYNCHRONOUS_CONN_REQ_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint32 get_tx_bdw(void) const ;
    void set_tx_bdw(uint32 data) ;
    uint32 get_rx_bdw(void) const ;
    void set_rx_bdw(uint32 data) ;
    uint16 get_max_latency(void) const ;
    void set_max_latency(uint16 data) ;
    uint16 get_voice_settings(void) const ;
    void set_voice_settings(uint16 data) ;
    uint8 get_retx_effort(void) const ;
    void set_retx_effort(uint8 data) ;
    uint16 get_pkt_type(void) const ;
    void set_pkt_type(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_ENC_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_ENC_MODE_T_PDU() ;
    HCI_WRITE_ENC_MODE_T_PDU( const PDU& ) ;
    HCI_WRITE_ENC_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_CONN_ACCEPT_TIMEOUT_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_CONN_ACCEPT_TIMEOUT_T_PDU() ;
    HCI_READ_CONN_ACCEPT_TIMEOUT_T_PDU( const PDU& ) ;
    HCI_READ_CONN_ACCEPT_TIMEOUT_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_T_PDU() ;
    HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_T_PDU( const PDU& ) ;
    HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_reason(void) const ;
    void set_reason(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ENABLE_DUT_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_ENABLE_DUT_MODE_T_PDU() ;
    HCI_ENABLE_DUT_MODE_T_PDU( const PDU& ) ;
    HCI_ENABLE_DUT_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_READ_SUPPORTED_STATES_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_READ_SUPPORTED_STATES_T_PDU() ;
    HCI_ULP_READ_SUPPORTED_STATES_T_PDU( const PDU& ) ;
    HCI_ULP_READ_SUPPORTED_STATES_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_GET_LINK_QUALITY_T_PDU : public HCICommandPDU
{
public:
    HCI_GET_LINK_QUALITY_T_PDU() ;
    HCI_GET_LINK_QUALITY_T_PDU( const PDU& ) ;
    HCI_GET_LINK_QUALITY_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_CHANGE_CONN_PKT_TYPE_T_PDU : public HCICommandPDU
{
public:
    HCI_CHANGE_CONN_PKT_TYPE_T_PDU() ;
    HCI_CHANGE_CONN_PKT_TYPE_T_PDU( const PDU& ) ;
    HCI_CHANGE_CONN_PKT_TYPE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_pkt_type(void) const ;
    void set_pkt_type(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_VOICE_SETTING_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_VOICE_SETTING_T_PDU() ;
    HCI_WRITE_VOICE_SETTING_T_PDU( const PDU& ) ;
    HCI_WRITE_VOICE_SETTING_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_voice_setting(void) const ;
    void set_voice_setting(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_ENH_TX_POWER_LEVEL_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_ENH_TX_POWER_LEVEL_T_PDU() ;
    HCI_READ_ENH_TX_POWER_LEVEL_T_PDU( const PDU& ) ;
    HCI_READ_ENH_TX_POWER_LEVEL_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_type(void) const ;
    void set_type(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_SET_RANDOM_ADDRESS_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_SET_RANDOM_ADDRESS_T_PDU() ;
    HCI_ULP_SET_RANDOM_ADDRESS_T_PDU( const PDU& ) ;
    HCI_ULP_SET_RANDOM_ADDRESS_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_random_address(void) const ;
    void set_random_address(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_CLOCK_OFFSET_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_CLOCK_OFFSET_T_PDU() ;
    HCI_READ_CLOCK_OFFSET_T_PDU( const PDU& ) ;
    HCI_READ_CLOCK_OFFSET_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_REMOTE_NAME_REQ_CANCEL_T_PDU : public HCICommandPDU
{
public:
    HCI_REMOTE_NAME_REQ_CANCEL_T_PDU() ;
    HCI_REMOTE_NAME_REQ_CANCEL_T_PDU( const PDU& ) ;
    HCI_REMOTE_NAME_REQ_CANCEL_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_RECEIVER_TEST_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_RECEIVER_TEST_T_PDU() ;
    HCI_ULP_RECEIVER_TEST_T_PDU( const PDU& ) ;
    HCI_ULP_RECEIVER_TEST_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_rx_channel(void) const ;
    void set_rx_channel(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_READ_BUFFER_SIZE_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_READ_BUFFER_SIZE_T_PDU() ;
    HCI_ULP_READ_BUFFER_SIZE_T_PDU( const PDU& ) ;
    HCI_ULP_READ_BUFFER_SIZE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_USER_PASSKEY_REQUEST_NEG_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_USER_PASSKEY_REQUEST_NEG_REPLY_T_PDU() ;
    HCI_USER_PASSKEY_REQUEST_NEG_REPLY_T_PDU( const PDU& ) ;
    HCI_USER_PASSKEY_REQUEST_NEG_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_LINK_KEY_REQ_NEG_REPLY_T_PDU : public HCICommandPDU
{
public:
    HCI_LINK_KEY_REQ_NEG_REPLY_T_PDU() ;
    HCI_LINK_KEY_REQ_NEG_REPLY_T_PDU( const PDU& ) ;
    HCI_LINK_KEY_REQ_NEG_REPLY_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_LOCAL_EXT_FEATURES_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LOCAL_EXT_FEATURES_T_PDU() ;
    HCI_READ_LOCAL_EXT_FEATURES_T_PDU( const PDU& ) ;
    HCI_READ_LOCAL_EXT_FEATURES_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_page_num(void) const ;
    void set_page_num(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_CLASS_OF_DEVICE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_CLASS_OF_DEVICE_T_PDU() ;
    HCI_READ_CLASS_OF_DEVICE_T_PDU( const PDU& ) ;
    HCI_READ_CLASS_OF_DEVICE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_T_PDU() ;
    HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_T_PDU( const PDU& ) ;
    HCI_ULP_REMOVE_DEVICE_FROM_WHITE_LIST_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_address_type(void) const ;
    void set_address_type(uint8 data) ;
    BluetoothDeviceAddress get_address(void) const ;
    void set_address(BluetoothDeviceAddress data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_BUFFER_SIZE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_BUFFER_SIZE_T_PDU() ;
    HCI_READ_BUFFER_SIZE_T_PDU( const PDU& ) ;
    HCI_READ_BUFFER_SIZE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_ULP_READ_REMOTE_USED_FEATURES_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_READ_REMOTE_USED_FEATURES_T_PDU() ;
    HCI_ULP_READ_REMOTE_USED_FEATURES_T_PDU( const PDU& ) ;
    HCI_ULP_READ_REMOTE_USED_FEATURES_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_connection_handle(void) const ;
    void set_connection_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_T_PDU : public HCICommandPDU
{
public:
    HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_T_PDU() ;
    HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_T_PDU( const PDU& ) ;
    HCI_RESET_FIXED_ADDRESS_ATTEMPTS_COUNTER_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_max_failures(void) const ;
    void set_max_failures(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_FLOW_SPEC_T_PDU : public HCICommandPDU
{
public:
    HCI_FLOW_SPEC_T_PDU() ;
    HCI_FLOW_SPEC_T_PDU( const PDU& ) ;
    HCI_FLOW_SPEC_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint8 get_flags(void) const ;
    void set_flags(uint8 data) ;
    uint8 get_flow_direction(void) const ;
    void set_flow_direction(uint8 data) ;
    uint8 get_service_type(void) const ;
    void set_service_type(uint8 data) ;
    uint32 get_token_rate(void) const ;
    void set_token_rate(uint32 data) ;
    uint32 get_token_bucket_size(void) const ;
    void set_token_bucket_size(uint32 data) ;
    uint32 get_peak_bandwidth(void) const ;
    void set_peak_bandwidth(uint32 data) ;
    uint32 get_access_latency(void) const ;
    void set_access_latency(uint32 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_SET_HCTOHOST_FLOW_CONTROL_T_PDU : public HCICommandPDU
{
public:
    HCI_SET_HCTOHOST_FLOW_CONTROL_T_PDU() ;
    HCI_SET_HCTOHOST_FLOW_CONTROL_T_PDU( const PDU& ) ;
    HCI_SET_HCTOHOST_FLOW_CONTROL_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_enable(void) const ;
    void set_enable(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_SCAN_ENABLE_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_SCAN_ENABLE_T_PDU() ;
    HCI_WRITE_SCAN_ENABLE_T_PDU( const PDU& ) ;
    HCI_WRITE_SCAN_ENABLE_T_PDU( const uint8* data , uint32 len ) ;
    uint8 get_scan_enable(void) const ;
    void set_scan_enable(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_READ_CHANNEL_MAP_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_READ_CHANNEL_MAP_T_PDU() ;
    HCI_ULP_READ_CHANNEL_MAP_T_PDU( const PDU& ) ;
    HCI_ULP_READ_CHANNEL_MAP_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_connection_handle(void) const ;
    void set_connection_handle(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_SNIFF_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_SNIFF_MODE_T_PDU() ;
    HCI_SNIFF_MODE_T_PDU( const PDU& ) ;
    HCI_SNIFF_MODE_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 data) ;
    uint16 get_max_interval(void) const ;
    void set_max_interval(uint16 data) ;
    uint16 get_min_interval(void) const ;
    void set_min_interval(uint16 data) ;
    uint16 get_attempt(void) const ;
    void set_attempt(uint16 data) ;
    uint16 get_timeout(void) const ;
    void set_timeout(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_LOCAL_SUPP_COMMANDS_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_LOCAL_SUPP_COMMANDS_T_PDU() ;
    HCI_READ_LOCAL_SUPP_COMMANDS_T_PDU( const PDU& ) ;
    HCI_READ_LOCAL_SUPP_COMMANDS_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_REJECT_CONNECTION_REQ_T_PDU : public HCICommandPDU
{
public:
    HCI_REJECT_CONNECTION_REQ_T_PDU() ;
    HCI_REJECT_CONNECTION_REQ_T_PDU( const PDU& ) ;
    HCI_REJECT_CONNECTION_REQ_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint8 get_reason(void) const ;
    void set_reason(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_ULP_SET_ADVERTISING_PARAMETERS_T_PDU : public HCICommandPDU
{
public:
    HCI_ULP_SET_ADVERTISING_PARAMETERS_T_PDU() ;
    HCI_ULP_SET_ADVERTISING_PARAMETERS_T_PDU( const PDU& ) ;
    HCI_ULP_SET_ADVERTISING_PARAMETERS_T_PDU( const uint8* data , uint32 len ) ;
    uint16 get_adv_interval_min(void) const ;
    void set_adv_interval_min(uint16 data) ;
    uint16 get_adv_interval_max(void) const ;
    void set_adv_interval_max(uint16 data) ;
    uint8 get_advertising_type(void) const ;
    void set_advertising_type(uint8 data) ;
    uint8 get_own_address_type(void) const ;
    void set_own_address_type(uint8 data) ;
    uint8 get_direct_address_type(void) const ;
    void set_direct_address_type(uint8 data) ;
    BluetoothDeviceAddress get_direct_address(void) const ;
    void set_direct_address(BluetoothDeviceAddress data) ;
    uint8 get_advertising_channel_map(void) const ;
    void set_advertising_channel_map(uint8 data) ;
    uint8 get_advertising_filter_policy(void) const ;
    void set_advertising_filter_policy(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_T_PDU : public HCICommandPDU
{
public:
    HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_T_PDU() ;
    HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_T_PDU( const PDU& ) ;
    HCI_WRITE_ANON_ADDR_CHANGE_PARAMS_T_PDU( const uint8* data , uint32 len ) ;
    uint32 get_addr_update_time(void) const ;
    void set_addr_update_time(uint32 data) ;
    uint16 get_addr_inquiry_period(void) const ;
    void set_addr_inquiry_period(uint16 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_CREATE_CONNECTION_T_PDU : public HCICommandPDU
{
public:
    HCI_CREATE_CONNECTION_T_PDU() ;
    HCI_CREATE_CONNECTION_T_PDU( const PDU& ) ;
    HCI_CREATE_CONNECTION_T_PDU( const uint8* data , uint32 len ) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress data) ;
    uint16 get_pkt_type(void) const ;
    void set_pkt_type(uint16 data) ;
    uint8 get_page_scan_rep_mode(void) const ;
    void set_page_scan_rep_mode(uint8 data) ;
    uint8 get_page_scan_mode(void) const ;
    void set_page_scan_mode(uint8 data) ;
    uint16 get_clock_offset(void) const ;
    void set_clock_offset(uint16 data) ;
    uint8 get_allow_role_switch(void) const ;
    void set_allow_role_switch(uint8 data) ;
    bool build ( const uint32 * const parameters );
};

class HCI_READ_CURRENT_IAC_LAP_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_CURRENT_IAC_LAP_T_PDU() ;
    HCI_READ_CURRENT_IAC_LAP_T_PDU( const PDU& ) ;
    HCI_READ_CURRENT_IAC_LAP_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_HOLD_MODE_ACTIVITY_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_HOLD_MODE_ACTIVITY_T_PDU() ;
    HCI_READ_HOLD_MODE_ACTIVITY_T_PDU( const PDU& ) ;
    HCI_READ_HOLD_MODE_ACTIVITY_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_INQUIRY_MODE_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_INQUIRY_MODE_T_PDU() ;
    HCI_READ_INQUIRY_MODE_T_PDU( const PDU& ) ;
    HCI_READ_INQUIRY_MODE_T_PDU( const uint8* data , uint32 len ) ;
};

class HCI_READ_PAGE_TIMEOUT_T_PDU : public HCICommandPDU
{
public:
    HCI_READ_PAGE_TIMEOUT_T_PDU() ;
    HCI_READ_PAGE_TIMEOUT_T_PDU( const PDU& ) ;
    HCI_READ_PAGE_TIMEOUT_T_PDU( const uint8* data , uint32 len ) ;
};

#endif
