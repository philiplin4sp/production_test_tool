/////////////////////////WARNING - AUTOGENERATED FILE//////////////////////////
//
//  FILENAME:   gen_bccmdpdu.h
//
//  PURPOSE :   Headers for autogenerated bccmd pdus
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __GEN_BCCMDPDU_H__
#define __GEN_BCCMDPDU_H__

#include "common/types.h"
#include "hcipacker/bluecorepdu.h"

#ifdef WIN32
#pragma warning(disable: 4800)
#endif

class BCCMD_MAP_SCO_WBS_PDU : public BCCMD_PDU
{
public:
    BCCMD_MAP_SCO_WBS_PDU();
    BCCMD_MAP_SCO_WBS_PDU( const PDU& );
    BCCMD_MAP_SCO_WBS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_source_sid(void) const ;
    void set_source_sid(uint16 value) ;
    uint16 get_sink_sid(void) const ;
    void set_sink_sid(uint16 value) ;
protected:
    BCCMD_MAP_SCO_WBS_PDU ( uint16 varid ) ;
};

class BCCMD_BLE_ADV_FILT_CLEAR_PDU : public BCCMD_PDU
{
public:
    BCCMD_BLE_ADV_FILT_CLEAR_PDU();
    BCCMD_BLE_ADV_FILT_CLEAR_PDU( const PDU& );
    BCCMD_BLE_ADV_FILT_CLEAR_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_BLE_ADV_FILT_CLEAR_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U10_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U10_PDU();
    BCCMD_STIBBONS_U10_PDU( const PDU& );
    BCCMD_STIBBONS_U10_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U10_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U11_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U11_PDU();
    BCCMD_STIBBONS_U11_PDU( const PDU& );
    BCCMD_STIBBONS_U11_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U11_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U12_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U12_PDU();
    BCCMD_STIBBONS_U12_PDU( const PDU& );
    BCCMD_STIBBONS_U12_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U12_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U13_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U13_PDU();
    BCCMD_STIBBONS_U13_PDU( const PDU& );
    BCCMD_STIBBONS_U13_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U13_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U14_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U14_PDU();
    BCCMD_STIBBONS_U14_PDU( const PDU& );
    BCCMD_STIBBONS_U14_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U14_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U15_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U15_PDU();
    BCCMD_STIBBONS_U15_PDU( const PDU& );
    BCCMD_STIBBONS_U15_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U15_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U16_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U16_PDU();
    BCCMD_STIBBONS_U16_PDU( const PDU& );
    BCCMD_STIBBONS_U16_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U16_PDU ( uint16 varid ) ;
};

class BCCMD_PCM_RATE_AND_ROUTE_PDU : public BCCMD_PDU
{
public:
    BCCMD_PCM_RATE_AND_ROUTE_PDU();
    BCCMD_PCM_RATE_AND_ROUTE_PDU( const PDU& );
    BCCMD_PCM_RATE_AND_ROUTE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_port_id(void) const ;
    void set_port_id(uint16 value) ;
    uint16 get_sync_port(void) const ;
    void set_sync_port(uint16 value) ;
    uint16 get_io_type(void) const ;
    void set_io_type(uint16 value) ;
    uint32 get_read_rate(void) const ;
    void set_read_rate(uint32 value) ;
    uint32 get_write_rate(void) const ;
    void set_write_rate(uint32 value) ;
protected:
    BCCMD_PCM_RATE_AND_ROUTE_PDU ( uint16 varid ) ;
};

class BCCMD_VM_STATUS_PDU : public BCCMD_PDU
{
public:
    BCCMD_VM_STATUS_PDU();
    BCCMD_VM_STATUS_PDU( const PDU& );
    BCCMD_VM_STATUS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_vmstatus(void) const ;
    void set_vmstatus(uint16 value) ;
    uint16 get_exit_code(void) const ;
    void set_exit_code(uint16 value) ;
protected:
    BCCMD_VM_STATUS_PDU ( uint16 varid ) ;
};

class BCCMD_COEX_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_COEX_ENABLE_PDU();
    BCCMD_COEX_ENABLE_PDU( const PDU& );
    BCCMD_COEX_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_COEX_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_MIC_BIAS_CTRL_PDU : public BCCMD_PDU
{
public:
    BCCMD_MIC_BIAS_CTRL_PDU();
    BCCMD_MIC_BIAS_CTRL_PDU( const PDU& );
    BCCMD_MIC_BIAS_CTRL_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_mic_bias_enable(void) const ;
    void set_mic_bias_enable(uint16 value) ;
    uint16 get_mic_bias_current(void) const ;
    void set_mic_bias_current(uint16 value) ;
    uint16 get_mic_bias_voltage(void) const ;
    void set_mic_bias_voltage(uint16 value) ;
    uint16 get_enable_mic_bias_low_power_mode(void) const ;
    void set_enable_mic_bias_low_power_mode(uint16 value) ;
protected:
    BCCMD_MIC_BIAS_CTRL_PDU ( uint16 varid ) ;
};

class BCCMD_BABEL_SPI_RESET_AND_GO_PDU : public BCCMD_PDU
{
public:
    BCCMD_BABEL_SPI_RESET_AND_GO_PDU();
    BCCMD_BABEL_SPI_RESET_AND_GO_PDU( const PDU& );
    BCCMD_BABEL_SPI_RESET_AND_GO_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_BABEL_SPI_RESET_AND_GO_PDU ( uint16 varid ) ;
};

class BCCMD_PSCLR_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSCLR_PDU();
    BCCMD_PSCLR_PDU( const PDU& );
    BCCMD_PSCLR_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PSCLR_PDU ( uint16 varid ) ;
};

class BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU : public BCCMD_PDU
{
public:
    BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU();
    BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU( const PDU& );
    BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_AFH_CHANNEL_RELEASE_TIME_PDU ( uint16 varid ) ;
};

class BCCMD_CONFIG_UART_PDU : public BCCMD_PDU
{
public:
    BCCMD_CONFIG_UART_PDU();
    BCCMD_CONFIG_UART_PDU( const PDU& );
    BCCMD_CONFIG_UART_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CONFIG_UART_PDU ( uint16 varid ) ;
};

class BCCMD_CHARGER_SET_TRIM_NOW_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHARGER_SET_TRIM_NOW_PDU();
    BCCMD_CHARGER_SET_TRIM_NOW_PDU( const PDU& );
    BCCMD_CHARGER_SET_TRIM_NOW_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHARGER_SET_TRIM_NOW_PDU ( uint16 varid ) ;
};

class BCCMD_CHARGER_DISABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHARGER_DISABLE_PDU();
    BCCMD_CHARGER_DISABLE_PDU( const PDU& );
    BCCMD_CHARGER_DISABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHARGER_DISABLE_PDU ( uint16 varid ) ;
};

class BCCMD_BUILDID_LOADER_PDU : public BCCMD_PDU
{
public:
    BCCMD_BUILDID_LOADER_PDU();
    BCCMD_BUILDID_LOADER_PDU( const PDU& );
    BCCMD_BUILDID_LOADER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BUILDID_LOADER_PDU ( uint16 varid ) ;
};

class BCCMD_EXT_CLOCK_PERIOD_PDU : public BCCMD_PDU
{
public:
    BCCMD_EXT_CLOCK_PERIOD_PDU();
    BCCMD_EXT_CLOCK_PERIOD_PDU( const PDU& );
    BCCMD_EXT_CLOCK_PERIOD_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_EXT_CLOCK_PERIOD_PDU ( uint16 varid ) ;
};

class BCCMD_FMTX_REG_PDU : public BCCMD_PDU
{
public:
    BCCMD_FMTX_REG_PDU();
    BCCMD_FMTX_REG_PDU( const PDU& );
    BCCMD_FMTX_REG_PDU( const uint8 * buffer , uint32 len ) ;
    uint8 get_fmtx_register(void) const ;
    void set_fmtx_register(uint8 value) ;
    uint16 get_value(void) const ;
    void set_value(uint16 value) ;
protected:
    BCCMD_FMTX_REG_PDU ( uint16 varid ) ;
};

class BCCMD_ADCRES_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADCRES_PDU();
    BCCMD_ADCRES_PDU( const PDU& );
    BCCMD_ADCRES_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_channel(void) const ;
    void set_channel(uint16 value) ;
    bool get_valid(void) const ;
    void set_valid(bool value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
protected:
    BCCMD_ADCRES_PDU ( uint16 varid ) ;
};

class BCCMD_VM_DEBUG_PDU : public BCCMD_PDU
{
public:
    BCCMD_VM_DEBUG_PDU();
    BCCMD_VM_DEBUG_PDU( const PDU& );
    BCCMD_VM_DEBUG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_function(void) const ;
    void set_function(uint16 value) ;
protected:
    BCCMD_VM_DEBUG_PDU ( uint16 varid ) ;
};

class BCCMD_PIO_PROTECT_MASK_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO_PROTECT_MASK_PDU();
    BCCMD_PIO_PROTECT_MASK_PDU( const PDU& );
    BCCMD_PIO_PROTECT_MASK_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PIO_PROTECT_MASK_PDU ( uint16 varid ) ;
};

class BCCMD_SCATTERNET_OVERRIDE_SCO_PDU : public BCCMD_PDU
{
public:
    BCCMD_SCATTERNET_OVERRIDE_SCO_PDU();
    BCCMD_SCATTERNET_OVERRIDE_SCO_PDU( const PDU& );
    BCCMD_SCATTERNET_OVERRIDE_SCO_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_SCATTERNET_OVERRIDE_SCO_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_TRANSACTION_COMPLETE_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_TRANSACTION_COMPLETE_PDU();
    BCCMD_STREAM_TRANSACTION_COMPLETE_PDU( const PDU& );
    BCCMD_STREAM_TRANSACTION_COMPLETE_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STREAM_TRANSACTION_COMPLETE_PDU ( uint16 varid ) ;
};

class BCCMD_GSM_RX_ARFCN_PDU : public BCCMD_PDU
{
public:
    BCCMD_GSM_RX_ARFCN_PDU();
    BCCMD_GSM_RX_ARFCN_PDU( const PDU& );
    BCCMD_GSM_RX_ARFCN_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_GSM_RX_ARFCN_PDU ( uint16 varid ) ;
};

class BCCMD_PS_FACTORY_SET_PDU : public BCCMD_PDU
{
public:
    BCCMD_PS_FACTORY_SET_PDU();
    BCCMD_PS_FACTORY_SET_PDU( const PDU& );
    BCCMD_PS_FACTORY_SET_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_PS_FACTORY_SET_PDU ( uint16 varid ) ;
};

class BCCMD_SPI_LOCK_INITIATE_LOCK_PDU : public BCCMD_PDU
{
public:
    BCCMD_SPI_LOCK_INITIATE_LOCK_PDU();
    BCCMD_SPI_LOCK_INITIATE_LOCK_PDU( const PDU& );
    BCCMD_SPI_LOCK_INITIATE_LOCK_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_SPI_LOCK_INITIATE_LOCK_PDU ( uint16 varid ) ;
};

class BCCMD_PIO_DIRECTION_MASK_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO_DIRECTION_MASK_PDU();
    BCCMD_PIO_DIRECTION_MASK_PDU( const PDU& );
    BCCMD_PIO_DIRECTION_MASK_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PIO_DIRECTION_MASK_PDU ( uint16 varid ) ;
};

class BCCMD_AUX_DAC_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_AUX_DAC_ENABLE_PDU();
    BCCMD_AUX_DAC_ENABLE_PDU( const PDU& );
    BCCMD_AUX_DAC_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_AUX_DAC_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_CHIPANAVER_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHIPANAVER_PDU();
    BCCMD_CHIPANAVER_PDU( const PDU& );
    BCCMD_CHIPANAVER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHIPANAVER_PDU ( uint16 varid ) ;
};

class BCCMD_ACTIVATE_BT_STACK_PDU : public BCCMD_PDU
{
public:
    BCCMD_ACTIVATE_BT_STACK_PDU();
    BCCMD_ACTIVATE_BT_STACK_PDU( const PDU& );
    BCCMD_ACTIVATE_BT_STACK_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_ACTIVATE_BT_STACK_PDU ( uint16 varid ) ;
};

class BCCMD_PSCLRALL_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSCLRALL_PDU();
    BCCMD_PSCLRALL_PDU( const PDU& );
    BCCMD_PSCLRALL_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_PSCLRALL_PDU ( uint16 varid ) ;
};

class BCCMD_BLE_T_IFS_PDU : public BCCMD_PDU
{
public:
    BCCMD_BLE_T_IFS_PDU();
    BCCMD_BLE_T_IFS_PDU( const PDU& );
    BCCMD_BLE_T_IFS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BLE_T_IFS_PDU ( uint16 varid ) ;
};

class BCCMD_FM_AUDIO_ROUTING_PDU : public BCCMD_PDU
{
public:
    BCCMD_FM_AUDIO_ROUTING_PDU();
    BCCMD_FM_AUDIO_ROUTING_PDU( const PDU& );
    BCCMD_FM_AUDIO_ROUTING_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_FM_AUDIO_ROUTING_PDU ( uint16 varid ) ;
};

class BCCMD_FASTPIPE_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_FASTPIPE_ENABLE_PDU();
    BCCMD_FASTPIPE_ENABLE_PDU( const PDU& );
    BCCMD_FASTPIPE_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_limit_host(void) const ;
    void set_limit_host(uint32 value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
protected:
    BCCMD_FASTPIPE_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_COEX_SYNC_PERIOD_PDU : public BCCMD_PDU
{
public:
    BCCMD_COEX_SYNC_PERIOD_PDU();
    BCCMD_COEX_SYNC_PERIOD_PDU( const PDU& );
    BCCMD_COEX_SYNC_PERIOD_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_COEX_SYNC_PERIOD_PDU ( uint16 varid ) ;
};

class BCCMD_PICONET_INSTANT_PDU : public BCCMD_PDU
{
public:
    BCCMD_PICONET_INSTANT_PDU();
    BCCMD_PICONET_INSTANT_PDU( const PDU& );
    BCCMD_PICONET_INSTANT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    uint32 get_h_instant(void) const ;
    void set_h_instant(uint32 value) ;
protected:
    BCCMD_PICONET_INSTANT_PDU ( uint16 varid ) ;
};

class BCCMD_CAPSENSE_RT_PADS_PDU : public BCCMD_PDU
{
public:
    BCCMD_CAPSENSE_RT_PADS_PDU();
    BCCMD_CAPSENSE_RT_PADS_PDU( const PDU& );
    BCCMD_CAPSENSE_RT_PADS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pad_sel(void) const ;
    void set_pad_sel(uint16 value) ;
    uint16 get_num_pads_board(void) const ;
    void set_num_pads_board(uint16 value) ;
    uint16 get_shield(void) const ;
    void set_shield(uint16 value) ;
    uint16 get_pad_cap0(void) const ;
    void set_pad_cap0(uint16 value) ;
    uint16 get_pad_cap1(void) const ;
    void set_pad_cap1(uint16 value) ;
    uint16 get_pad_cap2(void) const ;
    void set_pad_cap2(uint16 value) ;
    uint16 get_pad_cap3(void) const ;
    void set_pad_cap3(uint16 value) ;
    uint16 get_pad_cap4(void) const ;
    void set_pad_cap4(uint16 value) ;
    uint16 get_pad_cap5(void) const ;
    void set_pad_cap5(uint16 value) ;
protected:
    BCCMD_CAPSENSE_RT_PADS_PDU ( uint16 varid ) ;
};

class BCCMD_SNIFF_MULTISLOT_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_SNIFF_MULTISLOT_ENABLE_PDU();
    BCCMD_SNIFF_MULTISLOT_ENABLE_PDU( const PDU& );
    BCCMD_SNIFF_MULTISLOT_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_SNIFF_MULTISLOT_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_RECAL_PDU : public BCCMD_PDU
{
public:
    BCCMD_RECAL_PDU();
    BCCMD_RECAL_PDU( const PDU& );
    BCCMD_RECAL_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_RECAL_PDU ( uint16 varid ) ;
};

class BCCMD_PSU_HV_LINEAR_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSU_HV_LINEAR_ENABLE_PDU();
    BCCMD_PSU_HV_LINEAR_ENABLE_PDU( const PDU& );
    BCCMD_PSU_HV_LINEAR_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PSU_HV_LINEAR_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU();
    BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU( const PDU& );
    BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STREAM_TRANSFORM_DISCONNECT_PDU ( uint16 varid ) ;
};

class BCCMD_FAULT_ARG_PDU : public BCCMD_PDU
{
public:
    BCCMD_FAULT_ARG_PDU();
    BCCMD_FAULT_ARG_PDU( const PDU& );
    BCCMD_FAULT_ARG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_FAULT_ARG_PDU ( uint16 varid ) ;
};

class BCCMD_RECLAIM_RAM_RESERVE_PDU : public BCCMD_PDU
{
public:
    BCCMD_RECLAIM_RAM_RESERVE_PDU();
    BCCMD_RECLAIM_RAM_RESERVE_PDU( const PDU& );
    BCCMD_RECLAIM_RAM_RESERVE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_type(void) const ;
    void set_type(uint16 value) ;
    uint16 get_value(void) const ;
    void set_value(uint16 value) ;
protected:
    BCCMD_RECLAIM_RAM_RESERVE_PDU ( uint16 varid ) ;
};

class BCCMD_LC_FRAC_COUNT_PDU : public BCCMD_PDU
{
public:
    BCCMD_LC_FRAC_COUNT_PDU();
    BCCMD_LC_FRAC_COUNT_PDU( const PDU& );
    BCCMD_LC_FRAC_COUNT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_LC_FRAC_COUNT_PDU ( uint16 varid ) ;
};

class BCCMD_MAX_TX_POWER_PDU : public BCCMD_PDU
{
public:
    BCCMD_MAX_TX_POWER_PDU();
    BCCMD_MAX_TX_POWER_PDU( const PDU& );
    BCCMD_MAX_TX_POWER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_MAX_TX_POWER_PDU ( uint16 varid ) ;
};

class BCCMD_COASTER_ADD_SV_PDU : public BCCMD_PDU
{
public:
    BCCMD_COASTER_ADD_SV_PDU();
    BCCMD_COASTER_ADD_SV_PDU( const PDU& );
    BCCMD_COASTER_ADD_SV_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_num_entries(void) const ;
    void set_num_entries(uint16 value) ;
    uint32 get_uSecs(void) const ;
    void set_uSecs(uint32 value) ;
    uint8 get_uSec80ths(void) const ;
    void set_uSec80ths(uint8 value) ;
    uint32 get_code_doppler(void) const ;
    void set_code_doppler(uint32 value) ;
    uint32 get_code_shift(void) const ;
    void set_code_shift(uint32 value) ;
    uint32 get_carrier_doppler(void) const ;
    void set_carrier_doppler(uint32 value) ;
    uint8 get_data_transition(void) const ;
    void set_data_transition(uint8 value) ;
    uint16 get_satid_prn(void) const ;
    void set_satid_prn(uint16 value) ;
    uint16 get_e1_dummy(void) const ;
    void set_e1_dummy(uint16 value) ;
    uint32 get_e1_uSecs(void) const ;
    void set_e1_uSecs(uint32 value) ;
    uint8 get_e1_uSec80ths(void) const ;
    void set_e1_uSec80ths(uint8 value) ;
    uint32 get_e1_code_doppler(void) const ;
    void set_e1_code_doppler(uint32 value) ;
    uint32 get_e1_code_shift(void) const ;
    void set_e1_code_shift(uint32 value) ;
    uint32 get_e1_carrier_doppler(void) const ;
    void set_e1_carrier_doppler(uint32 value) ;
    uint8 get_e1_data_transition(void) const ;
    void set_e1_data_transition(uint8 value) ;
    uint16 get_e1_satid_prn(void) const ;
    void set_e1_satid_prn(uint16 value) ;
    uint16 get_e2_dummy(void) const ;
    void set_e2_dummy(uint16 value) ;
    uint32 get_e2_uSecs(void) const ;
    void set_e2_uSecs(uint32 value) ;
    uint8 get_e2_uSec80ths(void) const ;
    void set_e2_uSec80ths(uint8 value) ;
    uint32 get_e2_code_doppler(void) const ;
    void set_e2_code_doppler(uint32 value) ;
    uint32 get_e2_code_shift(void) const ;
    void set_e2_code_shift(uint32 value) ;
    uint32 get_e2_carrier_doppler(void) const ;
    void set_e2_carrier_doppler(uint32 value) ;
    uint8 get_e2_data_transition(void) const ;
    void set_e2_data_transition(uint8 value) ;
    uint16 get_e2_satid_prn(void) const ;
    void set_e2_satid_prn(uint16 value) ;
    uint16 get_e3_dummy(void) const ;
    void set_e3_dummy(uint16 value) ;
    uint32 get_e3_uSecs(void) const ;
    void set_e3_uSecs(uint32 value) ;
    uint8 get_e3_uSec80ths(void) const ;
    void set_e3_uSec80ths(uint8 value) ;
    uint32 get_e3_code_doppler(void) const ;
    void set_e3_code_doppler(uint32 value) ;
    uint32 get_e3_code_shift(void) const ;
    void set_e3_code_shift(uint32 value) ;
    uint32 get_e3_carrier_doppler(void) const ;
    void set_e3_carrier_doppler(uint32 value) ;
    uint8 get_e3_data_transition(void) const ;
    void set_e3_data_transition(uint8 value) ;
    uint16 get_e3_satid_prn(void) const ;
    void set_e3_satid_prn(uint16 value) ;
protected:
    BCCMD_COASTER_ADD_SV_PDU ( uint16 varid ) ;
};

class BCCMD_DEEP_SLEEP_TIME_PDU : public BCCMD_PDU
{
public:
    BCCMD_DEEP_SLEEP_TIME_PDU();
    BCCMD_DEEP_SLEEP_TIME_PDU( const PDU& );
    BCCMD_DEEP_SLEEP_TIME_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_data(void) const ;
    void set_data(uint32 value) ;
protected:
    BCCMD_DEEP_SLEEP_TIME_PDU ( uint16 varid ) ;
};

class BCCMD_BLE_WHITELIST_FREE_SPACE_PDU : public BCCMD_PDU
{
public:
    BCCMD_BLE_WHITELIST_FREE_SPACE_PDU();
    BCCMD_BLE_WHITELIST_FREE_SPACE_PDU( const PDU& );
    BCCMD_BLE_WHITELIST_FREE_SPACE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BLE_WHITELIST_FREE_SPACE_PDU ( uint16 varid ) ;
};

class BCCMD_BABEL_SPI_RESET_AND_STOP_PDU : public BCCMD_PDU
{
public:
    BCCMD_BABEL_SPI_RESET_AND_STOP_PDU();
    BCCMD_BABEL_SPI_RESET_AND_STOP_PDU( const PDU& );
    BCCMD_BABEL_SPI_RESET_AND_STOP_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_BABEL_SPI_RESET_AND_STOP_PDU ( uint16 varid ) ;
};

class BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU();
    BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU( const PDU& );
    BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_modes(void) const ;
    void set_modes(uint16 value) ;
    uint16 get_timer_delay(void) const ;
    void set_timer_delay(uint16 value) ;
    uint16 get_nsams(void) const ;
    void set_nsams(uint16 value) ;
    uint16 get_nap(void) const ;
    void set_nap(uint16 value) ;
    uint8 get_uap(void) const ;
    void set_uap(uint8 value) ;
    uint32 get_lap(void) const ;
    void set_lap(uint32 value) ;
protected:
    BCCMD_RDF_DATA_CAPTURE_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_CACHED_TEMPERATURE_PDU : public BCCMD_PDU
{
public:
    BCCMD_CACHED_TEMPERATURE_PDU();
    BCCMD_CACHED_TEMPERATURE_PDU( const PDU& );
    BCCMD_CACHED_TEMPERATURE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CACHED_TEMPERATURE_PDU ( uint16 varid ) ;
};

class BCCMD_COEX_PRIORITY_PIOS_ON_PDU : public BCCMD_PDU
{
public:
    BCCMD_COEX_PRIORITY_PIOS_ON_PDU();
    BCCMD_COEX_PRIORITY_PIOS_ON_PDU( const PDU& );
    BCCMD_COEX_PRIORITY_PIOS_ON_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_COEX_PRIORITY_PIOS_ON_PDU ( uint16 varid ) ;
};

class BCCMD_FM_REG_PDU : public BCCMD_PDU
{
public:
    BCCMD_FM_REG_PDU();
    BCCMD_FM_REG_PDU( const PDU& );
    BCCMD_FM_REG_PDU( const uint8 * buffer , uint32 len ) ;
    uint8 get_fm_register(void) const ;
    void set_fm_register(uint8 value) ;
    uint16 get_value(void) const ;
    void set_value(uint16 value) ;
protected:
    BCCMD_FM_REG_PDU ( uint16 varid ) ;
};

class BCCMD_CODEC_INPUT_GAIN_PDU : public BCCMD_PDU
{
public:
    BCCMD_CODEC_INPUT_GAIN_PDU();
    BCCMD_CODEC_INPUT_GAIN_PDU( const PDU& );
    BCCMD_CODEC_INPUT_GAIN_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_gain_a(void) const ;
    void set_gain_a(uint16 value) ;
    uint16 get_gain_b(void) const ;
    void set_gain_b(uint16 value) ;
protected:
    BCCMD_CODEC_INPUT_GAIN_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_GET_SINK_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_GET_SINK_PDU();
    BCCMD_STREAM_GET_SINK_PDU( const PDU& );
    BCCMD_STREAM_GET_SINK_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_resource(void) const ;
    void set_resource(uint16 value) ;
    uint16 get_opt1(void) const ;
    void set_opt1(uint16 value) ;
    uint16 get_opt2(void) const ;
    void set_opt2(uint16 value) ;
protected:
    BCCMD_STREAM_GET_SINK_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U01X_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U01X_PDU();
    BCCMD_STIBBONS_U01X_PDU( const PDU& );
    BCCMD_STIBBONS_U01X_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U01X_PDU ( uint16 varid ) ;
};

class BCCMD_BYPASS_UART_PDU : public BCCMD_PDU
{
public:
    BCCMD_BYPASS_UART_PDU();
    BCCMD_BYPASS_UART_PDU( const PDU& );
    BCCMD_BYPASS_UART_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_BYPASS_UART_PDU ( uint16 varid ) ;
};

class BCCMD_INQUIRY_PRIORITY_PDU : public BCCMD_PDU
{
public:
    BCCMD_INQUIRY_PRIORITY_PDU();
    BCCMD_INQUIRY_PRIORITY_PDU( const PDU& );
    BCCMD_INQUIRY_PRIORITY_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_INQUIRY_PRIORITY_PDU ( uint16 varid ) ;
};

class BCCMD_PIO32_DIRECTION_MASK_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO32_DIRECTION_MASK_PDU();
    BCCMD_PIO32_DIRECTION_MASK_PDU( const PDU& );
    BCCMD_PIO32_DIRECTION_MASK_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_mask(void) const ;
    void set_mask(uint32 value) ;
    uint32 get_bits(void) const ;
    void set_bits(uint32 value) ;
    uint32 get_result(void) const ;
    void set_result(uint32 value) ;
protected:
    BCCMD_PIO32_DIRECTION_MASK_PDU ( uint16 varid ) ;
};

class BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU : public BCCMD_PDU
{
public:
    BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU();
    BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU( const PDU& );
    BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_cust_key1(void) const ;
    void set_cust_key1(uint32 value) ;
    uint32 get_cust_key2(void) const ;
    void set_cust_key2(uint32 value) ;
    uint32 get_cust_key3(void) const ;
    void set_cust_key3(uint32 value) ;
    uint32 get_cust_key4(void) const ;
    void set_cust_key4(uint32 value) ;
protected:
    BCCMD_SPI_LOCK_CUSTOMER_KEY_PDU ( uint16 varid ) ;
};

class BCCMD_HQ_SCRAPING_LEN_PDU : public BCCMD_PDU
{
public:
    BCCMD_HQ_SCRAPING_LEN_PDU();
    BCCMD_HQ_SCRAPING_LEN_PDU( const PDU& );
    BCCMD_HQ_SCRAPING_LEN_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_HQ_SCRAPING_LEN_PDU ( uint16 varid ) ;
};

class BCCMD_WLAN_COEX_PRIORITY_PDU : public BCCMD_PDU
{
public:
    BCCMD_WLAN_COEX_PRIORITY_PDU();
    BCCMD_WLAN_COEX_PRIORITY_PDU( const PDU& );
    BCCMD_WLAN_COEX_PRIORITY_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 value) ;
    bool get_enable(void) const ;
    void set_enable(bool value) ;
protected:
    BCCMD_WLAN_COEX_PRIORITY_PDU ( uint16 varid ) ;
};

class BCCMD_BC01_STATUS_PDU : public BCCMD_PDU
{
public:
    BCCMD_BC01_STATUS_PDU();
    BCCMD_BC01_STATUS_PDU( const PDU& );
    BCCMD_BC01_STATUS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BC01_STATUS_PDU ( uint16 varid ) ;
};

class BCCMD_CHECK_ROM_CRC32_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHECK_ROM_CRC32_PDU();
    BCCMD_CHECK_ROM_CRC32_PDU( const PDU& );
    BCCMD_CHECK_ROM_CRC32_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_data(void) const ;
    void set_data(uint32 value) ;
protected:
    BCCMD_CHECK_ROM_CRC32_PDU ( uint16 varid ) ;
};

class BCCMD_PS_FACTORY_RESTORE_PDU : public BCCMD_PDU
{
public:
    BCCMD_PS_FACTORY_RESTORE_PDU();
    BCCMD_PS_FACTORY_RESTORE_PDU( const PDU& );
    BCCMD_PS_FACTORY_RESTORE_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_PS_FACTORY_RESTORE_PDU ( uint16 varid ) ;
};

class BCCMD_SCO_PARAMETERS_PDU : public BCCMD_PDU
{
public:
    BCCMD_SCO_PARAMETERS_PDU();
    BCCMD_SCO_PARAMETERS_PDU( const PDU& );
    BCCMD_SCO_PARAMETERS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_sco_handle(void) const ;
    void set_sco_handle(uint16 value) ;
    uint16 get_tsco(void) const ;
    void set_tsco(uint16 value) ;
    uint16 get_wesco(void) const ;
    void set_wesco(uint16 value) ;
    uint16 get_reserved_slots(void) const ;
    void set_reserved_slots(uint16 value) ;
protected:
    BCCMD_SCO_PARAMETERS_PDU ( uint16 varid ) ;
};

class BCCMD_PCM_ATTENUATION_PDU : public BCCMD_PDU
{
public:
    BCCMD_PCM_ATTENUATION_PDU();
    BCCMD_PCM_ATTENUATION_PDU( const PDU& );
    BCCMD_PCM_ATTENUATION_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PCM_ATTENUATION_PDU ( uint16 varid ) ;
};

class BCCMD_CODEC_OUTPUT_GAIN_PDU : public BCCMD_PDU
{
public:
    BCCMD_CODEC_OUTPUT_GAIN_PDU();
    BCCMD_CODEC_OUTPUT_GAIN_PDU( const PDU& );
    BCCMD_CODEC_OUTPUT_GAIN_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_gain_a(void) const ;
    void set_gain_a(uint16 value) ;
    uint16 get_gain_b(void) const ;
    void set_gain_b(uint16 value) ;
protected:
    BCCMD_CODEC_OUTPUT_GAIN_PDU ( uint16 varid ) ;
};

class BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU();
    BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU( const PDU& );
    BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_RDF_DATA_CAPTURE_DISABLE_PDU ( uint16 varid ) ;
};

class BCCMD_RSSI_ACL_PDU : public BCCMD_PDU
{
public:
    BCCMD_RSSI_ACL_PDU();
    BCCMD_RSSI_ACL_PDU( const PDU& );
    BCCMD_RSSI_ACL_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    int16 get_rssi(void) const ;
    void set_rssi(int16 value) ;
protected:
    BCCMD_RSSI_ACL_PDU ( uint16 varid ) ;
};

class BCCMD_PCM_CONFIG32_PDU : public BCCMD_PDU
{
public:
    BCCMD_PCM_CONFIG32_PDU();
    BCCMD_PCM_CONFIG32_PDU( const PDU& );
    BCCMD_PCM_CONFIG32_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pcm_if_id(void) const ;
    void set_pcm_if_id(uint16 value) ;
    uint32 get_config32(void) const ;
    void set_config32(uint32 value) ;
protected:
    BCCMD_PCM_CONFIG32_PDU ( uint16 varid ) ;
};

class BCCMD_INQUIRY_TX_POWER_PDU : public BCCMD_PDU
{
public:
    BCCMD_INQUIRY_TX_POWER_PDU();
    BCCMD_INQUIRY_TX_POWER_PDU( const PDU& );
    BCCMD_INQUIRY_TX_POWER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_INQUIRY_TX_POWER_PDU ( uint16 varid ) ;
};

class BCCMD_BLE_AROPE_CAPABILITIES_PDU : public BCCMD_PDU
{
public:
    BCCMD_BLE_AROPE_CAPABILITIES_PDU();
    BCCMD_BLE_AROPE_CAPABILITIES_PDU( const PDU& );
    BCCMD_BLE_AROPE_CAPABILITIES_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_data(void) const ;
    void set_data(uint32 value) ;
protected:
    BCCMD_BLE_AROPE_CAPABILITIES_PDU ( uint16 varid ) ;
};

class BCCMD_BLE_DEFAULT_TX_POWER_PDU : public BCCMD_PDU
{
public:
    BCCMD_BLE_DEFAULT_TX_POWER_PDU();
    BCCMD_BLE_DEFAULT_TX_POWER_PDU( const PDU& );
    BCCMD_BLE_DEFAULT_TX_POWER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BLE_DEFAULT_TX_POWER_PDU ( uint16 varid ) ;
};

class BCCMD_DEFAULT_TX_POWER_PDU : public BCCMD_PDU
{
public:
    BCCMD_DEFAULT_TX_POWER_PDU();
    BCCMD_DEFAULT_TX_POWER_PDU( const PDU& );
    BCCMD_DEFAULT_TX_POWER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_DEFAULT_TX_POWER_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_CLOSE_SINK_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_CLOSE_SINK_PDU();
    BCCMD_STREAM_CLOSE_SINK_PDU( const PDU& );
    BCCMD_STREAM_CLOSE_SINK_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STREAM_CLOSE_SINK_PDU ( uint16 varid ) ;
};

class BCCMD_COLD_RESET_PDU : public BCCMD_PDU
{
public:
    BCCMD_COLD_RESET_PDU();
    BCCMD_COLD_RESET_PDU( const PDU& );
    BCCMD_COLD_RESET_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_COLD_RESET_PDU ( uint16 varid ) ;
};

class BCCMD_MIC_BIAS_CONFIGURE_PDU : public BCCMD_PDU
{
public:
    BCCMD_MIC_BIAS_CONFIGURE_PDU();
    BCCMD_MIC_BIAS_CONFIGURE_PDU( const PDU& );
    BCCMD_MIC_BIAS_CONFIGURE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_instance(void) const ;
    void set_instance(uint16 value) ;
    uint16 get_key_config(void) const ;
    void set_key_config(uint16 value) ;
    uint16 get_value(void) const ;
    void set_value(uint16 value) ;
protected:
    BCCMD_MIC_BIAS_CONFIGURE_PDU ( uint16 varid ) ;
};

class BCCMD_CHECK_ROM_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHECK_ROM_PDU();
    BCCMD_CHECK_ROM_PDU( const PDU& );
    BCCMD_CHECK_ROM_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHECK_ROM_PDU ( uint16 varid ) ;
};

class BCCMD_RAND_PDU : public BCCMD_PDU
{
public:
    BCCMD_RAND_PDU();
    BCCMD_RAND_PDU( const PDU& );
    BCCMD_RAND_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_RAND_PDU ( uint16 varid ) ;
};

class BCCMD_COLD_HALT_PDU : public BCCMD_PDU
{
public:
    BCCMD_COLD_HALT_PDU();
    BCCMD_COLD_HALT_PDU( const PDU& );
    BCCMD_COLD_HALT_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_COLD_HALT_PDU ( uint16 varid ) ;
};

class BCCMD_PIO32_PROTECT_MASK_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO32_PROTECT_MASK_PDU();
    BCCMD_PIO32_PROTECT_MASK_PDU( const PDU& );
    BCCMD_PIO32_PROTECT_MASK_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_mask(void) const ;
    void set_mask(uint32 value) ;
    uint32 get_bits(void) const ;
    void set_bits(uint32 value) ;
    uint32 get_result(void) const ;
    void set_result(uint32 value) ;
protected:
    BCCMD_PIO32_PROTECT_MASK_PDU ( uint16 varid ) ;
};

class BCCMD_DSPMANAGER_DEBUG_PDU : public BCCMD_PDU
{
public:
    BCCMD_DSPMANAGER_DEBUG_PDU();
    BCCMD_DSPMANAGER_DEBUG_PDU( const PDU& );
    BCCMD_DSPMANAGER_DEBUG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_subsystem(void) const ;
    void set_subsystem(uint16 value) ;
    uint16 get_arguments(void) const ;
    void set_arguments(uint16 value) ;
protected:
    BCCMD_DSPMANAGER_DEBUG_PDU ( uint16 varid ) ;
};

class BCCMD_COASTER_STOP_PDU : public BCCMD_PDU
{
public:
    BCCMD_COASTER_STOP_PDU();
    BCCMD_COASTER_STOP_PDU( const PDU& );
    BCCMD_COASTER_STOP_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
protected:
    BCCMD_COASTER_STOP_PDU ( uint16 varid ) ;
};

class BCCMD_ALLOCATE_RAM_RESERVE_PDU : public BCCMD_PDU
{
public:
    BCCMD_ALLOCATE_RAM_RESERVE_PDU();
    BCCMD_ALLOCATE_RAM_RESERVE_PDU( const PDU& );
    BCCMD_ALLOCATE_RAM_RESERVE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_type(void) const ;
    void set_type(uint16 value) ;
    uint16 get_value(void) const ;
    void set_value(uint16 value) ;
protected:
    BCCMD_ALLOCATE_RAM_RESERVE_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_TRANSACTION_START_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_TRANSACTION_START_PDU();
    BCCMD_STREAM_TRANSACTION_START_PDU( const PDU& );
    BCCMD_STREAM_TRANSACTION_START_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STREAM_TRANSACTION_START_PDU ( uint16 varid ) ;
};

class BCCMD_EGPS_PULSE_CONFIG_PDU : public BCCMD_PDU
{
public:
    BCCMD_EGPS_PULSE_CONFIG_PDU();
    BCCMD_EGPS_PULSE_CONFIG_PDU( const PDU& );
    BCCMD_EGPS_PULSE_CONFIG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pio(void) const ;
    void set_pio(uint16 value) ;
protected:
    BCCMD_EGPS_PULSE_CONFIG_PDU ( uint16 varid ) ;
};

class BCCMD_PANIC_ON_FAULT_PDU : public BCCMD_PDU
{
public:
    BCCMD_PANIC_ON_FAULT_PDU();
    BCCMD_PANIC_ON_FAULT_PDU( const PDU& );
    BCCMD_PANIC_ON_FAULT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PANIC_ON_FAULT_PDU ( uint16 varid ) ;
};

class BCCMD_GET_NEXT_BUILDDEF_PDU : public BCCMD_PDU
{
public:
    BCCMD_GET_NEXT_BUILDDEF_PDU();
    BCCMD_GET_NEXT_BUILDDEF_PDU( const PDU& );
    BCCMD_GET_NEXT_BUILDDEF_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
    uint16 get_nextid(void) const ;
    void set_nextid(uint16 value) ;
protected:
    BCCMD_GET_NEXT_BUILDDEF_PDU ( uint16 varid ) ;
};

class BCCMD_SHA256_INIT_PDU : public BCCMD_PDU
{
public:
    BCCMD_SHA256_INIT_PDU();
    BCCMD_SHA256_INIT_PDU( const PDU& );
    BCCMD_SHA256_INIT_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_SHA256_INIT_PDU ( uint16 varid ) ;
};

class BCCMD_ENABLE_DUT_MODE_PDU : public BCCMD_PDU
{
public:
    BCCMD_ENABLE_DUT_MODE_PDU();
    BCCMD_ENABLE_DUT_MODE_PDU( const PDU& );
    BCCMD_ENABLE_DUT_MODE_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_ENABLE_DUT_MODE_PDU ( uint16 varid ) ;
};

class BCCMD_BLE_SCAN_BACKOFF_PDU : public BCCMD_PDU
{
public:
    BCCMD_BLE_SCAN_BACKOFF_PDU();
    BCCMD_BLE_SCAN_BACKOFF_PDU( const PDU& );
    BCCMD_BLE_SCAN_BACKOFF_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BLE_SCAN_BACKOFF_PDU ( uint16 varid ) ;
};

class BCCMD_BT_CLOCK_PDU : public BCCMD_PDU
{
public:
    BCCMD_BT_CLOCK_PDU();
    BCCMD_BT_CLOCK_PDU( const PDU& );
    BCCMD_BT_CLOCK_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_data(void) const ;
    void set_data(uint32 value) ;
protected:
    BCCMD_BT_CLOCK_PDU ( uint16 varid ) ;
};

class BCCMD_SPI_BUFSIZE_PDU : public BCCMD_PDU
{
public:
    BCCMD_SPI_BUFSIZE_PDU();
    BCCMD_SPI_BUFSIZE_PDU( const PDU& );
    BCCMD_SPI_BUFSIZE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_SPI_BUFSIZE_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C01_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C01_PDU();
    BCCMD_STIBBONS_C01_PDU( const PDU& );
    BCCMD_STIBBONS_C01_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C01_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C02_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C02_PDU();
    BCCMD_STIBBONS_C02_PDU( const PDU& );
    BCCMD_STIBBONS_C02_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C02_PDU ( uint16 varid ) ;
};

class BCCMD_PCM_SYNC_RATE_PDU : public BCCMD_PDU
{
public:
    BCCMD_PCM_SYNC_RATE_PDU();
    BCCMD_PCM_SYNC_RATE_PDU( const PDU& );
    BCCMD_PCM_SYNC_RATE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pcm_interface(void) const ;
    void set_pcm_interface(uint16 value) ;
    uint32 get_sync_rate(void) const ;
    void set_sync_rate(uint32 value) ;
protected:
    BCCMD_PCM_SYNC_RATE_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C03_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C03_PDU();
    BCCMD_STIBBONS_C03_PDU( const PDU& );
    BCCMD_STIBBONS_C03_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C03_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C04_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C04_PDU();
    BCCMD_STIBBONS_C04_PDU( const PDU& );
    BCCMD_STIBBONS_C04_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C04_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C05_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C05_PDU();
    BCCMD_STIBBONS_C05_PDU( const PDU& );
    BCCMD_STIBBONS_C05_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C05_PDU ( uint16 varid ) ;
};

class BCCMD_LED2_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_LED2_ENABLE_PDU();
    BCCMD_LED2_ENABLE_PDU( const PDU& );
    BCCMD_LED2_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_LED2_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_CHECK_RAM_RESULT_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHECK_RAM_RESULT_PDU();
    BCCMD_CHECK_RAM_RESULT_PDU( const PDU& );
    BCCMD_CHECK_RAM_RESULT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHECK_RAM_RESULT_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C06_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C06_PDU();
    BCCMD_STIBBONS_C06_PDU( const PDU& );
    BCCMD_STIBBONS_C06_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C06_PDU ( uint16 varid ) ;
};

class BCCMD_EGPS_PULSE_OUTPUT_START_PDU : public BCCMD_PDU
{
public:
    BCCMD_EGPS_PULSE_OUTPUT_START_PDU();
    BCCMD_EGPS_PULSE_OUTPUT_START_PDU( const PDU& );
    BCCMD_EGPS_PULSE_OUTPUT_START_PDU( const uint8 * buffer , uint32 len ) ;
    uint8 get_pio(void) const ;
    void set_pio(uint8 value) ;
    uint32 get_start_time(void) const ;
    void set_start_time(uint32 value) ;
    uint32 get_duration_time(void) const ;
    void set_duration_time(uint32 value) ;
    uint32 get_repeat_time(void) const ;
    void set_repeat_time(uint32 value) ;
    uint16 get_start_time_fine(void) const ;
    void set_start_time_fine(uint16 value) ;
    uint16 get_duration_time_fine(void) const ;
    void set_duration_time_fine(uint16 value) ;
    uint16 get_repeat_time_fine(void) const ;
    void set_repeat_time_fine(uint16 value) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
protected:
    BCCMD_EGPS_PULSE_OUTPUT_START_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C07_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C07_PDU();
    BCCMD_STIBBONS_C07_PDU( const PDU& );
    BCCMD_STIBBONS_C07_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C07_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C08_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C08_PDU();
    BCCMD_STIBBONS_C08_PDU( const PDU& );
    BCCMD_STIBBONS_C08_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C08_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C09_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C09_PDU();
    BCCMD_STIBBONS_C09_PDU( const PDU& );
    BCCMD_STIBBONS_C09_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C09_PDU ( uint16 varid ) ;
};

class BCCMD_CHECK_RAM_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHECK_RAM_PDU();
    BCCMD_CHECK_RAM_PDU( const PDU& );
    BCCMD_CHECK_RAM_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_CHECK_RAM_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_GET_SOURCE_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_GET_SOURCE_PDU();
    BCCMD_STREAM_GET_SOURCE_PDU( const PDU& );
    BCCMD_STREAM_GET_SOURCE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_resource(void) const ;
    void set_resource(uint16 value) ;
    uint16 get_opt1(void) const ;
    void set_opt1(uint16 value) ;
    uint16 get_opt2(void) const ;
    void set_opt2(uint16 value) ;
protected:
    BCCMD_STREAM_GET_SOURCE_PDU ( uint16 varid ) ;
};

class BCCMD_ROUTE_CLOCK_PDU : public BCCMD_PDU
{
public:
    BCCMD_ROUTE_CLOCK_PDU();
    BCCMD_ROUTE_CLOCK_PDU( const PDU& );
    BCCMD_ROUTE_CLOCK_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_ROUTE_CLOCK_PDU ( uint16 varid ) ;
};

class BCCMD_BABEL_SPI_GO_PDU : public BCCMD_PDU
{
public:
    BCCMD_BABEL_SPI_GO_PDU();
    BCCMD_BABEL_SPI_GO_PDU( const PDU& );
    BCCMD_BABEL_SPI_GO_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_BABEL_SPI_GO_PDU ( uint16 varid ) ;
};

class BCCMD_COASTER_SV_STATE_PDU : public BCCMD_PDU
{
public:
    BCCMD_COASTER_SV_STATE_PDU();
    BCCMD_COASTER_SV_STATE_PDU( const PDU& );
    BCCMD_COASTER_SV_STATE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_start_index_num_entries(void) const ;
    void set_start_index_num_entries(uint16 value) ;
    uint32 get_uSecs(void) const ;
    void set_uSecs(uint32 value) ;
    uint8 get_uSec80ths(void) const ;
    void set_uSec80ths(uint8 value) ;
    uint32 get_code_doppler(void) const ;
    void set_code_doppler(uint32 value) ;
    uint32 get_code_shift(void) const ;
    void set_code_shift(uint32 value) ;
    uint32 get_carrier_doppler(void) const ;
    void set_carrier_doppler(uint32 value) ;
    uint16 get_lock_status_bits(void) const ;
    void set_lock_status_bits(uint16 value) ;
    uint16 get_SNR(void) const ;
    void set_SNR(uint16 value) ;
    uint8 get_data_transition(void) const ;
    void set_data_transition(uint8 value) ;
    uint16 get_satid_prn(void) const ;
    void set_satid_prn(uint16 value) ;
    uint16 get_e1_dummy(void) const ;
    void set_e1_dummy(uint16 value) ;
    uint32 get_e1_uSecs(void) const ;
    void set_e1_uSecs(uint32 value) ;
    uint8 get_e1_uSec80ths(void) const ;
    void set_e1_uSec80ths(uint8 value) ;
    uint32 get_e1_code_doppler(void) const ;
    void set_e1_code_doppler(uint32 value) ;
    uint32 get_e1_code_shift(void) const ;
    void set_e1_code_shift(uint32 value) ;
    uint32 get_e1_carrier_doppler(void) const ;
    void set_e1_carrier_doppler(uint32 value) ;
    uint16 get_e1_lock_status_bits(void) const ;
    void set_e1_lock_status_bits(uint16 value) ;
    uint16 get_e1_SNR(void) const ;
    void set_e1_SNR(uint16 value) ;
    uint8 get_e1_data_transition(void) const ;
    void set_e1_data_transition(uint8 value) ;
    uint16 get_e1_satid_prn(void) const ;
    void set_e1_satid_prn(uint16 value) ;
    uint16 get_e2_dummy(void) const ;
    void set_e2_dummy(uint16 value) ;
    uint32 get_e2_uSecs(void) const ;
    void set_e2_uSecs(uint32 value) ;
    uint8 get_e2_uSec80ths(void) const ;
    void set_e2_uSec80ths(uint8 value) ;
    uint32 get_e2_code_doppler(void) const ;
    void set_e2_code_doppler(uint32 value) ;
    uint32 get_e2_code_shift(void) const ;
    void set_e2_code_shift(uint32 value) ;
    uint32 get_e2_carrier_doppler(void) const ;
    void set_e2_carrier_doppler(uint32 value) ;
    uint16 get_e2_lock_status_bits(void) const ;
    void set_e2_lock_status_bits(uint16 value) ;
    uint16 get_e2_SNR(void) const ;
    void set_e2_SNR(uint16 value) ;
    uint8 get_e2_data_transition(void) const ;
    void set_e2_data_transition(uint8 value) ;
    uint16 get_e2_satid_prn(void) const ;
    void set_e2_satid_prn(uint16 value) ;
    uint16 get_e3_dummy(void) const ;
    void set_e3_dummy(uint16 value) ;
    uint32 get_e3_uSecs(void) const ;
    void set_e3_uSecs(uint32 value) ;
    uint8 get_e3_uSec80ths(void) const ;
    void set_e3_uSec80ths(uint8 value) ;
    uint32 get_e3_code_doppler(void) const ;
    void set_e3_code_doppler(uint32 value) ;
    uint32 get_e3_code_shift(void) const ;
    void set_e3_code_shift(uint32 value) ;
    uint32 get_e3_carrier_doppler(void) const ;
    void set_e3_carrier_doppler(uint32 value) ;
    uint16 get_e3_lock_status_bits(void) const ;
    void set_e3_lock_status_bits(uint16 value) ;
    uint16 get_e3_SNR(void) const ;
    void set_e3_SNR(uint16 value) ;
    uint8 get_e3_data_transition(void) const ;
    void set_e3_data_transition(uint8 value) ;
    uint16 get_e3_satid_prn(void) const ;
    void set_e3_satid_prn(uint16 value) ;
protected:
    BCCMD_COASTER_SV_STATE_PDU ( uint16 varid ) ;
};

class BCCMD_RDF_BLE_SCAN_MODE_PDU : public BCCMD_PDU
{
public:
    BCCMD_RDF_BLE_SCAN_MODE_PDU();
    BCCMD_RDF_BLE_SCAN_MODE_PDU( const PDU& );
    BCCMD_RDF_BLE_SCAN_MODE_PDU( const uint8 * buffer , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 value) ;
    uint8 get_samples(void) const ;
    void set_samples(uint8 value) ;
protected:
    BCCMD_RDF_BLE_SCAN_MODE_PDU ( uint16 varid ) ;
};

class BCCMD_PS_FACTORY_RESTORE_ALL_PDU : public BCCMD_PDU
{
public:
    BCCMD_PS_FACTORY_RESTORE_ALL_PDU();
    BCCMD_PS_FACTORY_RESTORE_ALL_PDU( const PDU& );
    BCCMD_PS_FACTORY_RESTORE_ALL_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_PS_FACTORY_RESTORE_ALL_PDU ( uint16 varid ) ;
};

class BCCMD_COEX_DUMP_PDU : public BCCMD_PDU
{
public:
    BCCMD_COEX_DUMP_PDU();
    BCCMD_COEX_DUMP_PDU( const PDU& );
    BCCMD_COEX_DUMP_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_scheme(void) const ;
    void set_scheme(uint16 value) ;
    uint16 get_options(void) const ;
    void set_options(uint16 value) ;
    uint16 get_bt_priority(void) const ;
    void set_bt_priority(uint16 value) ;
    uint16 get_wlan_active(void) const ;
    void set_wlan_active(uint16 value) ;
    uint16 get_bt_active(void) const ;
    void set_bt_active(uint16 value) ;
    uint16 get_bt_status(void) const ;
    void set_bt_status(uint16 value) ;
    uint16 get_wlan_deny(void) const ;
    void set_wlan_deny(uint16 value) ;
    uint16 get_bt_periodic(void) const ;
    void set_bt_periodic(uint16 value) ;
    uint16 get_bt_inband(void) const ;
    void set_bt_inband(uint16 value) ;
    uint16 get_uart_active(void) const ;
    void set_uart_active(uint16 value) ;
    uint16 get_uart_tx(void) const ;
    void set_uart_tx(uint16 value) ;
    uint16 get_uart_rx(void) const ;
    void set_uart_rx(uint16 value) ;
    uint16 get_time_t1(void) const ;
    void set_time_t1(uint16 value) ;
    uint16 get_time_t2(void) const ;
    void set_time_t2(uint16 value) ;
    uint16 get_btactive_lead(void) const ;
    void set_btactive_lead(uint16 value) ;
    uint16 get_btstatus_lead(void) const ;
    void set_btstatus_lead(uint16 value) ;
    uint16 get_priority_table00(void) const ;
    void set_priority_table00(uint16 value) ;
    uint16 get_priority_table01(void) const ;
    void set_priority_table01(uint16 value) ;
    uint16 get_priority_table02(void) const ;
    void set_priority_table02(uint16 value) ;
    uint16 get_priority_table03(void) const ;
    void set_priority_table03(uint16 value) ;
    uint16 get_priority_table04(void) const ;
    void set_priority_table04(uint16 value) ;
    uint16 get_priority_table05(void) const ;
    void set_priority_table05(uint16 value) ;
    uint16 get_priority_table06(void) const ;
    void set_priority_table06(uint16 value) ;
    uint16 get_priority_table07(void) const ;
    void set_priority_table07(uint16 value) ;
    uint16 get_priority_table08(void) const ;
    void set_priority_table08(uint16 value) ;
    uint16 get_priority_table09(void) const ;
    void set_priority_table09(uint16 value) ;
    uint16 get_priority_table10(void) const ;
    void set_priority_table10(uint16 value) ;
    uint16 get_priority_table11(void) const ;
    void set_priority_table11(uint16 value) ;
    uint16 get_priority_table12(void) const ;
    void set_priority_table12(uint16 value) ;
    uint16 get_priority_table13(void) const ;
    void set_priority_table13(uint16 value) ;
    uint16 get_priority_table14(void) const ;
    void set_priority_table14(uint16 value) ;
    uint16 get_priority_table15(void) const ;
    void set_priority_table15(uint16 value) ;
    uint16 get_priority_table16(void) const ;
    void set_priority_table16(uint16 value) ;
    uint16 get_priority_table17(void) const ;
    void set_priority_table17(uint16 value) ;
    uint16 get_priority_table18(void) const ;
    void set_priority_table18(uint16 value) ;
    uint16 get_priority_table19(void) const ;
    void set_priority_table19(uint16 value) ;
    uint16 get_priority_table20(void) const ;
    void set_priority_table20(uint16 value) ;
    uint16 get_priority_table21(void) const ;
    void set_priority_table21(uint16 value) ;
    uint16 get_priority_table22(void) const ;
    void set_priority_table22(uint16 value) ;
    uint16 get_priority_table23(void) const ;
    void set_priority_table23(uint16 value) ;
    uint16 get_priority_table24(void) const ;
    void set_priority_table24(uint16 value) ;
    uint16 get_priority_table25(void) const ;
    void set_priority_table25(uint16 value) ;
    uint16 get_priority_table26(void) const ;
    void set_priority_table26(uint16 value) ;
    uint16 get_priority_table27(void) const ;
    void set_priority_table27(uint16 value) ;
    uint16 get_priority_table28(void) const ;
    void set_priority_table28(uint16 value) ;
    uint16 get_priority_table29(void) const ;
    void set_priority_table29(uint16 value) ;
    uint16 get_priority_table30(void) const ;
    void set_priority_table30(uint16 value) ;
    uint16 get_priority_table31(void) const ;
    void set_priority_table31(uint16 value) ;
    uint16 get_priority_table32(void) const ;
    void set_priority_table32(uint16 value) ;
    uint16 get_debug_enable(void) const ;
    void set_debug_enable(uint16 value) ;
    uint16 get_debug00(void) const ;
    void set_debug00(uint16 value) ;
    uint16 get_debug01(void) const ;
    void set_debug01(uint16 value) ;
    uint16 get_debug02(void) const ;
    void set_debug02(uint16 value) ;
    uint16 get_debug03(void) const ;
    void set_debug03(uint16 value) ;
    uint16 get_debug04(void) const ;
    void set_debug04(uint16 value) ;
    uint16 get_debug05(void) const ;
    void set_debug05(uint16 value) ;
    uint16 get_debug06(void) const ;
    void set_debug06(uint16 value) ;
    uint16 get_debug07(void) const ;
    void set_debug07(uint16 value) ;
    uint16 get_debug08(void) const ;
    void set_debug08(uint16 value) ;
    uint16 get_debug09(void) const ;
    void set_debug09(uint16 value) ;
    uint16 get_debug10(void) const ;
    void set_debug10(uint16 value) ;
    uint16 get_debug11(void) const ;
    void set_debug11(uint16 value) ;
    uint16 get_debug12(void) const ;
    void set_debug12(uint16 value) ;
    uint16 get_debug13(void) const ;
    void set_debug13(uint16 value) ;
    uint16 get_debug14(void) const ;
    void set_debug14(uint16 value) ;
    uint16 get_debug15(void) const ;
    void set_debug15(uint16 value) ;
protected:
    BCCMD_COEX_DUMP_PDU ( uint16 varid ) ;
};

class BCCMD_CLOCK_MODULATION_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_CLOCK_MODULATION_ENABLE_PDU();
    BCCMD_CLOCK_MODULATION_ENABLE_PDU( const PDU& );
    BCCMD_CLOCK_MODULATION_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CLOCK_MODULATION_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C10_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C10_PDU();
    BCCMD_STIBBONS_C10_PDU( const PDU& );
    BCCMD_STIBBONS_C10_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C10_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_TRANSACTION_CANCEL_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_TRANSACTION_CANCEL_PDU();
    BCCMD_STREAM_TRANSACTION_CANCEL_PDU( const PDU& );
    BCCMD_STREAM_TRANSACTION_CANCEL_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STREAM_TRANSACTION_CANCEL_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C11_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C11_PDU();
    BCCMD_STIBBONS_C11_PDU( const PDU& );
    BCCMD_STIBBONS_C11_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C11_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C12_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C12_PDU();
    BCCMD_STIBBONS_C12_PDU( const PDU& );
    BCCMD_STIBBONS_C12_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C12_PDU ( uint16 varid ) ;
};

class BCCMD_HOST_DECIDES_TIMING_PDU : public BCCMD_PDU
{
public:
    BCCMD_HOST_DECIDES_TIMING_PDU();
    BCCMD_HOST_DECIDES_TIMING_PDU( const PDU& );
    BCCMD_HOST_DECIDES_TIMING_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_HOST_DECIDES_TIMING_PDU ( uint16 varid ) ;
};

class BCCMD_RADIOTEST_PDU : public BCCMD_PDU
{
public:
    BCCMD_RADIOTEST_PDU();
    BCCMD_RADIOTEST_PDU( const PDU& );
    BCCMD_RADIOTEST_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_radiotest(void) const ;
    void set_radiotest(uint16 value) ;
protected:
    BCCMD_RADIOTEST_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C13_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C13_PDU();
    BCCMD_STIBBONS_C13_PDU( const PDU& );
    BCCMD_STIBBONS_C13_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C13_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C14_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C14_PDU();
    BCCMD_STIBBONS_C14_PDU( const PDU& );
    BCCMD_STIBBONS_C14_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C14_PDU ( uint16 varid ) ;
};

class BCCMD_VREF_CONSTANT_PDU : public BCCMD_PDU
{
public:
    BCCMD_VREF_CONSTANT_PDU();
    BCCMD_VREF_CONSTANT_PDU( const PDU& );
    BCCMD_VREF_CONSTANT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_VREF_CONSTANT_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C15_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C15_PDU();
    BCCMD_STIBBONS_C15_PDU( const PDU& );
    BCCMD_STIBBONS_C15_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C15_PDU ( uint16 varid ) ;
};

class BCCMD_CLK_SKEW_COUNT_PDU : public BCCMD_PDU
{
public:
    BCCMD_CLK_SKEW_COUNT_PDU();
    BCCMD_CLK_SKEW_COUNT_PDU( const PDU& );
    BCCMD_CLK_SKEW_COUNT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CLK_SKEW_COUNT_PDU ( uint16 varid ) ;
};

class BCCMD_AWAY_TIME_PDU : public BCCMD_PDU
{
public:
    BCCMD_AWAY_TIME_PDU();
    BCCMD_AWAY_TIME_PDU( const PDU& );
    BCCMD_AWAY_TIME_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    uint32 get_time(void) const ;
    void set_time(uint32 value) ;
protected:
    BCCMD_AWAY_TIME_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_C16_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_C16_PDU();
    BCCMD_STIBBONS_C16_PDU( const PDU& );
    BCCMD_STIBBONS_C16_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_STIBBONS_C16_PDU ( uint16 varid ) ;
};

class BCCMD_WAIT_FOR_N_MS_PDU : public BCCMD_PDU
{
public:
    BCCMD_WAIT_FOR_N_MS_PDU();
    BCCMD_WAIT_FOR_N_MS_PDU( const PDU& );
    BCCMD_WAIT_FOR_N_MS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_WAIT_FOR_N_MS_PDU ( uint16 varid ) ;
};

class BCCMD_PCM_CLOCK_RATE_PDU : public BCCMD_PDU
{
public:
    BCCMD_PCM_CLOCK_RATE_PDU();
    BCCMD_PCM_CLOCK_RATE_PDU( const PDU& );
    BCCMD_PCM_CLOCK_RATE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pcm_interface(void) const ;
    void set_pcm_interface(uint16 value) ;
    uint32 get_clock_rate(void) const ;
    void set_clock_rate(uint32 value) ;
protected:
    BCCMD_PCM_CLOCK_RATE_PDU ( uint16 varid ) ;
};

class BCCMD_TESTB_AMUX_PDU : public BCCMD_PDU
{
public:
    BCCMD_TESTB_AMUX_PDU();
    BCCMD_TESTB_AMUX_PDU( const PDU& );
    BCCMD_TESTB_AMUX_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_TESTB_AMUX_PDU ( uint16 varid ) ;
};

class BCCMD_GPS_START_PDU : public BCCMD_PDU
{
public:
    BCCMD_GPS_START_PDU();
    BCCMD_GPS_START_PDU( const PDU& );
    BCCMD_GPS_START_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
    uint16 get_delay(void) const ;
    void set_delay(uint16 value) ;
protected:
    BCCMD_GPS_START_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_ALIAS_SINK_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_ALIAS_SINK_PDU();
    BCCMD_STREAM_ALIAS_SINK_PDU( const PDU& );
    BCCMD_STREAM_ALIAS_SINK_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_sink1_sid(void) const ;
    void set_sink1_sid(uint16 value) ;
    uint16 get_sink2_sid(void) const ;
    void set_sink2_sid(uint16 value) ;
protected:
    BCCMD_STREAM_ALIAS_SINK_PDU ( uint16 varid ) ;
};

class BCCMD_LIMIT_EDR_POWER_PDU : public BCCMD_PDU
{
public:
    BCCMD_LIMIT_EDR_POWER_PDU();
    BCCMD_LIMIT_EDR_POWER_PDU( const PDU& );
    BCCMD_LIMIT_EDR_POWER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    bool get_enable(void) const ;
    void set_enable(bool value) ;
protected:
    BCCMD_LIMIT_EDR_POWER_PDU ( uint16 varid ) ;
};

class BCCMD_HOSTIO_ENABLE_DEBUG_PDU : public BCCMD_PDU
{
public:
    BCCMD_HOSTIO_ENABLE_DEBUG_PDU();
    BCCMD_HOSTIO_ENABLE_DEBUG_PDU( const PDU& );
    BCCMD_HOSTIO_ENABLE_DEBUG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_HOSTIO_ENABLE_DEBUG_PDU ( uint16 varid ) ;
};

class BCCMD_WARM_HALT_PDU : public BCCMD_PDU
{
public:
    BCCMD_WARM_HALT_PDU();
    BCCMD_WARM_HALT_PDU( const PDU& );
    BCCMD_WARM_HALT_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_WARM_HALT_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_CLOSE_SOURCE_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_CLOSE_SOURCE_PDU();
    BCCMD_STREAM_CLOSE_SOURCE_PDU( const PDU& );
    BCCMD_STREAM_CLOSE_SOURCE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STREAM_CLOSE_SOURCE_PDU ( uint16 varid ) ;
};

class BCCMD_SINGLE_CHAN_PDU : public BCCMD_PDU
{
public:
    BCCMD_SINGLE_CHAN_PDU();
    BCCMD_SINGLE_CHAN_PDU( const PDU& );
    BCCMD_SINGLE_CHAN_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_SINGLE_CHAN_PDU ( uint16 varid ) ;
};

class BCCMD_PSCLRS_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSCLRS_PDU();
    BCCMD_PSCLRS_PDU( const PDU& );
    BCCMD_PSCLRS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
    uint16 get_stores(void) const ;
    void set_stores(uint16 value) ;
protected:
    BCCMD_PSCLRS_PDU ( uint16 varid ) ;
};

class BCCMD_LED_CONFIG_PDU : public BCCMD_PDU
{
public:
    BCCMD_LED_CONFIG_PDU();
    BCCMD_LED_CONFIG_PDU( const PDU& );
    BCCMD_LED_CONFIG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_led(void) const ;
    void set_led(uint16 value) ;
    uint16 get_led_key(void) const ;
    void set_led_key(uint16 value) ;
    uint16 get_value(void) const ;
    void set_value(uint16 value) ;
protected:
    BCCMD_LED_CONFIG_PDU ( uint16 varid ) ;
};

class BCCMD_LOCK_ACL_PACKET_TYPE_PDU : public BCCMD_PDU
{
public:
    BCCMD_LOCK_ACL_PACKET_TYPE_PDU();
    BCCMD_LOCK_ACL_PACKET_TYPE_PDU( const PDU& );
    BCCMD_LOCK_ACL_PACKET_TYPE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_LOCK_ACL_PACKET_TYPE_PDU ( uint16 varid ) ;
};

class BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU : public BCCMD_PDU
{
public:
    BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU();
    BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU( const PDU& );
    BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_COMBO_DOT11_ESCO_RTX_PRIORITY_PDU ( uint16 varid ) ;
};

class BCCMD_TESTA_AMUX_PDU : public BCCMD_PDU
{
public:
    BCCMD_TESTA_AMUX_PDU();
    BCCMD_TESTA_AMUX_PDU( const PDU& );
    BCCMD_TESTA_AMUX_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_TESTA_AMUX_PDU ( uint16 varid ) ;
};

class BCCMD_PIO32_STRONG_BIAS_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO32_STRONG_BIAS_PDU();
    BCCMD_PIO32_STRONG_BIAS_PDU( const PDU& );
    BCCMD_PIO32_STRONG_BIAS_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_mask(void) const ;
    void set_mask(uint32 value) ;
    uint32 get_bits(void) const ;
    void set_bits(uint32 value) ;
    uint32 get_result(void) const ;
    void set_result(uint32 value) ;
protected:
    BCCMD_PIO32_STRONG_BIAS_PDU ( uint16 varid ) ;
};

class BCCMD_PS_MEMORY_TYPE_PDU : public BCCMD_PDU
{
public:
    BCCMD_PS_MEMORY_TYPE_PDU();
    BCCMD_PS_MEMORY_TYPE_PDU( const PDU& );
    BCCMD_PS_MEMORY_TYPE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_stores(void) const ;
    void set_stores(uint16 value) ;
    uint16 get_memorytype(void) const ;
    void set_memorytype(uint16 value) ;
protected:
    BCCMD_PS_MEMORY_TYPE_PDU ( uint16 varid ) ;
};

class BCCMD_BABEL_SPI_RUN_STATE_PDU : public BCCMD_PDU
{
public:
    BCCMD_BABEL_SPI_RUN_STATE_PDU();
    BCCMD_BABEL_SPI_RUN_STATE_PDU( const PDU& );
    BCCMD_BABEL_SPI_RUN_STATE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BABEL_SPI_RUN_STATE_PDU ( uint16 varid ) ;
};

class BCCMD_PSSIZE_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSSIZE_PDU();
    BCCMD_PSSIZE_PDU( const PDU& );
    BCCMD_PSSIZE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
    uint16 get_len(void) const ;
    void set_len(uint16 value) ;
    uint16 get_stores(void) const ;
    void set_stores(uint16 value) ;
protected:
    BCCMD_PSSIZE_PDU ( uint16 varid ) ;
};

class BCCMD_KILL_VM_APPLICATION_PDU : public BCCMD_PDU
{
public:
    BCCMD_KILL_VM_APPLICATION_PDU();
    BCCMD_KILL_VM_APPLICATION_PDU( const PDU& );
    BCCMD_KILL_VM_APPLICATION_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_KILL_VM_APPLICATION_PDU ( uint16 varid ) ;
};

class BCCMD_ANA_FTRIM_READWRITE_PDU : public BCCMD_PDU
{
public:
    BCCMD_ANA_FTRIM_READWRITE_PDU();
    BCCMD_ANA_FTRIM_READWRITE_PDU( const PDU& );
    BCCMD_ANA_FTRIM_READWRITE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ANA_FTRIM_READWRITE_PDU ( uint16 varid ) ;
};

class BCCMD_ENABLE_DEV_CONNECT_PDU : public BCCMD_PDU
{
public:
    BCCMD_ENABLE_DEV_CONNECT_PDU();
    BCCMD_ENABLE_DEV_CONNECT_PDU( const PDU& );
    BCCMD_ENABLE_DEV_CONNECT_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_ENABLE_DEV_CONNECT_PDU ( uint16 varid ) ;
};

class BCCMD_BER_THRESHOLD_PDU : public BCCMD_PDU
{
public:
    BCCMD_BER_THRESHOLD_PDU();
    BCCMD_BER_THRESHOLD_PDU( const PDU& );
    BCCMD_BER_THRESHOLD_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    uint16 get_ber_threshold(void) const ;
    void set_ber_threshold(uint16 value) ;
protected:
    BCCMD_BER_THRESHOLD_PDU ( uint16 varid ) ;
};

class BCCMD_COEX_INT_TEST_PDU : public BCCMD_PDU
{
public:
    BCCMD_COEX_INT_TEST_PDU();
    BCCMD_COEX_INT_TEST_PDU( const PDU& );
    BCCMD_COEX_INT_TEST_PDU( const uint8 * buffer , uint32 len ) ;
    uint8 get_mode(void) const ;
    void set_mode(uint8 value) ;
    uint8 get_value(void) const ;
    void set_value(uint8 value) ;
protected:
    BCCMD_COEX_INT_TEST_PDU ( uint16 varid ) ;
};

class BCCMD_RDF_PT_PDU : public BCCMD_PDU
{
public:
    BCCMD_RDF_PT_PDU();
    BCCMD_RDF_PT_PDU( const PDU& );
    BCCMD_RDF_PT_PDU( const uint8 * buffer , uint32 len ) ;
    uint8 get_enable(void) const ;
    void set_enable(uint8 value) ;
    uint8 get_antenna(void) const ;
    void set_antenna(uint8 value) ;
protected:
    BCCMD_RDF_PT_PDU ( uint16 varid ) ;
};

class BCCMD_EGPS_PULSE_INPUT_START_PDU : public BCCMD_PDU
{
public:
    BCCMD_EGPS_PULSE_INPUT_START_PDU();
    BCCMD_EGPS_PULSE_INPUT_START_PDU( const PDU& );
    BCCMD_EGPS_PULSE_INPUT_START_PDU( const uint8 * buffer , uint32 len ) ;
    uint8 get_pio(void) const ;
    void set_pio(uint8 value) ;
    uint8 get_edge_mode(void) const ;
    void set_edge_mode(uint8 value) ;
protected:
    BCCMD_EGPS_PULSE_INPUT_START_PDU ( uint16 varid ) ;
};

class BCCMD_RDF_PT_SELECT_ANTENNA_PDU : public BCCMD_PDU
{
public:
    BCCMD_RDF_PT_SELECT_ANTENNA_PDU();
    BCCMD_RDF_PT_SELECT_ANTENNA_PDU( const PDU& );
    BCCMD_RDF_PT_SELECT_ANTENNA_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_RDF_PT_SELECT_ANTENNA_PDU ( uint16 varid ) ;
};

class BCCMD_PCM_LOW_JITTER_PDU : public BCCMD_PDU
{
public:
    BCCMD_PCM_LOW_JITTER_PDU();
    BCCMD_PCM_LOW_JITTER_PDU( const PDU& );
    BCCMD_PCM_LOW_JITTER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pcm_if_id(void) const ;
    void set_pcm_if_id(uint16 value) ;
    uint32 get_low_jitter(void) const ;
    void set_low_jitter(uint32 value) ;
protected:
    BCCMD_PCM_LOW_JITTER_PDU ( uint16 varid ) ;
};

class BCCMD_CHARGER_TRIMS_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHARGER_TRIMS_PDU();
    BCCMD_CHARGER_TRIMS_PDU( const PDU& );
    BCCMD_CHARGER_TRIMS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_chgref_trim(void) const ;
    void set_chgref_trim(uint16 value) ;
    int16 get_hvref_trim(void) const ;
    void set_hvref_trim(int16 value) ;
    uint16 get_rtrim(void) const ;
    void set_rtrim(uint16 value) ;
    uint16 get_itrim(void) const ;
    void set_itrim(uint16 value) ;
    uint16 get_iext_trim(void) const ;
    void set_iext_trim(uint16 value) ;
    uint16 get_iterm_trim(void) const ;
    void set_iterm_trim(uint16 value) ;
    uint16 get_vfast_trim(void) const ;
    void set_vfast_trim(uint16 value) ;
    uint16 get_hyst_trim(void) const ;
    void set_hyst_trim(uint16 value) ;
protected:
    BCCMD_CHARGER_TRIMS_PDU ( uint16 varid ) ;
};

class BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU : public BCCMD_PDU
{
public:
    BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU();
    BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU( const PDU& );
    BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_KALSPIDEBUG_SETDEBUGMODE_PDU ( uint16 varid ) ;
};

class BCCMD_PCM2_ATTENUATION_PDU : public BCCMD_PDU
{
public:
    BCCMD_PCM2_ATTENUATION_PDU();
    BCCMD_PCM2_ATTENUATION_PDU( const PDU& );
    BCCMD_PCM2_ATTENUATION_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PCM2_ATTENUATION_PDU ( uint16 varid ) ;
};

class BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU : public BCCMD_PDU
{
public:
    BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU();
    BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU( const PDU& );
    BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_SAVE_CONNECTION_EVENT_FILTERS_PDU ( uint16 varid ) ;
};

class BCCMD_ESCOTEST_PDU : public BCCMD_PDU
{
public:
    BCCMD_ESCOTEST_PDU();
    BCCMD_ESCOTEST_PDU( const PDU& );
    BCCMD_ESCOTEST_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_function(void) const ;
    void set_function(uint16 value) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ESCOTEST_PDU ( uint16 varid ) ;
};

class BCCMD_E2_APP_SIZE_PDU : public BCCMD_PDU
{
public:
    BCCMD_E2_APP_SIZE_PDU();
    BCCMD_E2_APP_SIZE_PDU( const PDU& );
    BCCMD_E2_APP_SIZE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_E2_APP_SIZE_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_CONFIGURE_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_CONFIGURE_PDU();
    BCCMD_STREAM_CONFIGURE_PDU( const PDU& );
    BCCMD_STREAM_CONFIGURE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_sid(void) const ;
    void set_sid(uint16 value) ;
    uint16 get_key_config(void) const ;
    void set_key_config(uint16 value) ;
    uint32 get_value(void) const ;
    void set_value(uint32 value) ;
protected:
    BCCMD_STREAM_CONFIGURE_PDU ( uint16 varid ) ;
};

class BCCMD_ADC_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC_PDU();
    BCCMD_ADC_PDU( const PDU& );
    BCCMD_ADC_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC_PDU ( uint16 varid ) ;
};

class BCCMD_PSNEXT_ALL_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSNEXT_ALL_PDU();
    BCCMD_PSNEXT_ALL_PDU( const PDU& );
    BCCMD_PSNEXT_ALL_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
    uint16 get_nextid(void) const ;
    void set_nextid(uint16 value) ;
protected:
    BCCMD_PSNEXT_ALL_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_SYNC_SID_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_SYNC_SID_PDU();
    BCCMD_STREAM_SYNC_SID_PDU( const PDU& );
    BCCMD_STREAM_SYNC_SID_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_sid1(void) const ;
    void set_sid1(uint16 value) ;
    uint16 get_sid2(void) const ;
    void set_sid2(uint16 value) ;
protected:
    BCCMD_STREAM_SYNC_SID_PDU ( uint16 varid ) ;
};

class BCCMD_MAP_SCO_PCM_PDU : public BCCMD_PDU
{
public:
    BCCMD_MAP_SCO_PCM_PDU();
    BCCMD_MAP_SCO_PCM_PDU( const PDU& );
    BCCMD_MAP_SCO_PCM_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_MAP_SCO_PCM_PDU ( uint16 varid ) ;
};

class BCCMD_FASTPIPE_CREATE_PDU : public BCCMD_PDU
{
public:
    BCCMD_FASTPIPE_CREATE_PDU();
    BCCMD_FASTPIPE_CREATE_PDU( const PDU& );
    BCCMD_FASTPIPE_CREATE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pipe_id(void) const ;
    void set_pipe_id(uint16 value) ;
    uint32 get_overhead_host(void) const ;
    void set_overhead_host(uint32 value) ;
    uint32 get_capacity_rx_host(void) const ;
    void set_capacity_rx_host(uint32 value) ;
    uint32 get_required_tx_controller(void) const ;
    void set_required_tx_controller(uint32 value) ;
    uint32 get_desired_tx_controller(void) const ;
    void set_desired_tx_controller(uint32 value) ;
    uint32 get_required_rx_controller(void) const ;
    void set_required_rx_controller(uint32 value) ;
    uint32 get_desired_rx_controller(void) const ;
    void set_desired_rx_controller(uint32 value) ;
    uint32 get_overhead_controller(void) const ;
    void set_overhead_controller(uint32 value) ;
    uint32 get_capacity_tx_controller(void) const ;
    void set_capacity_tx_controller(uint32 value) ;
    uint32 get_capacity_rx_controller(void) const ;
    void set_capacity_rx_controller(uint32 value) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
protected:
    BCCMD_FASTPIPE_CREATE_PDU ( uint16 varid ) ;
};

class BCCMD_COASTER_INDICATIONS_PDU : public BCCMD_PDU
{
public:
    BCCMD_COASTER_INDICATIONS_PDU();
    BCCMD_COASTER_INDICATIONS_PDU( const PDU& );
    BCCMD_COASTER_INDICATIONS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_events(void) const ;
    void set_events(uint16 value) ;
    uint32 get_uu(void) const ;
    void set_uu(uint32 value) ;
    uint16 get_optflags(void) const ;
    void set_optflags(uint16 value) ;
protected:
    BCCMD_COASTER_INDICATIONS_PDU ( uint16 varid ) ;
};

class BCCMD_LED1_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_LED1_ENABLE_PDU();
    BCCMD_LED1_ENABLE_PDU( const PDU& );
    BCCMD_LED1_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_LED1_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU : public BCCMD_PDU
{
public:
    BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU();
    BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU( const PDU& );
    BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ENABLE_COEX_MESSAGE_REPORTING_PDU ( uint16 varid ) ;
};

class BCCMD_DIGITAL_AUDIO_CONFIG_PDU : public BCCMD_PDU
{
public:
    BCCMD_DIGITAL_AUDIO_CONFIG_PDU();
    BCCMD_DIGITAL_AUDIO_CONFIG_PDU( const PDU& );
    BCCMD_DIGITAL_AUDIO_CONFIG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pcm_if_id(void) const ;
    void set_pcm_if_id(uint16 value) ;
    uint16 get_options(void) const ;
    void set_options(uint16 value) ;
protected:
    BCCMD_DIGITAL_AUDIO_CONFIG_PDU ( uint16 varid ) ;
};

class BCCMD_CHIPVER_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHIPVER_PDU();
    BCCMD_CHIPVER_PDU( const PDU& );
    BCCMD_CHIPVER_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHIPVER_PDU ( uint16 varid ) ;
};

class BCCMD_SPI_LOCK_STATUS_PDU : public BCCMD_PDU
{
public:
    BCCMD_SPI_LOCK_STATUS_PDU();
    BCCMD_SPI_LOCK_STATUS_PDU( const PDU& );
    BCCMD_SPI_LOCK_STATUS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_SPI_LOCK_STATUS_PDU ( uint16 varid ) ;
};

class BCCMD_ADC0_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC0_PDU();
    BCCMD_ADC0_PDU( const PDU& );
    BCCMD_ADC0_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC0_PDU ( uint16 varid ) ;
};

class BCCMD_ENABLE_MEDIUM_RATE_PDU : public BCCMD_PDU
{
public:
    BCCMD_ENABLE_MEDIUM_RATE_PDU();
    BCCMD_ENABLE_MEDIUM_RATE_PDU( const PDU& );
    BCCMD_ENABLE_MEDIUM_RATE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    bool get_enable(void) const ;
    void set_enable(bool value) ;
protected:
    BCCMD_ENABLE_MEDIUM_RATE_PDU ( uint16 varid ) ;
};

class BCCMD_ADC1_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC1_PDU();
    BCCMD_ADC1_PDU( const PDU& );
    BCCMD_ADC1_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC1_PDU ( uint16 varid ) ;
};

class BCCMD_FMTX_SET_CDAC_PDU : public BCCMD_PDU
{
public:
    BCCMD_FMTX_SET_CDAC_PDU();
    BCCMD_FMTX_SET_CDAC_PDU( const PDU& );
    BCCMD_FMTX_SET_CDAC_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_FMTX_SET_CDAC_PDU ( uint16 varid ) ;
};

class BCCMD_DIGITAL_AUDIO_RATE_PDU : public BCCMD_PDU
{
public:
    BCCMD_DIGITAL_AUDIO_RATE_PDU();
    BCCMD_DIGITAL_AUDIO_RATE_PDU( const PDU& );
    BCCMD_DIGITAL_AUDIO_RATE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pcm_if_id(void) const ;
    void set_pcm_if_id(uint16 value) ;
    uint32 get_frequency(void) const ;
    void set_frequency(uint32 value) ;
    uint16 get_samp_size(void) const ;
    void set_samp_size(uint16 value) ;
protected:
    BCCMD_DIGITAL_AUDIO_RATE_PDU ( uint16 varid ) ;
};

class BCCMD_ADC2_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC2_PDU();
    BCCMD_ADC2_PDU( const PDU& );
    BCCMD_ADC2_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC2_PDU ( uint16 varid ) ;
};

class BCCMD_PROVOKE_PANIC_PDU : public BCCMD_PDU
{
public:
    BCCMD_PROVOKE_PANIC_PDU();
    BCCMD_PROVOKE_PANIC_PDU( const PDU& );
    BCCMD_PROVOKE_PANIC_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PROVOKE_PANIC_PDU ( uint16 varid ) ;
};

class BCCMD_GET_CLR_EVT_PDU : public BCCMD_PDU
{
public:
    BCCMD_GET_CLR_EVT_PDU();
    BCCMD_GET_CLR_EVT_PDU( const PDU& );
    BCCMD_GET_CLR_EVT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_evtcntid(void) const ;
    void set_evtcntid(uint16 value) ;
    uint16 get_cnt(void) const ;
    void set_cnt(uint16 value) ;
protected:
    BCCMD_GET_CLR_EVT_PDU ( uint16 varid ) ;
};

class BCCMD_E2_DEVICE_PDU : public BCCMD_PDU
{
public:
    BCCMD_E2_DEVICE_PDU();
    BCCMD_E2_DEVICE_PDU( const PDU& );
    BCCMD_E2_DEVICE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_log2_bytes(void) const ;
    void set_log2_bytes(uint16 value) ;
    uint16 get_addr_mask(void) const ;
    void set_addr_mask(uint16 value) ;
protected:
    BCCMD_E2_DEVICE_PDU ( uint16 varid ) ;
};

class BCCMD_ADC3_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC3_PDU();
    BCCMD_ADC3_PDU( const PDU& );
    BCCMD_ADC3_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC3_PDU ( uint16 varid ) ;
};

class BCCMD_INTERFACE_VERSION_PDU : public BCCMD_PDU
{
public:
    BCCMD_INTERFACE_VERSION_PDU();
    BCCMD_INTERFACE_VERSION_PDU( const PDU& );
    BCCMD_INTERFACE_VERSION_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_INTERFACE_VERSION_PDU ( uint16 varid ) ;
};

class BCCMD_ADC4_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC4_PDU();
    BCCMD_ADC4_PDU( const PDU& );
    BCCMD_ADC4_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC4_PDU ( uint16 varid ) ;
};

class BCCMD_ADC5_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC5_PDU();
    BCCMD_ADC5_PDU( const PDU& );
    BCCMD_ADC5_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC5_PDU ( uint16 varid ) ;
};

class BCCMD_ADC6_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC6_PDU();
    BCCMD_ADC6_PDU( const PDU& );
    BCCMD_ADC6_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC6_PDU ( uint16 varid ) ;
};

class BCCMD_ADC7_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC7_PDU();
    BCCMD_ADC7_PDU( const PDU& );
    BCCMD_ADC7_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC7_PDU ( uint16 varid ) ;
};

class BCCMD_ADC8_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC8_PDU();
    BCCMD_ADC8_PDU( const PDU& );
    BCCMD_ADC8_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC8_PDU ( uint16 varid ) ;
};

class BCCMD_ADC9_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC9_PDU();
    BCCMD_ADC9_PDU( const PDU& );
    BCCMD_ADC9_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC9_PDU ( uint16 varid ) ;
};

class BCCMD_KALDEBUG_PDU : public BCCMD_PDU
{
public:
    BCCMD_KALDEBUG_PDU();
    BCCMD_KALDEBUG_PDU( const PDU& );
    BCCMD_KALDEBUG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_function(void) const ;
    void set_function(uint16 value) ;
protected:
    BCCMD_KALDEBUG_PDU ( uint16 varid ) ;
};

class BCCMD_CHARGER_SUPPRESS_LED0_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHARGER_SUPPRESS_LED0_PDU();
    BCCMD_CHARGER_SUPPRESS_LED0_PDU( const PDU& );
    BCCMD_CHARGER_SUPPRESS_LED0_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHARGER_SUPPRESS_LED0_PDU ( uint16 varid ) ;
};

class BCCMD_PIO_STRONG_BIAS_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO_STRONG_BIAS_PDU();
    BCCMD_PIO_STRONG_BIAS_PDU( const PDU& );
    BCCMD_PIO_STRONG_BIAS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PIO_STRONG_BIAS_PDU ( uint16 varid ) ;
};

class BCCMD_CHARGER_STATUS_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHARGER_STATUS_PDU();
    BCCMD_CHARGER_STATUS_PDU( const PDU& );
    BCCMD_CHARGER_STATUS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHARGER_STATUS_PDU ( uint16 varid ) ;
};

class BCCMD_PREVIN_TUNNEL_PDU : public BCCMD_PDU
{
public:
    BCCMD_PREVIN_TUNNEL_PDU();
    BCCMD_PREVIN_TUNNEL_PDU( const PDU& );
    BCCMD_PREVIN_TUNNEL_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_message_num(void) const ;
    void set_message_num(uint16 value) ;
    uint16 get_length(void) const ;
    void set_length(uint16 value) ;
    uint16 get_message(void) const ;
    void set_message(uint16 value) ;
protected:
    BCCMD_PREVIN_TUNNEL_PDU ( uint16 varid ) ;
};

class BCCMD_CREATE_OPERATOR_C_PDU : public BCCMD_PDU
{
public:
    BCCMD_CREATE_OPERATOR_C_PDU();
    BCCMD_CREATE_OPERATOR_C_PDU( const PDU& );
    BCCMD_CREATE_OPERATOR_C_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
    uint16 get_num_patches(void) const ;
    void set_num_patches(uint16 value) ;
    uint16 get_skip_count(void) const ;
    void set_skip_count(uint16 value) ;
    uint16 get_skip_flag(void) const ;
    void set_skip_flag(uint16 value) ;
protected:
    BCCMD_CREATE_OPERATOR_C_PDU ( uint16 varid ) ;
};

class BCCMD_COASTER_DEL_SV_PDU : public BCCMD_PDU
{
public:
    BCCMD_COASTER_DEL_SV_PDU();
    BCCMD_COASTER_DEL_SV_PDU( const PDU& );
    BCCMD_COASTER_DEL_SV_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_sv_pairs1(void) const ;
    void set_sv_pairs1(uint16 value) ;
    uint16 get_sv_pairs2(void) const ;
    void set_sv_pairs2(uint16 value) ;
    uint16 get_sv_pairs3(void) const ;
    void set_sv_pairs3(uint16 value) ;
    uint16 get_sv_pairs4(void) const ;
    void set_sv_pairs4(uint16 value) ;
protected:
    BCCMD_COASTER_DEL_SV_PDU ( uint16 varid ) ;
};

class BCCMD_FIRMWARE_CHECK_MASK_PDU : public BCCMD_PDU
{
public:
    BCCMD_FIRMWARE_CHECK_MASK_PDU();
    BCCMD_FIRMWARE_CHECK_MASK_PDU( const PDU& );
    BCCMD_FIRMWARE_CHECK_MASK_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_FIRMWARE_CHECK_MASK_PDU ( uint16 varid ) ;
};

class BCCMD_PRESERVE_VALID_PDU : public BCCMD_PDU
{
public:
    BCCMD_PRESERVE_VALID_PDU();
    BCCMD_PRESERVE_VALID_PDU( const PDU& );
    BCCMD_PRESERVE_VALID_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PRESERVE_VALID_PDU ( uint16 varid ) ;
};

class BCCMD_CLKSW_CURRENT_CLOCKS_PDU : public BCCMD_PDU
{
public:
    BCCMD_CLKSW_CURRENT_CLOCKS_PDU();
    BCCMD_CLKSW_CURRENT_CLOCKS_PDU( const PDU& );
    BCCMD_CLKSW_CURRENT_CLOCKS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CLKSW_CURRENT_CLOCKS_PDU ( uint16 varid ) ;
};

class BCCMD_PIO32_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO32_PDU();
    BCCMD_PIO32_PDU( const PDU& );
    BCCMD_PIO32_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_mask(void) const ;
    void set_mask(uint32 value) ;
    uint32 get_bits(void) const ;
    void set_bits(uint32 value) ;
    uint32 get_result(void) const ;
    void set_result(uint32 value) ;
protected:
    BCCMD_PIO32_PDU ( uint16 varid ) ;
};

class BCCMD_STREAM_CONNECT_PDU : public BCCMD_PDU
{
public:
    BCCMD_STREAM_CONNECT_PDU();
    BCCMD_STREAM_CONNECT_PDU( const PDU& );
    BCCMD_STREAM_CONNECT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_source_sid(void) const ;
    void set_source_sid(uint16 value) ;
    uint16 get_sink_sid(void) const ;
    void set_sink_sid(uint16 value) ;
protected:
    BCCMD_STREAM_CONNECT_PDU ( uint16 varid ) ;
};

class BCCMD_HQ_SCRAPING_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_HQ_SCRAPING_ENABLE_PDU();
    BCCMD_HQ_SCRAPING_ENABLE_PDU( const PDU& );
    BCCMD_HQ_SCRAPING_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_HQ_SCRAPING_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_CLOCK_MODULATION_CONFIG_PDU : public BCCMD_PDU
{
public:
    BCCMD_CLOCK_MODULATION_CONFIG_PDU();
    BCCMD_CLOCK_MODULATION_CONFIG_PDU( const PDU& );
    BCCMD_CLOCK_MODULATION_CONFIG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_amount(void) const ;
    void set_amount(uint16 value) ;
    uint16 get_rate(void) const ;
    void set_rate(uint16 value) ;
    uint16 get_wibbling(void) const ;
    void set_wibbling(uint16 value) ;
protected:
    BCCMD_CLOCK_MODULATION_CONFIG_PDU ( uint16 varid ) ;
};

class BCCMD_GPS_STOP_PDU : public BCCMD_PDU
{
public:
    BCCMD_GPS_STOP_PDU();
    BCCMD_GPS_STOP_PDU( const PDU& );
    BCCMD_GPS_STOP_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
protected:
    BCCMD_GPS_STOP_PDU ( uint16 varid ) ;
};

class BCCMD_CRYPTKEYLEN_PDU : public BCCMD_PDU
{
public:
    BCCMD_CRYPTKEYLEN_PDU();
    BCCMD_CRYPTKEYLEN_PDU( const PDU& );
    BCCMD_CRYPTKEYLEN_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    uint16 get_keylen(void) const ;
    void set_keylen(uint16 value) ;
protected:
    BCCMD_CRYPTKEYLEN_PDU ( uint16 varid ) ;
};

class BCCMD_PSCLRALLS_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSCLRALLS_PDU();
    BCCMD_PSCLRALLS_PDU( const PDU& );
    BCCMD_PSCLRALLS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PSCLRALLS_PDU ( uint16 varid ) ;
};

class BCCMD_PCM_SLOTS_PER_FRAME_PDU : public BCCMD_PDU
{
public:
    BCCMD_PCM_SLOTS_PER_FRAME_PDU();
    BCCMD_PCM_SLOTS_PER_FRAME_PDU( const PDU& );
    BCCMD_PCM_SLOTS_PER_FRAME_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pcm_interface(void) const ;
    void set_pcm_interface(uint16 value) ;
    uint16 get_slots_per_frame(void) const ;
    void set_slots_per_frame(uint16 value) ;
protected:
    BCCMD_PCM_SLOTS_PER_FRAME_PDU ( uint16 varid ) ;
};

class BCCMD_WARM_RESET_PDU : public BCCMD_PDU
{
public:
    BCCMD_WARM_RESET_PDU();
    BCCMD_WARM_RESET_PDU( const PDU& );
    BCCMD_WARM_RESET_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_WARM_RESET_PDU ( uint16 varid ) ;
};

class BCCMD_FASTPIPE_DESTROY_PDU : public BCCMD_PDU
{
public:
    BCCMD_FASTPIPE_DESTROY_PDU();
    BCCMD_FASTPIPE_DESTROY_PDU( const PDU& );
    BCCMD_FASTPIPE_DESTROY_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pipe_id(void) const ;
    void set_pipe_id(uint16 value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
protected:
    BCCMD_FASTPIPE_DESTROY_PDU ( uint16 varid ) ;
};

class BCCMD_SYNC_CLOCK_PDU : public BCCMD_PDU
{
public:
    BCCMD_SYNC_CLOCK_PDU();
    BCCMD_SYNC_CLOCK_PDU( const PDU& );
    BCCMD_SYNC_CLOCK_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_SYNC_CLOCK_PDU ( uint16 varid ) ;
};

class BCCMD_BLE_RADIO_TEST_PDU : public BCCMD_PDU
{
public:
    BCCMD_BLE_RADIO_TEST_PDU();
    BCCMD_BLE_RADIO_TEST_PDU( const PDU& );
    BCCMD_BLE_RADIO_TEST_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_command(void) const ;
    void set_command(uint16 value) ;
    uint8 get_channel(void) const ;
    void set_channel(uint8 value) ;
    uint8 get_length(void) const ;
    void set_length(uint8 value) ;
    uint8 get_payload(void) const ;
    void set_payload(uint8 value) ;
protected:
    BCCMD_BLE_RADIO_TEST_PDU ( uint16 varid ) ;
};

class BCCMD_PSNEXT_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSNEXT_PDU();
    BCCMD_PSNEXT_PDU( const PDU& );
    BCCMD_PSNEXT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
    uint16 get_stores(void) const ;
    void set_stores(uint16 value) ;
    uint16 get_nextid(void) const ;
    void set_nextid(uint16 value) ;
protected:
    BCCMD_PSNEXT_PDU ( uint16 varid ) ;
};

class BCCMD_ENABLE_TX_PDU : public BCCMD_PDU
{
public:
    BCCMD_ENABLE_TX_PDU();
    BCCMD_ENABLE_TX_PDU( const PDU& );
    BCCMD_ENABLE_TX_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_ENABLE_TX_PDU ( uint16 varid ) ;
};

class BCCMD_PSU_SMPS_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_PSU_SMPS_ENABLE_PDU();
    BCCMD_PSU_SMPS_ENABLE_PDU( const PDU& );
    BCCMD_PSU_SMPS_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PSU_SMPS_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_UNLOCK_OTP_PDU : public BCCMD_PDU
{
public:
    BCCMD_UNLOCK_OTP_PDU();
    BCCMD_UNLOCK_OTP_PDU( const PDU& );
    BCCMD_UNLOCK_OTP_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_UNLOCK_OTP_PDU ( uint16 varid ) ;
};

class BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU : public BCCMD_PDU
{
public:
    BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU();
    BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU( const PDU& );
    BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BABEL_SPI_GET_LINE_STATUS_PDU ( uint16 varid ) ;
};

class BCCMD_GPS_CONFIG_PDU : public BCCMD_PDU
{
public:
    BCCMD_GPS_CONFIG_PDU();
    BCCMD_GPS_CONFIG_PDU( const PDU& );
    BCCMD_GPS_CONFIG_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_GPS_CONFIG_PDU ( uint16 varid ) ;
};

class BCCMD_BC3PSU_PDU : public BCCMD_PDU
{
public:
    BCCMD_BC3PSU_PDU();
    BCCMD_BC3PSU_PDU( const PDU& );
    BCCMD_BC3PSU_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_function(void) const ;
    void set_function(uint16 value) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BC3PSU_PDU ( uint16 varid ) ;
};

class BCCMD_DEEP_SLEEP_PERIOD_PDU : public BCCMD_PDU
{
public:
    BCCMD_DEEP_SLEEP_PERIOD_PDU();
    BCCMD_DEEP_SLEEP_PERIOD_PDU( const PDU& );
    BCCMD_DEEP_SLEEP_PERIOD_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_data(void) const ;
    void set_data(uint32 value) ;
protected:
    BCCMD_DEEP_SLEEP_PERIOD_PDU ( uint16 varid ) ;
};

class BCCMD_HOPPING_ON_PDU : public BCCMD_PDU
{
public:
    BCCMD_HOPPING_ON_PDU();
    BCCMD_HOPPING_ON_PDU( const PDU& );
    BCCMD_HOPPING_ON_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_HOPPING_ON_PDU ( uint16 varid ) ;
};

class BCCMD_GSM_RX_MODE_PDU : public BCCMD_PDU
{
public:
    BCCMD_GSM_RX_MODE_PDU();
    BCCMD_GSM_RX_MODE_PDU( const PDU& );
    BCCMD_GSM_RX_MODE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_GSM_RX_MODE_PDU ( uint16 varid ) ;
};

class BCCMD_PIO32_SET_PIN_FUNCTION_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO32_SET_PIN_FUNCTION_PDU();
    BCCMD_PIO32_SET_PIN_FUNCTION_PDU( const PDU& );
    BCCMD_PIO32_SET_PIN_FUNCTION_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_pin_number(void) const ;
    void set_pin_number(uint16 value) ;
    uint16 get_function(void) const ;
    void set_function(uint16 value) ;
protected:
    BCCMD_PIO32_SET_PIN_FUNCTION_PDU ( uint16 varid ) ;
};

class BCCMD_RADIOTEST_INTERFACE_VERSION_PDU : public BCCMD_PDU
{
public:
    BCCMD_RADIOTEST_INTERFACE_VERSION_PDU();
    BCCMD_RADIOTEST_INTERFACE_VERSION_PDU( const PDU& );
    BCCMD_RADIOTEST_INTERFACE_VERSION_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_RADIOTEST_INTERFACE_VERSION_PDU ( uint16 varid ) ;
};

class BCCMD_BOOTMODE_PDU : public BCCMD_PDU
{
public:
    BCCMD_BOOTMODE_PDU();
    BCCMD_BOOTMODE_PDU( const PDU& );
    BCCMD_BOOTMODE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BOOTMODE_PDU ( uint16 varid ) ;
};

class BCCMD_DEFRAG_RESET_PDU : public BCCMD_PDU
{
public:
    BCCMD_DEFRAG_RESET_PDU();
    BCCMD_DEFRAG_RESET_PDU( const PDU& );
    BCCMD_DEFRAG_RESET_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_DEFRAG_RESET_PDU ( uint16 varid ) ;
};

class BCCMD_CANCEL_PAGE_PDU : public BCCMD_PDU
{
public:
    BCCMD_CANCEL_PAGE_PDU();
    BCCMD_CANCEL_PAGE_PDU( const PDU& );
    BCCMD_CANCEL_PAGE_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_CANCEL_PAGE_PDU ( uint16 varid ) ;
};

class BCCMD_MAP_SCO_AUDIO_PDU : public BCCMD_PDU
{
public:
    BCCMD_MAP_SCO_AUDIO_PDU();
    BCCMD_MAP_SCO_AUDIO_PDU( const PDU& );
    BCCMD_MAP_SCO_AUDIO_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_source_sid(void) const ;
    void set_source_sid(uint16 value) ;
    uint16 get_sink_sid(void) const ;
    void set_sink_sid(uint16 value) ;
protected:
    BCCMD_MAP_SCO_AUDIO_PDU ( uint16 varid ) ;
};

class BCCMD_NO_VARIABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_NO_VARIABLE_PDU();
    BCCMD_NO_VARIABLE_PDU( const PDU& );
    BCCMD_NO_VARIABLE_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_NO_VARIABLE_PDU ( uint16 varid ) ;
};

class BCCMD_L2CAP_CRC_PDU : public BCCMD_PDU
{
public:
    BCCMD_L2CAP_CRC_PDU();
    BCCMD_L2CAP_CRC_PDU( const PDU& );
    BCCMD_L2CAP_CRC_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    bool get_tx_cid(void) const ;
    void set_tx_cid(bool value) ;
    uint16 get_cid(void) const ;
    void set_cid(uint16 value) ;
    bool get_enable(void) const ;
    void set_enable(bool value) ;
protected:
    BCCMD_L2CAP_CRC_PDU ( uint16 varid ) ;
};

class BCCMD_ADC_READ_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC_READ_PDU();
    BCCMD_ADC_READ_PDU( const PDU& );
    BCCMD_ADC_READ_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC_READ_PDU ( uint16 varid ) ;
};

class BCCMD_AUX_DAC_PDU : public BCCMD_PDU
{
public:
    BCCMD_AUX_DAC_PDU();
    BCCMD_AUX_DAC_PDU( const PDU& );
    BCCMD_AUX_DAC_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_AUX_DAC_PDU ( uint16 varid ) ;
};

class BCCMD_PROVOKE_DELAYED_PANIC_PDU : public BCCMD_PDU
{
public:
    BCCMD_PROVOKE_DELAYED_PANIC_PDU();
    BCCMD_PROVOKE_DELAYED_PANIC_PDU( const PDU& );
    BCCMD_PROVOKE_DELAYED_PANIC_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PROVOKE_DELAYED_PANIC_PDU ( uint16 varid ) ;
};

class BCCMD_BABEL_SPI_STOP_PDU : public BCCMD_PDU
{
public:
    BCCMD_BABEL_SPI_STOP_PDU();
    BCCMD_BABEL_SPI_STOP_PDU( const PDU& );
    BCCMD_BABEL_SPI_STOP_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_BABEL_SPI_STOP_PDU ( uint16 varid ) ;
};

class BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU : public BCCMD_PDU
{
public:
    BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU();
    BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU( const PDU& );
    BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_data(void) const ;
    void set_data(uint32 value) ;
protected:
    BCCMD_SPI_LOCK_STAY_LOCKED_KEY_PDU ( uint16 varid ) ;
};

class BCCMD_INFORM_LINK_PROFILES_PDU : public BCCMD_PDU
{
public:
    BCCMD_INFORM_LINK_PROFILES_PDU();
    BCCMD_INFORM_LINK_PROFILES_PDU( const PDU& );
    BCCMD_INFORM_LINK_PROFILES_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_handle(void) const ;
    void set_handle(uint16 value) ;
    uint16 get_profiles(void) const ;
    void set_profiles(uint16 value) ;
protected:
    BCCMD_INFORM_LINK_PROFILES_PDU ( uint16 varid ) ;
};

class BCCMD_ADC10_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC10_PDU();
    BCCMD_ADC10_PDU( const PDU& );
    BCCMD_ADC10_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC10_PDU ( uint16 varid ) ;
};

class BCCMD_ADC11_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC11_PDU();
    BCCMD_ADC11_PDU( const PDU& );
    BCCMD_ADC11_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC11_PDU ( uint16 varid ) ;
};

class BCCMD_BABEL_SPI_DELAY_PDU : public BCCMD_PDU
{
public:
    BCCMD_BABEL_SPI_DELAY_PDU();
    BCCMD_BABEL_SPI_DELAY_PDU( const PDU& );
    BCCMD_BABEL_SPI_DELAY_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BABEL_SPI_DELAY_PDU ( uint16 varid ) ;
};

class BCCMD_ADC12_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC12_PDU();
    BCCMD_ADC12_PDU( const PDU& );
    BCCMD_ADC12_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC12_PDU ( uint16 varid ) ;
};

class BCCMD_EGPS_PULSE_STOP_PDU : public BCCMD_PDU
{
public:
    BCCMD_EGPS_PULSE_STOP_PDU();
    BCCMD_EGPS_PULSE_STOP_PDU( const PDU& );
    BCCMD_EGPS_PULSE_STOP_PDU( const uint8 * buffer , uint32 len ) ;
    uint8 get_pio_stop(void) const ;
    void set_pio_stop(uint8 value) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
protected:
    BCCMD_EGPS_PULSE_STOP_PDU ( uint16 varid ) ;
};

class BCCMD_ADC13_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC13_PDU();
    BCCMD_ADC13_PDU( const PDU& );
    BCCMD_ADC13_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC13_PDU ( uint16 varid ) ;
};

class BCCMD_ADC14_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC14_PDU();
    BCCMD_ADC14_PDU( const PDU& );
    BCCMD_ADC14_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC14_PDU ( uint16 varid ) ;
};

class BCCMD_ADC15_PDU : public BCCMD_PDU
{
public:
    BCCMD_ADC15_PDU();
    BCCMD_ADC15_PDU( const PDU& );
    BCCMD_ADC15_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ADC15_PDU ( uint16 varid ) ;
};

class BCCMD_ENABLE_SCO_STREAMS_PDU : public BCCMD_PDU
{
public:
    BCCMD_ENABLE_SCO_STREAMS_PDU();
    BCCMD_ENABLE_SCO_STREAMS_PDU( const PDU& );
    BCCMD_ENABLE_SCO_STREAMS_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ENABLE_SCO_STREAMS_PDU ( uint16 varid ) ;
};

class BCCMD_COASTER_START_PDU : public BCCMD_PDU
{
public:
    BCCMD_COASTER_START_PDU();
    BCCMD_COASTER_START_PDU( const PDU& );
    BCCMD_COASTER_START_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
    uint16 get_delay(void) const ;
    void set_delay(uint16 value) ;
protected:
    BCCMD_COASTER_START_PDU ( uint16 varid ) ;
};

class BCCMD_LED0_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_LED0_ENABLE_PDU();
    BCCMD_LED0_ENABLE_PDU( const PDU& );
    BCCMD_LED0_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_LED0_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_ENABLE_AFH_PDU : public BCCMD_PDU
{
public:
    BCCMD_ENABLE_AFH_PDU();
    BCCMD_ENABLE_AFH_PDU( const PDU& );
    BCCMD_ENABLE_AFH_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_hci_handle(void) const ;
    void set_hci_handle(uint16 value) ;
    bool get_enable(void) const ;
    void set_enable(bool value) ;
protected:
    BCCMD_ENABLE_AFH_PDU ( uint16 varid ) ;
};

class BCCMD_CHIPREV_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHIPREV_PDU();
    BCCMD_CHIPREV_PDU( const PDU& );
    BCCMD_CHIPREV_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHIPREV_PDU ( uint16 varid ) ;
};

class BCCMD_PIO_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO_PDU();
    BCCMD_PIO_PDU( const PDU& );
    BCCMD_PIO_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PIO_PDU ( uint16 varid ) ;
};

class BCCMD_CHARGER_PSU_TRIM_PDU : public BCCMD_PDU
{
public:
    BCCMD_CHARGER_PSU_TRIM_PDU();
    BCCMD_CHARGER_PSU_TRIM_PDU( const PDU& );
    BCCMD_CHARGER_PSU_TRIM_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_CHARGER_PSU_TRIM_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U03_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U03_PDU();
    BCCMD_STIBBONS_U03_PDU( const PDU& );
    BCCMD_STIBBONS_U03_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U03_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U04_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U04_PDU();
    BCCMD_STIBBONS_U04_PDU( const PDU& );
    BCCMD_STIBBONS_U04_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U04_PDU ( uint16 varid ) ;
};

class BCCMD_BUILDID_PDU : public BCCMD_PDU
{
public:
    BCCMD_BUILDID_PDU();
    BCCMD_BUILDID_PDU( const PDU& );
    BCCMD_BUILDID_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_BUILDID_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U05_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U05_PDU();
    BCCMD_STIBBONS_U05_PDU( const PDU& );
    BCCMD_STIBBONS_U05_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U05_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U06_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U06_PDU();
    BCCMD_STIBBONS_U06_PDU( const PDU& );
    BCCMD_STIBBONS_U06_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U06_PDU ( uint16 varid ) ;
};

class BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU : public BCCMD_PDU
{
public:
    BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU();
    BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU( const PDU& );
    BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_REMOVE_DOWNLOADED_CAPABILITY_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U07_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U07_PDU();
    BCCMD_STIBBONS_U07_PDU( const PDU& );
    BCCMD_STIBBONS_U07_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U07_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U08_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U08_PDU();
    BCCMD_STIBBONS_U08_PDU( const PDU& );
    BCCMD_STIBBONS_U08_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U08_PDU ( uint16 varid ) ;
};

class BCCMD_STIBBONS_U09_PDU : public BCCMD_PDU
{
public:
    BCCMD_STIBBONS_U09_PDU();
    BCCMD_STIBBONS_U09_PDU( const PDU& );
    BCCMD_STIBBONS_U09_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_STIBBONS_U09_PDU ( uint16 varid ) ;
};

class BCCMD_PIO32_MAP_PINS_PDU : public BCCMD_PDU
{
public:
    BCCMD_PIO32_MAP_PINS_PDU();
    BCCMD_PIO32_MAP_PINS_PDU( const PDU& );
    BCCMD_PIO32_MAP_PINS_PDU( const uint8 * buffer , uint32 len ) ;
    uint32 get_mask(void) const ;
    void set_mask(uint32 value) ;
    uint32 get_bits(void) const ;
    void set_bits(uint32 value) ;
    uint32 get_result(void) const ;
    void set_result(uint32 value) ;
protected:
    BCCMD_PIO32_MAP_PINS_PDU ( uint16 varid ) ;
};

class BCCMD_PROVOKE_FAULT_PDU : public BCCMD_PDU
{
public:
    BCCMD_PROVOKE_FAULT_PDU();
    BCCMD_PROVOKE_FAULT_PDU( const PDU& );
    BCCMD_PROVOKE_FAULT_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PROVOKE_FAULT_PDU ( uint16 varid ) ;
};

class BCCMD_ANA_FTRIM_PDU : public BCCMD_PDU
{
public:
    BCCMD_ANA_FTRIM_PDU();
    BCCMD_ANA_FTRIM_PDU( const PDU& );
    BCCMD_ANA_FTRIM_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_ANA_FTRIM_PDU ( uint16 varid ) ;
};

class BCCMD_FIRMWARE_CHECK_PDU : public BCCMD_PDU
{
public:
    BCCMD_FIRMWARE_CHECK_PDU();
    BCCMD_FIRMWARE_CHECK_PDU( const PDU& );
    BCCMD_FIRMWARE_CHECK_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_FIRMWARE_CHECK_PDU ( uint16 varid ) ;
};

class BCCMD_INIT_BT_STACK_PDU : public BCCMD_PDU
{
public:
    BCCMD_INIT_BT_STACK_PDU();
    BCCMD_INIT_BT_STACK_PDU( const PDU& );
    BCCMD_INIT_BT_STACK_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_INIT_BT_STACK_PDU ( uint16 varid ) ;
};

class BCCMD_MAXCRYPTKEYLEN_PDU : public BCCMD_PDU
{
public:
    BCCMD_MAXCRYPTKEYLEN_PDU();
    BCCMD_MAXCRYPTKEYLEN_PDU( const PDU& );
    BCCMD_MAXCRYPTKEYLEN_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_MAXCRYPTKEYLEN_PDU ( uint16 varid ) ;
};

class BCCMD_GPS_DSP_ENABLE_PDU : public BCCMD_PDU
{
public:
    BCCMD_GPS_DSP_ENABLE_PDU();
    BCCMD_GPS_DSP_ENABLE_PDU( const PDU& );
    BCCMD_GPS_DSP_ENABLE_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_GPS_DSP_ENABLE_PDU ( uint16 varid ) ;
};

class BCCMD_KALEXTADDRDEBUG_PDU : public BCCMD_PDU
{
public:
    BCCMD_KALEXTADDRDEBUG_PDU();
    BCCMD_KALEXTADDRDEBUG_PDU( const PDU& );
    BCCMD_KALEXTADDRDEBUG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_function(void) const ;
    void set_function(uint16 value) ;
protected:
    BCCMD_KALEXTADDRDEBUG_PDU ( uint16 varid ) ;
};

class BCCMD_PANIC_ARG_PDU : public BCCMD_PDU
{
public:
    BCCMD_PANIC_ARG_PDU();
    BCCMD_PANIC_ARG_PDU( const PDU& );
    BCCMD_PANIC_ARG_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_data(void) const ;
    void set_data(uint16 value) ;
protected:
    BCCMD_PANIC_ARG_PDU ( uint16 varid ) ;
};

class BCCMD_DISABLE_TX_PDU : public BCCMD_PDU
{
public:
    BCCMD_DISABLE_TX_PDU();
    BCCMD_DISABLE_TX_PDU( const PDU& );
    BCCMD_DISABLE_TX_PDU( const uint8 * buffer , uint32 len ) ;
protected:
    BCCMD_DISABLE_TX_PDU ( uint16 varid ) ;
};

class BCCMD_FASTPIPE_RESIZE_PDU : public BCCMD_PDU
{
public:
    BCCMD_FASTPIPE_RESIZE_PDU();
    BCCMD_FASTPIPE_RESIZE_PDU( const PDU& );
    BCCMD_FASTPIPE_RESIZE_PDU( const uint8 * buffer , uint32 len ) ;
    int32 get_delta_controller(void) const ;
    void set_delta_controller(int32 value) ;
    uint32 get_limit_controller(void) const ;
    void set_limit_controller(uint32 value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
protected:
    BCCMD_FASTPIPE_RESIZE_PDU ( uint16 varid ) ;
};

#include "hcipacker/xtrabccmdpdu.h"

#endif//__GEN_BCCMDPDU_H__
