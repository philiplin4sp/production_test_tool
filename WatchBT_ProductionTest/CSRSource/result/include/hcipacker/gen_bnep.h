/////////////////////////WARNING - AUTOGENERATED FILE//////////////////////////
//
//  FILENAME:   gen_bnep.h
//
//  PURPOSE :   Headers for autogenerated bnep pdus
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __GEN_BNEP_H__
#define __GEN_BNEP_H__

#include "common/types.h"
#include "hcipacker/bluestackpdu.h"
#include "common/types_t.h"
#include "app/bluestack/bluetooth.h"
#include "app/pan/bnep_hacked.h"


class BNEP_DISCONNECT_IND_T_PDU : public BNEP_PDU
{
public:
    BNEP_DISCONNECT_IND_T_PDU() ;
    BNEP_DISCONNECT_IND_T_PDU( const PDU& );
    BNEP_DISCONNECT_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
    uint16 get_reason(void) const ;
    void set_reason(uint16 value) ;
};

class BNEP_DOWN_IND_T_PDU : public BNEP_PDU
{
public:
    BNEP_DOWN_IND_T_PDU() ;
    BNEP_DOWN_IND_T_PDU( const PDU& );
    BNEP_DOWN_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
};

class BNEP_UP_IND_T_PDU : public BNEP_PDU
{
public:
    BNEP_UP_IND_T_PDU() ;
    BNEP_UP_IND_T_PDU( const PDU& );
    BNEP_UP_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_rem_uuid(void) const ;
    void set_rem_uuid(uint16 value) ;
    uint16 get_loc_uuid(void) const ;
    void set_loc_uuid(uint16 value) ;
};

class BNEP_LISTEN_REQ_T_PDU : public BNEP_PDU
{
public:
    BNEP_LISTEN_REQ_T_PDU() ;
    BNEP_LISTEN_REQ_T_PDU( const PDU& );
    BNEP_LISTEN_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_ether_type(void) const ;
    void set_ether_type(uint16 value) ;
    EtherNetAddress get_addr(void) const ;
    void set_addr(EtherNetAddress value) ;
};

class BNEP_DISCONNECT_REQ_T_PDU : public BNEP_PDU
{
public:
    BNEP_DISCONNECT_REQ_T_PDU() ;
    BNEP_DISCONNECT_REQ_T_PDU( const PDU& );
    BNEP_DISCONNECT_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
};

class BNEP_IGNORE_REQ_T_PDU : public BNEP_PDU
{
public:
    BNEP_IGNORE_REQ_T_PDU() ;
    BNEP_IGNORE_REQ_T_PDU( const PDU& );
    BNEP_IGNORE_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_ether_type(void) const ;
    void set_ether_type(uint16 value) ;
    EtherNetAddress get_addr(void) const ;
    void set_addr(EtherNetAddress value) ;
};

class BNEP_FLOW_IND_T_PDU : public BNEP_PDU
{
public:
    BNEP_FLOW_IND_T_PDU() ;
    BNEP_FLOW_IND_T_PDU( const PDU& );
    BNEP_FLOW_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_free(void) const ;
    void set_free(uint16 value) ;
};

class BNEP_CONNECT_CFM_T_PDU : public BNEP_PDU
{
public:
    BNEP_CONNECT_CFM_T_PDU() ;
    BNEP_CONNECT_CFM_T_PDU( const PDU& );
    BNEP_CONNECT_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_status(void) const ;
    void set_status(uint16 value) ;
};

class BNEP_CONNECT_IND_T_PDU : public BNEP_PDU
{
public:
    BNEP_CONNECT_IND_T_PDU() ;
    BNEP_CONNECT_IND_T_PDU( const PDU& );
    BNEP_CONNECT_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_status(void) const ;
    void set_status(uint16 value) ;
    uint16 get_id(void) const ;
    void set_id(uint16 value) ;
    EtherNetAddress get_rem_addr(void) const ;
    void set_rem_addr(EtherNetAddress value) ;
    uint16 get_rem_uuid(void) const ;
    void set_rem_uuid(uint16 value) ;
    uint16 get_loc_uuid(void) const ;
    void set_loc_uuid(uint16 value) ;
};

class BNEP_FLOW_REQ_T_PDU : public BNEP_PDU
{
public:
    BNEP_FLOW_REQ_T_PDU() ;
    BNEP_FLOW_REQ_T_PDU( const PDU& );
    BNEP_FLOW_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
};

class BNEP_CONNECT_REQ_T_PDU : public BNEP_PDU
{
public:
    BNEP_CONNECT_REQ_T_PDU() ;
    BNEP_CONNECT_REQ_T_PDU( const PDU& );
    BNEP_CONNECT_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
    EtherNetAddress get_rem_addr(void) const ;
    void set_rem_addr(EtherNetAddress value) ;
};

class BNEP_REGISTER_REQ_T_PDU : public BNEP_PDU
{
public:
    BNEP_REGISTER_REQ_T_PDU() ;
    BNEP_REGISTER_REQ_T_PDU( const PDU& );
    BNEP_REGISTER_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
};

class BNEP_HCI_SWITCH_ROLE_RSP_T_PDU : public BNEP_PDU
{
public:
    BNEP_HCI_SWITCH_ROLE_RSP_T_PDU() ;
    BNEP_HCI_SWITCH_ROLE_RSP_T_PDU( const PDU& );
    BNEP_HCI_SWITCH_ROLE_RSP_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress value) ;
    uint8 get_status(void) const ;
    void set_status(uint8 value) ;
    uint8 get_role(void) const ;
    void set_role(uint8 value) ;
};

#include "hcipacker/xtrabnep.h"

#endif//__GEN_BNEP_H__
