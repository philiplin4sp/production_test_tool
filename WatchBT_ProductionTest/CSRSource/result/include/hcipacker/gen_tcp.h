/////////////////////////WARNING - AUTOGENERATED FILE//////////////////////////
//
//  FILENAME:   gen_tcp.h
//
//  PURPOSE :   Headers for autogenerated tcp pdus
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __GEN_TCP_H__
#define __GEN_TCP_H__

#include "common/types.h"
#include "hcipacker/bluestackpdu.h"
#include "common/types_t.h"
#include "app/bluestack/bluetooth.h"
#include "app/pan/tcp_hacked.h"


class TCP_CLOSE_REQ_T_PDU : public TCP_PDU
{
public:
    TCP_CLOSE_REQ_T_PDU() ;
    TCP_CLOSE_REQ_T_PDU( const PDU& );
    TCP_CLOSE_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_b(void) const ;
    void set_b(uint16 value) ;
};

class TCP_DATA_CFM_T_PDU : public TCP_PDU
{
public:
    TCP_DATA_CFM_T_PDU() ;
    TCP_DATA_CFM_T_PDU( const PDU& );
    TCP_DATA_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_b_out(void) const ;
    void set_b_out(uint16 value) ;
    uint16 get_len(void) const ;
    void set_len(uint16 value) ;
};

class TCP_OPEN_RSP_T_PDU : public TCP_PDU
{
public:
    TCP_OPEN_RSP_T_PDU() ;
    TCP_OPEN_RSP_T_PDU( const PDU& );
    TCP_OPEN_RSP_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_b(void) const ;
    void set_b(uint16 value) ;
    uint16 get_status(void) const ;
    void set_status(uint16 value) ;
};

class TCP_ABORT_REQ_T_PDU : public TCP_PDU
{
public:
    TCP_ABORT_REQ_T_PDU() ;
    TCP_ABORT_REQ_T_PDU( const PDU& );
    TCP_ABORT_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_b(void) const ;
    void set_b(uint16 value) ;
};

class TCP_CLOSED_RSP_T_PDU : public TCP_PDU
{
public:
    TCP_CLOSED_RSP_T_PDU() ;
    TCP_CLOSED_RSP_T_PDU( const PDU& );
    TCP_CLOSED_RSP_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_b(void) const ;
    void set_b(uint16 value) ;
};

class TCP_OPEN_CFM_T_PDU : public TCP_PDU
{
public:
    TCP_OPEN_CFM_T_PDU() ;
    TCP_OPEN_CFM_T_PDU( const PDU& );
    TCP_OPEN_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_status(void) const ;
    void set_status(uint16 value) ;
    uint16 get_b_in(void) const ;
    void set_b_in(uint16 value) ;
    uint16 get_b_out(void) const ;
    void set_b_out(uint16 value) ;
    uint16 get_out_size(void) const ;
    void set_out_size(uint16 value) ;
};

class TCP_OPEN_IND_T_PDU : public TCP_PDU
{
public:
    TCP_OPEN_IND_T_PDU() ;
    TCP_OPEN_IND_T_PDU( const PDU& );
    TCP_OPEN_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_b_out(void) const ;
    void set_b_out(uint16 value) ;
    uint16 get_status(void) const ;
    void set_status(uint16 value) ;
    IPAddress get_rem_addr(void) const ;
    void set_rem_addr(IPAddress value) ;
    uint16 get_rem_port(void) const ;
    void set_rem_port(uint16 value) ;
};

class TCP_ABORT_RSP_T_PDU : public TCP_PDU
{
public:
    TCP_ABORT_RSP_T_PDU() ;
    TCP_ABORT_RSP_T_PDU( const PDU& );
    TCP_ABORT_RSP_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_b(void) const ;
    void set_b(uint16 value) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
};

class TCP_CLOSED_IND_T_PDU : public TCP_PDU
{
public:
    TCP_CLOSED_IND_T_PDU() ;
    TCP_CLOSED_IND_T_PDU( const PDU& );
    TCP_CLOSED_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_b_out(void) const ;
    void set_b_out(uint16 value) ;
};

class TCP_DATA_RSP_T_PDU : public TCP_PDU
{
public:
    TCP_DATA_RSP_T_PDU() ;
    TCP_DATA_RSP_T_PDU( const PDU& );
    TCP_DATA_RSP_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_b(void) const ;
    void set_b(uint16 value) ;
    uint16 get_len(void) const ;
    void set_len(uint16 value) ;
};

class TCP_OPEN_REQ_T_PDU : public TCP_PDU
{
public:
    TCP_OPEN_REQ_T_PDU() ;
    TCP_OPEN_REQ_T_PDU( const PDU& );
    TCP_OPEN_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
    IPAddress get_rem_addr(void) const ;
    void set_rem_addr(IPAddress value) ;
    uint16 get_rem_port(void) const ;
    void set_rem_port(uint16 value) ;
    uint16 get_out_size(void) const ;
    void set_out_size(uint16 value) ;
    uint16 get_loc_port(void) const ;
    void set_loc_port(uint16 value) ;
    uint16 get_in_size(void) const ;
    void set_in_size(uint16 value) ;
};

class TCP_CLOSE_IND_T_PDU : public TCP_PDU
{
public:
    TCP_CLOSE_IND_T_PDU() ;
    TCP_CLOSE_IND_T_PDU( const PDU& );
    TCP_CLOSE_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_b_out(void) const ;
    void set_b_out(uint16 value) ;
};

class TCP_ABORT_IND_T_PDU : public TCP_PDU
{
public:
    TCP_ABORT_IND_T_PDU() ;
    TCP_ABORT_IND_T_PDU( const PDU& );
    TCP_ABORT_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_b_out(void) const ;
    void set_b_out(uint16 value) ;
};

#include "hcipacker/xtratcp.h"

#endif//__GEN_TCP_H__
