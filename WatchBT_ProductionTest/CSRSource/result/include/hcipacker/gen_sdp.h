/////////////////////////WARNING - AUTOGENERATED FILE//////////////////////////
//
//  FILENAME:   gen_sdp.h
//
//  PURPOSE :   Headers for autogenerated sdp pdus
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __GEN_SDP_H__
#define __GEN_SDP_H__

#include "common/types.h"
#include "hcipacker/bluestackpdu.h"
#include "common/types_t.h"
#include "app/bluestack/bluetooth.h"
#include "app/bluestack/sds_prim.h"
#include "app/bluestack/sdc_prim.h"


class SDC_CONFIG_REQ_T_PDU : public SDP_PDU
{
public:
    SDC_CONFIG_REQ_T_PDU() ;
    SDC_CONFIG_REQ_T_PDU( const PDU& );
    SDC_CONFIG_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_l2cap_mtu(void) const ;
    void set_l2cap_mtu(uint16 value) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
};

class SDC_OPEN_SEARCH_CFM_T_PDU : public SDP_PDU
{
public:
    SDC_OPEN_SEARCH_CFM_T_PDU() ;
    SDC_OPEN_SEARCH_CFM_T_PDU( const PDU& );
    SDC_OPEN_SEARCH_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_con_ctx(void) const ;
    void set_con_ctx(uint16 value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
};

class SDS_REGISTER_CFM_T_PDU : public SDP_PDU
{
public:
    SDS_REGISTER_CFM_T_PDU() ;
    SDS_REGISTER_CFM_T_PDU( const PDU& );
    SDS_REGISTER_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_reg_ctx(void) const ;
    void set_reg_ctx(uint16 value) ;
    uint32 get_svc_rec_hndl(void) const ;
    void set_svc_rec_hndl(uint32 value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
};

class SDS_CONFIG_CFM_T_PDU : public SDP_PDU
{
public:
    SDS_CONFIG_CFM_T_PDU() ;
    SDS_CONFIG_CFM_T_PDU( const PDU& );
    SDS_CONFIG_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_l2cap_mtu(void) const ;
    void set_l2cap_mtu(uint16 value) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
};

class SDS_UNREGISTER_CFM_T_PDU : public SDP_PDU
{
public:
    SDS_UNREGISTER_CFM_T_PDU() ;
    SDS_UNREGISTER_CFM_T_PDU( const PDU& );
    SDS_UNREGISTER_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_reg_ctx(void) const ;
    void set_reg_ctx(uint16 value) ;
    uint32 get_svc_rec_hndl(void) const ;
    void set_svc_rec_hndl(uint32 value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
};

class SDC_TERMINATE_PRIMITIVE_REQ_T_PDU : public SDP_PDU
{
public:
    SDC_TERMINATE_PRIMITIVE_REQ_T_PDU() ;
    SDC_TERMINATE_PRIMITIVE_REQ_T_PDU( const PDU& );
    SDC_TERMINATE_PRIMITIVE_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
};

class SDC_CONFIG_CFM_T_PDU : public SDP_PDU
{
public:
    SDC_CONFIG_CFM_T_PDU() ;
    SDC_CONFIG_CFM_T_PDU( const PDU& );
    SDC_CONFIG_CFM_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_l2cap_mtu(void) const ;
    void set_l2cap_mtu(uint16 value) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
};

class SDC_CLOSE_SEARCH_IND_T_PDU : public SDP_PDU
{
public:
    SDC_CLOSE_SEARCH_IND_T_PDU() ;
    SDC_CLOSE_SEARCH_IND_T_PDU( const PDU& );
    SDC_CLOSE_SEARCH_IND_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_con_ctx(void) const ;
    void set_con_ctx(uint16 value) ;
    uint16 get_result(void) const ;
    void set_result(uint16 value) ;
};

class SDC_OPEN_SEARCH_REQ_T_PDU : public SDP_PDU
{
public:
    SDC_OPEN_SEARCH_REQ_T_PDU() ;
    SDC_OPEN_SEARCH_REQ_T_PDU( const PDU& );
    SDC_OPEN_SEARCH_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_con_ctx(void) const ;
    void set_con_ctx(uint16 value) ;
    BluetoothDeviceAddress get_bd_addr(void) const ;
    void set_bd_addr(BluetoothDeviceAddress value) ;
};

class SDC_CLOSE_SEARCH_REQ_T_PDU : public SDP_PDU
{
public:
    SDC_CLOSE_SEARCH_REQ_T_PDU() ;
    SDC_CLOSE_SEARCH_REQ_T_PDU( const PDU& );
    SDC_CLOSE_SEARCH_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
};

class SDS_CONFIG_REQ_T_PDU : public SDP_PDU
{
public:
    SDS_CONFIG_REQ_T_PDU() ;
    SDS_CONFIG_REQ_T_PDU( const PDU& );
    SDS_CONFIG_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint16 get_l2cap_mtu(void) const ;
    void set_l2cap_mtu(uint16 value) ;
    uint16 get_flags(void) const ;
    void set_flags(uint16 value) ;
};

class SDS_UNREGISTER_REQ_T_PDU : public SDP_PDU
{
public:
    SDS_UNREGISTER_REQ_T_PDU() ;
    SDS_UNREGISTER_REQ_T_PDU( const PDU& );
    SDS_UNREGISTER_REQ_T_PDU( const uint8 * buffer , uint32 len ) ;
    uint16 get_phandle(void) const ;
    void set_phandle(uint16 value) ;
    uint32 get_svc_rec_hndl(void) const ;
    void set_svc_rec_hndl(uint32 value) ;
};

#include "hcipacker/xtrasdp.h"

#endif//__GEN_SDP_H__
