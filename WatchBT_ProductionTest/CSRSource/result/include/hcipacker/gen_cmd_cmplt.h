/////////////////////////WARNING - AUTOGENERATED FILE//////////////////////////
//
//  FILENAME:   gen_cmd_cmplt.h
//
//  PURPOSE :   Headers for autogenerated hci command complete pdus
//
//  Autogenerated from HCIPacker/autogen/templates/cmd_cmplt_hdr.tpl by
//  devTools/bin/pdu/gencode.pl
//
///////////////////////////////////////////////////////////////////////////////

#ifndef __GEN_CMD_CMPLT_H__
#define __GEN_CMD_CMPLT_H__

class HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_RET_T_PDU ();
        HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_RET_T_PDU ( const PDU& );
        HCI_ULP_LONG_TERM_KEY_REQUESTED_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_connection_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_SCO_FLOW_CON_ENABLE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_SCO_FLOW_CON_ENABLE_RET_T_PDU ();
        HCI_READ_SCO_FLOW_CON_ENABLE_RET_T_PDU ( const PDU& );
        HCI_READ_SCO_FLOW_CON_ENABLE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_sco_flow_control_enable () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_INQUIRY_MODE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_INQUIRY_MODE_RET_T_PDU ();
        HCI_READ_INQUIRY_MODE_RET_T_PDU ( const PDU& );
        HCI_READ_INQUIRY_MODE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_GET_LINK_QUALITY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_GET_LINK_QUALITY_RET_T_PDU ();
        HCI_GET_LINK_QUALITY_RET_T_PDU ( const PDU& );
        HCI_GET_LINK_QUALITY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint8 get_link_quality () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_HOLD_MODE_ACTIVITY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_HOLD_MODE_ACTIVITY_RET_T_PDU ();
        HCI_READ_HOLD_MODE_ACTIVITY_RET_T_PDU ( const PDU& );
        HCI_READ_HOLD_MODE_ACTIVITY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_activity () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_RET_T_PDU ();
        HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_RET_T_PDU ( const PDU& );
        HCI_ULP_READ_ADVERTISING_CHANNEL_TX_POWER_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        int8 get_tx_power () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_ALIAS_AUTH_ENABLE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_ALIAS_AUTH_ENABLE_RET_T_PDU ();
        HCI_READ_ALIAS_AUTH_ENABLE_RET_T_PDU ( const PDU& );
        HCI_READ_ALIAS_AUTH_ENABLE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_enabled () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_INQUIRYSCAN_ACTIVITY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_INQUIRYSCAN_ACTIVITY_RET_T_PDU ();
        HCI_READ_INQUIRYSCAN_ACTIVITY_RET_T_PDU ( const PDU& );
        HCI_READ_INQUIRYSCAN_ACTIVITY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_inqscan_interval () const;
        uint16 get_inqscan_window () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_RESET_FAILED_CONTACT_COUNT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_RESET_FAILED_CONTACT_COUNT_RET_T_PDU ();
        HCI_RESET_FAILED_CONTACT_COUNT_RET_T_PDU ( const PDU& );
        HCI_RESET_FAILED_CONTACT_COUNT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_USER_PASSKEY_REQUEST_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_USER_PASSKEY_REQUEST_REPLY_RET_T_PDU ();
        HCI_USER_PASSKEY_REQUEST_REPLY_RET_T_PDU ( const PDU& );
        HCI_USER_PASSKEY_REQUEST_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_LINK_KEY_REQ_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_LINK_KEY_REQ_REPLY_RET_T_PDU ();
        HCI_LINK_KEY_REQ_REPLY_RET_T_PDU ( const PDU& );
        HCI_LINK_KEY_REQ_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_CLOCK_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_CLOCK_RET_T_PDU ();
        HCI_READ_CLOCK_RET_T_PDU ( const PDU& );
        HCI_READ_CLOCK_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint32 get_clock () const;
        uint16 get_accuracy () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LMP_HANDLE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LMP_HANDLE_RET_T_PDU ();
        HCI_READ_LMP_HANDLE_RET_T_PDU ( const PDU& );
        HCI_READ_LMP_HANDLE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint8 get_lmp_handle () const;
        uint32 get_reserved () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_PAGE_SCAN_TYPE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_PAGE_SCAN_TYPE_RET_T_PDU ();
        HCI_READ_PAGE_SCAN_TYPE_RET_T_PDU ( const PDU& );
        HCI_READ_PAGE_SCAN_TYPE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_LINK_KEY_REQ_NEG_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_LINK_KEY_REQ_NEG_REPLY_RET_T_PDU ();
        HCI_LINK_KEY_REQ_NEG_REPLY_RET_T_PDU ( const PDU& );
        HCI_LINK_KEY_REQ_NEG_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_PIN_CODE_REQ_NEG_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_PIN_CODE_REQ_NEG_REPLY_RET_T_PDU ();
        HCI_PIN_CODE_REQ_NEG_REPLY_RET_T_PDU ( const PDU& );
        HCI_PIN_CODE_REQ_NEG_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_PAGESCAN_PERIOD_MODE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_PAGESCAN_PERIOD_MODE_RET_T_PDU ();
        HCI_READ_PAGESCAN_PERIOD_MODE_RET_T_PDU ( const PDU& );
        HCI_READ_PAGESCAN_PERIOD_MODE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ROLE_DISCOVERY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ROLE_DISCOVERY_RET_T_PDU ();
        HCI_ROLE_DISCOVERY_RET_T_PDU ( const PDU& );
        HCI_ROLE_DISCOVERY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint8 get_current_role () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_CONN_ACCEPT_TIMEOUT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_CONN_ACCEPT_TIMEOUT_RET_T_PDU ();
        HCI_READ_CONN_ACCEPT_TIMEOUT_RET_T_PDU ( const PDU& );
        HCI_READ_CONN_ACCEPT_TIMEOUT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_conn_accept_timeout () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_REMOTE_NAME_REQ_CANCEL_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_REMOTE_NAME_REQ_CANCEL_RET_T_PDU ();
        HCI_REMOTE_NAME_REQ_CANCEL_RET_T_PDU ( const PDU& );
        HCI_REMOTE_NAME_REQ_CANCEL_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_ENCRYPTION_KEY_SIZE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_ENCRYPTION_KEY_SIZE_RET_T_PDU ();
        HCI_READ_ENCRYPTION_KEY_SIZE_RET_T_PDU ( const PDU& );
        HCI_READ_ENCRYPTION_KEY_SIZE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint8 get_key_size () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_DELETE_STORED_LINK_KEY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_DELETE_STORED_LINK_KEY_RET_T_PDU ();
        HCI_DELETE_STORED_LINK_KEY_RET_T_PDU ( const PDU& );
        HCI_DELETE_STORED_LINK_KEY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_num_keys_deleted () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_TEST_END_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_TEST_END_RET_T_PDU ();
        HCI_ULP_TEST_END_RET_T_PDU ( const PDU& );
        HCI_ULP_TEST_END_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_number_of_packets () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_READ_WHITE_LIST_SIZE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_READ_WHITE_LIST_SIZE_RET_T_PDU ();
        HCI_ULP_READ_WHITE_LIST_SIZE_RET_T_PDU ( const PDU& );
        HCI_ULP_READ_WHITE_LIST_SIZE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_white_list_size () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_ENH_TX_POWER_LEVEL_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_ENH_TX_POWER_LEVEL_RET_T_PDU ();
        HCI_READ_ENH_TX_POWER_LEVEL_RET_T_PDU ( const PDU& );
        HCI_READ_ENH_TX_POWER_LEVEL_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        int8 get_pwr_level_GFSK () const;
        int8 get_pwr_level_DQPSK () const;
        int8 get_pwr_level_8DPSK () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LOOPBACK_MODE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LOOPBACK_MODE_RET_T_PDU ();
        HCI_READ_LOOPBACK_MODE_RET_T_PDU ( const PDU& );
        HCI_READ_LOOPBACK_MODE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_BUFFER_SIZE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_BUFFER_SIZE_RET_T_PDU ();
        HCI_READ_BUFFER_SIZE_RET_T_PDU ( const PDU& );
        HCI_READ_BUFFER_SIZE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_acl_data_pkt_length () const;
        uint8 get_sco_data_pkt_length () const;
        uint16 get_total_acl_data_pkts () const;
        uint16 get_total_sco_data_pkts () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LE_HOST_SUPPORT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LE_HOST_SUPPORT_RET_T_PDU ();
        HCI_READ_LE_HOST_SUPPORT_RET_T_PDU ( const PDU& );
        HCI_READ_LE_HOST_SUPPORT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_le_supported_host () const;
        uint8 get_simultaneous_le_host () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_WRITE_AUTO_FLUSH_TIMEOUT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_WRITE_AUTO_FLUSH_TIMEOUT_RET_T_PDU ();
        HCI_WRITE_AUTO_FLUSH_TIMEOUT_RET_T_PDU ( const PDU& );
        HCI_WRITE_AUTO_FLUSH_TIMEOUT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_IO_CAPABILITY_RESPONSE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_IO_CAPABILITY_RESPONSE_RET_T_PDU ();
        HCI_IO_CAPABILITY_RESPONSE_RET_T_PDU ( const PDU& );
        HCI_IO_CAPABILITY_RESPONSE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_RET_T_PDU ();
        HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_RET_T_PDU ( const PDU& );
        HCI_PRIVATE_PAIRING_REQ_NEG_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ALIAS_ADDRESS_REQ_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ALIAS_ADDRESS_REQ_REPLY_RET_T_PDU ();
        HCI_ALIAS_ADDRESS_REQ_REPLY_RET_T_PDU ( const PDU& );
        HCI_ALIAS_ADDRESS_REQ_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_AUTO_FLUSH_TIMEOUT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_AUTO_FLUSH_TIMEOUT_RET_T_PDU ();
        HCI_READ_AUTO_FLUSH_TIMEOUT_RET_T_PDU ( const PDU& );
        HCI_READ_AUTO_FLUSH_TIMEOUT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint16 get_timeout () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_RET_T_PDU ();
        HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_RET_T_PDU ( const PDU& );
        HCI_USER_CONFIRMATION_REQUEST_NEG_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_SIMPLE_PAIRING_MODE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_SIMPLE_PAIRING_MODE_RET_T_PDU ();
        HCI_READ_SIMPLE_PAIRING_MODE_RET_T_PDU ( const PDU& );
        HCI_READ_SIMPLE_PAIRING_MODE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_simple_pairing_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_BD_ADDR_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_BD_ADDR_RET_T_PDU ();
        HCI_READ_BD_ADDR_RET_T_PDU ( const PDU& );
        HCI_READ_BD_ADDR_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LOCAL_VER_INFO_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LOCAL_VER_INFO_RET_T_PDU ();
        HCI_READ_LOCAL_VER_INFO_RET_T_PDU ( const PDU& );
        HCI_READ_LOCAL_VER_INFO_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_hci_version () const;
        uint16 get_hci_revision () const;
        uint8 get_lmp_version () const;
        uint16 get_manuf_name () const;
        uint16 get_lmp_subversion () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_NUM_BCAST_RETXS_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_NUM_BCAST_RETXS_RET_T_PDU ();
        HCI_READ_NUM_BCAST_RETXS_RET_T_PDU ( const PDU& );
        HCI_READ_NUM_BCAST_RETXS_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_num () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_RET_T_PDU ();
        HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_RET_T_PDU ( const PDU& );
        HCI_READ_INQUIRY_RESPONSE_TX_POWER_LEVEL_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        int8 get_tx_power () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_NUM_SUPPORTED_IAC_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_NUM_SUPPORTED_IAC_RET_T_PDU ();
        HCI_READ_NUM_SUPPORTED_IAC_RET_T_PDU ( const PDU& );
        HCI_READ_NUM_SUPPORTED_IAC_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_num () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_COUNTRY_CODE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_COUNTRY_CODE_RET_T_PDU ();
        HCI_READ_COUNTRY_CODE_RET_T_PDU ( const PDU& );
        HCI_READ_COUNTRY_CODE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_country_code () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_FAILED_CONTACT_COUNT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_FAILED_CONTACT_COUNT_RET_T_PDU ();
        HCI_READ_FAILED_CONTACT_COUNT_RET_T_PDU ( const PDU& );
        HCI_READ_FAILED_CONTACT_COUNT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint16 get_failed_contact_count () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_PIN_TYPE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_PIN_TYPE_RET_T_PDU ();
        HCI_READ_PIN_TYPE_RET_T_PDU ( const PDU& );
        HCI_READ_PIN_TYPE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_pin_type () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_SNIFF_SUB_RATE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_SNIFF_SUB_RATE_RET_T_PDU ();
        HCI_SNIFF_SUB_RATE_RET_T_PDU ( const PDU& );
        HCI_SNIFF_SUB_RATE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_AUTH_ENABLE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_AUTH_ENABLE_RET_T_PDU ();
        HCI_READ_AUTH_ENABLE_RET_T_PDU ( const PDU& );
        HCI_READ_AUTH_ENABLE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_auth_enable () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LINK_POLICY_SETTINGS_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LINK_POLICY_SETTINGS_RET_T_PDU ();
        HCI_READ_LINK_POLICY_SETTINGS_RET_T_PDU ( const PDU& );
        HCI_READ_LINK_POLICY_SETTINGS_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint16 get_link_policy_settings () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_INQUIRY_SCAN_TYPE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_INQUIRY_SCAN_TYPE_RET_T_PDU ();
        HCI_READ_INQUIRY_SCAN_TYPE_RET_T_PDU ( const PDU& );
        HCI_READ_INQUIRY_SCAN_TYPE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_SEND_KEYPRESS_NOTIFICATION_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_SEND_KEYPRESS_NOTIFICATION_RET_T_PDU ();
        HCI_SEND_KEYPRESS_NOTIFICATION_RET_T_PDU ( const PDU& );
        HCI_SEND_KEYPRESS_NOTIFICATION_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_RET_T_PDU ();
        HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_RET_T_PDU ( const PDU& );
        HCI_REMOTE_OOB_DATA_REQUEST_NEG_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_PAGE_TIMEOUT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_PAGE_TIMEOUT_RET_T_PDU ();
        HCI_READ_PAGE_TIMEOUT_RET_T_PDU ( const PDU& );
        HCI_READ_PAGE_TIMEOUT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_page_timeout () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_RET_T_PDU ();
        HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_RET_T_PDU ( const PDU& );
        HCI_IO_CAPABILITY_REQUEST_NEG_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_READ_BUFFER_SIZE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_READ_BUFFER_SIZE_RET_T_PDU ();
        HCI_ULP_READ_BUFFER_SIZE_RET_T_PDU ( const PDU& );
        HCI_ULP_READ_BUFFER_SIZE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_data_packet_length () const;
        uint8 get_num_data_packets () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_VOICE_SETTING_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_VOICE_SETTING_RET_T_PDU ();
        HCI_READ_VOICE_SETTING_RET_T_PDU ( const PDU& );
        HCI_READ_VOICE_SETTING_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_voice_setting () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_RET_T_PDU ();
        HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_RET_T_PDU ( const PDU& );
        HCI_ULP_LONG_TERM_KEY_REQUESTED_NEGATIVE_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_connection_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_SCAN_ENABLE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_SCAN_ENABLE_RET_T_PDU ();
        HCI_READ_SCAN_ENABLE_RET_T_PDU ( const PDU& );
        HCI_READ_SCAN_ENABLE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_scan_enable () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_TX_POWER_LEVEL_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_TX_POWER_LEVEL_RET_T_PDU ();
        HCI_READ_TX_POWER_LEVEL_RET_T_PDU ( const PDU& );
        HCI_READ_TX_POWER_LEVEL_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        int8 get_pwr_level () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_RET_T_PDU ();
        HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_RET_T_PDU ( const PDU& );
        HCI_ALIAS_ADDRESS_REQ_NEG_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_LINK_SUPERV_TIMEOUT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_LINK_SUPERV_TIMEOUT_RET_T_PDU ();
        HCI_READ_LINK_SUPERV_TIMEOUT_RET_T_PDU ( const PDU& );
        HCI_READ_LINK_SUPERV_TIMEOUT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        uint16 get_timeout () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_PRIVATE_PAIRING_REQ_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_PRIVATE_PAIRING_REQ_REPLY_RET_T_PDU ();
        HCI_PRIVATE_PAIRING_REQ_REPLY_RET_T_PDU ( const PDU& );
        HCI_PRIVATE_PAIRING_REQ_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_PIN_CODE_REQ_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_PIN_CODE_REQ_REPLY_RET_T_PDU ();
        HCI_PIN_CODE_REQ_REPLY_RET_T_PDU ( const PDU& );
        HCI_PIN_CODE_REQ_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_USER_CONFIRMATION_REQUEST_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_USER_CONFIRMATION_REQUEST_REPLY_RET_T_PDU ();
        HCI_USER_CONFIRMATION_REQUEST_REPLY_RET_T_PDU ( const PDU& );
        HCI_USER_CONFIRMATION_REQUEST_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_AFH_CHANNEL_CLASS_M_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_AFH_CHANNEL_CLASS_M_RET_T_PDU ();
        HCI_READ_AFH_CHANNEL_CLASS_M_RET_T_PDU ( const PDU& );
        HCI_READ_AFH_CHANNEL_CLASS_M_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_class_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_GENERATED_ALIAS_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_GENERATED_ALIAS_RET_T_PDU ();
        HCI_GENERATED_ALIAS_RET_T_PDU ( const PDU& );
        HCI_GENERATED_ALIAS_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_PAGESCAN_ACTIVITY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_PAGESCAN_ACTIVITY_RET_T_PDU ();
        HCI_READ_PAGESCAN_ACTIVITY_RET_T_PDU ( const PDU& );
        HCI_READ_PAGESCAN_ACTIVITY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_pagescan_interval () const;
        uint16 get_pagescan_window () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_RET_T_PDU ();
        HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_RET_T_PDU ( const PDU& );
        HCI_READ_DEFAULT_LINK_POLICY_SETTINGS_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_default_lps () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_PAGESCAN_MODE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_PAGESCAN_MODE_RET_T_PDU ();
        HCI_READ_PAGESCAN_MODE_RET_T_PDU ( const PDU& );
        HCI_READ_PAGESCAN_MODE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_USER_PASSKEY_REQUEST_NEG_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_USER_PASSKEY_REQUEST_NEG_REPLY_RET_T_PDU ();
        HCI_USER_PASSKEY_REQUEST_NEG_REPLY_RET_T_PDU ( const PDU& );
        HCI_USER_PASSKEY_REQUEST_NEG_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_CREATE_CONNECTION_CANCEL_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_CREATE_CONNECTION_CANCEL_RET_T_PDU ();
        HCI_CREATE_CONNECTION_CANCEL_RET_T_PDU ( const PDU& );
        HCI_CREATE_CONNECTION_CANCEL_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_ENC_MODE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_ENC_MODE_RET_T_PDU ();
        HCI_READ_ENC_MODE_RET_T_PDU ( const PDU& );
        HCI_READ_ENC_MODE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_REMOTE_OOB_DATA_REQUEST_REPLY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_REMOTE_OOB_DATA_REQUEST_REPLY_RET_T_PDU ();
        HCI_REMOTE_OOB_DATA_REQUEST_REPLY_RET_T_PDU ( const PDU& );
        HCI_REMOTE_OOB_DATA_REQUEST_REPLY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        BluetoothDeviceAddress get_bd_addr () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_WRITE_LINK_SUPERV_TIMEOUT_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_WRITE_LINK_SUPERV_TIMEOUT_RET_T_PDU ();
        HCI_WRITE_LINK_SUPERV_TIMEOUT_RET_T_PDU ( const PDU& );
        HCI_WRITE_LINK_SUPERV_TIMEOUT_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_ANON_ADDR_CHANGE_PARAMS_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_ANON_ADDR_CHANGE_PARAMS_RET_T_PDU ();
        HCI_READ_ANON_ADDR_CHANGE_PARAMS_RET_T_PDU ( const PDU& );
        HCI_READ_ANON_ADDR_CHANGE_PARAMS_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint32 get_addr_update_time () const;
        uint16 get_addr_inquiry_period () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_FLUSH_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_FLUSH_RET_T_PDU ();
        HCI_FLUSH_RET_T_PDU ( const PDU& );
        HCI_FLUSH_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_WRITE_STORED_LINK_KEY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_WRITE_STORED_LINK_KEY_RET_T_PDU ();
        HCI_WRITE_STORED_LINK_KEY_RET_T_PDU ( const PDU& );
        HCI_WRITE_STORED_LINK_KEY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_num_keys_written () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_RSSI_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_RSSI_RET_T_PDU ();
        HCI_READ_RSSI_RET_T_PDU ( const PDU& );
        HCI_READ_RSSI_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        int8 get_rssi () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_STORED_LINK_KEY_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_STORED_LINK_KEY_RET_T_PDU ();
        HCI_READ_STORED_LINK_KEY_RET_T_PDU ( const PDU& );
        HCI_READ_STORED_LINK_KEY_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_max_num_keys () const;
        uint16 get_num_keys_read () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_WRITE_LINK_POLICY_SETTINGS_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_WRITE_LINK_POLICY_SETTINGS_RET_T_PDU ();
        HCI_WRITE_LINK_POLICY_SETTINGS_RET_T_PDU ( const PDU& );
        HCI_WRITE_LINK_POLICY_SETTINGS_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint16 get_handle () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_ANON_MODE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_ANON_MODE_RET_T_PDU ();
        HCI_READ_ANON_MODE_RET_T_PDU ( const PDU& );
        HCI_READ_ANON_MODE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint8 get_mode () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

class HCI_READ_CLASS_OF_DEVICE_RET_T_PDU : public HCICommandCompletePDU
{
    public:
        HCI_READ_CLASS_OF_DEVICE_RET_T_PDU ();
        HCI_READ_CLASS_OF_DEVICE_RET_T_PDU ( const PDU& );
        HCI_READ_CLASS_OF_DEVICE_RET_T_PDU ( const uint8 * data , uint32 len );
        virtual bool decompose(uint32 * toFill, BadPDUReason& why_failed, uint32 &length) const;
        uint24 get_dev_class () const;
        virtual bool size_expected() const;// sanity check the number of bytes
};

#endif

